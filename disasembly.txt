
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	00 80 00 20 ad 02 00 00 ed 02 00 00 ed 02 00 00     ... ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	00 00 00 00 ed 02 00 00 ed 02 00 00 fd 02 00 00     ................
	...
      c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	...
      ec:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      fc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     10c:	ed 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
     150:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	...
     1b0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
     258:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     268:	ed 02 00 00                                         ....

0000026c <__do_global_dtors_aux>:
     26c:	b510      	push	{r4, lr}
     26e:	4c05      	ldr	r4, [pc, #20]	; (284 <__do_global_dtors_aux+0x18>)
     270:	7823      	ldrb	r3, [r4, #0]
     272:	b933      	cbnz	r3, 282 <__do_global_dtors_aux+0x16>
     274:	4b04      	ldr	r3, [pc, #16]	; (288 <__do_global_dtors_aux+0x1c>)
     276:	b113      	cbz	r3, 27e <__do_global_dtors_aux+0x12>
     278:	4804      	ldr	r0, [pc, #16]	; (28c <__do_global_dtors_aux+0x20>)
     27a:	f3af 8000 	nop.w
     27e:	2301      	movs	r3, #1
     280:	7023      	strb	r3, [r4, #0]
     282:	bd10      	pop	{r4, pc}
     284:	20000084 	.word	0x20000084
     288:	00000000 	.word	0x00000000
     28c:	00003280 	.word	0x00003280

00000290 <frame_dummy>:
     290:	b508      	push	{r3, lr}
     292:	4b03      	ldr	r3, [pc, #12]	; (2a0 <frame_dummy+0x10>)
     294:	b11b      	cbz	r3, 29e <frame_dummy+0xe>
     296:	4903      	ldr	r1, [pc, #12]	; (2a4 <frame_dummy+0x14>)
     298:	4803      	ldr	r0, [pc, #12]	; (2a8 <frame_dummy+0x18>)
     29a:	f3af 8000 	nop.w
     29e:	bd08      	pop	{r3, pc}
     2a0:	00000000 	.word	0x00000000
     2a4:	20000088 	.word	0x20000088
     2a8:	00003280 	.word	0x00003280

000002ac <Reset_Handler>:
 *    __data_start__: VMA of start of the section to copy to
 *    __data_end__: VMA of end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r1, =__etext
     2ac:	490a      	ldr	r1, [pc, #40]	; (2d8 <Reset_Handler+0x2c>)
	ldr	r2, =__data_start__
     2ae:	4a0b      	ldr	r2, [pc, #44]	; (2dc <Reset_Handler+0x30>)
	ldr	r3, =__data_end__
     2b0:	4b0b      	ldr	r3, [pc, #44]	; (2e0 <Reset_Handler+0x34>)

.L_loop1:
	cmp	r2, r3
     2b2:	429a      	cmp	r2, r3
	ittt	lt
     2b4:	bfbe      	ittt	lt
	ldrlt	r0, [r1], #4
     2b6:	f851 0b04 	ldrlt.w	r0, [r1], #4
	strlt	r0, [r2], #4
     2ba:	f842 0b04 	strlt.w	r0, [r2], #4
	blt	.L_loop1
     2be:	e7f8      	blt.n	2b2 <Reset_Handler+0x6>
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
	ldr	r1, =__bss_start__
     2c0:	4908      	ldr	r1, [pc, #32]	; (2e4 <Reset_Handler+0x38>)
	ldr	r2, =__bss_end__
     2c2:	4a09      	ldr	r2, [pc, #36]	; (2e8 <Reset_Handler+0x3c>)

	movs	r0, 0
     2c4:	2000      	movs	r0, #0
.L_loop3:
	cmp	r1, r2
     2c6:	4291      	cmp	r1, r2
	itt	lt
     2c8:	bfbc      	itt	lt
	strlt	r0, [r1], #4
     2ca:	f841 0b04 	strlt.w	r0, [r1], #4
	blt	.L_loop3
     2ce:	e7fa      	blt.n	2c6 <Reset_Handler+0x1a>
#endif /* __STARTUP_CLEAR_BSS_MULTIPLE || __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
	bl	SystemInit
     2d0:	f000 f87a 	bl	3c8 <SystemInit>
#endif

#ifndef __START
#define __START _start
#endif
	bl	__START
     2d4:	f000 f8c4 	bl	460 <main>
	ldr	r1, =__etext
     2d8:	00003510 	.word	0x00003510
	ldr	r2, =__data_start__
     2dc:	20000000 	.word	0x20000000
	ldr	r3, =__data_end__
     2e0:	20000084 	.word	0x20000084
	ldr	r1, =__bss_start__
     2e4:	20000084 	.word	0x20000084
	ldr	r2, =__bss_end__
     2e8:	20000214 	.word	0x20000214

000002ec <ADC_0_Sequence_0_Handler>:
	.align	1
	.thumb_func
	.weak	Default_Handler
	.type	Default_Handler, %function
Default_Handler:
	b	.
     2ec:	e7fe      	b.n	2ec <ADC_0_Sequence_0_Handler>
     2ee:	bf00      	nop

000002f0 <__cxa_pure_virtual>:
/**
 * These functions further help eliminate unwanted exceptions
 */

extern "C" void __cxa_pure_virtual() 
{ 
     2f0:	b480      	push	{r7}
     2f2:	af00      	add	r7, sp, #0
    while(1); 
     2f4:	e7fe      	b.n	2f4 <__cxa_pure_virtual+0x4>

000002f6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
}

void __gnu_cxx::__verbose_terminate_handler()
{
     2f6:	b480      	push	{r7}
     2f8:	af00      	add	r7, sp, #0
    while(1);
     2fa:	e7fe      	b.n	2fa <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x4>

000002fc <GPIO_Port_F_Handler>:
}

extern "C" void GPIO_Port_F_Handler(void)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	af00      	add	r7, sp, #0
    
    if(swtich1.read() == 1)
     300:	4824      	ldr	r0, [pc, #144]	; (394 <GPIO_Port_F_Handler+0x98>)
     302:	f000 ffe2 	bl	12ca <_ZN4Gpio4readEv>
     306:	4603      	mov	r3, r0
     308:	2b01      	cmp	r3, #1
     30a:	bf0c      	ite	eq
     30c:	2301      	moveq	r3, #1
     30e:	2300      	movne	r3, #0
     310:	b2db      	uxtb	r3, r3
     312:	2b00      	cmp	r3, #0
     314:	d006      	beq.n	324 <GPIO_Port_F_Handler+0x28>
    {
        redLed.write(clear);
     316:	2100      	movs	r1, #0
     318:	481f      	ldr	r0, [pc, #124]	; (398 <GPIO_Port_F_Handler+0x9c>)
     31a:	f000 ffb9 	bl	1290 <_ZN4Gpio5writeE10setORClear>
        swtich1.interruptClear();
     31e:	481d      	ldr	r0, [pc, #116]	; (394 <GPIO_Port_F_Handler+0x98>)
     320:	f000 ffa1 	bl	1266 <_ZN4Gpio14interruptClearEv>
    }

    if(swtich1.read() == 0)
     324:	481b      	ldr	r0, [pc, #108]	; (394 <GPIO_Port_F_Handler+0x98>)
     326:	f000 ffd0 	bl	12ca <_ZN4Gpio4readEv>
     32a:	4603      	mov	r3, r0
     32c:	2b00      	cmp	r3, #0
     32e:	bf0c      	ite	eq
     330:	2301      	moveq	r3, #1
     332:	2300      	movne	r3, #0
     334:	b2db      	uxtb	r3, r3
     336:	2b00      	cmp	r3, #0
     338:	d006      	beq.n	348 <GPIO_Port_F_Handler+0x4c>
    {
        redLed.write(set);
     33a:	2101      	movs	r1, #1
     33c:	4816      	ldr	r0, [pc, #88]	; (398 <GPIO_Port_F_Handler+0x9c>)
     33e:	f000 ffa7 	bl	1290 <_ZN4Gpio5writeE10setORClear>
        swtich1.interruptClear();
     342:	4814      	ldr	r0, [pc, #80]	; (394 <GPIO_Port_F_Handler+0x98>)
     344:	f000 ff8f 	bl	1266 <_ZN4Gpio14interruptClearEv>
    }

    if(swtich2.read() == 1)
     348:	4814      	ldr	r0, [pc, #80]	; (39c <GPIO_Port_F_Handler+0xa0>)
     34a:	f000 ffbe 	bl	12ca <_ZN4Gpio4readEv>
     34e:	4603      	mov	r3, r0
     350:	2b01      	cmp	r3, #1
     352:	bf0c      	ite	eq
     354:	2301      	moveq	r3, #1
     356:	2300      	movne	r3, #0
     358:	b2db      	uxtb	r3, r3
     35a:	2b00      	cmp	r3, #0
     35c:	d006      	beq.n	36c <GPIO_Port_F_Handler+0x70>
    {
        blueLed.write(clear);
     35e:	2100      	movs	r1, #0
     360:	480f      	ldr	r0, [pc, #60]	; (3a0 <GPIO_Port_F_Handler+0xa4>)
     362:	f000 ff95 	bl	1290 <_ZN4Gpio5writeE10setORClear>
        swtich2.interruptClear();
     366:	480d      	ldr	r0, [pc, #52]	; (39c <GPIO_Port_F_Handler+0xa0>)
     368:	f000 ff7d 	bl	1266 <_ZN4Gpio14interruptClearEv>
    }

    if(swtich2.read() == 0)
     36c:	480b      	ldr	r0, [pc, #44]	; (39c <GPIO_Port_F_Handler+0xa0>)
     36e:	f000 ffac 	bl	12ca <_ZN4Gpio4readEv>
     372:	4603      	mov	r3, r0
     374:	2b00      	cmp	r3, #0
     376:	bf0c      	ite	eq
     378:	2301      	moveq	r3, #1
     37a:	2300      	movne	r3, #0
     37c:	b2db      	uxtb	r3, r3
     37e:	2b00      	cmp	r3, #0
     380:	d006      	beq.n	390 <GPIO_Port_F_Handler+0x94>
    {
        blueLed.write(set);
     382:	2101      	movs	r1, #1
     384:	4806      	ldr	r0, [pc, #24]	; (3a0 <GPIO_Port_F_Handler+0xa4>)
     386:	f000 ff83 	bl	1290 <_ZN4Gpio5writeE10setORClear>
        swtich2.interruptClear();
     38a:	4804      	ldr	r0, [pc, #16]	; (39c <GPIO_Port_F_Handler+0xa0>)
     38c:	f000 ff6b 	bl	1266 <_ZN4Gpio14interruptClearEv>
    }

}
     390:	bf00      	nop
     392:	bd80      	pop	{r7, pc}
     394:	200000e8 	.word	0x200000e8
     398:	200000d0 	.word	0x200000d0
     39c:	20000100 	.word	0x20000100
     3a0:	200000b8 	.word	0x200000b8

000003a4 <_Z8pollTestv>:
//         myTimer.clearInterrupt();
//     } 
// }

void pollTest(void)
{
     3a4:	b580      	push	{r7, lr}
     3a6:	af00      	add	r7, sp, #0
    readme = testAdc.getAdcSample();
     3a8:	4805      	ldr	r0, [pc, #20]	; (3c0 <_Z8pollTestv+0x1c>)
     3aa:	f000 fbb0 	bl	b0e <_ZN3Adc12getAdcSampleEv>
     3ae:	4603      	mov	r3, r0
     3b0:	461a      	mov	r2, r3
     3b2:	4b04      	ldr	r3, [pc, #16]	; (3c4 <_Z8pollTestv+0x20>)
     3b4:	601a      	str	r2, [r3, #0]
    testAdc.clearInterrupt();
     3b6:	4802      	ldr	r0, [pc, #8]	; (3c0 <_Z8pollTestv+0x1c>)
     3b8:	f000 fbbf 	bl	b3a <_ZN3Adc14clearInterruptEv>
}
     3bc:	bf00      	nop
     3be:	bd80      	pop	{r7, pc}
     3c0:	20000138 	.word	0x20000138
     3c4:	20000004 	.word	0x20000004

000003c8 <SystemInit>:

extern "C" void SystemInit(void)
{
     3c8:	b580      	push	{r7, lr}
     3ca:	b086      	sub	sp, #24
     3cc:	af06      	add	r7, sp, #24
    SystemControl::initializeGPIOHB();
     3ce:	f000 fd0d 	bl	dec <_ZN13SystemControl16initializeGPIOHBEv>
    SystemControl::initializeClock(_80MHz);
     3d2:	2005      	movs	r0, #5
     3d4:	f000 fd42 	bl	e5c <_ZN13SystemControl15initializeClockE7SYSDIV2>

    greenLed.initialize((uint32_t)PF3::M1PWM7, output);
     3d8:	2201      	movs	r2, #1
     3da:	f241 01d2 	movw	r1, #4306	; 0x10d2
     3de:	481a      	ldr	r0, [pc, #104]	; (448 <Stack_Size+0x48>)
     3e0:	f000 fdc2 	bl	f68 <_ZN4Gpio10initializeEm9direction>
    blueLed.initialize((uint32_t)PF2::GPIO, output); 
     3e4:	2201      	movs	r2, #1
     3e6:	f241 0168 	movw	r1, #4200	; 0x1068
     3ea:	4818      	ldr	r0, [pc, #96]	; (44c <Stack_Size+0x4c>)
     3ec:	f000 fdbc 	bl	f68 <_ZN4Gpio10initializeEm9direction>
    redLed.initialize((uint32_t)PF1::GPIO, output);
     3f0:	2201      	movs	r2, #1
     3f2:	f241 0104 	movw	r1, #4100	; 0x1004
     3f6:	4816      	ldr	r0, [pc, #88]	; (450 <Stack_Size+0x50>)
     3f8:	f000 fdb6 	bl	f68 <_ZN4Gpio10initializeEm9direction>
    adcPin.initialize((uint32_t)PE3::AIN0, input);
     3fc:	2200      	movs	r2, #0
     3fe:	f640 51ad 	movw	r1, #3501	; 0xdad
     402:	4814      	ldr	r0, [pc, #80]	; (454 <Stack_Size+0x54>)
     404:	f000 fdb0 	bl	f68 <_ZN4Gpio10initializeEm9direction>

    greenPwm.initializeSingle(7, module1, 0xFFFF, 0xFFFF/2, 0x1, countDirectionPwm::down, (uint32_t)ACTZERO::invertPwm, true, (uint32_t)pwmUnitClockDivisor::_64);
     408:	2305      	movs	r3, #5
     40a:	9305      	str	r3, [sp, #20]
     40c:	2301      	movs	r3, #1
     40e:	9304      	str	r3, [sp, #16]
     410:	2301      	movs	r3, #1
     412:	9303      	str	r3, [sp, #12]
     414:	2300      	movs	r3, #0
     416:	9302      	str	r3, [sp, #8]
     418:	2301      	movs	r3, #1
     41a:	9301      	str	r3, [sp, #4]
     41c:	f647 73ff 	movw	r3, #32767	; 0x7fff
     420:	9300      	str	r3, [sp, #0]
     422:	f64f 73ff 	movw	r3, #65535	; 0xffff
     426:	2201      	movs	r2, #1
     428:	2107      	movs	r1, #7
     42a:	480b      	ldr	r0, [pc, #44]	; (458 <Stack_Size+0x58>)
     42c:	f000 ff78 	bl	1320 <_ZN3Pwm16initializeSingleEm9pwmModulemmm17countDirectionPwmmbm>

    testAdc.initializeModule((uint32_t)adcModule::module0, (uint32_t)ssPriority0::third|(uint32_t)ssPriority1::second|(uint32_t)ssPriority2::first|(uint32_t)ssPriority3::zeroth, false, false);
     430:	2300      	movs	r3, #0
     432:	9300      	str	r3, [sp, #0]
     434:	2300      	movs	r3, #0
     436:	f240 1223 	movw	r2, #291	; 0x123
     43a:	2100      	movs	r1, #0
     43c:	4807      	ldr	r0, [pc, #28]	; (45c <Stack_Size+0x5c>)
     43e:	f000 fa35 	bl	8ac <_ZN3Adc16initializeModuleEmmmm>
}
     442:	bf00      	nop
     444:	46bd      	mov	sp, r7
     446:	bd80      	pop	{r7, pc}
     448:	200000a0 	.word	0x200000a0
     44c:	200000b8 	.word	0x200000b8
     450:	200000d0 	.word	0x200000d0
     454:	20000118 	.word	0x20000118
     458:	20000130 	.word	0x20000130
     45c:	20000138 	.word	0x20000138

00000460 <main>:
 
int main(void)
{
     460:	b580      	push	{r7, lr}
     462:	b082      	sub	sp, #8
     464:	af02      	add	r7, sp, #8
    
    Nvic::disableInterrupts();
     466:	f000 f9e3 	bl	830 <_ZN4Nvic17disableInterruptsEv>

    swtich1.initialize((uint32_t)PF4::GPIO, input, 3);
     46a:	2303      	movs	r3, #3
     46c:	2200      	movs	r2, #0
     46e:	f241 1130 	movw	r1, #4400	; 0x1130
     472:	4812      	ldr	r0, [pc, #72]	; (4bc <main+0x5c>)
     474:	f000 fe92 	bl	119c <_ZN4Gpio10initializeEm9directionm>
    swtich2.initialize((uint32_t)PF0::GPIO, input, 3);
     478:	2303      	movs	r3, #3
     47a:	2200      	movs	r2, #0
     47c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
     480:	480f      	ldr	r0, [pc, #60]	; (4c0 <main+0x60>)
     482:	f000 fe8b 	bl	119c <_ZN4Gpio10initializeEm9directionm>

    // myTimer.initializeForInterupt(periodic, shortTimer0, 80000000, down, concatenated, 3);
    // myTimer.enableTimer();

    Nvic::enableInterrupts();
     486:	f000 f9e2 	bl	84e <_ZN4Nvic16enableInterruptsEv>

    testAdc.initializeForPolling((uint32_t)sampleSequencer::SS3, (uint32_t)ssTriggerSource::continousSampling, (uint32_t)ssInputSrc0::AIN0, (uint32_t)ssControl0::END0|(uint32_t)ssControl0::IE0, pollTest);
     48a:	4b0e      	ldr	r3, [pc, #56]	; (4c4 <main+0x64>)
     48c:	9301      	str	r3, [sp, #4]
     48e:	2306      	movs	r3, #6
     490:	9300      	str	r3, [sp, #0]
     492:	2300      	movs	r3, #0
     494:	220f      	movs	r2, #15
     496:	2103      	movs	r1, #3
     498:	480b      	ldr	r0, [pc, #44]	; (4c8 <main+0x68>)
     49a:	f000 fa67 	bl	96c <_ZN3Adc20initializeForPollingEmmmmPFvvE>
    testAdc.enableSampleSequencer();
     49e:	480a      	ldr	r0, [pc, #40]	; (4c8 <main+0x68>)
     4a0:	f000 faf1 	bl	a86 <_ZN3Adc21enableSampleSequencerEv>

    blueLed.write(set);
     4a4:	2101      	movs	r1, #1
     4a6:	4809      	ldr	r0, [pc, #36]	; (4cc <main+0x6c>)
     4a8:	f000 fef2 	bl	1290 <_ZN4Gpio5writeE10setORClear>
    redLed.write(set);
     4ac:	2101      	movs	r1, #1
     4ae:	4808      	ldr	r0, [pc, #32]	; (4d0 <main+0x70>)
     4b0:	f000 feee 	bl	1290 <_ZN4Gpio5writeE10setORClear>
        
    while(1)
    {
        // Nvic::wfi();
        testAdc.pollStatus();
     4b4:	4804      	ldr	r0, [pc, #16]	; (4c8 <main+0x68>)
     4b6:	f000 faf9 	bl	aac <_ZN3Adc10pollStatusEv>
     4ba:	e7fb      	b.n	4b4 <main+0x54>
     4bc:	200000e8 	.word	0x200000e8
     4c0:	20000100 	.word	0x20000100
     4c4:	000003a5 	.word	0x000003a5
     4c8:	20000138 	.word	0x20000138
     4cc:	200000b8 	.word	0x200000b8
     4d0:	200000d0 	.word	0x200000d0

000004d4 <_Z41__static_initialization_and_destruction_0ii>:
    }

}
     4d4:	b580      	push	{r7, lr}
     4d6:	b082      	sub	sp, #8
     4d8:	af00      	add	r7, sp, #0
     4da:	6078      	str	r0, [r7, #4]
     4dc:	6039      	str	r1, [r7, #0]
     4de:	687b      	ldr	r3, [r7, #4]
     4e0:	2b01      	cmp	r3, #1
     4e2:	d144      	bne.n	56e <_Z41__static_initialization_and_destruction_0ii+0x9a>
     4e4:	683b      	ldr	r3, [r7, #0]
     4e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
     4ea:	4293      	cmp	r3, r2
     4ec:	d13f      	bne.n	56e <_Z41__static_initialization_and_destruction_0ii+0x9a>
Gpio greenLed;
     4ee:	4822      	ldr	r0, [pc, #136]	; (578 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
     4f0:	f000 fd20 	bl	f34 <_ZN4GpioC1Ev>
     4f4:	4a21      	ldr	r2, [pc, #132]	; (57c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     4f6:	4922      	ldr	r1, [pc, #136]	; (580 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     4f8:	481f      	ldr	r0, [pc, #124]	; (578 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
     4fa:	f001 f899 	bl	1630 <__aeabi_atexit>
Gpio blueLed;
     4fe:	4821      	ldr	r0, [pc, #132]	; (584 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     500:	f000 fd18 	bl	f34 <_ZN4GpioC1Ev>
     504:	4a1d      	ldr	r2, [pc, #116]	; (57c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     506:	491e      	ldr	r1, [pc, #120]	; (580 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     508:	481e      	ldr	r0, [pc, #120]	; (584 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     50a:	f001 f891 	bl	1630 <__aeabi_atexit>
Gpio redLed;
     50e:	481e      	ldr	r0, [pc, #120]	; (588 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     510:	f000 fd10 	bl	f34 <_ZN4GpioC1Ev>
     514:	4a19      	ldr	r2, [pc, #100]	; (57c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     516:	491a      	ldr	r1, [pc, #104]	; (580 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     518:	481b      	ldr	r0, [pc, #108]	; (588 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     51a:	f001 f889 	bl	1630 <__aeabi_atexit>
Gpio swtich1;
     51e:	481b      	ldr	r0, [pc, #108]	; (58c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     520:	f000 fd08 	bl	f34 <_ZN4GpioC1Ev>
     524:	4a15      	ldr	r2, [pc, #84]	; (57c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     526:	4916      	ldr	r1, [pc, #88]	; (580 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     528:	4818      	ldr	r0, [pc, #96]	; (58c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     52a:	f001 f881 	bl	1630 <__aeabi_atexit>
Gpio swtich2;
     52e:	4818      	ldr	r0, [pc, #96]	; (590 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     530:	f000 fd00 	bl	f34 <_ZN4GpioC1Ev>
     534:	4a11      	ldr	r2, [pc, #68]	; (57c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     536:	4912      	ldr	r1, [pc, #72]	; (580 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     538:	4815      	ldr	r0, [pc, #84]	; (590 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     53a:	f001 f879 	bl	1630 <__aeabi_atexit>
Gpio adcPin;
     53e:	4815      	ldr	r0, [pc, #84]	; (594 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     540:	f000 fcf8 	bl	f34 <_ZN4GpioC1Ev>
     544:	4a0d      	ldr	r2, [pc, #52]	; (57c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     546:	490e      	ldr	r1, [pc, #56]	; (580 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     548:	4812      	ldr	r0, [pc, #72]	; (594 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     54a:	f001 f871 	bl	1630 <__aeabi_atexit>
Pwm greenPwm;
     54e:	4812      	ldr	r0, [pc, #72]	; (598 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     550:	f000 fed0 	bl	12f4 <_ZN3PwmC1Ev>
     554:	4a09      	ldr	r2, [pc, #36]	; (57c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     556:	4911      	ldr	r1, [pc, #68]	; (59c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     558:	480f      	ldr	r0, [pc, #60]	; (598 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     55a:	f001 f869 	bl	1630 <__aeabi_atexit>
Adc testAdc;
     55e:	4810      	ldr	r0, [pc, #64]	; (5a0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     560:	f000 f98e 	bl	880 <_ZN3AdcC1Ev>
     564:	4a05      	ldr	r2, [pc, #20]	; (57c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     566:	490f      	ldr	r1, [pc, #60]	; (5a4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     568:	480d      	ldr	r0, [pc, #52]	; (5a0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     56a:	f001 f861 	bl	1630 <__aeabi_atexit>
}
     56e:	bf00      	nop
     570:	3708      	adds	r7, #8
     572:	46bd      	mov	sp, r7
     574:	bd80      	pop	{r7, pc}
     576:	bf00      	nop
     578:	200000a0 	.word	0x200000a0
     57c:	20000000 	.word	0x20000000
     580:	00000f53 	.word	0x00000f53
     584:	200000b8 	.word	0x200000b8
     588:	200000d0 	.word	0x200000d0
     58c:	200000e8 	.word	0x200000e8
     590:	20000100 	.word	0x20000100
     594:	20000118 	.word	0x20000118
     598:	20000130 	.word	0x20000130
     59c:	0000130b 	.word	0x0000130b
     5a0:	20000138 	.word	0x20000138
     5a4:	00000897 	.word	0x00000897

000005a8 <_GLOBAL__sub_I_readme>:
     5a8:	b580      	push	{r7, lr}
     5aa:	af00      	add	r7, sp, #0
     5ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
     5b0:	2001      	movs	r0, #1
     5b2:	f7ff ff8f 	bl	4d4 <_Z41__static_initialization_and_destruction_0ii>
     5b6:	bd80      	pop	{r7, pc}

000005b8 <_ZN8RegisterC1Ev>:
#include "register.h"

/**
 * @brief empty constructor placeholder
 */
Register::Register()
     5b8:	b480      	push	{r7}
     5ba:	b083      	sub	sp, #12
     5bc:	af00      	add	r7, sp, #0
     5be:	6078      	str	r0, [r7, #4]
{
    
}
     5c0:	687b      	ldr	r3, [r7, #4]
     5c2:	4618      	mov	r0, r3
     5c4:	370c      	adds	r7, #12
     5c6:	46bd      	mov	sp, r7
     5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
     5cc:	4770      	bx	lr

000005ce <_ZN8RegisterD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Register::~Register()
     5ce:	b480      	push	{r7}
     5d0:	b083      	sub	sp, #12
     5d2:	af00      	add	r7, sp, #0
     5d4:	6078      	str	r0, [r7, #4]
{

}
     5d6:	687b      	ldr	r3, [r7, #4]
     5d8:	4618      	mov	r0, r3
     5da:	370c      	adds	r7, #12
     5dc:	46bd      	mov	sp, r7
     5de:	f85d 7b04 	ldr.w	r7, [sp], #4
     5e2:	4770      	bx	lr

000005e4 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>:
 * @param permission of the bitfield, read-only, write-only, etc...
 * 
 * @return retrieved information in the bitfield
 */
uint32_t Register::getRegisterBitFieldStatus(volatile uint32_t* address, uint32_t bit, uint32_t bitWidth, bitFieldPermission permission)
{
     5e4:	b480      	push	{r7}
     5e6:	b087      	sub	sp, #28
     5e8:	af00      	add	r7, sp, #0
     5ea:	60f8      	str	r0, [r7, #12]
     5ec:	60b9      	str	r1, [r7, #8]
     5ee:	607a      	str	r2, [r7, #4]
     5f0:	70fb      	strb	r3, [r7, #3]
    if((permission == RW) || (permission == RO) || (permission == RW1C))
     5f2:	78fb      	ldrb	r3, [r7, #3]
     5f4:	2b00      	cmp	r3, #0
     5f6:	d005      	beq.n	604 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x20>
     5f8:	78fb      	ldrb	r3, [r7, #3]
     5fa:	2b01      	cmp	r3, #1
     5fc:	d002      	beq.n	604 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x20>
     5fe:	78fb      	ldrb	r3, [r7, #3]
     600:	2b03      	cmp	r3, #3
     602:	d111      	bne.n	628 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x44>
    {
        uint32_t select = ((((0xFFFFFFFF >> (32 - bitWidth)))) << bit);
     604:	687b      	ldr	r3, [r7, #4]
     606:	f1c3 0320 	rsb	r3, r3, #32
     60a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     60e:	40da      	lsrs	r2, r3
     610:	68bb      	ldr	r3, [r7, #8]
     612:	fa02 f303 	lsl.w	r3, r2, r3
     616:	617b      	str	r3, [r7, #20]
        return(((*address) & select) >> bit);
     618:	68fb      	ldr	r3, [r7, #12]
     61a:	681a      	ldr	r2, [r3, #0]
     61c:	697b      	ldr	r3, [r7, #20]
     61e:	401a      	ands	r2, r3
     620:	68bb      	ldr	r3, [r7, #8]
     622:	fa22 f303 	lsr.w	r3, r2, r3
     626:	e001      	b.n	62c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x48>
    }

    else
    {
        return(UINT32_MAX);
     628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
     62c:	4618      	mov	r0, r3
     62e:	371c      	adds	r7, #28
     630:	46bd      	mov	sp, r7
     632:	f85d 7b04 	ldr.w	r7, [sp], #4
     636:	4770      	bx	lr

00000638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>:
 * @param bit to be set or the first bit of the bitfield to be set
 * @param width of the bitfield
 * @param permission of the bitfield, read-only, write-only, etc...
 */
void Register::setRegisterBitFieldStatus(volatile uint32_t* address, uint32_t value, uint32_t bit, uint32_t bitWidth, bitFieldPermission permission)
{
     638:	b480      	push	{r7}
     63a:	b087      	sub	sp, #28
     63c:	af00      	add	r7, sp, #0
     63e:	60f8      	str	r0, [r7, #12]
     640:	60b9      	str	r1, [r7, #8]
     642:	607a      	str	r2, [r7, #4]
     644:	603b      	str	r3, [r7, #0]
    if((permission == RW1C) && (value != 1))
     646:	f897 3020 	ldrb.w	r3, [r7, #32]
     64a:	2b03      	cmp	r3, #3
     64c:	d102      	bne.n	654 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x1c>
     64e:	68bb      	ldr	r3, [r7, #8]
     650:	2b01      	cmp	r3, #1
     652:	d12f      	bne.n	6b4 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x7c>
    {
        return;
    }
    
    else if((permission == RW) || (permission == WO) || (permission == RW1C))
     654:	f897 3020 	ldrb.w	r3, [r7, #32]
     658:	2b00      	cmp	r3, #0
     65a:	d007      	beq.n	66c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x34>
     65c:	f897 3020 	ldrb.w	r3, [r7, #32]
     660:	2b02      	cmp	r3, #2
     662:	d003      	beq.n	66c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x34>
     664:	f897 3020 	ldrb.w	r3, [r7, #32]
     668:	2b03      	cmp	r3, #3
     66a:	d125      	bne.n	6b8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x80>
    {
        uint32_t maxValue = (0xFFFFFFFF >> (32 - bitWidth));
     66c:	683b      	ldr	r3, [r7, #0]
     66e:	f1c3 0320 	rsb	r3, r3, #32
     672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     676:	fa22 f303 	lsr.w	r3, r2, r3
     67a:	617b      	str	r3, [r7, #20]

        if((value <= maxValue))
     67c:	68ba      	ldr	r2, [r7, #8]
     67e:	697b      	ldr	r3, [r7, #20]
     680:	429a      	cmp	r2, r3
     682:	d81b      	bhi.n	6bc <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x84>
        {
            uint32_t clear = (~(maxValue << bit));
     684:	697a      	ldr	r2, [r7, #20]
     686:	687b      	ldr	r3, [r7, #4]
     688:	fa02 f303 	lsl.w	r3, r2, r3
     68c:	43db      	mvns	r3, r3
     68e:	613b      	str	r3, [r7, #16]
            value = value << bit;
     690:	68ba      	ldr	r2, [r7, #8]
     692:	687b      	ldr	r3, [r7, #4]
     694:	fa02 f303 	lsl.w	r3, r2, r3
     698:	60bb      	str	r3, [r7, #8]
    
            (*address) &= clear;
     69a:	68fb      	ldr	r3, [r7, #12]
     69c:	681a      	ldr	r2, [r3, #0]
     69e:	693b      	ldr	r3, [r7, #16]
     6a0:	401a      	ands	r2, r3
     6a2:	68fb      	ldr	r3, [r7, #12]
     6a4:	601a      	str	r2, [r3, #0]
            (*address) |= value;
     6a6:	68fb      	ldr	r3, [r7, #12]
     6a8:	681a      	ldr	r2, [r3, #0]
     6aa:	68bb      	ldr	r3, [r7, #8]
     6ac:	431a      	orrs	r2, r3
     6ae:	68fb      	ldr	r3, [r7, #12]
     6b0:	601a      	str	r2, [r3, #0]
        }

        else
        {
            return;
        }
     6b2:	e004      	b.n	6be <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
        return;
     6b4:	bf00      	nop
     6b6:	e002      	b.n	6be <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
        
    }

    else
    {
        return;
     6b8:	bf00      	nop
     6ba:	e000      	b.n	6be <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
            return;
     6bc:	bf00      	nop
    }
}
     6be:	371c      	adds	r7, #28
     6c0:	46bd      	mov	sp, r7
     6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c6:	4770      	bx	lr

000006c8 <_Znwj>:


void* operator new(size_t size) noexcept 
{ 
     6c8:	b580      	push	{r7, lr}
     6ca:	b082      	sub	sp, #8
     6cc:	af00      	add	r7, sp, #0
     6ce:	6078      	str	r0, [r7, #4]
    return malloc(size); 
     6d0:	6878      	ldr	r0, [r7, #4]
     6d2:	f001 ff1b 	bl	250c <malloc>
     6d6:	4603      	mov	r3, r0
} 
     6d8:	4618      	mov	r0, r3
     6da:	3708      	adds	r7, #8
     6dc:	46bd      	mov	sp, r7
     6de:	bd80      	pop	{r7, pc}

000006e0 <_ZdlPv>:

void operator delete(void *p) noexcept 
{ 
     6e0:	b580      	push	{r7, lr}
     6e2:	b082      	sub	sp, #8
     6e4:	af00      	add	r7, sp, #0
     6e6:	6078      	str	r0, [r7, #4]
    free(p); 
     6e8:	6878      	ldr	r0, [r7, #4]
     6ea:	f001 ff17 	bl	251c <free>
} 
     6ee:	bf00      	nop
     6f0:	3708      	adds	r7, #8
     6f2:	46bd      	mov	sp, r7
     6f4:	bd80      	pop	{r7, pc}

000006f6 <_Znaj>:

void* operator new[](size_t size) noexcept 
{ 
     6f6:	b580      	push	{r7, lr}
     6f8:	b082      	sub	sp, #8
     6fa:	af00      	add	r7, sp, #0
     6fc:	6078      	str	r0, [r7, #4]
    return operator new(size); // Same as regular new
     6fe:	6878      	ldr	r0, [r7, #4]
     700:	f7ff ffe2 	bl	6c8 <_Znwj>
     704:	4603      	mov	r3, r0
} 
     706:	4618      	mov	r0, r3
     708:	3708      	adds	r7, #8
     70a:	46bd      	mov	sp, r7
     70c:	bd80      	pop	{r7, pc}

0000070e <_ZdaPv>:

void operator delete[](void *p) noexcept 
{ 
     70e:	b580      	push	{r7, lr}
     710:	b082      	sub	sp, #8
     712:	af00      	add	r7, sp, #0
     714:	6078      	str	r0, [r7, #4]
    operator delete(p); // Same as regular delete
     716:	6878      	ldr	r0, [r7, #4]
     718:	f7ff ffe2 	bl	6e0 <_ZdlPv>
} 
     71c:	bf00      	nop
     71e:	3708      	adds	r7, #8
     720:	46bd      	mov	sp, r7
     722:	bd80      	pop	{r7, pc}

00000724 <_ZnwjSt9nothrow_t>:

void* operator new(size_t size, std::nothrow_t) noexcept 
{ 
     724:	b580      	push	{r7, lr}
     726:	b082      	sub	sp, #8
     728:	af00      	add	r7, sp, #0
     72a:	6078      	str	r0, [r7, #4]
     72c:	7039      	strb	r1, [r7, #0]
    return operator new(size); // Same as regular new 
     72e:	6878      	ldr	r0, [r7, #4]
     730:	f7ff ffca 	bl	6c8 <_Znwj>
     734:	4603      	mov	r3, r0
} 
     736:	4618      	mov	r0, r3
     738:	3708      	adds	r7, #8
     73a:	46bd      	mov	sp, r7
     73c:	bd80      	pop	{r7, pc}

0000073e <_ZdlPvSt9nothrow_t>:

void operator delete(void *p,  std::nothrow_t) noexcept 
{ 
     73e:	b580      	push	{r7, lr}
     740:	b082      	sub	sp, #8
     742:	af00      	add	r7, sp, #0
     744:	6078      	str	r0, [r7, #4]
     746:	7039      	strb	r1, [r7, #0]
    operator delete(p); // Same as regular delete
     748:	6878      	ldr	r0, [r7, #4]
     74a:	f7ff ffc9 	bl	6e0 <_ZdlPv>
} 
     74e:	bf00      	nop
     750:	3708      	adds	r7, #8
     752:	46bd      	mov	sp, r7
     754:	bd80      	pop	{r7, pc}

00000756 <_ZnajSt9nothrow_t>:

void* operator new[](size_t size, std::nothrow_t) noexcept 
{ 
     756:	b580      	push	{r7, lr}
     758:	b082      	sub	sp, #8
     75a:	af00      	add	r7, sp, #0
     75c:	6078      	str	r0, [r7, #4]
     75e:	7039      	strb	r1, [r7, #0]
    return operator new(size); // Same as regular new
     760:	6878      	ldr	r0, [r7, #4]
     762:	f7ff ffb1 	bl	6c8 <_Znwj>
     766:	4603      	mov	r3, r0
} 
     768:	4618      	mov	r0, r3
     76a:	3708      	adds	r7, #8
     76c:	46bd      	mov	sp, r7
     76e:	bd80      	pop	{r7, pc}

00000770 <_ZdaPvSt9nothrow_t>:

void operator delete[](void *p,  std::nothrow_t) noexcept 
{ 
     770:	b580      	push	{r7, lr}
     772:	b082      	sub	sp, #8
     774:	af00      	add	r7, sp, #0
     776:	6078      	str	r0, [r7, #4]
     778:	7039      	strb	r1, [r7, #0]
    operator delete(p); // Same as regular delete
     77a:	6878      	ldr	r0, [r7, #4]
     77c:	f7ff ffb0 	bl	6e0 <_ZdlPv>
}
     780:	bf00      	nop
     782:	3708      	adds	r7, #8
     784:	46bd      	mov	sp, r7
     786:	bd80      	pop	{r7, pc}

00000788 <_ZN4NvicC1Ev>:


/**
 * @brief empty constructor placeholder
 */
Nvic::Nvic()
     788:	b480      	push	{r7}
     78a:	b083      	sub	sp, #12
     78c:	af00      	add	r7, sp, #0
     78e:	6078      	str	r0, [r7, #4]
{

}
     790:	687b      	ldr	r3, [r7, #4]
     792:	4618      	mov	r0, r3
     794:	370c      	adds	r7, #12
     796:	46bd      	mov	sp, r7
     798:	f85d 7b04 	ldr.w	r7, [sp], #4
     79c:	4770      	bx	lr

0000079e <_ZN4NvicD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Nvic::~Nvic()
     79e:	b480      	push	{r7}
     7a0:	b083      	sub	sp, #12
     7a2:	af00      	add	r7, sp, #0
     7a4:	6078      	str	r0, [r7, #4]
{

}
     7a6:	687b      	ldr	r3, [r7, #4]
     7a8:	4618      	mov	r0, r3
     7aa:	370c      	adds	r7, #12
     7ac:	46bd      	mov	sp, r7
     7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
     7b2:	4770      	bx	lr

000007b4 <_ZN4Nvic17activateInterruptE9interruptm>:
 * @param myInterrupt coresponds to the interrupt number of the interrupt that 
 *        you want to activate.
 * @param priority of the interrput that you want to activate
 */
void Nvic::activateInterrupt(interrupt myInterrupt, uint32_t priority)
{
     7b4:	b580      	push	{r7, lr}
     7b6:	b084      	sub	sp, #16
     7b8:	af02      	add	r7, sp, #8
     7ba:	4603      	mov	r3, r0
     7bc:	6039      	str	r1, [r7, #0]
     7be:	71fb      	strb	r3, [r7, #7]
    
    if((myInterrupt < 139) && (priority < 8))
     7c0:	79fb      	ldrb	r3, [r7, #7]
     7c2:	2b8a      	cmp	r3, #138	; 0x8a
     7c4:	d82b      	bhi.n	81e <_ZN4Nvic17activateInterruptE9interruptm+0x6a>
     7c6:	683b      	ldr	r3, [r7, #0]
     7c8:	2b07      	cmp	r3, #7
     7ca:	d828      	bhi.n	81e <_ZN4Nvic17activateInterruptE9interruptm+0x6a>
    {   
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(corePeripheralBase + PRIn_OFFSET[myInterrupt/4])), priority, ((myInterrupt % nvicRegisterOffset) * 8) + 5, 3, RW);
     7cc:	79fb      	ldrb	r3, [r7, #7]
     7ce:	089b      	lsrs	r3, r3, #2
     7d0:	b2db      	uxtb	r3, r3
     7d2:	461a      	mov	r2, r3
     7d4:	4b14      	ldr	r3, [pc, #80]	; (828 <_ZN4Nvic17activateInterruptE9interruptm+0x74>)
     7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     7da:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
     7de:	4618      	mov	r0, r3
     7e0:	79fb      	ldrb	r3, [r7, #7]
     7e2:	f003 0303 	and.w	r3, r3, #3
     7e6:	00db      	lsls	r3, r3, #3
     7e8:	1d5a      	adds	r2, r3, #5
     7ea:	2300      	movs	r3, #0
     7ec:	9300      	str	r3, [sp, #0]
     7ee:	2303      	movs	r3, #3
     7f0:	6839      	ldr	r1, [r7, #0]
     7f2:	f7ff ff21 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(corePeripheralBase + ENn_OFFSET[myInterrupt/32])), (uint32_t)set, (uint32_t)(myInterrupt % 32), 1, RW);
     7f6:	79fb      	ldrb	r3, [r7, #7]
     7f8:	095b      	lsrs	r3, r3, #5
     7fa:	b2db      	uxtb	r3, r3
     7fc:	461a      	mov	r2, r3
     7fe:	4b0b      	ldr	r3, [pc, #44]	; (82c <_ZN4Nvic17activateInterruptE9interruptm+0x78>)
     800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     804:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
     808:	4618      	mov	r0, r3
     80a:	79fb      	ldrb	r3, [r7, #7]
     80c:	f003 021f 	and.w	r2, r3, #31
     810:	2300      	movs	r3, #0
     812:	9300      	str	r3, [sp, #0]
     814:	2301      	movs	r3, #1
     816:	2101      	movs	r1, #1
     818:	f7ff ff0e 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
     81c:	e000      	b.n	820 <_ZN4Nvic17activateInterruptE9interruptm+0x6c>

    }
    
    else
    {
        return;
     81e:	bf00      	nop
    }
}
     820:	3708      	adds	r7, #8
     822:	46bd      	mov	sp, r7
     824:	bd80      	pop	{r7, pc}
     826:	bf00      	nop
     828:	00003178 	.word	0x00003178
     82c:	00003114 	.word	0x00003114

00000830 <_ZN4Nvic17disableInterruptsEv>:
 *         value to void.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
uint32_t Nvic::disableInterrupts(void)
{
     830:	b480      	push	{r7}
     832:	b083      	sub	sp, #12
     834:	af00      	add	r7, sp, #0

        "mrs     r0, PRIMASK\n"
        "cpsid   i\n"
        "bx      lr\n"
        : "=r" (ui32Ret)
    );
     836:	f3ef 8010 	mrs	r0, PRIMASK
     83a:	b672      	cpsid	i
     83c:	4770      	bx	lr
     83e:	607b      	str	r3, [r7, #4]

    return(ui32Ret);
     840:	687b      	ldr	r3, [r7, #4]
}
     842:	4618      	mov	r0, r3
     844:	370c      	adds	r7, #12
     846:	46bd      	mov	sp, r7
     848:	f85d 7b04 	ldr.w	r7, [sp], #4
     84c:	4770      	bx	lr

0000084e <_ZN4Nvic16enableInterruptsEv>:
 *         value to void.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
uint32_t Nvic::enableInterrupts(void)
{
     84e:	b480      	push	{r7}
     850:	b083      	sub	sp, #12
     852:	af00      	add	r7, sp, #0

        "mrs     r0, PRIMASK\n"
        "cpsie   i\n"
        "bx      lr\n"
        : "=r" (ui32Ret)
    );
     854:	f3ef 8010 	mrs	r0, PRIMASK
     858:	b662      	cpsie	i
     85a:	4770      	bx	lr
     85c:	607b      	str	r3, [r7, #4]

    return(ui32Ret);
     85e:	687b      	ldr	r3, [r7, #4]
}
     860:	4618      	mov	r0, r3
     862:	370c      	adds	r7, #12
     864:	46bd      	mov	sp, r7
     866:	f85d 7b04 	ldr.w	r7, [sp], #4
     86a:	4770      	bx	lr

0000086c <_ZN4Nvic3wfiEv>:
 *        module and waits for another interrupt.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
void Nvic::wfi(void)
{
     86c:	b480      	push	{r7}
     86e:	af00      	add	r7, sp, #0
    //
    asm volatile(

        "wfi     \n"
        "bx    lr\n"
    );
     870:	bf30      	wfi
     872:	4770      	bx	lr
    
}
     874:	bf00      	nop
     876:	46bd      	mov	sp, r7
     878:	f85d 7b04 	ldr.w	r7, [sp], #4
     87c:	4770      	bx	lr
     87e:	bf00      	nop

00000880 <_ZN3AdcC1Ev>:
#include "adc.h"

/**
 * @brief empty constructor placeholder
 */
Adc::Adc()
     880:	b480      	push	{r7}
     882:	b083      	sub	sp, #12
     884:	af00      	add	r7, sp, #0
     886:	6078      	str	r0, [r7, #4]
{

}
     888:	687b      	ldr	r3, [r7, #4]
     88a:	4618      	mov	r0, r3
     88c:	370c      	adds	r7, #12
     88e:	46bd      	mov	sp, r7
     890:	f85d 7b04 	ldr.w	r7, [sp], #4
     894:	4770      	bx	lr

00000896 <_ZN3AdcD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Adc::~Adc()
     896:	b480      	push	{r7}
     898:	b083      	sub	sp, #12
     89a:	af00      	add	r7, sp, #0
     89c:	6078      	str	r0, [r7, #4]
{

}
     89e:	687b      	ldr	r3, [r7, #4]
     8a0:	4618      	mov	r0, r3
     8a2:	370c      	adds	r7, #12
     8a4:	46bd      	mov	sp, r7
     8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8aa:	4770      	bx	lr

000008ac <_ZN3Adc16initializeModuleEmmmm>:

void Adc::initializeModule(uint32_t adcModule, uint32_t sequencerPriority, uint32_t hardwareAveraging, uint32_t phaseDelay)
{
     8ac:	b580      	push	{r7, lr}
     8ae:	b088      	sub	sp, #32
     8b0:	af02      	add	r7, sp, #8
     8b2:	60f8      	str	r0, [r7, #12]
     8b4:	60b9      	str	r1, [r7, #8]
     8b6:	607a      	str	r2, [r7, #4]
     8b8:	603b      	str	r3, [r7, #0]
    (*this).adcModule = adcModule;
     8ba:	68fb      	ldr	r3, [r7, #12]
     8bc:	68ba      	ldr	r2, [r7, #8]
     8be:	609a      	str	r2, [r3, #8]
    baseAddress = adc0BaseAddress + (adcModule * 0x1000);
     8c0:	68bb      	ldr	r3, [r7, #8]
     8c2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     8c6:	3338      	adds	r3, #56	; 0x38
     8c8:	031a      	lsls	r2, r3, #12
     8ca:	68fb      	ldr	r3, [r7, #12]
     8cc:	605a      	str	r2, [r3, #4]

    //0. Enable ADC module clock
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCADC_OFFSET)), set, adcModule, 1, RW);
     8ce:	2300      	movs	r3, #0
     8d0:	9300      	str	r3, [sp, #0]
     8d2:	2301      	movs	r3, #1
     8d4:	68ba      	ldr	r2, [r7, #8]
     8d6:	2101      	movs	r1, #1
     8d8:	4822      	ldr	r0, [pc, #136]	; (964 <_ZN3Adc16initializeModuleEmmmm+0xb8>)
     8da:	f7ff fead 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRADC_OFFSET), adcModule, 1, RO) == 0)
     8de:	2301      	movs	r3, #1
     8e0:	2201      	movs	r2, #1
     8e2:	68b9      	ldr	r1, [r7, #8]
     8e4:	4820      	ldr	r0, [pc, #128]	; (968 <_ZN3Adc16initializeModuleEmmmm+0xbc>)
     8e6:	f7ff fe7d 	bl	5e4 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     8ea:	4603      	mov	r3, r0
     8ec:	2b00      	cmp	r3, #0
     8ee:	bf0c      	ite	eq
     8f0:	2301      	moveq	r3, #1
     8f2:	2300      	movne	r3, #0
     8f4:	b2db      	uxtb	r3, r3
     8f6:	2b00      	cmp	r3, #0
     8f8:	d000      	beq.n	8fc <_ZN3Adc16initializeModuleEmmmm+0x50>
     8fa:	e7f0      	b.n	8de <_ZN3Adc16initializeModuleEmmmm+0x32>
     * 0.A If required by the application, reconfigure the sample sequencer 
     * priorities in the ADCSSPRI register. The default configuration has 
     * Sample Sequencer 0 with the highest priority and Sample Sequencer 3 as 
     * the lowest priority.
     */
    for(int i = 0; i < 4; i++)
     8fc:	2300      	movs	r3, #0
     8fe:	617b      	str	r3, [r7, #20]
     900:	697b      	ldr	r3, [r7, #20]
     902:	2b03      	cmp	r3, #3
     904:	dc14      	bgt.n	930 <_ZN3Adc16initializeModuleEmmmm+0x84>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSPRI_OFFSET)), sequencerPriority >> (4 * i), i * 4, 1 + 1, RW);
     906:	68fb      	ldr	r3, [r7, #12]
     908:	685b      	ldr	r3, [r3, #4]
     90a:	3320      	adds	r3, #32
     90c:	4618      	mov	r0, r3
     90e:	697b      	ldr	r3, [r7, #20]
     910:	009b      	lsls	r3, r3, #2
     912:	687a      	ldr	r2, [r7, #4]
     914:	fa22 f103 	lsr.w	r1, r2, r3
     918:	697b      	ldr	r3, [r7, #20]
     91a:	009b      	lsls	r3, r3, #2
     91c:	461a      	mov	r2, r3
     91e:	2300      	movs	r3, #0
     920:	9300      	str	r3, [sp, #0]
     922:	2302      	movs	r3, #2
     924:	f7ff fe88 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    for(int i = 0; i < 4; i++)
     928:	697b      	ldr	r3, [r7, #20]
     92a:	3301      	adds	r3, #1
     92c:	617b      	str	r3, [r7, #20]
     92e:	e7e7      	b.n	900 <_ZN3Adc16initializeModuleEmmmm+0x54>
    }

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSAC_OFFSET)), hardwareAveraging, 0, 2 + 1, RW);
     930:	68fb      	ldr	r3, [r7, #12]
     932:	685b      	ldr	r3, [r3, #4]
     934:	3330      	adds	r3, #48	; 0x30
     936:	4618      	mov	r0, r3
     938:	2300      	movs	r3, #0
     93a:	9300      	str	r3, [sp, #0]
     93c:	2303      	movs	r3, #3
     93e:	2200      	movs	r2, #0
     940:	6839      	ldr	r1, [r7, #0]
     942:	f7ff fe79 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSPC_OFFSET)), phaseDelay, 0, 3 + 1, RW);
     946:	68fb      	ldr	r3, [r7, #12]
     948:	685b      	ldr	r3, [r3, #4]
     94a:	3324      	adds	r3, #36	; 0x24
     94c:	4618      	mov	r0, r3
     94e:	2300      	movs	r3, #0
     950:	9300      	str	r3, [sp, #0]
     952:	2304      	movs	r3, #4
     954:	2200      	movs	r2, #0
     956:	6a39      	ldr	r1, [r7, #32]
     958:	f7ff fe6e 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    
}
     95c:	bf00      	nop
     95e:	3718      	adds	r7, #24
     960:	46bd      	mov	sp, r7
     962:	bd80      	pop	{r7, pc}
     964:	400fe638 	.word	0x400fe638
     968:	400fea38 	.word	0x400fea38

0000096c <_ZN3Adc20initializeForPollingEmmmmPFvvE>:
 * 
 * @param adcModule Clock to be intialized for the ADC module
 * @param action when polling the adc, the action to be taken when RIS is activate
 */
void Adc::initializeForPolling(uint32_t sampleSequencer, uint32_t sequencerTrigSrc, uint32_t inputSource, uint32_t sequencerControl, void (*action)(void))
{
     96c:	b580      	push	{r7, lr}
     96e:	b084      	sub	sp, #16
     970:	af00      	add	r7, sp, #0
     972:	60f8      	str	r0, [r7, #12]
     974:	60b9      	str	r1, [r7, #8]
     976:	607a      	str	r2, [r7, #4]
     978:	603b      	str	r3, [r7, #0]
    (*this).sampleSequencer = sampleSequencer;
     97a:	68fb      	ldr	r3, [r7, #12]
     97c:	68ba      	ldr	r2, [r7, #8]
     97e:	60da      	str	r2, [r3, #12]
    (*this).sequencerTrigSrc = sequencerTrigSrc;
     980:	68fb      	ldr	r3, [r7, #12]
     982:	687a      	ldr	r2, [r7, #4]
     984:	615a      	str	r2, [r3, #20]
    (*this).inputSource = inputSource;
     986:	68fb      	ldr	r3, [r7, #12]
     988:	683a      	ldr	r2, [r7, #0]
     98a:	619a      	str	r2, [r3, #24]
    (*this).sequencerControl = sequencerControl;
     98c:	68fb      	ldr	r3, [r7, #12]
     98e:	69ba      	ldr	r2, [r7, #24]
     990:	61da      	str	r2, [r3, #28]
    initialization();
     992:	68f8      	ldr	r0, [r7, #12]
     994:	f000 f8e5 	bl	b62 <_ZN3Adc14initializationEv>
    (*this).action = action;
     998:	68fb      	ldr	r3, [r7, #12]
     99a:	69fa      	ldr	r2, [r7, #28]
     99c:	601a      	str	r2, [r3, #0]

}
     99e:	bf00      	nop
     9a0:	3710      	adds	r7, #16
     9a2:	46bd      	mov	sp, r7
     9a4:	bd80      	pop	{r7, pc}

000009a6 <_ZN3Adc22initializeForInterruptEmmmmm>:

void Adc::initializeForInterrupt(uint32_t sampleSequencer, uint32_t sequencerTrigSrc, uint32_t inputSource, uint32_t sequencerControl, uint32_t interruptPriority)
{
     9a6:	b580      	push	{r7, lr}
     9a8:	b086      	sub	sp, #24
     9aa:	af02      	add	r7, sp, #8
     9ac:	60f8      	str	r0, [r7, #12]
     9ae:	60b9      	str	r1, [r7, #8]
     9b0:	607a      	str	r2, [r7, #4]
     9b2:	603b      	str	r3, [r7, #0]
    (*this).sampleSequencer = sampleSequencer;
     9b4:	68fb      	ldr	r3, [r7, #12]
     9b6:	68ba      	ldr	r2, [r7, #8]
     9b8:	60da      	str	r2, [r3, #12]
    (*this).sequencerTrigSrc = sequencerTrigSrc;
     9ba:	68fb      	ldr	r3, [r7, #12]
     9bc:	687a      	ldr	r2, [r7, #4]
     9be:	615a      	str	r2, [r3, #20]
    (*this).inputSource = inputSource;
     9c0:	68fb      	ldr	r3, [r7, #12]
     9c2:	683a      	ldr	r2, [r7, #0]
     9c4:	619a      	str	r2, [r3, #24]
    (*this).sequencerControl = sequencerControl;
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	69ba      	ldr	r2, [r7, #24]
     9ca:	61da      	str	r2, [r3, #28]
    initialization();
     9cc:	68f8      	ldr	r0, [r7, #12]
     9ce:	f000 f8c8 	bl	b62 <_ZN3Adc14initializationEv>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCIM_OFFSET)), set, sampleSequencer, 1, RW);
     9d2:	68fb      	ldr	r3, [r7, #12]
     9d4:	685b      	ldr	r3, [r3, #4]
     9d6:	3308      	adds	r3, #8
     9d8:	4618      	mov	r0, r3
     9da:	2300      	movs	r3, #0
     9dc:	9300      	str	r3, [sp, #0]
     9de:	2301      	movs	r3, #1
     9e0:	68ba      	ldr	r2, [r7, #8]
     9e2:	2101      	movs	r1, #1
     9e4:	f7ff fe28 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    if(adcModule == (uint32_t)adcModule::module0)
     9e8:	68fb      	ldr	r3, [r7, #12]
     9ea:	689b      	ldr	r3, [r3, #8]
     9ec:	2b00      	cmp	r3, #0
     9ee:	d121      	bne.n	a34 <_ZN3Adc22initializeForInterruptEmmmmm+0x8e>
     9f0:	68bb      	ldr	r3, [r7, #8]
     9f2:	2b03      	cmp	r3, #3
     9f4:	d840      	bhi.n	a78 <_ZN3Adc22initializeForInterruptEmmmmm+0xd2>
     9f6:	a201      	add	r2, pc, #4	; (adr r2, 9fc <_ZN3Adc22initializeForInterruptEmmmmm+0x56>)
     9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     9fc:	00000a0d 	.word	0x00000a0d
     a00:	00000a17 	.word	0x00000a17
     a04:	00000a21 	.word	0x00000a21
     a08:	00000a2b 	.word	0x00000a2b
    {
        switch (sampleSequencer)
        {
            case (uint32_t)sampleSequencer::SS0:
                Nvic::activateInterrupt(ADC_0_Sequence_0_Interrupt, interruptPriority);
     a0c:	69f9      	ldr	r1, [r7, #28]
     a0e:	200e      	movs	r0, #14
     a10:	f7ff fed0 	bl	7b4 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a14:	e033      	b.n	a7e <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS1:
                Nvic::activateInterrupt(ADC_0_Sequence_1_Interrupt, interruptPriority);
     a16:	69f9      	ldr	r1, [r7, #28]
     a18:	200f      	movs	r0, #15
     a1a:	f7ff fecb 	bl	7b4 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a1e:	e02e      	b.n	a7e <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS2:
                Nvic::activateInterrupt(ADC_0_Sequence_2_Interrupt, interruptPriority);
     a20:	69f9      	ldr	r1, [r7, #28]
     a22:	2010      	movs	r0, #16
     a24:	f7ff fec6 	bl	7b4 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a28:	e029      	b.n	a7e <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS3:
                Nvic::activateInterrupt(ADC_0_Sequence_3_Interrupt, interruptPriority);
     a2a:	69f9      	ldr	r1, [r7, #28]
     a2c:	2011      	movs	r0, #17
     a2e:	f7ff fec1 	bl	7b4 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a32:	e024      	b.n	a7e <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>
     a34:	68bb      	ldr	r3, [r7, #8]
     a36:	2b03      	cmp	r3, #3
     a38:	d820      	bhi.n	a7c <_ZN3Adc22initializeForInterruptEmmmmm+0xd6>
     a3a:	a201      	add	r2, pc, #4	; (adr r2, a40 <_ZN3Adc22initializeForInterruptEmmmmm+0x9a>)
     a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a40:	00000a51 	.word	0x00000a51
     a44:	00000a5b 	.word	0x00000a5b
     a48:	00000a65 	.word	0x00000a65
     a4c:	00000a6f 	.word	0x00000a6f
    else
    {
        switch (sampleSequencer)
        {
            case (uint32_t)sampleSequencer::SS0:
                Nvic::activateInterrupt(ADC_1_Sequence_0_Interrupt, interruptPriority);
     a50:	69f9      	ldr	r1, [r7, #28]
     a52:	2030      	movs	r0, #48	; 0x30
     a54:	f7ff feae 	bl	7b4 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a58:	e011      	b.n	a7e <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS1:
                Nvic::activateInterrupt(ADC_1_Sequence_1_Interrupt, interruptPriority);
     a5a:	69f9      	ldr	r1, [r7, #28]
     a5c:	2031      	movs	r0, #49	; 0x31
     a5e:	f7ff fea9 	bl	7b4 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a62:	e00c      	b.n	a7e <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS2:
                Nvic::activateInterrupt(ADC_1_Sequence_2_Interrupt, interruptPriority);
     a64:	69f9      	ldr	r1, [r7, #28]
     a66:	2032      	movs	r0, #50	; 0x32
     a68:	f7ff fea4 	bl	7b4 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a6c:	e007      	b.n	a7e <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS3:
                Nvic::activateInterrupt(ADC_1_Sequence_3_Interrupt, interruptPriority);
     a6e:	69f9      	ldr	r1, [r7, #28]
     a70:	2033      	movs	r0, #51	; 0x33
     a72:	f7ff fe9f 	bl	7b4 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a76:	e002      	b.n	a7e <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>
                break;
     a78:	bf00      	nop
     a7a:	e000      	b.n	a7e <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>
            
            default:
                break;
     a7c:	bf00      	nop
        }
    }
    
}
     a7e:	bf00      	nop
     a80:	3710      	adds	r7, #16
     a82:	46bd      	mov	sp, r7
     a84:	bd80      	pop	{r7, pc}

00000a86 <_ZN3Adc21enableSampleSequencerEv>:


void Adc::enableSampleSequencer(void)
{
     a86:	b580      	push	{r7, lr}
     a88:	b084      	sub	sp, #16
     a8a:	af02      	add	r7, sp, #8
     a8c:	6078      	str	r0, [r7, #4]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCACTSS_OFFSET)), set, sampleSequencer, 1, RW);
     a8e:	687b      	ldr	r3, [r7, #4]
     a90:	685b      	ldr	r3, [r3, #4]
     a92:	4618      	mov	r0, r3
     a94:	687b      	ldr	r3, [r7, #4]
     a96:	68da      	ldr	r2, [r3, #12]
     a98:	2300      	movs	r3, #0
     a9a:	9300      	str	r3, [sp, #0]
     a9c:	2301      	movs	r3, #1
     a9e:	2101      	movs	r1, #1
     aa0:	f7ff fdca 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     aa4:	bf00      	nop
     aa6:	3708      	adds	r7, #8
     aa8:	46bd      	mov	sp, r7
     aaa:	bd80      	pop	{r7, pc}

00000aac <_ZN3Adc10pollStatusEv>:

void Adc::pollStatus(void)
{
     aac:	b580      	push	{r7, lr}
     aae:	b082      	sub	sp, #8
     ab0:	af00      	add	r7, sp, #0
     ab2:	6078      	str	r0, [r7, #4]
    if(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCRIS_OFFSET)), sampleSequencer, 1, RO) == set)
     ab4:	687b      	ldr	r3, [r7, #4]
     ab6:	685b      	ldr	r3, [r3, #4]
     ab8:	3304      	adds	r3, #4
     aba:	4618      	mov	r0, r3
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	68d9      	ldr	r1, [r3, #12]
     ac0:	2301      	movs	r3, #1
     ac2:	2201      	movs	r2, #1
     ac4:	f7ff fd8e 	bl	5e4 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     ac8:	4603      	mov	r3, r0
     aca:	2b01      	cmp	r3, #1
     acc:	bf0c      	ite	eq
     ace:	2301      	moveq	r3, #1
     ad0:	2300      	movne	r3, #0
     ad2:	b2db      	uxtb	r3, r3
     ad4:	2b00      	cmp	r3, #0
     ad6:	d002      	beq.n	ade <_ZN3Adc10pollStatusEv+0x32>
    {
        action();
     ad8:	687b      	ldr	r3, [r7, #4]
     ada:	681b      	ldr	r3, [r3, #0]
     adc:	4798      	blx	r3
    }
}
     ade:	bf00      	nop
     ae0:	3708      	adds	r7, #8
     ae2:	46bd      	mov	sp, r7
     ae4:	bd80      	pop	{r7, pc}

00000ae6 <_ZN3Adc14softwareTrigerEv>:

void Adc::softwareTriger(void)
{
     ae6:	b580      	push	{r7, lr}
     ae8:	b084      	sub	sp, #16
     aea:	af02      	add	r7, sp, #8
     aec:	6078      	str	r0, [r7, #4]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCPSSI_OFFSET)), set, sampleSequencer, 1, RW);
     aee:	687b      	ldr	r3, [r7, #4]
     af0:	685b      	ldr	r3, [r3, #4]
     af2:	3328      	adds	r3, #40	; 0x28
     af4:	4618      	mov	r0, r3
     af6:	687b      	ldr	r3, [r7, #4]
     af8:	68da      	ldr	r2, [r3, #12]
     afa:	2300      	movs	r3, #0
     afc:	9300      	str	r3, [sp, #0]
     afe:	2301      	movs	r3, #1
     b00:	2101      	movs	r1, #1
     b02:	f7ff fd99 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     b06:	bf00      	nop
     b08:	3708      	adds	r7, #8
     b0a:	46bd      	mov	sp, r7
     b0c:	bd80      	pop	{r7, pc}

00000b0e <_ZN3Adc12getAdcSampleEv>:

uint32_t Adc::getAdcSample(void)
{
     b0e:	b580      	push	{r7, lr}
     b10:	b082      	sub	sp, #8
     b12:	af00      	add	r7, sp, #0
     b14:	6078      	str	r0, [r7, #4]
    return(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSFIFO0_OFFSET + (ssOffset * sampleSequencer)))), 0, 11 + 1, RO));
     b16:	687b      	ldr	r3, [r7, #4]
     b18:	685a      	ldr	r2, [r3, #4]
     b1a:	687b      	ldr	r3, [r7, #4]
     b1c:	68db      	ldr	r3, [r3, #12]
     b1e:	015b      	lsls	r3, r3, #5
     b20:	4413      	add	r3, r2
     b22:	3348      	adds	r3, #72	; 0x48
     b24:	4618      	mov	r0, r3
     b26:	2301      	movs	r3, #1
     b28:	220c      	movs	r2, #12
     b2a:	2100      	movs	r1, #0
     b2c:	f7ff fd5a 	bl	5e4 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     b30:	4603      	mov	r3, r0
}
     b32:	4618      	mov	r0, r3
     b34:	3708      	adds	r7, #8
     b36:	46bd      	mov	sp, r7
     b38:	bd80      	pop	{r7, pc}

00000b3a <_ZN3Adc14clearInterruptEv>:

void Adc::clearInterrupt(void)
{
     b3a:	b580      	push	{r7, lr}
     b3c:	b084      	sub	sp, #16
     b3e:	af02      	add	r7, sp, #8
     b40:	6078      	str	r0, [r7, #4]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCISC_OFFSET)), set, sampleSequencer, 1, RW1C);
     b42:	687b      	ldr	r3, [r7, #4]
     b44:	685b      	ldr	r3, [r3, #4]
     b46:	330c      	adds	r3, #12
     b48:	4618      	mov	r0, r3
     b4a:	687b      	ldr	r3, [r7, #4]
     b4c:	68da      	ldr	r2, [r3, #12]
     b4e:	2303      	movs	r3, #3
     b50:	9300      	str	r3, [sp, #0]
     b52:	2301      	movs	r3, #1
     b54:	2101      	movs	r1, #1
     b56:	f7ff fd6f 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     b5a:	bf00      	nop
     b5c:	3708      	adds	r7, #8
     b5e:	46bd      	mov	sp, r7
     b60:	bd80      	pop	{r7, pc}

00000b62 <_ZN3Adc14initializationEv>:
 *          Configuration of the sample sequencers is slightly more complex 
 *          than the module initialization because each sample sequencer is 
 *          completely programmable.
 */
void Adc::initialization(void)
{    
     b62:	b580      	push	{r7, lr}
     b64:	b08c      	sub	sp, #48	; 0x30
     b66:	af02      	add	r7, sp, #8
     b68:	6078      	str	r0, [r7, #4]
     * corresponding ASENn bit in the ADCACTSS register. Programming of the 
     * sample sequencers is allowed without having them enabled. Disabling the 
     * sequencer during programming prevents erroneous execution if a trigger
     * event were to occur during the configuration process.
     */
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCACTSS_OFFSET)), clear, sampleSequencer, 1, RW);
     b6a:	687b      	ldr	r3, [r7, #4]
     b6c:	685b      	ldr	r3, [r3, #4]
     b6e:	4618      	mov	r0, r3
     b70:	687b      	ldr	r3, [r7, #4]
     b72:	68da      	ldr	r2, [r3, #12]
     b74:	2300      	movs	r3, #0
     b76:	9300      	str	r3, [sp, #0]
     b78:	2301      	movs	r3, #1
     b7a:	2100      	movs	r1, #0
     b7c:	f7ff fd5c 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
     * 0 for all generators.
     */


    //2. Configure the trigger event for the sample sequencer in the ADCEMUX register.
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCEMUX_OFFSET)), sequencerTrigSrc, sampleSequencer * 4, 3 + 1, RW);
     b80:	687b      	ldr	r3, [r7, #4]
     b82:	685b      	ldr	r3, [r3, #4]
     b84:	3314      	adds	r3, #20
     b86:	4618      	mov	r0, r3
     b88:	687b      	ldr	r3, [r7, #4]
     b8a:	6959      	ldr	r1, [r3, #20]
     b8c:	687b      	ldr	r3, [r7, #4]
     b8e:	68db      	ldr	r3, [r3, #12]
     b90:	009a      	lsls	r2, r3, #2
     b92:	2300      	movs	r3, #0
     b94:	9300      	str	r3, [sp, #0]
     b96:	2304      	movs	r3, #4
     b98:	f7ff fd4e 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //3. For each sample in the sample sequence, configure the corresponding input source in the ADCSSMUXn register.
    if(sampleSequencer == (uint32_t)sampleSequencer::SS0)
     b9c:	687b      	ldr	r3, [r7, #4]
     b9e:	68db      	ldr	r3, [r3, #12]
     ba0:	2b00      	cmp	r3, #0
     ba2:	d11f      	bne.n	be4 <_ZN3Adc14initializationEv+0x82>
    {
        for(int i = 0; i < 8; i++)
     ba4:	2300      	movs	r3, #0
     ba6:	627b      	str	r3, [r7, #36]	; 0x24
     ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     baa:	2b07      	cmp	r3, #7
     bac:	f300 8083 	bgt.w	cb6 <_ZN3Adc14initializationEv+0x154>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
     bb0:	687b      	ldr	r3, [r7, #4]
     bb2:	685a      	ldr	r2, [r3, #4]
     bb4:	687b      	ldr	r3, [r7, #4]
     bb6:	68db      	ldr	r3, [r3, #12]
     bb8:	3302      	adds	r3, #2
     bba:	015b      	lsls	r3, r3, #5
     bbc:	4413      	add	r3, r2
     bbe:	4618      	mov	r0, r3
     bc0:	687b      	ldr	r3, [r7, #4]
     bc2:	699a      	ldr	r2, [r3, #24]
     bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     bc6:	009b      	lsls	r3, r3, #2
     bc8:	fa22 f103 	lsr.w	r1, r2, r3
     bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     bce:	009b      	lsls	r3, r3, #2
     bd0:	461a      	mov	r2, r3
     bd2:	2300      	movs	r3, #0
     bd4:	9300      	str	r3, [sp, #0]
     bd6:	2304      	movs	r3, #4
     bd8:	f7ff fd2e 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 8; i++)
     bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     bde:	3301      	adds	r3, #1
     be0:	627b      	str	r3, [r7, #36]	; 0x24
     be2:	e7e1      	b.n	ba8 <_ZN3Adc14initializationEv+0x46>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS1)
     be4:	687b      	ldr	r3, [r7, #4]
     be6:	68db      	ldr	r3, [r3, #12]
     be8:	2b01      	cmp	r3, #1
     bea:	d11e      	bne.n	c2a <_ZN3Adc14initializationEv+0xc8>
    {
        for(int i = 0; i < 4; i++)
     bec:	2300      	movs	r3, #0
     bee:	623b      	str	r3, [r7, #32]
     bf0:	6a3b      	ldr	r3, [r7, #32]
     bf2:	2b03      	cmp	r3, #3
     bf4:	dc5f      	bgt.n	cb6 <_ZN3Adc14initializationEv+0x154>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
     bf6:	687b      	ldr	r3, [r7, #4]
     bf8:	685a      	ldr	r2, [r3, #4]
     bfa:	687b      	ldr	r3, [r7, #4]
     bfc:	68db      	ldr	r3, [r3, #12]
     bfe:	3302      	adds	r3, #2
     c00:	015b      	lsls	r3, r3, #5
     c02:	4413      	add	r3, r2
     c04:	4618      	mov	r0, r3
     c06:	687b      	ldr	r3, [r7, #4]
     c08:	699a      	ldr	r2, [r3, #24]
     c0a:	6a3b      	ldr	r3, [r7, #32]
     c0c:	009b      	lsls	r3, r3, #2
     c0e:	fa22 f103 	lsr.w	r1, r2, r3
     c12:	6a3b      	ldr	r3, [r7, #32]
     c14:	009b      	lsls	r3, r3, #2
     c16:	461a      	mov	r2, r3
     c18:	2300      	movs	r3, #0
     c1a:	9300      	str	r3, [sp, #0]
     c1c:	2304      	movs	r3, #4
     c1e:	f7ff fd0b 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 4; i++)
     c22:	6a3b      	ldr	r3, [r7, #32]
     c24:	3301      	adds	r3, #1
     c26:	623b      	str	r3, [r7, #32]
     c28:	e7e2      	b.n	bf0 <_ZN3Adc14initializationEv+0x8e>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS2)
     c2a:	687b      	ldr	r3, [r7, #4]
     c2c:	68db      	ldr	r3, [r3, #12]
     c2e:	2b02      	cmp	r3, #2
     c30:	d11e      	bne.n	c70 <_ZN3Adc14initializationEv+0x10e>
    {
        for(int i = 0; i < 4; i++)
     c32:	2300      	movs	r3, #0
     c34:	61fb      	str	r3, [r7, #28]
     c36:	69fb      	ldr	r3, [r7, #28]
     c38:	2b03      	cmp	r3, #3
     c3a:	dc3c      	bgt.n	cb6 <_ZN3Adc14initializationEv+0x154>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
     c3c:	687b      	ldr	r3, [r7, #4]
     c3e:	685a      	ldr	r2, [r3, #4]
     c40:	687b      	ldr	r3, [r7, #4]
     c42:	68db      	ldr	r3, [r3, #12]
     c44:	3302      	adds	r3, #2
     c46:	015b      	lsls	r3, r3, #5
     c48:	4413      	add	r3, r2
     c4a:	4618      	mov	r0, r3
     c4c:	687b      	ldr	r3, [r7, #4]
     c4e:	699a      	ldr	r2, [r3, #24]
     c50:	69fb      	ldr	r3, [r7, #28]
     c52:	009b      	lsls	r3, r3, #2
     c54:	fa22 f103 	lsr.w	r1, r2, r3
     c58:	69fb      	ldr	r3, [r7, #28]
     c5a:	009b      	lsls	r3, r3, #2
     c5c:	461a      	mov	r2, r3
     c5e:	2300      	movs	r3, #0
     c60:	9300      	str	r3, [sp, #0]
     c62:	2304      	movs	r3, #4
     c64:	f7ff fce8 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 4; i++)
     c68:	69fb      	ldr	r3, [r7, #28]
     c6a:	3301      	adds	r3, #1
     c6c:	61fb      	str	r3, [r7, #28]
     c6e:	e7e2      	b.n	c36 <_ZN3Adc14initializationEv+0xd4>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS3)
     c70:	687b      	ldr	r3, [r7, #4]
     c72:	68db      	ldr	r3, [r3, #12]
     c74:	2b03      	cmp	r3, #3
     c76:	d11e      	bne.n	cb6 <_ZN3Adc14initializationEv+0x154>
    {
        for(int i = 0; i < 1; i++)
     c78:	2300      	movs	r3, #0
     c7a:	61bb      	str	r3, [r7, #24]
     c7c:	69bb      	ldr	r3, [r7, #24]
     c7e:	2b00      	cmp	r3, #0
     c80:	dc19      	bgt.n	cb6 <_ZN3Adc14initializationEv+0x154>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
     c82:	687b      	ldr	r3, [r7, #4]
     c84:	685a      	ldr	r2, [r3, #4]
     c86:	687b      	ldr	r3, [r7, #4]
     c88:	68db      	ldr	r3, [r3, #12]
     c8a:	3302      	adds	r3, #2
     c8c:	015b      	lsls	r3, r3, #5
     c8e:	4413      	add	r3, r2
     c90:	4618      	mov	r0, r3
     c92:	687b      	ldr	r3, [r7, #4]
     c94:	699a      	ldr	r2, [r3, #24]
     c96:	69bb      	ldr	r3, [r7, #24]
     c98:	009b      	lsls	r3, r3, #2
     c9a:	fa22 f103 	lsr.w	r1, r2, r3
     c9e:	69bb      	ldr	r3, [r7, #24]
     ca0:	009b      	lsls	r3, r3, #2
     ca2:	461a      	mov	r2, r3
     ca4:	2300      	movs	r3, #0
     ca6:	9300      	str	r3, [sp, #0]
     ca8:	2304      	movs	r3, #4
     caa:	f7ff fcc5 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 1; i++)
     cae:	69bb      	ldr	r3, [r7, #24]
     cb0:	3301      	adds	r3, #1
     cb2:	61bb      	str	r3, [r7, #24]
     cb4:	e7e2      	b.n	c7c <_ZN3Adc14initializationEv+0x11a>
     * 4. For each sample in the sample sequence, configure the sample control 
     * bits in the corresponding nibble in the ADCSSCTLn register. When 
     * programming the last nibble, ensure that the END bit is set. Failure to 
     * set the END bit causes unpredictable behavior.
     */
    if(sampleSequencer == (uint32_t)sampleSequencer::SS0)
     cb6:	687b      	ldr	r3, [r7, #4]
     cb8:	68db      	ldr	r3, [r3, #12]
     cba:	2b00      	cmp	r3, #0
     cbc:	d11b      	bne.n	cf6 <_ZN3Adc14initializationEv+0x194>
    {
        for(int i = 0; i < 32; i++)
     cbe:	2300      	movs	r3, #0
     cc0:	617b      	str	r3, [r7, #20]
     cc2:	697b      	ldr	r3, [r7, #20]
     cc4:	2b1f      	cmp	r3, #31
     cc6:	dc76      	bgt.n	db6 <_ZN3Adc14initializationEv+0x254>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> i, i, 1, RW);
     cc8:	687b      	ldr	r3, [r7, #4]
     cca:	685a      	ldr	r2, [r3, #4]
     ccc:	687b      	ldr	r3, [r7, #4]
     cce:	68db      	ldr	r3, [r3, #12]
     cd0:	015b      	lsls	r3, r3, #5
     cd2:	4413      	add	r3, r2
     cd4:	3344      	adds	r3, #68	; 0x44
     cd6:	4618      	mov	r0, r3
     cd8:	687b      	ldr	r3, [r7, #4]
     cda:	69da      	ldr	r2, [r3, #28]
     cdc:	697b      	ldr	r3, [r7, #20]
     cde:	fa22 f103 	lsr.w	r1, r2, r3
     ce2:	697a      	ldr	r2, [r7, #20]
     ce4:	2300      	movs	r3, #0
     ce6:	9300      	str	r3, [sp, #0]
     ce8:	2301      	movs	r3, #1
     cea:	f7ff fca5 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 32; i++)
     cee:	697b      	ldr	r3, [r7, #20]
     cf0:	3301      	adds	r3, #1
     cf2:	617b      	str	r3, [r7, #20]
     cf4:	e7e5      	b.n	cc2 <_ZN3Adc14initializationEv+0x160>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS1)
     cf6:	687b      	ldr	r3, [r7, #4]
     cf8:	68db      	ldr	r3, [r3, #12]
     cfa:	2b01      	cmp	r3, #1
     cfc:	d11b      	bne.n	d36 <_ZN3Adc14initializationEv+0x1d4>
    {
        for(int i = 0; i < 16; i++)
     cfe:	2300      	movs	r3, #0
     d00:	613b      	str	r3, [r7, #16]
     d02:	693b      	ldr	r3, [r7, #16]
     d04:	2b0f      	cmp	r3, #15
     d06:	dc56      	bgt.n	db6 <_ZN3Adc14initializationEv+0x254>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> i, i, 1, RW);
     d08:	687b      	ldr	r3, [r7, #4]
     d0a:	685a      	ldr	r2, [r3, #4]
     d0c:	687b      	ldr	r3, [r7, #4]
     d0e:	68db      	ldr	r3, [r3, #12]
     d10:	015b      	lsls	r3, r3, #5
     d12:	4413      	add	r3, r2
     d14:	3344      	adds	r3, #68	; 0x44
     d16:	4618      	mov	r0, r3
     d18:	687b      	ldr	r3, [r7, #4]
     d1a:	69da      	ldr	r2, [r3, #28]
     d1c:	693b      	ldr	r3, [r7, #16]
     d1e:	fa22 f103 	lsr.w	r1, r2, r3
     d22:	693a      	ldr	r2, [r7, #16]
     d24:	2300      	movs	r3, #0
     d26:	9300      	str	r3, [sp, #0]
     d28:	2301      	movs	r3, #1
     d2a:	f7ff fc85 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 16; i++)
     d2e:	693b      	ldr	r3, [r7, #16]
     d30:	3301      	adds	r3, #1
     d32:	613b      	str	r3, [r7, #16]
     d34:	e7e5      	b.n	d02 <_ZN3Adc14initializationEv+0x1a0>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS2)
     d36:	687b      	ldr	r3, [r7, #4]
     d38:	68db      	ldr	r3, [r3, #12]
     d3a:	2b02      	cmp	r3, #2
     d3c:	d11b      	bne.n	d76 <_ZN3Adc14initializationEv+0x214>
    {
        for(int i = 0; i < 16; i++)
     d3e:	2300      	movs	r3, #0
     d40:	60fb      	str	r3, [r7, #12]
     d42:	68fb      	ldr	r3, [r7, #12]
     d44:	2b0f      	cmp	r3, #15
     d46:	dc36      	bgt.n	db6 <_ZN3Adc14initializationEv+0x254>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> i, i, 1, RW);
     d48:	687b      	ldr	r3, [r7, #4]
     d4a:	685a      	ldr	r2, [r3, #4]
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	68db      	ldr	r3, [r3, #12]
     d50:	015b      	lsls	r3, r3, #5
     d52:	4413      	add	r3, r2
     d54:	3344      	adds	r3, #68	; 0x44
     d56:	4618      	mov	r0, r3
     d58:	687b      	ldr	r3, [r7, #4]
     d5a:	69da      	ldr	r2, [r3, #28]
     d5c:	68fb      	ldr	r3, [r7, #12]
     d5e:	fa22 f103 	lsr.w	r1, r2, r3
     d62:	68fa      	ldr	r2, [r7, #12]
     d64:	2300      	movs	r3, #0
     d66:	9300      	str	r3, [sp, #0]
     d68:	2301      	movs	r3, #1
     d6a:	f7ff fc65 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 16; i++)
     d6e:	68fb      	ldr	r3, [r7, #12]
     d70:	3301      	adds	r3, #1
     d72:	60fb      	str	r3, [r7, #12]
     d74:	e7e5      	b.n	d42 <_ZN3Adc14initializationEv+0x1e0>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS3)
     d76:	687b      	ldr	r3, [r7, #4]
     d78:	68db      	ldr	r3, [r3, #12]
     d7a:	2b03      	cmp	r3, #3
     d7c:	d11b      	bne.n	db6 <_ZN3Adc14initializationEv+0x254>
    {
        for(int i = 0; i < 4; i++)
     d7e:	2300      	movs	r3, #0
     d80:	60bb      	str	r3, [r7, #8]
     d82:	68bb      	ldr	r3, [r7, #8]
     d84:	2b03      	cmp	r3, #3
     d86:	dc16      	bgt.n	db6 <_ZN3Adc14initializationEv+0x254>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> i, i, 1, RW);
     d88:	687b      	ldr	r3, [r7, #4]
     d8a:	685a      	ldr	r2, [r3, #4]
     d8c:	687b      	ldr	r3, [r7, #4]
     d8e:	68db      	ldr	r3, [r3, #12]
     d90:	015b      	lsls	r3, r3, #5
     d92:	4413      	add	r3, r2
     d94:	3344      	adds	r3, #68	; 0x44
     d96:	4618      	mov	r0, r3
     d98:	687b      	ldr	r3, [r7, #4]
     d9a:	69da      	ldr	r2, [r3, #28]
     d9c:	68bb      	ldr	r3, [r7, #8]
     d9e:	fa22 f103 	lsr.w	r1, r2, r3
     da2:	68ba      	ldr	r2, [r7, #8]
     da4:	2300      	movs	r3, #0
     da6:	9300      	str	r3, [sp, #0]
     da8:	2301      	movs	r3, #1
     daa:	f7ff fc45 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 4; i++)
     dae:	68bb      	ldr	r3, [r7, #8]
     db0:	3301      	adds	r3, #1
     db2:	60bb      	str	r3, [r7, #8]
     db4:	e7e5      	b.n	d82 <_ZN3Adc14initializationEv+0x220>
        }
    }

     db6:	bf00      	nop
     db8:	3728      	adds	r7, #40	; 0x28
     dba:	46bd      	mov	sp, r7
     dbc:	bd80      	pop	{r7, pc}
     dbe:	bf00      	nop

00000dc0 <_ZN13SystemControlC1Ev>:
#include "systemControl.h"

/**
 * @brief empty constructor placeholder
 */
SystemControl::SystemControl()
     dc0:	b480      	push	{r7}
     dc2:	b083      	sub	sp, #12
     dc4:	af00      	add	r7, sp, #0
     dc6:	6078      	str	r0, [r7, #4]
{
    
}
     dc8:	687b      	ldr	r3, [r7, #4]
     dca:	4618      	mov	r0, r3
     dcc:	370c      	adds	r7, #12
     dce:	46bd      	mov	sp, r7
     dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
     dd4:	4770      	bx	lr

00000dd6 <_ZN13SystemControlD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
SystemControl::~SystemControl()
     dd6:	b480      	push	{r7}
     dd8:	b083      	sub	sp, #12
     dda:	af00      	add	r7, sp, #0
     ddc:	6078      	str	r0, [r7, #4]
{
	
}
     dde:	687b      	ldr	r3, [r7, #4]
     de0:	4618      	mov	r0, r3
     de2:	370c      	adds	r7, #12
     de4:	46bd      	mov	sp, r7
     de6:	f85d 7b04 	ldr.w	r7, [sp], #4
     dea:	4770      	bx	lr

00000dec <_ZN13SystemControl16initializeGPIOHBEv>:

/**
 * @brief Initializes the system to use GPIO AHB for use instead of the APB
 */
void SystemControl::initializeGPIOHB(void)
{
     dec:	b580      	push	{r7, lr}
     dee:	b082      	sub	sp, #8
     df0:	af02      	add	r7, sp, #8

	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 0, 1, RW);
     df2:	2300      	movs	r3, #0
     df4:	9300      	str	r3, [sp, #0]
     df6:	2301      	movs	r3, #1
     df8:	2200      	movs	r2, #0
     dfa:	2101      	movs	r1, #1
     dfc:	4816      	ldr	r0, [pc, #88]	; (e58 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     dfe:	f7ff fc1b 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 1, 1, RW);
     e02:	2300      	movs	r3, #0
     e04:	9300      	str	r3, [sp, #0]
     e06:	2301      	movs	r3, #1
     e08:	2201      	movs	r2, #1
     e0a:	2101      	movs	r1, #1
     e0c:	4812      	ldr	r0, [pc, #72]	; (e58 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     e0e:	f7ff fc13 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 2, 1, RW);
     e12:	2300      	movs	r3, #0
     e14:	9300      	str	r3, [sp, #0]
     e16:	2301      	movs	r3, #1
     e18:	2202      	movs	r2, #2
     e1a:	2101      	movs	r1, #1
     e1c:	480e      	ldr	r0, [pc, #56]	; (e58 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     e1e:	f7ff fc0b 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 3, 1, RW);
     e22:	2300      	movs	r3, #0
     e24:	9300      	str	r3, [sp, #0]
     e26:	2301      	movs	r3, #1
     e28:	2203      	movs	r2, #3
     e2a:	2101      	movs	r1, #1
     e2c:	480a      	ldr	r0, [pc, #40]	; (e58 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     e2e:	f7ff fc03 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 4, 1, RW);
     e32:	2300      	movs	r3, #0
     e34:	9300      	str	r3, [sp, #0]
     e36:	2301      	movs	r3, #1
     e38:	2204      	movs	r2, #4
     e3a:	2101      	movs	r1, #1
     e3c:	4806      	ldr	r0, [pc, #24]	; (e58 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     e3e:	f7ff fbfb 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 5, 1, RW);
     e42:	2300      	movs	r3, #0
     e44:	9300      	str	r3, [sp, #0]
     e46:	2301      	movs	r3, #1
     e48:	2205      	movs	r2, #5
     e4a:	2101      	movs	r1, #1
     e4c:	4802      	ldr	r0, [pc, #8]	; (e58 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     e4e:	f7ff fbf3 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     e52:	bf00      	nop
     e54:	46bd      	mov	sp, r7
     e56:	bd80      	pop	{r7, pc}
     e58:	400fe06c 	.word	0x400fe06c

00000e5c <_ZN13SystemControl15initializeClockE7SYSDIV2>:
 * @brief Initializes the PLL for system clock use
 *
 * @param frequency of the new system clock.
 */ 
void SystemControl::initializeClock(SYSDIV2 frequency)
{
     e5c:	b580      	push	{r7, lr}
     e5e:	b084      	sub	sp, #16
     e60:	af02      	add	r7, sp, #8
     e62:	4603      	mov	r3, r0
     e64:	71fb      	strb	r3, [r7, #7]
	
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), set, 31, 1, RW); //0. Use RCC2.
     e66:	2300      	movs	r3, #0
     e68:	9300      	str	r3, [sp, #0]
     e6a:	2301      	movs	r3, #1
     e6c:	221f      	movs	r2, #31
     e6e:	2101      	movs	r1, #1
     e70:	482d      	ldr	r0, [pc, #180]	; (f28 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     e72:	f7ff fbe1 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), set, 11, 1, RW); //1. Bypass PLL while initiializing
     e76:	2300      	movs	r3, #0
     e78:	9300      	str	r3, [sp, #0]
     e7a:	2301      	movs	r3, #1
     e7c:	220b      	movs	r2, #11
     e7e:	2101      	movs	r1, #1
     e80:	4829      	ldr	r0, [pc, #164]	; (f28 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     e82:	f7ff fbd9 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC_OFFSET)), _16MHz_XTAL, 6, 5, RW); // 2. Select the crystal value and the oscillator source, configure for 16MHz crystal.
     e86:	2300      	movs	r3, #0
     e88:	9300      	str	r3, [sp, #0]
     e8a:	2305      	movs	r3, #5
     e8c:	2206      	movs	r2, #6
     e8e:	2115      	movs	r1, #21
     e90:	4826      	ldr	r0, [pc, #152]	; (f2c <_ZN13SystemControl15initializeClockE7SYSDIV2+0xd0>)
     e92:	f7ff fbd1 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), MOSC, 4, 3, RW);  //Confgure for main oscillator source.
     e96:	2300      	movs	r3, #0
     e98:	9300      	str	r3, [sp, #0]
     e9a:	2303      	movs	r3, #3
     e9c:	2204      	movs	r2, #4
     e9e:	2100      	movs	r1, #0
     ea0:	4821      	ldr	r0, [pc, #132]	; (f28 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     ea2:	f7ff fbc9 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), clear, 13, 1, RW); // 3. Activate PLL by clearing PWRDN.
     ea6:	2300      	movs	r3, #0
     ea8:	9300      	str	r3, [sp, #0]
     eaa:	2301      	movs	r3, #1
     eac:	220d      	movs	r2, #13
     eae:	2100      	movs	r1, #0
     eb0:	481d      	ldr	r0, [pc, #116]	; (f28 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     eb2:	f7ff fbc1 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

	/*
	 * Append the SYSDIV2LSB bit to the SYSDIV2 field to create a 7 bit divisor 
	 * using the 400 MHz PLL output.
	 */
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), set, 30, 1, RW);
     eb6:	2300      	movs	r3, #0
     eb8:	9300      	str	r3, [sp, #0]
     eba:	2301      	movs	r3, #1
     ebc:	221e      	movs	r2, #30
     ebe:	2101      	movs	r1, #1
     ec0:	4819      	ldr	r0, [pc, #100]	; (f28 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     ec2:	f7ff fbb9 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), ((frequency - 1) & 0x01), 22, 1, RW);
     ec6:	79fb      	ldrb	r3, [r7, #7]
     ec8:	3b01      	subs	r3, #1
     eca:	f003 0101 	and.w	r1, r3, #1
     ece:	2300      	movs	r3, #0
     ed0:	9300      	str	r3, [sp, #0]
     ed2:	2301      	movs	r3, #1
     ed4:	2216      	movs	r2, #22
     ed6:	4814      	ldr	r0, [pc, #80]	; (f28 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     ed8:	f7ff fbae 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), ((frequency - 1) >> 1), 23, 6, RW);
     edc:	79fb      	ldrb	r3, [r7, #7]
     ede:	3b01      	subs	r3, #1
     ee0:	105b      	asrs	r3, r3, #1
     ee2:	4619      	mov	r1, r3
     ee4:	2300      	movs	r3, #0
     ee6:	9300      	str	r3, [sp, #0]
     ee8:	2306      	movs	r3, #6
     eea:	2217      	movs	r2, #23
     eec:	480e      	ldr	r0, [pc, #56]	; (f28 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     eee:	f7ff fba3 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

	while((Register::getRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RIS_OFFSET)), 6, 1, RO)) == 0)  // 5. Wait for the PLL to lock by polling PLLRIS.
     ef2:	2301      	movs	r3, #1
     ef4:	2201      	movs	r2, #1
     ef6:	2106      	movs	r1, #6
     ef8:	480d      	ldr	r0, [pc, #52]	; (f30 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xd4>)
     efa:	f7ff fb73 	bl	5e4 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     efe:	4603      	mov	r3, r0
     f00:	2b00      	cmp	r3, #0
     f02:	bf0c      	ite	eq
     f04:	2301      	moveq	r3, #1
     f06:	2300      	movne	r3, #0
     f08:	b2db      	uxtb	r3, r3
     f0a:	2b00      	cmp	r3, #0
     f0c:	d000      	beq.n	f10 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xb4>
     f0e:	e7f0      	b.n	ef2 <_ZN13SystemControl15initializeClockE7SYSDIV2+0x96>
	{

	}
	
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), clear, 11, 1, RW); // 6. Enable use of the PLL by clearing BYPASS.
     f10:	2300      	movs	r3, #0
     f12:	9300      	str	r3, [sp, #0]
     f14:	2301      	movs	r3, #1
     f16:	220b      	movs	r2, #11
     f18:	2100      	movs	r1, #0
     f1a:	4803      	ldr	r0, [pc, #12]	; (f28 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     f1c:	f7ff fb8c 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     f20:	bf00      	nop
     f22:	3708      	adds	r7, #8
     f24:	46bd      	mov	sp, r7
     f26:	bd80      	pop	{r7, pc}
     f28:	400fe070 	.word	0x400fe070
     f2c:	400fe060 	.word	0x400fe060
     f30:	400fe050 	.word	0x400fe050

00000f34 <_ZN4GpioC1Ev>:
#include "gpio.h"

/**
 * @brief empty constructor placeholder
 */
Gpio::Gpio()
     f34:	b480      	push	{r7}
     f36:	b083      	sub	sp, #12
     f38:	af00      	add	r7, sp, #0
     f3a:	6078      	str	r0, [r7, #4]
     f3c:	687b      	ldr	r3, [r7, #4]
     f3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     f42:	60da      	str	r2, [r3, #12]
{

}
     f44:	687b      	ldr	r3, [r7, #4]
     f46:	4618      	mov	r0, r3
     f48:	370c      	adds	r7, #12
     f4a:	46bd      	mov	sp, r7
     f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
     f50:	4770      	bx	lr

00000f52 <_ZN4GpioD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Gpio::~Gpio()
     f52:	b480      	push	{r7}
     f54:	b083      	sub	sp, #12
     f56:	af00      	add	r7, sp, #0
     f58:	6078      	str	r0, [r7, #4]
{   

}
     f5a:	687b      	ldr	r3, [r7, #4]
     f5c:	4618      	mov	r0, r3
     f5e:	370c      	adds	r7, #12
     f60:	46bd      	mov	sp, r7
     f62:	f85d 7b04 	ldr.w	r7, [sp], #4
     f66:	4770      	bx	lr

00000f68 <_ZN4Gpio10initializeEm9direction>:
 * @brief Simple gpio initializer constructor.
 * @param gpio pin to be initialized.
 * @param dir of the gpio, to be an output or input.
 */
void Gpio::initialize(uint32_t gpio, direction dir)
{  
     f68:	b580      	push	{r7, lr}
     f6a:	b086      	sub	sp, #24
     f6c:	af02      	add	r7, sp, #8
     f6e:	60f8      	str	r0, [r7, #12]
     f70:	60b9      	str	r1, [r7, #8]
     f72:	4613      	mov	r3, r2
     f74:	71fb      	strb	r3, [r7, #7]
    alternateFunction = gpio%100; //get encoding for alternate function
     f76:	68ba      	ldr	r2, [r7, #8]
     f78:	4b84      	ldr	r3, [pc, #528]	; (118c <_ZN4Gpio10initializeEm9direction+0x224>)
     f7a:	fba3 1302 	umull	r1, r3, r3, r2
     f7e:	095b      	lsrs	r3, r3, #5
     f80:	2164      	movs	r1, #100	; 0x64
     f82:	fb01 f303 	mul.w	r3, r1, r3
     f86:	1ad3      	subs	r3, r2, r3
     f88:	461a      	mov	r2, r3
     f8a:	68fb      	ldr	r3, [r7, #12]
     f8c:	60da      	str	r2, [r3, #12]
    gpio = gpio/100; //get rid of gpio encoding
     f8e:	68bb      	ldr	r3, [r7, #8]
     f90:	4a7e      	ldr	r2, [pc, #504]	; (118c <_ZN4Gpio10initializeEm9direction+0x224>)
     f92:	fba2 2303 	umull	r2, r3, r2, r3
     f96:	095b      	lsrs	r3, r3, #5
     f98:	60bb      	str	r3, [r7, #8]

    gpioPort = (gpio/8);
     f9a:	68bb      	ldr	r3, [r7, #8]
     f9c:	08da      	lsrs	r2, r3, #3
     f9e:	68fb      	ldr	r3, [r7, #12]
     fa0:	615a      	str	r2, [r3, #20]
    (*this).gpio = (gpio%8);
     fa2:	68bb      	ldr	r3, [r7, #8]
     fa4:	f003 0207 	and.w	r2, r3, #7
     fa8:	68fb      	ldr	r3, [r7, #12]
     faa:	601a      	str	r2, [r3, #0]
    (*this).dir = dir;
     fac:	68fb      	ldr	r3, [r7, #12]
     fae:	79fa      	ldrb	r2, [r7, #7]
     fb0:	711a      	strb	r2, [r3, #4]
    baseAddress = GPIO_Port_AHB_BASE + (gpioPort) * 0x1000;
     fb2:	68fb      	ldr	r3, [r7, #12]
     fb4:	695b      	ldr	r3, [r3, #20]
     fb6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     fba:	3358      	adds	r3, #88	; 0x58
     fbc:	031a      	lsls	r2, r3, #12
     fbe:	68fb      	ldr	r3, [r7, #12]
     fc0:	611a      	str	r2, [r3, #16]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCGPIO_OFFSET)), set, (uint32_t)(gpioPort), 1, RW);
     fc2:	68fb      	ldr	r3, [r7, #12]
     fc4:	695a      	ldr	r2, [r3, #20]
     fc6:	2300      	movs	r3, #0
     fc8:	9300      	str	r3, [sp, #0]
     fca:	2301      	movs	r3, #1
     fcc:	2101      	movs	r1, #1
     fce:	4870      	ldr	r0, [pc, #448]	; (1190 <_ZN4Gpio10initializeEm9direction+0x228>)
     fd0:	f7ff fb32 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + PRGPIO_OFFSET)), (uint32_t)(gpioPort), 1, RO) == 0)
     fd4:	68fb      	ldr	r3, [r7, #12]
     fd6:	6959      	ldr	r1, [r3, #20]
     fd8:	2301      	movs	r3, #1
     fda:	2201      	movs	r2, #1
     fdc:	486d      	ldr	r0, [pc, #436]	; (1194 <_ZN4Gpio10initializeEm9direction+0x22c>)
     fde:	f7ff fb01 	bl	5e4 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     fe2:	4603      	mov	r3, r0
     fe4:	2b00      	cmp	r3, #0
     fe6:	bf0c      	ite	eq
     fe8:	2301      	moveq	r3, #1
     fea:	2300      	movne	r3, #0
     fec:	b2db      	uxtb	r3, r3
     fee:	2b00      	cmp	r3, #0
     ff0:	d000      	beq.n	ff4 <_ZN4Gpio10initializeEm9direction+0x8c>
     ff2:	e7ef      	b.n	fd4 <_ZN4Gpio10initializeEm9direction+0x6c>
    {
        //Ready?
    }

    //Unlock NMI for use.
    if(gpio == ((uint32_t)PF0::GPIO)/100)
     ff4:	68bb      	ldr	r3, [r7, #8]
     ff6:	2b28      	cmp	r3, #40	; 0x28
     ff8:	d11c      	bne.n	1034 <_ZN4Gpio10initializeEm9direction+0xcc>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOLOCK_OFFSET)), gpioKey, 0, 32, RW);
     ffa:	68fb      	ldr	r3, [r7, #12]
     ffc:	691b      	ldr	r3, [r3, #16]
     ffe:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
    1002:	4618      	mov	r0, r3
    1004:	2300      	movs	r3, #0
    1006:	9300      	str	r3, [sp, #0]
    1008:	2320      	movs	r3, #32
    100a:	2200      	movs	r2, #0
    100c:	4962      	ldr	r1, [pc, #392]	; (1198 <_ZN4Gpio10initializeEm9direction+0x230>)
    100e:	f7ff fb13 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        *(((volatile uint32_t*)(baseAddress + GPIOCR_OFFSET))) |= (0x1 << (*this).gpio);
    1012:	68fb      	ldr	r3, [r7, #12]
    1014:	691b      	ldr	r3, [r3, #16]
    1016:	f203 5324 	addw	r3, r3, #1316	; 0x524
    101a:	681b      	ldr	r3, [r3, #0]
    101c:	68fa      	ldr	r2, [r7, #12]
    101e:	6812      	ldr	r2, [r2, #0]
    1020:	2101      	movs	r1, #1
    1022:	fa01 f202 	lsl.w	r2, r1, r2
    1026:	4611      	mov	r1, r2
    1028:	68fa      	ldr	r2, [r7, #12]
    102a:	6912      	ldr	r2, [r2, #16]
    102c:	f202 5224 	addw	r2, r2, #1316	; 0x524
    1030:	430b      	orrs	r3, r1
    1032:	6013      	str	r3, [r2, #0]
    }

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODIR_OFFSET)), (*this).dir, (*this).gpio, 1, RW);
    1034:	68fb      	ldr	r3, [r7, #12]
    1036:	691b      	ldr	r3, [r3, #16]
    1038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    103c:	4618      	mov	r0, r3
    103e:	68fb      	ldr	r3, [r7, #12]
    1040:	791b      	ldrb	r3, [r3, #4]
    1042:	4619      	mov	r1, r3
    1044:	68fb      	ldr	r3, [r7, #12]
    1046:	681a      	ldr	r2, [r3, #0]
    1048:	2300      	movs	r3, #0
    104a:	9300      	str	r3, [sp, #0]
    104c:	2301      	movs	r3, #1
    104e:	f7ff faf3 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    
    //If no alternate function encoding
    if(alternateFunction == 0)
    1052:	68fb      	ldr	r3, [r7, #12]
    1054:	68db      	ldr	r3, [r3, #12]
    1056:	2b00      	cmp	r3, #0
    1058:	d138      	bne.n	10cc <_ZN4Gpio10initializeEm9direction+0x164>
    {
        if((*this).dir == input)
    105a:	68fb      	ldr	r3, [r7, #12]
    105c:	791b      	ldrb	r3, [r3, #4]
    105e:	2b00      	cmp	r3, #0
    1060:	d10c      	bne.n	107c <_ZN4Gpio10initializeEm9direction+0x114>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOPUR_OFFSET)), set, (*this).gpio, 1, RW);
    1062:	68fb      	ldr	r3, [r7, #12]
    1064:	691b      	ldr	r3, [r3, #16]
    1066:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
    106a:	4618      	mov	r0, r3
    106c:	68fb      	ldr	r3, [r7, #12]
    106e:	681a      	ldr	r2, [r3, #0]
    1070:	2300      	movs	r3, #0
    1072:	9300      	str	r3, [sp, #0]
    1074:	2301      	movs	r3, #1
    1076:	2101      	movs	r1, #1
    1078:	f7ff fade 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        }


        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAFSEl_OFFSET)), clear, (*this).gpio, 1, RW);
    107c:	68fb      	ldr	r3, [r7, #12]
    107e:	691b      	ldr	r3, [r3, #16]
    1080:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    1084:	4618      	mov	r0, r3
    1086:	68fb      	ldr	r3, [r7, #12]
    1088:	681a      	ldr	r2, [r3, #0]
    108a:	2300      	movs	r3, #0
    108c:	9300      	str	r3, [sp, #0]
    108e:	2301      	movs	r3, #1
    1090:	2100      	movs	r1, #0
    1092:	f7ff fad1 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), set, (*this).gpio, 1, RW);
    1096:	68fb      	ldr	r3, [r7, #12]
    1098:	691b      	ldr	r3, [r3, #16]
    109a:	f203 531c 	addw	r3, r3, #1308	; 0x51c
    109e:	4618      	mov	r0, r3
    10a0:	68fb      	ldr	r3, [r7, #12]
    10a2:	681a      	ldr	r2, [r3, #0]
    10a4:	2300      	movs	r3, #0
    10a6:	9300      	str	r3, [sp, #0]
    10a8:	2301      	movs	r3, #1
    10aa:	2101      	movs	r1, #1
    10ac:	f7ff fac4 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), clear, (*this).gpio, 1, RW);
    10b0:	68fb      	ldr	r3, [r7, #12]
    10b2:	691b      	ldr	r3, [r3, #16]
    10b4:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    10b8:	4618      	mov	r0, r3
    10ba:	68fb      	ldr	r3, [r7, #12]
    10bc:	681a      	ldr	r2, [r3, #0]
    10be:	2300      	movs	r3, #0
    10c0:	9300      	str	r3, [sp, #0]
    10c2:	2301      	movs	r3, #1
    10c4:	2100      	movs	r1, #0
    10c6:	f7ff fab7 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), clear, (*this).gpio, 1, RW);
        }


    }
}
    10ca:	e05a      	b.n	1182 <_ZN4Gpio10initializeEm9direction+0x21a>
        alternateFunction = alternateFunction - 1; //Get rid of encoding offset
    10cc:	68fb      	ldr	r3, [r7, #12]
    10ce:	68db      	ldr	r3, [r3, #12]
    10d0:	1e5a      	subs	r2, r3, #1
    10d2:	68fb      	ldr	r3, [r7, #12]
    10d4:	60da      	str	r2, [r3, #12]
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAFSEl_OFFSET)), set, (*this).gpio, 1, RW); //Enable alternate function for GPIO pin
    10d6:	68fb      	ldr	r3, [r7, #12]
    10d8:	691b      	ldr	r3, [r3, #16]
    10da:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    10de:	4618      	mov	r0, r3
    10e0:	68fb      	ldr	r3, [r7, #12]
    10e2:	681a      	ldr	r2, [r3, #0]
    10e4:	2300      	movs	r3, #0
    10e6:	9300      	str	r3, [sp, #0]
    10e8:	2301      	movs	r3, #1
    10ea:	2101      	movs	r1, #1
    10ec:	f7ff faa4 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        if(alternateFunction == 0)
    10f0:	68fb      	ldr	r3, [r7, #12]
    10f2:	68db      	ldr	r3, [r3, #12]
    10f4:	2b00      	cmp	r3, #0
    10f6:	d11a      	bne.n	112e <_ZN4Gpio10initializeEm9direction+0x1c6>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), clear, (*this).gpio, 1, RW);
    10f8:	68fb      	ldr	r3, [r7, #12]
    10fa:	691b      	ldr	r3, [r3, #16]
    10fc:	f203 531c 	addw	r3, r3, #1308	; 0x51c
    1100:	4618      	mov	r0, r3
    1102:	68fb      	ldr	r3, [r7, #12]
    1104:	681a      	ldr	r2, [r3, #0]
    1106:	2300      	movs	r3, #0
    1108:	9300      	str	r3, [sp, #0]
    110a:	2301      	movs	r3, #1
    110c:	2100      	movs	r1, #0
    110e:	f7ff fa93 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), set, (*this).gpio, 1, RW);
    1112:	68fb      	ldr	r3, [r7, #12]
    1114:	691b      	ldr	r3, [r3, #16]
    1116:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    111a:	4618      	mov	r0, r3
    111c:	68fb      	ldr	r3, [r7, #12]
    111e:	681a      	ldr	r2, [r3, #0]
    1120:	2300      	movs	r3, #0
    1122:	9300      	str	r3, [sp, #0]
    1124:	2301      	movs	r3, #1
    1126:	2101      	movs	r1, #1
    1128:	f7ff fa86 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    112c:	e029      	b.n	1182 <_ZN4Gpio10initializeEm9direction+0x21a>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOPCTL_OFFSET)), alternateFunction, ((*this).gpio) * 4, 4, RW);
    112e:	68fb      	ldr	r3, [r7, #12]
    1130:	691b      	ldr	r3, [r3, #16]
    1132:	f203 532c 	addw	r3, r3, #1324	; 0x52c
    1136:	4618      	mov	r0, r3
    1138:	68fb      	ldr	r3, [r7, #12]
    113a:	68db      	ldr	r3, [r3, #12]
    113c:	4619      	mov	r1, r3
    113e:	68fb      	ldr	r3, [r7, #12]
    1140:	681b      	ldr	r3, [r3, #0]
    1142:	009a      	lsls	r2, r3, #2
    1144:	2300      	movs	r3, #0
    1146:	9300      	str	r3, [sp, #0]
    1148:	2304      	movs	r3, #4
    114a:	f7ff fa75 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), set, (*this).gpio, 1, RW);
    114e:	68fb      	ldr	r3, [r7, #12]
    1150:	691b      	ldr	r3, [r3, #16]
    1152:	f203 531c 	addw	r3, r3, #1308	; 0x51c
    1156:	4618      	mov	r0, r3
    1158:	68fb      	ldr	r3, [r7, #12]
    115a:	681a      	ldr	r2, [r3, #0]
    115c:	2300      	movs	r3, #0
    115e:	9300      	str	r3, [sp, #0]
    1160:	2301      	movs	r3, #1
    1162:	2101      	movs	r1, #1
    1164:	f7ff fa68 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), clear, (*this).gpio, 1, RW);
    1168:	68fb      	ldr	r3, [r7, #12]
    116a:	691b      	ldr	r3, [r3, #16]
    116c:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    1170:	4618      	mov	r0, r3
    1172:	68fb      	ldr	r3, [r7, #12]
    1174:	681a      	ldr	r2, [r3, #0]
    1176:	2300      	movs	r3, #0
    1178:	9300      	str	r3, [sp, #0]
    117a:	2301      	movs	r3, #1
    117c:	2100      	movs	r1, #0
    117e:	f7ff fa5b 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    1182:	bf00      	nop
    1184:	3710      	adds	r7, #16
    1186:	46bd      	mov	sp, r7
    1188:	bd80      	pop	{r7, pc}
    118a:	bf00      	nop
    118c:	51eb851f 	.word	0x51eb851f
    1190:	400fe608 	.word	0x400fe608
    1194:	400fea08 	.word	0x400fea08
    1198:	4c4f434b 	.word	0x4c4f434b

0000119c <_ZN4Gpio10initializeEm9directionm>:
 * @param dir of the gpio, to be an output or input.
 * @param interruptPriority of the gpio, 0 being the highest priority and 7
 *        being the lowest.
 */
void Gpio::initialize(uint32_t gpio, direction dir, uint32_t interruptPriority)
{
    119c:	b580      	push	{r7, lr}
    119e:	b086      	sub	sp, #24
    11a0:	af02      	add	r7, sp, #8
    11a2:	60f8      	str	r0, [r7, #12]
    11a4:	60b9      	str	r1, [r7, #8]
    11a6:	603b      	str	r3, [r7, #0]
    11a8:	4613      	mov	r3, r2
    11aa:	71fb      	strb	r3, [r7, #7]
    (*this).interruptPriority = interruptPriority;
    11ac:	68fb      	ldr	r3, [r7, #12]
    11ae:	683a      	ldr	r2, [r7, #0]
    11b0:	609a      	str	r2, [r3, #8]
    
    initialize(gpio, dir);
    11b2:	79fb      	ldrb	r3, [r7, #7]
    11b4:	461a      	mov	r2, r3
    11b6:	68b9      	ldr	r1, [r7, #8]
    11b8:	68f8      	ldr	r0, [r7, #12]
    11ba:	f7ff fed5 	bl	f68 <_ZN4Gpio10initializeEm9direction>
    
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIM_OFFSET)), clear, (*this).gpio, 1, RW);
    11be:	68fb      	ldr	r3, [r7, #12]
    11c0:	691b      	ldr	r3, [r3, #16]
    11c2:	f503 6382 	add.w	r3, r3, #1040	; 0x410
    11c6:	4618      	mov	r0, r3
    11c8:	68fb      	ldr	r3, [r7, #12]
    11ca:	681a      	ldr	r2, [r3, #0]
    11cc:	2300      	movs	r3, #0
    11ce:	9300      	str	r3, [sp, #0]
    11d0:	2301      	movs	r3, #1
    11d2:	2100      	movs	r1, #0
    11d4:	f7ff fa30 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIS_OFFSET)), clear, (*this).gpio, 1, RW);
    11d8:	68fb      	ldr	r3, [r7, #12]
    11da:	691b      	ldr	r3, [r3, #16]
    11dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
    11e0:	4618      	mov	r0, r3
    11e2:	68fb      	ldr	r3, [r7, #12]
    11e4:	681a      	ldr	r2, [r3, #0]
    11e6:	2300      	movs	r3, #0
    11e8:	9300      	str	r3, [sp, #0]
    11ea:	2301      	movs	r3, #1
    11ec:	2100      	movs	r1, #0
    11ee:	f7ff fa23 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIBE_OFFSET)), set, (*this).gpio, 1, RW);
    11f2:	68fb      	ldr	r3, [r7, #12]
    11f4:	691b      	ldr	r3, [r3, #16]
    11f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
    11fa:	4618      	mov	r0, r3
    11fc:	68fb      	ldr	r3, [r7, #12]
    11fe:	681a      	ldr	r2, [r3, #0]
    1200:	2300      	movs	r3, #0
    1202:	9300      	str	r3, [sp, #0]
    1204:	2301      	movs	r3, #1
    1206:	2101      	movs	r1, #1
    1208:	f7ff fa16 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOICR_OFFSET)), set, (*this).gpio, 1, RW);
    120c:	68fb      	ldr	r3, [r7, #12]
    120e:	691b      	ldr	r3, [r3, #16]
    1210:	f203 431c 	addw	r3, r3, #1052	; 0x41c
    1214:	4618      	mov	r0, r3
    1216:	68fb      	ldr	r3, [r7, #12]
    1218:	681a      	ldr	r2, [r3, #0]
    121a:	2300      	movs	r3, #0
    121c:	9300      	str	r3, [sp, #0]
    121e:	2301      	movs	r3, #1
    1220:	2101      	movs	r1, #1
    1222:	f7ff fa09 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIM_OFFSET)), set, (*this).gpio, 1, RW);
    1226:	68fb      	ldr	r3, [r7, #12]
    1228:	691b      	ldr	r3, [r3, #16]
    122a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
    122e:	4618      	mov	r0, r3
    1230:	68fb      	ldr	r3, [r7, #12]
    1232:	681a      	ldr	r2, [r3, #0]
    1234:	2300      	movs	r3, #0
    1236:	9300      	str	r3, [sp, #0]
    1238:	2301      	movs	r3, #1
    123a:	2101      	movs	r1, #1
    123c:	f7ff f9fc 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    /*
    * If gpio is == to Port F (Port number 5) use interrupt number 30 
    * (according to interrupt table), else use interrupt number 0 -> 4 
    * (corresponding to interrupt Port A through Port E)
    */
    Nvic::activateInterrupt((interrupt)((((gpioPort) == 5) ? 30 : (gpioPort))), (*this).interruptPriority);
    1240:	68fb      	ldr	r3, [r7, #12]
    1242:	695b      	ldr	r3, [r3, #20]
    1244:	2b05      	cmp	r3, #5
    1246:	d003      	beq.n	1250 <_ZN4Gpio10initializeEm9directionm+0xb4>
    1248:	68fb      	ldr	r3, [r7, #12]
    124a:	695b      	ldr	r3, [r3, #20]
    124c:	b2db      	uxtb	r3, r3
    124e:	e000      	b.n	1252 <_ZN4Gpio10initializeEm9directionm+0xb6>
    1250:	231e      	movs	r3, #30
    1252:	68fa      	ldr	r2, [r7, #12]
    1254:	6892      	ldr	r2, [r2, #8]
    1256:	4611      	mov	r1, r2
    1258:	4618      	mov	r0, r3
    125a:	f7ff faab 	bl	7b4 <_ZN4Nvic17activateInterruptE9interruptm>
}
    125e:	bf00      	nop
    1260:	3710      	adds	r7, #16
    1262:	46bd      	mov	sp, r7
    1264:	bd80      	pop	{r7, pc}

00001266 <_ZN4Gpio14interruptClearEv>:

/**
 * @brief Clears the interrupt. Generally used in an ISR.
 */
void Gpio::interruptClear()
{
    1266:	b580      	push	{r7, lr}
    1268:	b084      	sub	sp, #16
    126a:	af02      	add	r7, sp, #8
    126c:	6078      	str	r0, [r7, #4]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOICR_OFFSET)), set, gpio, 1, RW);
    126e:	687b      	ldr	r3, [r7, #4]
    1270:	691b      	ldr	r3, [r3, #16]
    1272:	f203 431c 	addw	r3, r3, #1052	; 0x41c
    1276:	4618      	mov	r0, r3
    1278:	687b      	ldr	r3, [r7, #4]
    127a:	681a      	ldr	r2, [r3, #0]
    127c:	2300      	movs	r3, #0
    127e:	9300      	str	r3, [sp, #0]
    1280:	2301      	movs	r3, #1
    1282:	2101      	movs	r1, #1
    1284:	f7ff f9d8 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    1288:	bf00      	nop
    128a:	3708      	adds	r7, #8
    128c:	46bd      	mov	sp, r7
    128e:	bd80      	pop	{r7, pc}

00001290 <_ZN4Gpio5writeE10setORClear>:
/**
 * @brief Writes to the gpio pin.
 * @param value to write to pin. Accepted values are 1 or 0.
 */
void Gpio::write(setORClear value)
{
    1290:	b580      	push	{r7, lr}
    1292:	b084      	sub	sp, #16
    1294:	af02      	add	r7, sp, #8
    1296:	6078      	str	r0, [r7, #4]
    1298:	460b      	mov	r3, r1
    129a:	70fb      	strb	r3, [r7, #3]
    if((value == 0x0) || (value == 0x1))
    129c:	78fb      	ldrb	r3, [r7, #3]
    129e:	2b00      	cmp	r3, #0
    12a0:	d002      	beq.n	12a8 <_ZN4Gpio5writeE10setORClear+0x18>
    12a2:	78fb      	ldrb	r3, [r7, #3]
    12a4:	2b01      	cmp	r3, #1
    12a6:	d10c      	bne.n	12c2 <_ZN4Gpio5writeE10setORClear+0x32>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODATA_OFFSET)), value, gpio, 1, RW);
    12a8:	687b      	ldr	r3, [r7, #4]
    12aa:	691b      	ldr	r3, [r3, #16]
    12ac:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
    12b0:	4618      	mov	r0, r3
    12b2:	78f9      	ldrb	r1, [r7, #3]
    12b4:	687b      	ldr	r3, [r7, #4]
    12b6:	681a      	ldr	r2, [r3, #0]
    12b8:	2300      	movs	r3, #0
    12ba:	9300      	str	r3, [sp, #0]
    12bc:	2301      	movs	r3, #1
    12be:	f7ff f9bb 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    }
}
    12c2:	bf00      	nop
    12c4:	3708      	adds	r7, #8
    12c6:	46bd      	mov	sp, r7
    12c8:	bd80      	pop	{r7, pc}

000012ca <_ZN4Gpio4readEv>:
/**
 * @brief Reads from a gpio pin.
 * @return Value of the gpio pin, either a 1 or 0.
 */
uint32_t Gpio::read()
{
    12ca:	b580      	push	{r7, lr}
    12cc:	b082      	sub	sp, #8
    12ce:	af00      	add	r7, sp, #0
    12d0:	6078      	str	r0, [r7, #4]
    return((Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODATA_OFFSET)), gpio, 1, RW)));
    12d2:	687b      	ldr	r3, [r7, #4]
    12d4:	691b      	ldr	r3, [r3, #16]
    12d6:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
    12da:	4618      	mov	r0, r3
    12dc:	687b      	ldr	r3, [r7, #4]
    12de:	6819      	ldr	r1, [r3, #0]
    12e0:	2300      	movs	r3, #0
    12e2:	2201      	movs	r2, #1
    12e4:	f7ff f97e 	bl	5e4 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    12e8:	4603      	mov	r3, r0
    12ea:	4618      	mov	r0, r3
    12ec:	3708      	adds	r7, #8
    12ee:	46bd      	mov	sp, r7
    12f0:	bd80      	pop	{r7, pc}
    12f2:	bf00      	nop

000012f4 <_ZN3PwmC1Ev>:
#include "pwm.h"

/**
 * @brief empty constructor placeholder
 */
Pwm::Pwm()
    12f4:	b480      	push	{r7}
    12f6:	b083      	sub	sp, #12
    12f8:	af00      	add	r7, sp, #0
    12fa:	6078      	str	r0, [r7, #4]
{

}
    12fc:	687b      	ldr	r3, [r7, #4]
    12fe:	4618      	mov	r0, r3
    1300:	370c      	adds	r7, #12
    1302:	46bd      	mov	sp, r7
    1304:	f85d 7b04 	ldr.w	r7, [sp], #4
    1308:	4770      	bx	lr

0000130a <_ZN3PwmD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Pwm::~Pwm()
    130a:	b480      	push	{r7}
    130c:	b083      	sub	sp, #12
    130e:	af00      	add	r7, sp, #0
    1310:	6078      	str	r0, [r7, #4]
{

}
    1312:	687b      	ldr	r3, [r7, #4]
    1314:	4618      	mov	r0, r3
    1316:	370c      	adds	r7, #12
    1318:	46bd      	mov	sp, r7
    131a:	f85d 7b04 	ldr.w	r7, [sp], #4
    131e:	4770      	bx	lr

00001320 <_ZN3Pwm16initializeSingleEm9pwmModulemmm17countDirectionPwmmbm>:
 *                     peripheral
 * @param divisor Binary divisor used to pre-divide the system clock. Must be
 *                enabled with the \c enablePwmDiv first.
 */
void Pwm::initializeSingle(uint32_t pwmPin, pwmModule module, uint32_t period, uint32_t compA, uint32_t compB, countDirectionPwm countDir, uint32_t genOptions, bool enablePwmDiv, uint32_t divisor)
{
    1320:	b580      	push	{r7, lr}
    1322:	b086      	sub	sp, #24
    1324:	af02      	add	r7, sp, #8
    1326:	60f8      	str	r0, [r7, #12]
    1328:	60b9      	str	r1, [r7, #8]
    132a:	603b      	str	r3, [r7, #0]
    132c:	4613      	mov	r3, r2
    132e:	71fb      	strb	r3, [r7, #7]
    myPwmGen = pwmPin/2;
    1330:	68bb      	ldr	r3, [r7, #8]
    1332:	085a      	lsrs	r2, r3, #1
    1334:	68fb      	ldr	r3, [r7, #12]
    1336:	605a      	str	r2, [r3, #4]
    
    initialize(module, period, countDir, enablePwmDiv, divisor);
    1338:	79f9      	ldrb	r1, [r7, #7]
    133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    133c:	9301      	str	r3, [sp, #4]
    133e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1342:	9300      	str	r3, [sp, #0]
    1344:	6a3b      	ldr	r3, [r7, #32]
    1346:	683a      	ldr	r2, [r7, #0]
    1348:	68f8      	ldr	r0, [r7, #12]
    134a:	f000 f8c5 	bl	14d8 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>
    
    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.
    
    //2b. Write the PWMnGENn register. 
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENA_OFFSET + (0x40 * myPwmGen) + ((pwmPin%2) * 4))), genOptions, 0, 11+1, RW);
    134e:	68fb      	ldr	r3, [r7, #12]
    1350:	681a      	ldr	r2, [r3, #0]
    1352:	68fb      	ldr	r3, [r7, #12]
    1354:	685b      	ldr	r3, [r3, #4]
    1356:	0119      	lsls	r1, r3, #4
    1358:	68bb      	ldr	r3, [r7, #8]
    135a:	f003 0301 	and.w	r3, r3, #1
    135e:	440b      	add	r3, r1
    1360:	3318      	adds	r3, #24
    1362:	009b      	lsls	r3, r3, #2
    1364:	4413      	add	r3, r2
    1366:	4618      	mov	r0, r3
    1368:	2300      	movs	r3, #0
    136a:	9300      	str	r3, [sp, #0]
    136c:	230c      	movs	r3, #12
    136e:	2200      	movs	r2, #0
    1370:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1372:	f7ff f961 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //4. Set counter comparators
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPA_OFFSET + (0x40 * myPwmGen))), compA, 0, 15+1, RW);
    1376:	68fb      	ldr	r3, [r7, #12]
    1378:	681a      	ldr	r2, [r3, #0]
    137a:	68fb      	ldr	r3, [r7, #12]
    137c:	685b      	ldr	r3, [r3, #4]
    137e:	019b      	lsls	r3, r3, #6
    1380:	4413      	add	r3, r2
    1382:	3358      	adds	r3, #88	; 0x58
    1384:	4618      	mov	r0, r3
    1386:	2300      	movs	r3, #0
    1388:	9300      	str	r3, [sp, #0]
    138a:	2310      	movs	r3, #16
    138c:	2200      	movs	r2, #0
    138e:	69b9      	ldr	r1, [r7, #24]
    1390:	f7ff f952 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPB_OFFSET + (0x40 * myPwmGen))), compB, 0, 15+1, RW);
    1394:	68fb      	ldr	r3, [r7, #12]
    1396:	681a      	ldr	r2, [r3, #0]
    1398:	68fb      	ldr	r3, [r7, #12]
    139a:	685b      	ldr	r3, [r3, #4]
    139c:	019b      	lsls	r3, r3, #6
    139e:	4413      	add	r3, r2
    13a0:	335c      	adds	r3, #92	; 0x5c
    13a2:	4618      	mov	r0, r3
    13a4:	2300      	movs	r3, #0
    13a6:	9300      	str	r3, [sp, #0]
    13a8:	2310      	movs	r3, #16
    13aa:	2200      	movs	r2, #0
    13ac:	69f9      	ldr	r1, [r7, #28]
    13ae:	f7ff f943 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //6. Enable PWM
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), set, 0, 1, RW);
    13b2:	68fb      	ldr	r3, [r7, #12]
    13b4:	681a      	ldr	r2, [r3, #0]
    13b6:	68fb      	ldr	r3, [r7, #12]
    13b8:	685b      	ldr	r3, [r3, #4]
    13ba:	3301      	adds	r3, #1
    13bc:	019b      	lsls	r3, r3, #6
    13be:	4413      	add	r3, r2
    13c0:	4618      	mov	r0, r3
    13c2:	2300      	movs	r3, #0
    13c4:	9300      	str	r3, [sp, #0]
    13c6:	2301      	movs	r3, #1
    13c8:	2200      	movs	r2, #0
    13ca:	2101      	movs	r1, #1
    13cc:	f7ff f934 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //7. Enable PWM output.
    // Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + PWMENABLE_OFFSET), set, 0 + ((myPwmGen*2)+(((pwmPin%2) * 4)/4)), 1, RW); //(uint32_t)output >> 2
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + PWMENABLE_OFFSET), set, pwmPin, 1, RW); //(uint32_t)output >> 2
    13d0:	68fb      	ldr	r3, [r7, #12]
    13d2:	681b      	ldr	r3, [r3, #0]
    13d4:	3308      	adds	r3, #8
    13d6:	4618      	mov	r0, r3
    13d8:	2300      	movs	r3, #0
    13da:	9300      	str	r3, [sp, #0]
    13dc:	2301      	movs	r3, #1
    13de:	68ba      	ldr	r2, [r7, #8]
    13e0:	2101      	movs	r1, #1
    13e2:	f7ff f929 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

}
    13e6:	bf00      	nop
    13e8:	3710      	adds	r7, #16
    13ea:	46bd      	mov	sp, r7
    13ec:	bd80      	pop	{r7, pc}

000013ee <_ZN3Pwm14initializePairEm9pwmModulemmm17countDirectionPwmmmbm>:
 * @param divisor Binary divisor used to pre-divide the system clock. Must be
 *                enabled with the \c enablePwmDiv first.
 */

void Pwm::initializePair(uint32_t pwmPin, pwmModule module, uint32_t period, uint32_t compA, uint32_t compB, countDirectionPwm countDir, uint32_t genOptionsA, uint32_t genOptionsB, bool enablePwmDiv, uint32_t divisor)
{
    13ee:	b580      	push	{r7, lr}
    13f0:	b086      	sub	sp, #24
    13f2:	af02      	add	r7, sp, #8
    13f4:	60f8      	str	r0, [r7, #12]
    13f6:	60b9      	str	r1, [r7, #8]
    13f8:	603b      	str	r3, [r7, #0]
    13fa:	4613      	mov	r3, r2
    13fc:	71fb      	strb	r3, [r7, #7]
    myPwmGen = pwmPin/2;
    13fe:	68bb      	ldr	r3, [r7, #8]
    1400:	085a      	lsrs	r2, r3, #1
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	605a      	str	r2, [r3, #4]

    initialize(module, period, countDir, enablePwmDiv, divisor);
    1406:	79f9      	ldrb	r1, [r7, #7]
    1408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    140a:	9301      	str	r3, [sp, #4]
    140c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1410:	9300      	str	r3, [sp, #0]
    1412:	6a3b      	ldr	r3, [r7, #32]
    1414:	683a      	ldr	r2, [r7, #0]
    1416:	68f8      	ldr	r0, [r7, #12]
    1418:	f000 f85e 	bl	14d8 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>
    
    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.
    
    //2b. Write the PWMnGENA register.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENA_OFFSET + (0x40 * myPwmGen))), genOptionsA, 0, 11+1, RW);
    141c:	68fb      	ldr	r3, [r7, #12]
    141e:	681a      	ldr	r2, [r3, #0]
    1420:	68fb      	ldr	r3, [r7, #12]
    1422:	685b      	ldr	r3, [r3, #4]
    1424:	019b      	lsls	r3, r3, #6
    1426:	4413      	add	r3, r2
    1428:	3360      	adds	r3, #96	; 0x60
    142a:	4618      	mov	r0, r3
    142c:	2300      	movs	r3, #0
    142e:	9300      	str	r3, [sp, #0]
    1430:	230c      	movs	r3, #12
    1432:	2200      	movs	r2, #0
    1434:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1436:	f7ff f8ff 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //2c. Write the PWMnGENB register.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENB_OFFSET + (0x40 * myPwmGen))), genOptionsB, 0, 11+1, RW);
    143a:	68fb      	ldr	r3, [r7, #12]
    143c:	681a      	ldr	r2, [r3, #0]
    143e:	68fb      	ldr	r3, [r7, #12]
    1440:	685b      	ldr	r3, [r3, #4]
    1442:	019b      	lsls	r3, r3, #6
    1444:	4413      	add	r3, r2
    1446:	3364      	adds	r3, #100	; 0x64
    1448:	4618      	mov	r0, r3
    144a:	2300      	movs	r3, #0
    144c:	9300      	str	r3, [sp, #0]
    144e:	230c      	movs	r3, #12
    1450:	2200      	movs	r2, #0
    1452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    1454:	f7ff f8f0 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //4. Set counter comparator for pwmA
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPA_OFFSET + (0x40 * myPwmGen))), compA, 0, 15+1, RW);
    1458:	68fb      	ldr	r3, [r7, #12]
    145a:	681a      	ldr	r2, [r3, #0]
    145c:	68fb      	ldr	r3, [r7, #12]
    145e:	685b      	ldr	r3, [r3, #4]
    1460:	019b      	lsls	r3, r3, #6
    1462:	4413      	add	r3, r2
    1464:	3358      	adds	r3, #88	; 0x58
    1466:	4618      	mov	r0, r3
    1468:	2300      	movs	r3, #0
    146a:	9300      	str	r3, [sp, #0]
    146c:	2310      	movs	r3, #16
    146e:	2200      	movs	r2, #0
    1470:	69b9      	ldr	r1, [r7, #24]
    1472:	f7ff f8e1 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //5. Set counter comparator for pwmB
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPB_OFFSET + (0x40 * myPwmGen))), compB, 0, 15+1, RW);
    1476:	68fb      	ldr	r3, [r7, #12]
    1478:	681a      	ldr	r2, [r3, #0]
    147a:	68fb      	ldr	r3, [r7, #12]
    147c:	685b      	ldr	r3, [r3, #4]
    147e:	019b      	lsls	r3, r3, #6
    1480:	4413      	add	r3, r2
    1482:	335c      	adds	r3, #92	; 0x5c
    1484:	4618      	mov	r0, r3
    1486:	2300      	movs	r3, #0
    1488:	9300      	str	r3, [sp, #0]
    148a:	2310      	movs	r3, #16
    148c:	2200      	movs	r2, #0
    148e:	69f9      	ldr	r1, [r7, #28]
    1490:	f7ff f8d2 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //6. Enable PWM
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), set, 0, 1, RW);
    1494:	68fb      	ldr	r3, [r7, #12]
    1496:	681a      	ldr	r2, [r3, #0]
    1498:	68fb      	ldr	r3, [r7, #12]
    149a:	685b      	ldr	r3, [r3, #4]
    149c:	3301      	adds	r3, #1
    149e:	019b      	lsls	r3, r3, #6
    14a0:	4413      	add	r3, r2
    14a2:	4618      	mov	r0, r3
    14a4:	2300      	movs	r3, #0
    14a6:	9300      	str	r3, [sp, #0]
    14a8:	2301      	movs	r3, #1
    14aa:	2200      	movs	r2, #0
    14ac:	2101      	movs	r1, #1
    14ae:	f7ff f8c3 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //7. Enable PWM output.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWMENABLE_OFFSET + (0x40 * myPwmGen))), 0x3, pwmPin, 2, RW); 
    14b2:	68fb      	ldr	r3, [r7, #12]
    14b4:	681a      	ldr	r2, [r3, #0]
    14b6:	68fb      	ldr	r3, [r7, #12]
    14b8:	685b      	ldr	r3, [r3, #4]
    14ba:	019b      	lsls	r3, r3, #6
    14bc:	4413      	add	r3, r2
    14be:	3308      	adds	r3, #8
    14c0:	4618      	mov	r0, r3
    14c2:	2300      	movs	r3, #0
    14c4:	9300      	str	r3, [sp, #0]
    14c6:	2302      	movs	r3, #2
    14c8:	68ba      	ldr	r2, [r7, #8]
    14ca:	2103      	movs	r1, #3
    14cc:	f7ff f8b4 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    14d0:	bf00      	nop
    14d2:	3710      	adds	r7, #16
    14d4:	46bd      	mov	sp, r7
    14d6:	bd80      	pop	{r7, pc}

000014d8 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>:
 * @param enablePwmDiv Enables the PWM peripheral clock pre-divider
 * @param divisor The value of the PWM clock pre-divider chosen by enum
 *                pwmUnitClockDivisor.       
 */
void Pwm::initialize(pwmModule module, uint32_t period, countDirectionPwm countDir, bool enablePwmDiv, uint32_t divisor)
{    
    14d8:	b580      	push	{r7, lr}
    14da:	b088      	sub	sp, #32
    14dc:	af02      	add	r7, sp, #8
    14de:	60f8      	str	r0, [r7, #12]
    14e0:	607a      	str	r2, [r7, #4]
    14e2:	603b      	str	r3, [r7, #0]
    14e4:	460b      	mov	r3, r1
    14e6:	72fb      	strb	r3, [r7, #11]
    baseAddress = pwm0BaseAddress + (module * 0x1000);
    14e8:	7afb      	ldrb	r3, [r7, #11]
    14ea:	031b      	lsls	r3, r3, #12
    14ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    14f0:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
    14f4:	68fa      	ldr	r2, [r7, #12]
    14f6:	6013      	str	r3, [r2, #0]
    
    //0. Enable the clock for PWM
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCPWM_OFFSET)), set, module, 1, RW);
    14f8:	7afa      	ldrb	r2, [r7, #11]
    14fa:	2300      	movs	r3, #0
    14fc:	9300      	str	r3, [sp, #0]
    14fe:	2301      	movs	r3, #1
    1500:	2101      	movs	r1, #1
    1502:	4847      	ldr	r0, [pc, #284]	; (1620 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x148>)
    1504:	f7ff f898 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRPWM_OFFSET), module, 1, RO) == 0)
    1508:	7af9      	ldrb	r1, [r7, #11]
    150a:	2301      	movs	r3, #1
    150c:	2201      	movs	r2, #1
    150e:	4845      	ldr	r0, [pc, #276]	; (1624 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x14c>)
    1510:	f7ff f868 	bl	5e4 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    1514:	4603      	mov	r3, r0
    1516:	2b00      	cmp	r3, #0
    1518:	bf0c      	ite	eq
    151a:	2301      	moveq	r3, #1
    151c:	2300      	movne	r3, #0
    151e:	b2db      	uxtb	r3, r3
    1520:	2b00      	cmp	r3, #0
    1522:	d000      	beq.n	1526 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x4e>
    1524:	e7f0      	b.n	1508 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x30>
        //Ready??
    }

    // Clear count register by reseting PWM

    Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + SRPWM_OFFSET), set, module, 1, RW);
    1526:	7afa      	ldrb	r2, [r7, #11]
    1528:	2300      	movs	r3, #0
    152a:	9300      	str	r3, [sp, #0]
    152c:	2301      	movs	r3, #1
    152e:	2101      	movs	r1, #1
    1530:	483d      	ldr	r0, [pc, #244]	; (1628 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x150>)
    1532:	f7ff f881 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    for(uint32_t i = 0; i < 100; i++)
    1536:	2300      	movs	r3, #0
    1538:	617b      	str	r3, [r7, #20]
    153a:	697b      	ldr	r3, [r7, #20]
    153c:	2b63      	cmp	r3, #99	; 0x63
    153e:	d803      	bhi.n	1548 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x70>
    1540:	697b      	ldr	r3, [r7, #20]
    1542:	3301      	adds	r3, #1
    1544:	617b      	str	r3, [r7, #20]
    1546:	e7f8      	b.n	153a <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x62>
    {
        //wait
    }

    Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + SRPWM_OFFSET), clear, module, 1, RW);
    1548:	7afa      	ldrb	r2, [r7, #11]
    154a:	2300      	movs	r3, #0
    154c:	9300      	str	r3, [sp, #0]
    154e:	2301      	movs	r3, #1
    1550:	2100      	movs	r1, #0
    1552:	4835      	ldr	r0, [pc, #212]	; (1628 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x150>)
    1554:	f7ff f870 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRPWM_OFFSET), module, 1, RO) == 0)
    1558:	7af9      	ldrb	r1, [r7, #11]
    155a:	2301      	movs	r3, #1
    155c:	2201      	movs	r2, #1
    155e:	4831      	ldr	r0, [pc, #196]	; (1624 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x14c>)
    1560:	f7ff f840 	bl	5e4 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    1564:	4603      	mov	r3, r0
    1566:	2b00      	cmp	r3, #0
    1568:	bf0c      	ite	eq
    156a:	2301      	moveq	r3, #1
    156c:	2300      	movne	r3, #0
    156e:	b2db      	uxtb	r3, r3
    1570:	2b00      	cmp	r3, #0
    1572:	d000      	beq.n	1576 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x9e>
    1574:	e7f0      	b.n	1558 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x80>
    {
        //Ready??
    }

    if(enablePwmDiv == true)
    1576:	f897 3020 	ldrb.w	r3, [r7, #32]
    157a:	2b01      	cmp	r3, #1
    157c:	d10f      	bne.n	159e <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0xc6>
    {
        //1a. Configure the Run-Mode Clock Configuration (RCC) register in the System Control module to use the PWM divide (USEPWMDIV).
        Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + RCC_OFFSET), set, 20, 1, RW);
    157e:	2300      	movs	r3, #0
    1580:	9300      	str	r3, [sp, #0]
    1582:	2301      	movs	r3, #1
    1584:	2214      	movs	r2, #20
    1586:	2101      	movs	r1, #1
    1588:	4828      	ldr	r0, [pc, #160]	; (162c <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x154>)
    158a:	f7ff f855 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        //1b. Set the divider (PWMDIV).
        Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + RCC_OFFSET), divisor, 17, (19-17)+1, RW);
    158e:	2300      	movs	r3, #0
    1590:	9300      	str	r3, [sp, #0]
    1592:	2303      	movs	r3, #3
    1594:	2211      	movs	r2, #17
    1596:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1598:	4824      	ldr	r0, [pc, #144]	; (162c <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x154>)
    159a:	f7ff f84d 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    }

    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.

    //2a. Write the PWMnCTL register with a value of 0x0000.0000 to clear it.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), clear, 0, 1, RW);
    159e:	68fb      	ldr	r3, [r7, #12]
    15a0:	681a      	ldr	r2, [r3, #0]
    15a2:	68fb      	ldr	r3, [r7, #12]
    15a4:	685b      	ldr	r3, [r3, #4]
    15a6:	3301      	adds	r3, #1
    15a8:	019b      	lsls	r3, r3, #6
    15aa:	4413      	add	r3, r2
    15ac:	4618      	mov	r0, r3
    15ae:	2300      	movs	r3, #0
    15b0:	9300      	str	r3, [sp, #0]
    15b2:	2301      	movs	r3, #1
    15b4:	2200      	movs	r2, #0
    15b6:	2100      	movs	r1, #0
    15b8:	f7ff f83e 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), set, 2, 1, RW);
    15bc:	68fb      	ldr	r3, [r7, #12]
    15be:	681a      	ldr	r2, [r3, #0]
    15c0:	68fb      	ldr	r3, [r7, #12]
    15c2:	685b      	ldr	r3, [r3, #4]
    15c4:	3301      	adds	r3, #1
    15c6:	019b      	lsls	r3, r3, #6
    15c8:	4413      	add	r3, r2
    15ca:	4618      	mov	r0, r3
    15cc:	2300      	movs	r3, #0
    15ce:	9300      	str	r3, [sp, #0]
    15d0:	2301      	movs	r3, #1
    15d2:	2202      	movs	r2, #2
    15d4:	2101      	movs	r1, #1
    15d6:	f7ff f82f 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //Set count direction
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)countDir, 3, 1, RW);
    15da:	68fb      	ldr	r3, [r7, #12]
    15dc:	681a      	ldr	r2, [r3, #0]
    15de:	68fb      	ldr	r3, [r7, #12]
    15e0:	685b      	ldr	r3, [r3, #4]
    15e2:	3301      	adds	r3, #1
    15e4:	019b      	lsls	r3, r3, #6
    15e6:	4413      	add	r3, r2
    15e8:	4618      	mov	r0, r3
    15ea:	6839      	ldr	r1, [r7, #0]
    15ec:	2300      	movs	r3, #0
    15ee:	9300      	str	r3, [sp, #0]
    15f0:	2301      	movs	r3, #1
    15f2:	2203      	movs	r2, #3
    15f4:	f7ff f820 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //3. Set the period
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0LOAD_OFFSET + (0x40 * myPwmGen))), period, 0, 15+1, RW);
    15f8:	68fb      	ldr	r3, [r7, #12]
    15fa:	681a      	ldr	r2, [r3, #0]
    15fc:	68fb      	ldr	r3, [r7, #12]
    15fe:	685b      	ldr	r3, [r3, #4]
    1600:	019b      	lsls	r3, r3, #6
    1602:	4413      	add	r3, r2
    1604:	3350      	adds	r3, #80	; 0x50
    1606:	4618      	mov	r0, r3
    1608:	2300      	movs	r3, #0
    160a:	9300      	str	r3, [sp, #0]
    160c:	2310      	movs	r3, #16
    160e:	2200      	movs	r2, #0
    1610:	6879      	ldr	r1, [r7, #4]
    1612:	f7ff f811 	bl	638 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    1616:	bf00      	nop
    1618:	3718      	adds	r7, #24
    161a:	46bd      	mov	sp, r7
    161c:	bd80      	pop	{r7, pc}
    161e:	bf00      	nop
    1620:	400fe640 	.word	0x400fe640
    1624:	400fea40 	.word	0x400fea40
    1628:	400fe540 	.word	0x400fe540
    162c:	400fe060 	.word	0x400fe060

00001630 <__aeabi_atexit>:
    1630:	460b      	mov	r3, r1
    1632:	4601      	mov	r1, r0
    1634:	4618      	mov	r0, r3
    1636:	f000 bf5b 	b.w	24f0 <__cxa_atexit>
	...

0000163c <selfrel_offset31>:
    163c:	6803      	ldr	r3, [r0, #0]
    163e:	005a      	lsls	r2, r3, #1
    1640:	bf4c      	ite	mi
    1642:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    1646:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    164a:	4418      	add	r0, r3
    164c:	4770      	bx	lr
    164e:	bf00      	nop

00001650 <search_EIT_table>:
    1650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1654:	b329      	cbz	r1, 16a2 <search_EIT_table+0x52>
    1656:	1e4f      	subs	r7, r1, #1
    1658:	4604      	mov	r4, r0
    165a:	4615      	mov	r5, r2
    165c:	463e      	mov	r6, r7
    165e:	f04f 0800 	mov.w	r8, #0
    1662:	eb08 0106 	add.w	r1, r8, r6
    1666:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    166a:	1049      	asrs	r1, r1, #1
    166c:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
    1670:	4648      	mov	r0, r9
    1672:	f7ff ffe3 	bl	163c <selfrel_offset31>
    1676:	4603      	mov	r3, r0
    1678:	00c8      	lsls	r0, r1, #3
    167a:	3008      	adds	r0, #8
    167c:	428f      	cmp	r7, r1
    167e:	4420      	add	r0, r4
    1680:	d009      	beq.n	1696 <search_EIT_table+0x46>
    1682:	42ab      	cmp	r3, r5
    1684:	d809      	bhi.n	169a <search_EIT_table+0x4a>
    1686:	f7ff ffd9 	bl	163c <selfrel_offset31>
    168a:	3801      	subs	r0, #1
    168c:	42a8      	cmp	r0, r5
    168e:	d20a      	bcs.n	16a6 <search_EIT_table+0x56>
    1690:	f101 0801 	add.w	r8, r1, #1
    1694:	e7e5      	b.n	1662 <search_EIT_table+0x12>
    1696:	42ab      	cmp	r3, r5
    1698:	d905      	bls.n	16a6 <search_EIT_table+0x56>
    169a:	4588      	cmp	r8, r1
    169c:	d001      	beq.n	16a2 <search_EIT_table+0x52>
    169e:	1e4e      	subs	r6, r1, #1
    16a0:	e7df      	b.n	1662 <search_EIT_table+0x12>
    16a2:	f04f 0900 	mov.w	r9, #0
    16a6:	4648      	mov	r0, r9
    16a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000016ac <__gnu_unwind_get_pr_addr>:
    16ac:	2801      	cmp	r0, #1
    16ae:	d007      	beq.n	16c0 <__gnu_unwind_get_pr_addr+0x14>
    16b0:	2802      	cmp	r0, #2
    16b2:	d007      	beq.n	16c4 <__gnu_unwind_get_pr_addr+0x18>
    16b4:	4b04      	ldr	r3, [pc, #16]	; (16c8 <__gnu_unwind_get_pr_addr+0x1c>)
    16b6:	2800      	cmp	r0, #0
    16b8:	bf0c      	ite	eq
    16ba:	4618      	moveq	r0, r3
    16bc:	2000      	movne	r0, #0
    16be:	4770      	bx	lr
    16c0:	4802      	ldr	r0, [pc, #8]	; (16cc <__gnu_unwind_get_pr_addr+0x20>)
    16c2:	4770      	bx	lr
    16c4:	4802      	ldr	r0, [pc, #8]	; (16d0 <__gnu_unwind_get_pr_addr+0x24>)
    16c6:	4770      	bx	lr
    16c8:	00001d71 	.word	0x00001d71
    16cc:	00001d75 	.word	0x00001d75
    16d0:	00001d79 	.word	0x00001d79

000016d4 <get_eit_entry>:
    16d4:	b530      	push	{r4, r5, lr}
    16d6:	4b23      	ldr	r3, [pc, #140]	; (1764 <get_eit_entry+0x90>)
    16d8:	b083      	sub	sp, #12
    16da:	4604      	mov	r4, r0
    16dc:	1e8d      	subs	r5, r1, #2
    16de:	b33b      	cbz	r3, 1730 <get_eit_entry+0x5c>
    16e0:	a901      	add	r1, sp, #4
    16e2:	4628      	mov	r0, r5
    16e4:	f3af 8000 	nop.w
    16e8:	b1e8      	cbz	r0, 1726 <get_eit_entry+0x52>
    16ea:	9901      	ldr	r1, [sp, #4]
    16ec:	462a      	mov	r2, r5
    16ee:	f7ff ffaf 	bl	1650 <search_EIT_table>
    16f2:	4601      	mov	r1, r0
    16f4:	b1b8      	cbz	r0, 1726 <get_eit_entry+0x52>
    16f6:	f7ff ffa1 	bl	163c <selfrel_offset31>
    16fa:	684b      	ldr	r3, [r1, #4]
    16fc:	64a0      	str	r0, [r4, #72]	; 0x48
    16fe:	2b01      	cmp	r3, #1
    1700:	d02b      	beq.n	175a <get_eit_entry+0x86>
    1702:	2b00      	cmp	r3, #0
    1704:	f101 0004 	add.w	r0, r1, #4
    1708:	db23      	blt.n	1752 <get_eit_entry+0x7e>
    170a:	f7ff ff97 	bl	163c <selfrel_offset31>
    170e:	2300      	movs	r3, #0
    1710:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    1714:	6803      	ldr	r3, [r0, #0]
    1716:	2b00      	cmp	r3, #0
    1718:	db10      	blt.n	173c <get_eit_entry+0x68>
    171a:	f7ff ff8f 	bl	163c <selfrel_offset31>
    171e:	6120      	str	r0, [r4, #16]
    1720:	2000      	movs	r0, #0
    1722:	b003      	add	sp, #12
    1724:	bd30      	pop	{r4, r5, pc}
    1726:	2300      	movs	r3, #0
    1728:	2009      	movs	r0, #9
    172a:	6123      	str	r3, [r4, #16]
    172c:	b003      	add	sp, #12
    172e:	bd30      	pop	{r4, r5, pc}
    1730:	490d      	ldr	r1, [pc, #52]	; (1768 <get_eit_entry+0x94>)
    1732:	480e      	ldr	r0, [pc, #56]	; (176c <get_eit_entry+0x98>)
    1734:	1a09      	subs	r1, r1, r0
    1736:	10c9      	asrs	r1, r1, #3
    1738:	9101      	str	r1, [sp, #4]
    173a:	e7d7      	b.n	16ec <get_eit_entry+0x18>
    173c:	f3c3 6003 	ubfx	r0, r3, #24, #4
    1740:	f7ff ffb4 	bl	16ac <__gnu_unwind_get_pr_addr>
    1744:	2800      	cmp	r0, #0
    1746:	6120      	str	r0, [r4, #16]
    1748:	bf14      	ite	ne
    174a:	2000      	movne	r0, #0
    174c:	2009      	moveq	r0, #9
    174e:	b003      	add	sp, #12
    1750:	bd30      	pop	{r4, r5, pc}
    1752:	2301      	movs	r3, #1
    1754:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    1758:	e7dc      	b.n	1714 <get_eit_entry+0x40>
    175a:	2300      	movs	r3, #0
    175c:	6123      	str	r3, [r4, #16]
    175e:	2005      	movs	r0, #5
    1760:	e7df      	b.n	1722 <get_eit_entry+0x4e>
    1762:	bf00      	nop
    1764:	00000000 	.word	0x00000000
    1768:	00003510 	.word	0x00003510
    176c:	00003380 	.word	0x00003380

00001770 <restore_non_core_regs>:
    1770:	6803      	ldr	r3, [r0, #0]
    1772:	07da      	lsls	r2, r3, #31
    1774:	b510      	push	{r4, lr}
    1776:	4604      	mov	r4, r0
    1778:	d406      	bmi.n	1788 <restore_non_core_regs+0x18>
    177a:	079b      	lsls	r3, r3, #30
    177c:	f100 0048 	add.w	r0, r0, #72	; 0x48
    1780:	d509      	bpl.n	1796 <restore_non_core_regs+0x26>
    1782:	f000 fc4b 	bl	201c <__gnu_Unwind_Restore_VFP_D>
    1786:	6823      	ldr	r3, [r4, #0]
    1788:	0759      	lsls	r1, r3, #29
    178a:	d509      	bpl.n	17a0 <restore_non_core_regs+0x30>
    178c:	071a      	lsls	r2, r3, #28
    178e:	d50e      	bpl.n	17ae <restore_non_core_regs+0x3e>
    1790:	06db      	lsls	r3, r3, #27
    1792:	d513      	bpl.n	17bc <restore_non_core_regs+0x4c>
    1794:	bd10      	pop	{r4, pc}
    1796:	f000 fc39 	bl	200c <__gnu_Unwind_Restore_VFP>
    179a:	6823      	ldr	r3, [r4, #0]
    179c:	0759      	lsls	r1, r3, #29
    179e:	d4f5      	bmi.n	178c <restore_non_core_regs+0x1c>
    17a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    17a4:	f000 fc42 	bl	202c <__gnu_Unwind_Restore_VFP_D_16_to_31>
    17a8:	6823      	ldr	r3, [r4, #0]
    17aa:	071a      	lsls	r2, r3, #28
    17ac:	d4f0      	bmi.n	1790 <restore_non_core_regs+0x20>
    17ae:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    17b2:	f000 fc43 	bl	203c <__gnu_Unwind_Restore_WMMXD>
    17b6:	6823      	ldr	r3, [r4, #0]
    17b8:	06db      	lsls	r3, r3, #27
    17ba:	d4eb      	bmi.n	1794 <restore_non_core_regs+0x24>
    17bc:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    17c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    17c4:	f000 bc7e 	b.w	20c4 <__gnu_Unwind_Restore_WMMXC>

000017c8 <_Unwind_decode_typeinfo_ptr.isra.0>:
    17c8:	4603      	mov	r3, r0
    17ca:	6800      	ldr	r0, [r0, #0]
    17cc:	b100      	cbz	r0, 17d0 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
    17ce:	4418      	add	r0, r3
    17d0:	4770      	bx	lr
    17d2:	bf00      	nop

000017d4 <__gnu_unwind_24bit.isra.0>:
    17d4:	2009      	movs	r0, #9
    17d6:	4770      	bx	lr

000017d8 <_Unwind_DebugHook>:
    17d8:	4770      	bx	lr
    17da:	bf00      	nop

000017dc <unwind_phase2>:
    17dc:	b570      	push	{r4, r5, r6, lr}
    17de:	4604      	mov	r4, r0
    17e0:	460e      	mov	r6, r1
    17e2:	6c31      	ldr	r1, [r6, #64]	; 0x40
    17e4:	4620      	mov	r0, r4
    17e6:	f7ff ff75 	bl	16d4 <get_eit_entry>
    17ea:	4605      	mov	r5, r0
    17ec:	b988      	cbnz	r0, 1812 <unwind_phase2+0x36>
    17ee:	6c33      	ldr	r3, [r6, #64]	; 0x40
    17f0:	6163      	str	r3, [r4, #20]
    17f2:	4632      	mov	r2, r6
    17f4:	6923      	ldr	r3, [r4, #16]
    17f6:	4621      	mov	r1, r4
    17f8:	2001      	movs	r0, #1
    17fa:	4798      	blx	r3
    17fc:	2808      	cmp	r0, #8
    17fe:	d0f0      	beq.n	17e2 <unwind_phase2+0x6>
    1800:	2807      	cmp	r0, #7
    1802:	d106      	bne.n	1812 <unwind_phase2+0x36>
    1804:	4628      	mov	r0, r5
    1806:	6c31      	ldr	r1, [r6, #64]	; 0x40
    1808:	f7ff ffe6 	bl	17d8 <_Unwind_DebugHook>
    180c:	1d30      	adds	r0, r6, #4
    180e:	f000 fbf1 	bl	1ff4 <__restore_core_regs>
    1812:	f000 fe65 	bl	24e0 <abort>
    1816:	bf00      	nop

00001818 <unwind_phase2_forced>:
    1818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    181c:	1d0d      	adds	r5, r1, #4
    181e:	4606      	mov	r6, r0
    1820:	4614      	mov	r4, r2
    1822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1824:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    1828:	f10d 0c0c 	add.w	ip, sp, #12
    182c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1830:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1832:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1838:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    183c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1840:	ad02      	add	r5, sp, #8
    1842:	68f7      	ldr	r7, [r6, #12]
    1844:	f8d6 8018 	ldr.w	r8, [r6, #24]
    1848:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    184c:	2300      	movs	r3, #0
    184e:	602b      	str	r3, [r5, #0]
    1850:	e021      	b.n	1896 <unwind_phase2_forced+0x7e>
    1852:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    1854:	6173      	str	r3, [r6, #20]
    1856:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    185a:	4629      	mov	r1, r5
    185c:	a87a      	add	r0, sp, #488	; 0x1e8
    185e:	f000 fe65 	bl	252c <memcpy>
    1862:	6933      	ldr	r3, [r6, #16]
    1864:	aa7a      	add	r2, sp, #488	; 0x1e8
    1866:	4631      	mov	r1, r6
    1868:	4650      	mov	r0, sl
    186a:	4798      	blx	r3
    186c:	9b88      	ldr	r3, [sp, #544]	; 0x220
    186e:	e9cd 5800 	strd	r5, r8, [sp]
    1872:	4621      	mov	r1, r4
    1874:	646b      	str	r3, [r5, #68]	; 0x44
    1876:	4681      	mov	r9, r0
    1878:	4633      	mov	r3, r6
    187a:	4632      	mov	r2, r6
    187c:	2001      	movs	r0, #1
    187e:	47b8      	blx	r7
    1880:	4604      	mov	r4, r0
    1882:	b9e8      	cbnz	r0, 18c0 <unwind_phase2_forced+0xa8>
    1884:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    1888:	a97a      	add	r1, sp, #488	; 0x1e8
    188a:	4628      	mov	r0, r5
    188c:	f000 fe4e 	bl	252c <memcpy>
    1890:	f1b9 0f08 	cmp.w	r9, #8
    1894:	d11b      	bne.n	18ce <unwind_phase2_forced+0xb6>
    1896:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1898:	4630      	mov	r0, r6
    189a:	f7ff ff1b 	bl	16d4 <get_eit_entry>
    189e:	3409      	adds	r4, #9
    18a0:	fa5f fa84 	uxtb.w	sl, r4
    18a4:	4681      	mov	r9, r0
    18a6:	2800      	cmp	r0, #0
    18a8:	d0d3      	beq.n	1852 <unwind_phase2_forced+0x3a>
    18aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
    18ac:	f04a 0110 	orr.w	r1, sl, #16
    18b0:	e9cd 5800 	strd	r5, r8, [sp]
    18b4:	4632      	mov	r2, r6
    18b6:	646b      	str	r3, [r5, #68]	; 0x44
    18b8:	2001      	movs	r0, #1
    18ba:	4633      	mov	r3, r6
    18bc:	47b8      	blx	r7
    18be:	b108      	cbz	r0, 18c4 <unwind_phase2_forced+0xac>
    18c0:	f04f 0909 	mov.w	r9, #9
    18c4:	4648      	mov	r0, r9
    18c6:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    18ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    18ce:	f1b9 0f07 	cmp.w	r9, #7
    18d2:	d1f5      	bne.n	18c0 <unwind_phase2_forced+0xa8>
    18d4:	4620      	mov	r0, r4
    18d6:	6c29      	ldr	r1, [r5, #64]	; 0x40
    18d8:	f7ff ff7e 	bl	17d8 <_Unwind_DebugHook>
    18dc:	a803      	add	r0, sp, #12
    18de:	f000 fb89 	bl	1ff4 <__restore_core_regs>
    18e2:	bf00      	nop

000018e4 <_Unwind_GetCFA>:
    18e4:	6c40      	ldr	r0, [r0, #68]	; 0x44
    18e6:	4770      	bx	lr

000018e8 <__gnu_Unwind_RaiseException>:
    18e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18ea:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    18ec:	640b      	str	r3, [r1, #64]	; 0x40
    18ee:	1d0e      	adds	r6, r1, #4
    18f0:	460f      	mov	r7, r1
    18f2:	4605      	mov	r5, r0
    18f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    18f6:	b0f9      	sub	sp, #484	; 0x1e4
    18f8:	ac01      	add	r4, sp, #4
    18fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    18fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    18fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1900:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1904:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    1908:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    190c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1910:	9600      	str	r6, [sp, #0]
    1912:	e006      	b.n	1922 <__gnu_Unwind_RaiseException+0x3a>
    1914:	692b      	ldr	r3, [r5, #16]
    1916:	466a      	mov	r2, sp
    1918:	4629      	mov	r1, r5
    191a:	4798      	blx	r3
    191c:	2808      	cmp	r0, #8
    191e:	4604      	mov	r4, r0
    1920:	d108      	bne.n	1934 <__gnu_Unwind_RaiseException+0x4c>
    1922:	9910      	ldr	r1, [sp, #64]	; 0x40
    1924:	4628      	mov	r0, r5
    1926:	f7ff fed5 	bl	16d4 <get_eit_entry>
    192a:	2800      	cmp	r0, #0
    192c:	d0f2      	beq.n	1914 <__gnu_Unwind_RaiseException+0x2c>
    192e:	2009      	movs	r0, #9
    1930:	b079      	add	sp, #484	; 0x1e4
    1932:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1934:	4668      	mov	r0, sp
    1936:	f7ff ff1b 	bl	1770 <restore_non_core_regs>
    193a:	2c06      	cmp	r4, #6
    193c:	d1f7      	bne.n	192e <__gnu_Unwind_RaiseException+0x46>
    193e:	4639      	mov	r1, r7
    1940:	4628      	mov	r0, r5
    1942:	f7ff ff4b 	bl	17dc <unwind_phase2>
    1946:	bf00      	nop

00001948 <__gnu_Unwind_ForcedUnwind>:
    1948:	b430      	push	{r4, r5}
    194a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    194c:	60c1      	str	r1, [r0, #12]
    194e:	6182      	str	r2, [r0, #24]
    1950:	4619      	mov	r1, r3
    1952:	641d      	str	r5, [r3, #64]	; 0x40
    1954:	2200      	movs	r2, #0
    1956:	bc30      	pop	{r4, r5}
    1958:	e75e      	b.n	1818 <unwind_phase2_forced>
    195a:	bf00      	nop

0000195c <__gnu_Unwind_Resume>:
    195c:	b570      	push	{r4, r5, r6, lr}
    195e:	68c6      	ldr	r6, [r0, #12]
    1960:	6943      	ldr	r3, [r0, #20]
    1962:	640b      	str	r3, [r1, #64]	; 0x40
    1964:	b9ae      	cbnz	r6, 1992 <__gnu_Unwind_Resume+0x36>
    1966:	6903      	ldr	r3, [r0, #16]
    1968:	460a      	mov	r2, r1
    196a:	4604      	mov	r4, r0
    196c:	460d      	mov	r5, r1
    196e:	4601      	mov	r1, r0
    1970:	2002      	movs	r0, #2
    1972:	4798      	blx	r3
    1974:	2807      	cmp	r0, #7
    1976:	d005      	beq.n	1984 <__gnu_Unwind_Resume+0x28>
    1978:	2808      	cmp	r0, #8
    197a:	d10f      	bne.n	199c <__gnu_Unwind_Resume+0x40>
    197c:	4629      	mov	r1, r5
    197e:	4620      	mov	r0, r4
    1980:	f7ff ff2c 	bl	17dc <unwind_phase2>
    1984:	4630      	mov	r0, r6
    1986:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1988:	f7ff ff26 	bl	17d8 <_Unwind_DebugHook>
    198c:	1d28      	adds	r0, r5, #4
    198e:	f000 fb31 	bl	1ff4 <__restore_core_regs>
    1992:	2201      	movs	r2, #1
    1994:	f7ff ff40 	bl	1818 <unwind_phase2_forced>
    1998:	f000 fda2 	bl	24e0 <abort>
    199c:	f000 fda0 	bl	24e0 <abort>

000019a0 <__gnu_Unwind_Resume_or_Rethrow>:
    19a0:	68c2      	ldr	r2, [r0, #12]
    19a2:	b11a      	cbz	r2, 19ac <__gnu_Unwind_Resume_or_Rethrow+0xc>
    19a4:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    19a6:	640a      	str	r2, [r1, #64]	; 0x40
    19a8:	2200      	movs	r2, #0
    19aa:	e735      	b.n	1818 <unwind_phase2_forced>
    19ac:	e79c      	b.n	18e8 <__gnu_Unwind_RaiseException>
    19ae:	bf00      	nop

000019b0 <_Unwind_Complete>:
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop

000019b4 <_Unwind_DeleteException>:
    19b4:	6883      	ldr	r3, [r0, #8]
    19b6:	4601      	mov	r1, r0
    19b8:	b10b      	cbz	r3, 19be <_Unwind_DeleteException+0xa>
    19ba:	2001      	movs	r0, #1
    19bc:	4718      	bx	r3
    19be:	4770      	bx	lr

000019c0 <_Unwind_VRS_Get>:
    19c0:	2901      	cmp	r1, #1
    19c2:	d012      	beq.n	19ea <_Unwind_VRS_Get+0x2a>
    19c4:	d809      	bhi.n	19da <_Unwind_VRS_Get+0x1a>
    19c6:	b973      	cbnz	r3, 19e6 <_Unwind_VRS_Get+0x26>
    19c8:	2a0f      	cmp	r2, #15
    19ca:	d80c      	bhi.n	19e6 <_Unwind_VRS_Get+0x26>
    19cc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    19d0:	4618      	mov	r0, r3
    19d2:	6853      	ldr	r3, [r2, #4]
    19d4:	9a00      	ldr	r2, [sp, #0]
    19d6:	6013      	str	r3, [r2, #0]
    19d8:	4770      	bx	lr
    19da:	3903      	subs	r1, #3
    19dc:	2901      	cmp	r1, #1
    19de:	bf94      	ite	ls
    19e0:	2001      	movls	r0, #1
    19e2:	2002      	movhi	r0, #2
    19e4:	4770      	bx	lr
    19e6:	2002      	movs	r0, #2
    19e8:	4770      	bx	lr
    19ea:	4608      	mov	r0, r1
    19ec:	4770      	bx	lr
    19ee:	bf00      	nop

000019f0 <_Unwind_GetGR>:
    19f0:	b510      	push	{r4, lr}
    19f2:	b084      	sub	sp, #16
    19f4:	2300      	movs	r3, #0
    19f6:	ac03      	add	r4, sp, #12
    19f8:	460a      	mov	r2, r1
    19fa:	9400      	str	r4, [sp, #0]
    19fc:	4619      	mov	r1, r3
    19fe:	f7ff ffdf 	bl	19c0 <_Unwind_VRS_Get>
    1a02:	9803      	ldr	r0, [sp, #12]
    1a04:	b004      	add	sp, #16
    1a06:	bd10      	pop	{r4, pc}

00001a08 <_Unwind_VRS_Set>:
    1a08:	2901      	cmp	r1, #1
    1a0a:	d012      	beq.n	1a32 <_Unwind_VRS_Set+0x2a>
    1a0c:	d809      	bhi.n	1a22 <_Unwind_VRS_Set+0x1a>
    1a0e:	b973      	cbnz	r3, 1a2e <_Unwind_VRS_Set+0x26>
    1a10:	2a0f      	cmp	r2, #15
    1a12:	d80c      	bhi.n	1a2e <_Unwind_VRS_Set+0x26>
    1a14:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    1a18:	9a00      	ldr	r2, [sp, #0]
    1a1a:	6812      	ldr	r2, [r2, #0]
    1a1c:	6042      	str	r2, [r0, #4]
    1a1e:	4618      	mov	r0, r3
    1a20:	4770      	bx	lr
    1a22:	3903      	subs	r1, #3
    1a24:	2901      	cmp	r1, #1
    1a26:	bf94      	ite	ls
    1a28:	2001      	movls	r0, #1
    1a2a:	2002      	movhi	r0, #2
    1a2c:	4770      	bx	lr
    1a2e:	2002      	movs	r0, #2
    1a30:	4770      	bx	lr
    1a32:	4608      	mov	r0, r1
    1a34:	4770      	bx	lr
    1a36:	bf00      	nop

00001a38 <_Unwind_SetGR>:
    1a38:	b510      	push	{r4, lr}
    1a3a:	b084      	sub	sp, #16
    1a3c:	2300      	movs	r3, #0
    1a3e:	ac03      	add	r4, sp, #12
    1a40:	9203      	str	r2, [sp, #12]
    1a42:	9400      	str	r4, [sp, #0]
    1a44:	460a      	mov	r2, r1
    1a46:	4619      	mov	r1, r3
    1a48:	f7ff ffde 	bl	1a08 <_Unwind_VRS_Set>
    1a4c:	b004      	add	sp, #16
    1a4e:	bd10      	pop	{r4, pc}

00001a50 <__gnu_Unwind_Backtrace>:
    1a50:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a52:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    1a54:	6413      	str	r3, [r2, #64]	; 0x40
    1a56:	1d15      	adds	r5, r2, #4
    1a58:	468c      	mov	ip, r1
    1a5a:	4606      	mov	r6, r0
    1a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1a5e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    1a62:	ac17      	add	r4, sp, #92	; 0x5c
    1a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1a6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1a72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1a76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1a7a:	4665      	mov	r5, ip
    1a7c:	9716      	str	r7, [sp, #88]	; 0x58
    1a7e:	e010      	b.n	1aa2 <__gnu_Unwind_Backtrace+0x52>
    1a80:	f7ff ffda 	bl	1a38 <_Unwind_SetGR>
    1a84:	4629      	mov	r1, r5
    1a86:	a816      	add	r0, sp, #88	; 0x58
    1a88:	47b0      	blx	r6
    1a8a:	4603      	mov	r3, r0
    1a8c:	aa16      	add	r2, sp, #88	; 0x58
    1a8e:	4669      	mov	r1, sp
    1a90:	2008      	movs	r0, #8
    1a92:	b983      	cbnz	r3, 1ab6 <__gnu_Unwind_Backtrace+0x66>
    1a94:	9b04      	ldr	r3, [sp, #16]
    1a96:	4798      	blx	r3
    1a98:	2805      	cmp	r0, #5
    1a9a:	4604      	mov	r4, r0
    1a9c:	d00c      	beq.n	1ab8 <__gnu_Unwind_Backtrace+0x68>
    1a9e:	2809      	cmp	r0, #9
    1aa0:	d009      	beq.n	1ab6 <__gnu_Unwind_Backtrace+0x66>
    1aa2:	9926      	ldr	r1, [sp, #152]	; 0x98
    1aa4:	4668      	mov	r0, sp
    1aa6:	f7ff fe15 	bl	16d4 <get_eit_entry>
    1aaa:	4603      	mov	r3, r0
    1aac:	466a      	mov	r2, sp
    1aae:	210c      	movs	r1, #12
    1ab0:	a816      	add	r0, sp, #88	; 0x58
    1ab2:	2b00      	cmp	r3, #0
    1ab4:	d0e4      	beq.n	1a80 <__gnu_Unwind_Backtrace+0x30>
    1ab6:	2409      	movs	r4, #9
    1ab8:	a816      	add	r0, sp, #88	; 0x58
    1aba:	f7ff fe59 	bl	1770 <restore_non_core_regs>
    1abe:	4620      	mov	r0, r4
    1ac0:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    1ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ac6:	bf00      	nop

00001ac8 <__gnu_unwind_pr_common>:
    1ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1acc:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
    1ace:	b089      	sub	sp, #36	; 0x24
    1ad0:	460d      	mov	r5, r1
    1ad2:	f854 1b04 	ldr.w	r1, [r4], #4
    1ad6:	9406      	str	r4, [sp, #24]
    1ad8:	4617      	mov	r7, r2
    1ada:	f000 0803 	and.w	r8, r0, #3
    1ade:	461e      	mov	r6, r3
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	d079      	beq.n	1bd8 <__gnu_unwind_pr_common+0x110>
    1ae4:	0c0b      	lsrs	r3, r1, #16
    1ae6:	b2da      	uxtb	r2, r3
    1ae8:	0409      	lsls	r1, r1, #16
    1aea:	f88d 301d 	strb.w	r3, [sp, #29]
    1aee:	2302      	movs	r3, #2
    1af0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    1af4:	9105      	str	r1, [sp, #20]
    1af6:	f88d 301c 	strb.w	r3, [sp, #28]
    1afa:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    1afc:	f1b8 0f02 	cmp.w	r8, #2
    1b00:	bf08      	it	eq
    1b02:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    1b04:	f013 0301 	ands.w	r3, r3, #1
    1b08:	d00c      	beq.n	1b24 <__gnu_unwind_pr_common+0x5c>
    1b0a:	4638      	mov	r0, r7
    1b0c:	a905      	add	r1, sp, #20
    1b0e:	f000 fb73 	bl	21f8 <__gnu_unwind_execute>
    1b12:	b918      	cbnz	r0, 1b1c <__gnu_unwind_pr_common+0x54>
    1b14:	2008      	movs	r0, #8
    1b16:	b009      	add	sp, #36	; 0x24
    1b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b1c:	2009      	movs	r0, #9
    1b1e:	b009      	add	sp, #36	; 0x24
    1b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1b24:	f8d4 a000 	ldr.w	sl, [r4]
    1b28:	f1ba 0f00 	cmp.w	sl, #0
    1b2c:	d0ed      	beq.n	1b0a <__gnu_unwind_pr_common+0x42>
    1b2e:	9301      	str	r3, [sp, #4]
    1b30:	f000 0308 	and.w	r3, r0, #8
    1b34:	9302      	str	r3, [sp, #8]
    1b36:	2e02      	cmp	r6, #2
    1b38:	d04a      	beq.n	1bd0 <__gnu_unwind_pr_common+0x108>
    1b3a:	f8b4 a000 	ldrh.w	sl, [r4]
    1b3e:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    1b42:	3404      	adds	r4, #4
    1b44:	6caa      	ldr	r2, [r5, #72]	; 0x48
    1b46:	f029 0b01 	bic.w	fp, r9, #1
    1b4a:	210f      	movs	r1, #15
    1b4c:	4638      	mov	r0, r7
    1b4e:	4493      	add	fp, r2
    1b50:	f7ff ff4e 	bl	19f0 <_Unwind_GetGR>
    1b54:	4583      	cmp	fp, r0
    1b56:	d839      	bhi.n	1bcc <__gnu_unwind_pr_common+0x104>
    1b58:	f02a 0201 	bic.w	r2, sl, #1
    1b5c:	445a      	add	r2, fp
    1b5e:	4282      	cmp	r2, r0
    1b60:	bf94      	ite	ls
    1b62:	2000      	movls	r0, #0
    1b64:	2001      	movhi	r0, #1
    1b66:	ea4f 0349 	mov.w	r3, r9, lsl #1
    1b6a:	f003 0302 	and.w	r3, r3, #2
    1b6e:	f00a 0a01 	and.w	sl, sl, #1
    1b72:	ea43 030a 	orr.w	r3, r3, sl
    1b76:	2b01      	cmp	r3, #1
    1b78:	d049      	beq.n	1c0e <__gnu_unwind_pr_common+0x146>
    1b7a:	2b02      	cmp	r3, #2
    1b7c:	d032      	beq.n	1be4 <__gnu_unwind_pr_common+0x11c>
    1b7e:	2b00      	cmp	r3, #0
    1b80:	d1cc      	bne.n	1b1c <__gnu_unwind_pr_common+0x54>
    1b82:	f1b8 0f00 	cmp.w	r8, #0
    1b86:	d002      	beq.n	1b8e <__gnu_unwind_pr_common+0xc6>
    1b88:	2800      	cmp	r0, #0
    1b8a:	f040 80cd 	bne.w	1d28 <__gnu_unwind_pr_common+0x260>
    1b8e:	3404      	adds	r4, #4
    1b90:	f8d4 a000 	ldr.w	sl, [r4]
    1b94:	f1ba 0f00 	cmp.w	sl, #0
    1b98:	d1cd      	bne.n	1b36 <__gnu_unwind_pr_common+0x6e>
    1b9a:	a905      	add	r1, sp, #20
    1b9c:	4638      	mov	r0, r7
    1b9e:	f000 fb2b 	bl	21f8 <__gnu_unwind_execute>
    1ba2:	2800      	cmp	r0, #0
    1ba4:	d1ba      	bne.n	1b1c <__gnu_unwind_pr_common+0x54>
    1ba6:	9b01      	ldr	r3, [sp, #4]
    1ba8:	2b00      	cmp	r3, #0
    1baa:	d0b3      	beq.n	1b14 <__gnu_unwind_pr_common+0x4c>
    1bac:	210f      	movs	r1, #15
    1bae:	4638      	mov	r0, r7
    1bb0:	f7ff ff1e 	bl	19f0 <_Unwind_GetGR>
    1bb4:	210e      	movs	r1, #14
    1bb6:	4602      	mov	r2, r0
    1bb8:	4638      	mov	r0, r7
    1bba:	f7ff ff3d 	bl	1a38 <_Unwind_SetGR>
    1bbe:	4638      	mov	r0, r7
    1bc0:	4a6a      	ldr	r2, [pc, #424]	; (1d6c <__gnu_unwind_pr_common+0x2a4>)
    1bc2:	210f      	movs	r1, #15
    1bc4:	f7ff ff38 	bl	1a38 <_Unwind_SetGR>
    1bc8:	2007      	movs	r0, #7
    1bca:	e7a8      	b.n	1b1e <__gnu_unwind_pr_common+0x56>
    1bcc:	2000      	movs	r0, #0
    1bce:	e7ca      	b.n	1b66 <__gnu_unwind_pr_common+0x9e>
    1bd0:	f8d4 9004 	ldr.w	r9, [r4, #4]
    1bd4:	3408      	adds	r4, #8
    1bd6:	e7b5      	b.n	1b44 <__gnu_unwind_pr_common+0x7c>
    1bd8:	0209      	lsls	r1, r1, #8
    1bda:	2303      	movs	r3, #3
    1bdc:	9105      	str	r1, [sp, #20]
    1bde:	f8ad 301c 	strh.w	r3, [sp, #28]
    1be2:	e78a      	b.n	1afa <__gnu_unwind_pr_common+0x32>
    1be4:	6823      	ldr	r3, [r4, #0]
    1be6:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
    1bea:	f1b8 0f00 	cmp.w	r8, #0
    1bee:	d145      	bne.n	1c7c <__gnu_unwind_pr_common+0x1b4>
    1bf0:	b128      	cbz	r0, 1bfe <__gnu_unwind_pr_common+0x136>
    1bf2:	9a02      	ldr	r2, [sp, #8]
    1bf4:	2a00      	cmp	r2, #0
    1bf6:	d05c      	beq.n	1cb2 <__gnu_unwind_pr_common+0x1ea>
    1bf8:	f1bb 0f00 	cmp.w	fp, #0
    1bfc:	d074      	beq.n	1ce8 <__gnu_unwind_pr_common+0x220>
    1bfe:	2b00      	cmp	r3, #0
    1c00:	da00      	bge.n	1c04 <__gnu_unwind_pr_common+0x13c>
    1c02:	3404      	adds	r4, #4
    1c04:	f10b 0b01 	add.w	fp, fp, #1
    1c08:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    1c0c:	e7c0      	b.n	1b90 <__gnu_unwind_pr_common+0xc8>
    1c0e:	f1b8 0f00 	cmp.w	r8, #0
    1c12:	d119      	bne.n	1c48 <__gnu_unwind_pr_common+0x180>
    1c14:	b1b0      	cbz	r0, 1c44 <__gnu_unwind_pr_common+0x17c>
    1c16:	e9d4 2300 	ldrd	r2, r3, [r4]
    1c1a:	1c99      	adds	r1, r3, #2
    1c1c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    1c20:	f43f af7c 	beq.w	1b1c <__gnu_unwind_pr_common+0x54>
    1c24:	f105 0158 	add.w	r1, r5, #88	; 0x58
    1c28:	3301      	adds	r3, #1
    1c2a:	9104      	str	r1, [sp, #16]
    1c2c:	f000 8090 	beq.w	1d50 <__gnu_unwind_pr_common+0x288>
    1c30:	1d20      	adds	r0, r4, #4
    1c32:	f7ff fdc9 	bl	17c8 <_Unwind_decode_typeinfo_ptr.isra.0>
    1c36:	ab04      	add	r3, sp, #16
    1c38:	4601      	mov	r1, r0
    1c3a:	4628      	mov	r0, r5
    1c3c:	f3af 8000 	nop.w
    1c40:	2800      	cmp	r0, #0
    1c42:	d15b      	bne.n	1cfc <__gnu_unwind_pr_common+0x234>
    1c44:	3408      	adds	r4, #8
    1c46:	e7a3      	b.n	1b90 <__gnu_unwind_pr_common+0xc8>
    1c48:	210d      	movs	r1, #13
    1c4a:	4638      	mov	r0, r7
    1c4c:	f8d5 9020 	ldr.w	r9, [r5, #32]
    1c50:	f7ff fece 	bl	19f0 <_Unwind_GetGR>
    1c54:	4581      	cmp	r9, r0
    1c56:	d1f5      	bne.n	1c44 <__gnu_unwind_pr_common+0x17c>
    1c58:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1c5a:	429c      	cmp	r4, r3
    1c5c:	d1f2      	bne.n	1c44 <__gnu_unwind_pr_common+0x17c>
    1c5e:	4620      	mov	r0, r4
    1c60:	f7ff fcec 	bl	163c <selfrel_offset31>
    1c64:	210f      	movs	r1, #15
    1c66:	4602      	mov	r2, r0
    1c68:	4638      	mov	r0, r7
    1c6a:	f7ff fee5 	bl	1a38 <_Unwind_SetGR>
    1c6e:	4638      	mov	r0, r7
    1c70:	462a      	mov	r2, r5
    1c72:	2100      	movs	r1, #0
    1c74:	f7ff fee0 	bl	1a38 <_Unwind_SetGR>
    1c78:	2007      	movs	r0, #7
    1c7a:	e750      	b.n	1b1e <__gnu_unwind_pr_common+0x56>
    1c7c:	210d      	movs	r1, #13
    1c7e:	4638      	mov	r0, r7
    1c80:	f8d5 9020 	ldr.w	r9, [r5, #32]
    1c84:	f7ff feb4 	bl	19f0 <_Unwind_GetGR>
    1c88:	4581      	cmp	r9, r0
    1c8a:	d001      	beq.n	1c90 <__gnu_unwind_pr_common+0x1c8>
    1c8c:	6823      	ldr	r3, [r4, #0]
    1c8e:	e7b6      	b.n	1bfe <__gnu_unwind_pr_common+0x136>
    1c90:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1c92:	429c      	cmp	r4, r3
    1c94:	d1fa      	bne.n	1c8c <__gnu_unwind_pr_common+0x1c4>
    1c96:	2204      	movs	r2, #4
    1c98:	2100      	movs	r1, #0
    1c9a:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
    1c9e:	18a3      	adds	r3, r4, r2
    1ca0:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
    1ca4:	636b      	str	r3, [r5, #52]	; 0x34
    1ca6:	6823      	ldr	r3, [r4, #0]
    1ca8:	428b      	cmp	r3, r1
    1caa:	db59      	blt.n	1d60 <__gnu_unwind_pr_common+0x298>
    1cac:	2301      	movs	r3, #1
    1cae:	9301      	str	r3, [sp, #4]
    1cb0:	e7a8      	b.n	1c04 <__gnu_unwind_pr_common+0x13c>
    1cb2:	f105 0358 	add.w	r3, r5, #88	; 0x58
    1cb6:	f8cd 800c 	str.w	r8, [sp, #12]
    1cba:	f104 0a04 	add.w	sl, r4, #4
    1cbe:	46b0      	mov	r8, r6
    1cc0:	4691      	mov	r9, r2
    1cc2:	461e      	mov	r6, r3
    1cc4:	e00d      	b.n	1ce2 <__gnu_unwind_pr_common+0x21a>
    1cc6:	9604      	str	r6, [sp, #16]
    1cc8:	f7ff fd7e 	bl	17c8 <_Unwind_decode_typeinfo_ptr.isra.0>
    1ccc:	ab04      	add	r3, sp, #16
    1cce:	4601      	mov	r1, r0
    1cd0:	2200      	movs	r2, #0
    1cd2:	4628      	mov	r0, r5
    1cd4:	f3af 8000 	nop.w
    1cd8:	f109 0901 	add.w	r9, r9, #1
    1cdc:	f10a 0a04 	add.w	sl, sl, #4
    1ce0:	b9e8      	cbnz	r0, 1d1e <__gnu_unwind_pr_common+0x256>
    1ce2:	45d9      	cmp	r9, fp
    1ce4:	4650      	mov	r0, sl
    1ce6:	d1ee      	bne.n	1cc6 <__gnu_unwind_pr_common+0x1fe>
    1ce8:	4638      	mov	r0, r7
    1cea:	210d      	movs	r1, #13
    1cec:	f7ff fe80 	bl	19f0 <_Unwind_GetGR>
    1cf0:	9b04      	ldr	r3, [sp, #16]
    1cf2:	6228      	str	r0, [r5, #32]
    1cf4:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    1cf8:	2006      	movs	r0, #6
    1cfa:	e710      	b.n	1b1e <__gnu_unwind_pr_common+0x56>
    1cfc:	4681      	mov	r9, r0
    1cfe:	210d      	movs	r1, #13
    1d00:	4638      	mov	r0, r7
    1d02:	f7ff fe75 	bl	19f0 <_Unwind_GetGR>
    1d06:	f1b9 0f02 	cmp.w	r9, #2
    1d0a:	6228      	str	r0, [r5, #32]
    1d0c:	d125      	bne.n	1d5a <__gnu_unwind_pr_common+0x292>
    1d0e:	462b      	mov	r3, r5
    1d10:	9a04      	ldr	r2, [sp, #16]
    1d12:	f843 2f2c 	str.w	r2, [r3, #44]!
    1d16:	626b      	str	r3, [r5, #36]	; 0x24
    1d18:	62ac      	str	r4, [r5, #40]	; 0x28
    1d1a:	2006      	movs	r0, #6
    1d1c:	e6ff      	b.n	1b1e <__gnu_unwind_pr_common+0x56>
    1d1e:	4646      	mov	r6, r8
    1d20:	6823      	ldr	r3, [r4, #0]
    1d22:	f8dd 800c 	ldr.w	r8, [sp, #12]
    1d26:	e76a      	b.n	1bfe <__gnu_unwind_pr_common+0x136>
    1d28:	4620      	mov	r0, r4
    1d2a:	f7ff fc87 	bl	163c <selfrel_offset31>
    1d2e:	3404      	adds	r4, #4
    1d30:	4602      	mov	r2, r0
    1d32:	63ac      	str	r4, [r5, #56]	; 0x38
    1d34:	4628      	mov	r0, r5
    1d36:	4614      	mov	r4, r2
    1d38:	f3af 8000 	nop.w
    1d3c:	2800      	cmp	r0, #0
    1d3e:	f43f aeed 	beq.w	1b1c <__gnu_unwind_pr_common+0x54>
    1d42:	4638      	mov	r0, r7
    1d44:	4622      	mov	r2, r4
    1d46:	210f      	movs	r1, #15
    1d48:	f7ff fe76 	bl	1a38 <_Unwind_SetGR>
    1d4c:	2007      	movs	r0, #7
    1d4e:	e6e6      	b.n	1b1e <__gnu_unwind_pr_common+0x56>
    1d50:	4638      	mov	r0, r7
    1d52:	210d      	movs	r1, #13
    1d54:	f7ff fe4c 	bl	19f0 <_Unwind_GetGR>
    1d58:	6228      	str	r0, [r5, #32]
    1d5a:	9b04      	ldr	r3, [sp, #16]
    1d5c:	626b      	str	r3, [r5, #36]	; 0x24
    1d5e:	e7db      	b.n	1d18 <__gnu_unwind_pr_common+0x250>
    1d60:	f10b 0001 	add.w	r0, fp, #1
    1d64:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    1d68:	e77a      	b.n	1c60 <__gnu_unwind_pr_common+0x198>
    1d6a:	bf00      	nop
    1d6c:	00000000 	.word	0x00000000

00001d70 <__aeabi_unwind_cpp_pr0>:
    1d70:	2300      	movs	r3, #0
    1d72:	e6a9      	b.n	1ac8 <__gnu_unwind_pr_common>

00001d74 <__aeabi_unwind_cpp_pr1>:
    1d74:	2301      	movs	r3, #1
    1d76:	e6a7      	b.n	1ac8 <__gnu_unwind_pr_common>

00001d78 <__aeabi_unwind_cpp_pr2>:
    1d78:	2302      	movs	r3, #2
    1d7a:	e6a5      	b.n	1ac8 <__gnu_unwind_pr_common>

00001d7c <_Unwind_VRS_Pop>:
    1d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1d80:	4606      	mov	r6, r0
    1d82:	b0c3      	sub	sp, #268	; 0x10c
    1d84:	4615      	mov	r5, r2
    1d86:	461c      	mov	r4, r3
    1d88:	2904      	cmp	r1, #4
    1d8a:	f200 80b9 	bhi.w	1f00 <_Unwind_VRS_Pop+0x184>
    1d8e:	e8df f001 	tbb	[pc, r1]
    1d92:	539a      	.short	0x539a
    1d94:	29b7      	.short	0x29b7
    1d96:	03          	.byte	0x03
    1d97:	00          	.byte	0x00
    1d98:	2c00      	cmp	r4, #0
    1d9a:	f040 80b1 	bne.w	1f00 <_Unwind_VRS_Pop+0x184>
    1d9e:	2a10      	cmp	r2, #16
    1da0:	f200 80ae 	bhi.w	1f00 <_Unwind_VRS_Pop+0x184>
    1da4:	6803      	ldr	r3, [r0, #0]
    1da6:	06d8      	lsls	r0, r3, #27
    1da8:	f100 80f3 	bmi.w	1f92 <_Unwind_VRS_Pop+0x216>
    1dac:	af20      	add	r7, sp, #128	; 0x80
    1dae:	4638      	mov	r0, r7
    1db0:	f000 f992 	bl	20d8 <__gnu_Unwind_Save_WMMXC>
    1db4:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    1db6:	2300      	movs	r3, #0
    1db8:	2401      	movs	r4, #1
    1dba:	fa04 f203 	lsl.w	r2, r4, r3
    1dbe:	422a      	tst	r2, r5
    1dc0:	4601      	mov	r1, r0
    1dc2:	d004      	beq.n	1dce <_Unwind_VRS_Pop+0x52>
    1dc4:	f851 2b04 	ldr.w	r2, [r1], #4
    1dc8:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    1dcc:	4608      	mov	r0, r1
    1dce:	3301      	adds	r3, #1
    1dd0:	2b04      	cmp	r3, #4
    1dd2:	d1f2      	bne.n	1dba <_Unwind_VRS_Pop+0x3e>
    1dd4:	63b0      	str	r0, [r6, #56]	; 0x38
    1dd6:	4638      	mov	r0, r7
    1dd8:	f000 f974 	bl	20c4 <__gnu_Unwind_Restore_WMMXC>
    1ddc:	2000      	movs	r0, #0
    1dde:	b043      	add	sp, #268	; 0x10c
    1de0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1de4:	2c03      	cmp	r4, #3
    1de6:	f040 808b 	bne.w	1f00 <_Unwind_VRS_Pop+0x184>
    1dea:	b294      	uxth	r4, r2
    1dec:	eb04 4312 	add.w	r3, r4, r2, lsr #16
    1df0:	2b10      	cmp	r3, #16
    1df2:	ea4f 4512 	mov.w	r5, r2, lsr #16
    1df6:	f200 8083 	bhi.w	1f00 <_Unwind_VRS_Pop+0x184>
    1dfa:	6803      	ldr	r3, [r0, #0]
    1dfc:	071f      	lsls	r7, r3, #28
    1dfe:	f100 80d0 	bmi.w	1fa2 <_Unwind_VRS_Pop+0x226>
    1e02:	af20      	add	r7, sp, #128	; 0x80
    1e04:	4638      	mov	r0, r7
    1e06:	f000 f93b 	bl	2080 <__gnu_Unwind_Save_WMMXD>
    1e0a:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
    1e0e:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    1e10:	b154      	cbz	r4, 1e28 <_Unwind_VRS_Pop+0xac>
    1e12:	460b      	mov	r3, r1
    1e14:	1ae8      	subs	r0, r5, r3
    1e16:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    1e1a:	00e4      	lsls	r4, r4, #3
    1e1c:	581a      	ldr	r2, [r3, r0]
    1e1e:	f843 2b04 	str.w	r2, [r3], #4
    1e22:	428b      	cmp	r3, r1
    1e24:	d1fa      	bne.n	1e1c <_Unwind_VRS_Pop+0xa0>
    1e26:	4425      	add	r5, r4
    1e28:	4638      	mov	r0, r7
    1e2a:	63b5      	str	r5, [r6, #56]	; 0x38
    1e2c:	f000 f906 	bl	203c <__gnu_Unwind_Restore_WMMXD>
    1e30:	2000      	movs	r0, #0
    1e32:	b043      	add	sp, #268	; 0x10c
    1e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1e38:	2c01      	cmp	r4, #1
    1e3a:	ea4f 4812 	mov.w	r8, r2, lsr #16
    1e3e:	b295      	uxth	r5, r2
    1e40:	d05a      	beq.n	1ef8 <_Unwind_VRS_Pop+0x17c>
    1e42:	2c05      	cmp	r4, #5
    1e44:	d15c      	bne.n	1f00 <_Unwind_VRS_Pop+0x184>
    1e46:	eb08 0905 	add.w	r9, r8, r5
    1e4a:	f1b9 0f20 	cmp.w	r9, #32
    1e4e:	d857      	bhi.n	1f00 <_Unwind_VRS_Pop+0x184>
    1e50:	f1b8 0f0f 	cmp.w	r8, #15
    1e54:	d977      	bls.n	1f46 <_Unwind_VRS_Pop+0x1ca>
    1e56:	46a9      	mov	r9, r5
    1e58:	2d00      	cmp	r5, #0
    1e5a:	f040 8088 	bne.w	1f6e <_Unwind_VRS_Pop+0x1f2>
    1e5e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1e60:	b36d      	cbz	r5, 1ebe <_Unwind_VRS_Pop+0x142>
    1e62:	af20      	add	r7, sp, #128	; 0x80
    1e64:	f04f 0900 	mov.w	r9, #0
    1e68:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    1e6c:	3f04      	subs	r7, #4
    1e6e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    1e72:	f853 1b04 	ldr.w	r1, [r3], #4
    1e76:	f847 1f04 	str.w	r1, [r7, #4]!
    1e7a:	42ab      	cmp	r3, r5
    1e7c:	d1f9      	bne.n	1e72 <_Unwind_VRS_Pop+0xf6>
    1e7e:	f1b9 0f00 	cmp.w	r9, #0
    1e82:	d00f      	beq.n	1ea4 <_Unwind_VRS_Pop+0x128>
    1e84:	466f      	mov	r7, sp
    1e86:	4641      	mov	r1, r8
    1e88:	2910      	cmp	r1, #16
    1e8a:	bf38      	it	cc
    1e8c:	2110      	movcc	r1, #16
    1e8e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
    1e92:	3984      	subs	r1, #132	; 0x84
    1e94:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
    1e98:	f853 0b04 	ldr.w	r0, [r3], #4
    1e9c:	f841 0f04 	str.w	r0, [r1, #4]!
    1ea0:	42ab      	cmp	r3, r5
    1ea2:	d1f9      	bne.n	1e98 <_Unwind_VRS_Pop+0x11c>
    1ea4:	2c01      	cmp	r4, #1
    1ea6:	f000 8084 	beq.w	1fb2 <_Unwind_VRS_Pop+0x236>
    1eaa:	f1b8 0f0f 	cmp.w	r8, #15
    1eae:	63b5      	str	r5, [r6, #56]	; 0x38
    1eb0:	d945      	bls.n	1f3e <_Unwind_VRS_Pop+0x1c2>
    1eb2:	f1b9 0f00 	cmp.w	r9, #0
    1eb6:	d002      	beq.n	1ebe <_Unwind_VRS_Pop+0x142>
    1eb8:	4668      	mov	r0, sp
    1eba:	f000 f8b7 	bl	202c <__gnu_Unwind_Restore_VFP_D_16_to_31>
    1ebe:	2000      	movs	r0, #0
    1ec0:	b043      	add	sp, #268	; 0x10c
    1ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1ec6:	b9dc      	cbnz	r4, 1f00 <_Unwind_VRS_Pop+0x184>
    1ec8:	6b87      	ldr	r7, [r0, #56]	; 0x38
    1eca:	4623      	mov	r3, r4
    1ecc:	2001      	movs	r0, #1
    1ece:	b294      	uxth	r4, r2
    1ed0:	f106 0c04 	add.w	ip, r6, #4
    1ed4:	fa00 f203 	lsl.w	r2, r0, r3
    1ed8:	4222      	tst	r2, r4
    1eda:	4639      	mov	r1, r7
    1edc:	d004      	beq.n	1ee8 <_Unwind_VRS_Pop+0x16c>
    1ede:	f851 2b04 	ldr.w	r2, [r1], #4
    1ee2:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
    1ee6:	460f      	mov	r7, r1
    1ee8:	3301      	adds	r3, #1
    1eea:	2b10      	cmp	r3, #16
    1eec:	d1f2      	bne.n	1ed4 <_Unwind_VRS_Pop+0x158>
    1eee:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
    1ef2:	d1e4      	bne.n	1ebe <_Unwind_VRS_Pop+0x142>
    1ef4:	63b7      	str	r7, [r6, #56]	; 0x38
    1ef6:	e004      	b.n	1f02 <_Unwind_VRS_Pop+0x186>
    1ef8:	eb08 0305 	add.w	r3, r8, r5
    1efc:	2b10      	cmp	r3, #16
    1efe:	d903      	bls.n	1f08 <_Unwind_VRS_Pop+0x18c>
    1f00:	2002      	movs	r0, #2
    1f02:	b043      	add	sp, #268	; 0x10c
    1f04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1f08:	f1b8 0f0f 	cmp.w	r8, #15
    1f0c:	d8f8      	bhi.n	1f00 <_Unwind_VRS_Pop+0x184>
    1f0e:	6833      	ldr	r3, [r6, #0]
    1f10:	07da      	lsls	r2, r3, #31
    1f12:	d506      	bpl.n	1f22 <_Unwind_VRS_Pop+0x1a6>
    1f14:	4630      	mov	r0, r6
    1f16:	f023 0303 	bic.w	r3, r3, #3
    1f1a:	f840 3b48 	str.w	r3, [r0], #72
    1f1e:	f000 f879 	bl	2014 <__gnu_Unwind_Save_VFP>
    1f22:	af20      	add	r7, sp, #128	; 0x80
    1f24:	4638      	mov	r0, r7
    1f26:	f000 f875 	bl	2014 <__gnu_Unwind_Save_VFP>
    1f2a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1f2c:	2d00      	cmp	r5, #0
    1f2e:	d199      	bne.n	1e64 <_Unwind_VRS_Pop+0xe8>
    1f30:	461d      	mov	r5, r3
    1f32:	3504      	adds	r5, #4
    1f34:	63b5      	str	r5, [r6, #56]	; 0x38
    1f36:	4638      	mov	r0, r7
    1f38:	f000 f868 	bl	200c <__gnu_Unwind_Restore_VFP>
    1f3c:	e7bf      	b.n	1ebe <_Unwind_VRS_Pop+0x142>
    1f3e:	a820      	add	r0, sp, #128	; 0x80
    1f40:	f000 f86c 	bl	201c <__gnu_Unwind_Restore_VFP_D>
    1f44:	e7b5      	b.n	1eb2 <_Unwind_VRS_Pop+0x136>
    1f46:	f1b9 0f10 	cmp.w	r9, #16
    1f4a:	d940      	bls.n	1fce <_Unwind_VRS_Pop+0x252>
    1f4c:	f1a9 0910 	sub.w	r9, r9, #16
    1f50:	6833      	ldr	r3, [r6, #0]
    1f52:	07d9      	lsls	r1, r3, #31
    1f54:	d508      	bpl.n	1f68 <_Unwind_VRS_Pop+0x1ec>
    1f56:	f023 0301 	bic.w	r3, r3, #1
    1f5a:	4630      	mov	r0, r6
    1f5c:	f043 0302 	orr.w	r3, r3, #2
    1f60:	f840 3b48 	str.w	r3, [r0], #72
    1f64:	f000 f85e 	bl	2024 <__gnu_Unwind_Save_VFP_D>
    1f68:	f1b9 0f00 	cmp.w	r9, #0
    1f6c:	d032      	beq.n	1fd4 <_Unwind_VRS_Pop+0x258>
    1f6e:	6833      	ldr	r3, [r6, #0]
    1f70:	075a      	lsls	r2, r3, #29
    1f72:	d420      	bmi.n	1fb6 <_Unwind_VRS_Pop+0x23a>
    1f74:	f1b8 0f0f 	cmp.w	r8, #15
    1f78:	d925      	bls.n	1fc6 <_Unwind_VRS_Pop+0x24a>
    1f7a:	466f      	mov	r7, sp
    1f7c:	4638      	mov	r0, r7
    1f7e:	f1c8 0510 	rsb	r5, r8, #16
    1f82:	f000 f857 	bl	2034 <__gnu_Unwind_Save_VFP_D_16_to_31>
    1f86:	2d00      	cmp	r5, #0
    1f88:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1f8a:	f77f af7c 	ble.w	1e86 <_Unwind_VRS_Pop+0x10a>
    1f8e:	af20      	add	r7, sp, #128	; 0x80
    1f90:	e76a      	b.n	1e68 <_Unwind_VRS_Pop+0xec>
    1f92:	f023 0310 	bic.w	r3, r3, #16
    1f96:	6033      	str	r3, [r6, #0]
    1f98:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
    1f9c:	f000 f89c 	bl	20d8 <__gnu_Unwind_Save_WMMXC>
    1fa0:	e704      	b.n	1dac <_Unwind_VRS_Pop+0x30>
    1fa2:	f023 0308 	bic.w	r3, r3, #8
    1fa6:	6003      	str	r3, [r0, #0]
    1fa8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    1fac:	f000 f868 	bl	2080 <__gnu_Unwind_Save_WMMXD>
    1fb0:	e727      	b.n	1e02 <_Unwind_VRS_Pop+0x86>
    1fb2:	af20      	add	r7, sp, #128	; 0x80
    1fb4:	e7bd      	b.n	1f32 <_Unwind_VRS_Pop+0x1b6>
    1fb6:	4630      	mov	r0, r6
    1fb8:	f023 0304 	bic.w	r3, r3, #4
    1fbc:	f840 3bd0 	str.w	r3, [r0], #208
    1fc0:	f000 f838 	bl	2034 <__gnu_Unwind_Save_VFP_D_16_to_31>
    1fc4:	e7d6      	b.n	1f74 <_Unwind_VRS_Pop+0x1f8>
    1fc6:	a820      	add	r0, sp, #128	; 0x80
    1fc8:	f000 f82c 	bl	2024 <__gnu_Unwind_Save_VFP_D>
    1fcc:	e7d5      	b.n	1f7a <_Unwind_VRS_Pop+0x1fe>
    1fce:	f04f 0900 	mov.w	r9, #0
    1fd2:	e7bd      	b.n	1f50 <_Unwind_VRS_Pop+0x1d4>
    1fd4:	f1b8 0f0f 	cmp.w	r8, #15
    1fd8:	f63f af41 	bhi.w	1e5e <_Unwind_VRS_Pop+0xe2>
    1fdc:	af20      	add	r7, sp, #128	; 0x80
    1fde:	4638      	mov	r0, r7
    1fe0:	f000 f820 	bl	2024 <__gnu_Unwind_Save_VFP_D>
    1fe4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1fe6:	2d00      	cmp	r5, #0
    1fe8:	f47f af3c 	bne.w	1e64 <_Unwind_VRS_Pop+0xe8>
    1fec:	4638      	mov	r0, r7
    1fee:	f000 f815 	bl	201c <__gnu_Unwind_Restore_VFP_D>
    1ff2:	e764      	b.n	1ebe <_Unwind_VRS_Pop+0x142>

00001ff4 <__restore_core_regs>:
    1ff4:	f100 0134 	add.w	r1, r0, #52	; 0x34
    1ff8:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    1ffc:	469c      	mov	ip, r3
    1ffe:	46a6      	mov	lr, r4
    2000:	f84c 5d04 	str.w	r5, [ip, #-4]!
    2004:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    2008:	46e5      	mov	sp, ip
    200a:	bd00      	pop	{pc}

0000200c <__gnu_Unwind_Restore_VFP>:
    200c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    2010:	4770      	bx	lr
    2012:	bf00      	nop

00002014 <__gnu_Unwind_Save_VFP>:
    2014:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    2018:	4770      	bx	lr
    201a:	bf00      	nop

0000201c <__gnu_Unwind_Restore_VFP_D>:
    201c:	ec90 0b20 	vldmia	r0, {d0-d15}
    2020:	4770      	bx	lr
    2022:	bf00      	nop

00002024 <__gnu_Unwind_Save_VFP_D>:
    2024:	ec80 0b20 	vstmia	r0, {d0-d15}
    2028:	4770      	bx	lr
    202a:	bf00      	nop

0000202c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    202c:	ecd0 0b20 	vldmia	r0, {d16-d31}
    2030:	4770      	bx	lr
    2032:	bf00      	nop

00002034 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    2034:	ecc0 0b20 	vstmia	r0, {d16-d31}
    2038:	4770      	bx	lr
    203a:	bf00      	nop

0000203c <__gnu_Unwind_Restore_WMMXD>:
    203c:	ecf0 0102 	ldfe	f0, [r0], #8
    2040:	ecf0 1102 	ldfe	f1, [r0], #8
    2044:	ecf0 2102 	ldfe	f2, [r0], #8
    2048:	ecf0 3102 	ldfe	f3, [r0], #8
    204c:	ecf0 4102 	ldfe	f4, [r0], #8
    2050:	ecf0 5102 	ldfe	f5, [r0], #8
    2054:	ecf0 6102 	ldfe	f6, [r0], #8
    2058:	ecf0 7102 	ldfe	f7, [r0], #8
    205c:	ecf0 8102 	ldfp	f0, [r0], #8
    2060:	ecf0 9102 	ldfp	f1, [r0], #8
    2064:	ecf0 a102 	ldfp	f2, [r0], #8
    2068:	ecf0 b102 	ldfp	f3, [r0], #8
    206c:	ecf0 c102 	ldfp	f4, [r0], #8
    2070:	ecf0 d102 	ldfp	f5, [r0], #8
    2074:	ecf0 e102 	ldfp	f6, [r0], #8
    2078:	ecf0 f102 	ldfp	f7, [r0], #8
    207c:	4770      	bx	lr
    207e:	bf00      	nop

00002080 <__gnu_Unwind_Save_WMMXD>:
    2080:	ece0 0102 	stfe	f0, [r0], #8
    2084:	ece0 1102 	stfe	f1, [r0], #8
    2088:	ece0 2102 	stfe	f2, [r0], #8
    208c:	ece0 3102 	stfe	f3, [r0], #8
    2090:	ece0 4102 	stfe	f4, [r0], #8
    2094:	ece0 5102 	stfe	f5, [r0], #8
    2098:	ece0 6102 	stfe	f6, [r0], #8
    209c:	ece0 7102 	stfe	f7, [r0], #8
    20a0:	ece0 8102 	stfp	f0, [r0], #8
    20a4:	ece0 9102 	stfp	f1, [r0], #8
    20a8:	ece0 a102 	stfp	f2, [r0], #8
    20ac:	ece0 b102 	stfp	f3, [r0], #8
    20b0:	ece0 c102 	stfp	f4, [r0], #8
    20b4:	ece0 d102 	stfp	f5, [r0], #8
    20b8:	ece0 e102 	stfp	f6, [r0], #8
    20bc:	ece0 f102 	stfp	f7, [r0], #8
    20c0:	4770      	bx	lr
    20c2:	bf00      	nop

000020c4 <__gnu_Unwind_Restore_WMMXC>:
    20c4:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    20c8:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    20cc:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    20d0:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    20d4:	4770      	bx	lr
    20d6:	bf00      	nop

000020d8 <__gnu_Unwind_Save_WMMXC>:
    20d8:	fca0 8101 	stc2	1, cr8, [r0], #4
    20dc:	fca0 9101 	stc2	1, cr9, [r0], #4
    20e0:	fca0 a101 	stc2	1, cr10, [r0], #4
    20e4:	fca0 b101 	stc2	1, cr11, [r0], #4
    20e8:	4770      	bx	lr
    20ea:	bf00      	nop

000020ec <_Unwind_RaiseException>:
    20ec:	46ec      	mov	ip, sp
    20ee:	b500      	push	{lr}
    20f0:	e92d 5000 	stmdb	sp!, {ip, lr}
    20f4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    20f8:	f04f 0300 	mov.w	r3, #0
    20fc:	e92d 000c 	stmdb	sp!, {r2, r3}
    2100:	a901      	add	r1, sp, #4
    2102:	f7ff fbf1 	bl	18e8 <__gnu_Unwind_RaiseException>
    2106:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    210a:	b012      	add	sp, #72	; 0x48
    210c:	4770      	bx	lr
    210e:	bf00      	nop

00002110 <_Unwind_Resume>:
    2110:	46ec      	mov	ip, sp
    2112:	b500      	push	{lr}
    2114:	e92d 5000 	stmdb	sp!, {ip, lr}
    2118:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    211c:	f04f 0300 	mov.w	r3, #0
    2120:	e92d 000c 	stmdb	sp!, {r2, r3}
    2124:	a901      	add	r1, sp, #4
    2126:	f7ff fc19 	bl	195c <__gnu_Unwind_Resume>
    212a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    212e:	b012      	add	sp, #72	; 0x48
    2130:	4770      	bx	lr
    2132:	bf00      	nop

00002134 <_Unwind_Resume_or_Rethrow>:
    2134:	46ec      	mov	ip, sp
    2136:	b500      	push	{lr}
    2138:	e92d 5000 	stmdb	sp!, {ip, lr}
    213c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2140:	f04f 0300 	mov.w	r3, #0
    2144:	e92d 000c 	stmdb	sp!, {r2, r3}
    2148:	a901      	add	r1, sp, #4
    214a:	f7ff fc29 	bl	19a0 <__gnu_Unwind_Resume_or_Rethrow>
    214e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    2152:	b012      	add	sp, #72	; 0x48
    2154:	4770      	bx	lr
    2156:	bf00      	nop

00002158 <_Unwind_ForcedUnwind>:
    2158:	46ec      	mov	ip, sp
    215a:	b500      	push	{lr}
    215c:	e92d 5000 	stmdb	sp!, {ip, lr}
    2160:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2164:	f04f 0300 	mov.w	r3, #0
    2168:	e92d 000c 	stmdb	sp!, {r2, r3}
    216c:	ab01      	add	r3, sp, #4
    216e:	f7ff fbeb 	bl	1948 <__gnu_Unwind_ForcedUnwind>
    2172:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    2176:	b012      	add	sp, #72	; 0x48
    2178:	4770      	bx	lr
    217a:	bf00      	nop

0000217c <_Unwind_Backtrace>:
    217c:	46ec      	mov	ip, sp
    217e:	b500      	push	{lr}
    2180:	e92d 5000 	stmdb	sp!, {ip, lr}
    2184:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2188:	f04f 0300 	mov.w	r3, #0
    218c:	e92d 000c 	stmdb	sp!, {r2, r3}
    2190:	aa01      	add	r2, sp, #4
    2192:	f7ff fc5d 	bl	1a50 <__gnu_Unwind_Backtrace>
    2196:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    219a:	b012      	add	sp, #72	; 0x48
    219c:	4770      	bx	lr
    219e:	bf00      	nop

000021a0 <next_unwind_byte>:
    21a0:	7a02      	ldrb	r2, [r0, #8]
    21a2:	b97a      	cbnz	r2, 21c4 <next_unwind_byte+0x24>
    21a4:	7a43      	ldrb	r3, [r0, #9]
    21a6:	b1a3      	cbz	r3, 21d2 <next_unwind_byte+0x32>
    21a8:	6842      	ldr	r2, [r0, #4]
    21aa:	3b01      	subs	r3, #1
    21ac:	b410      	push	{r4}
    21ae:	7243      	strb	r3, [r0, #9]
    21b0:	6813      	ldr	r3, [r2, #0]
    21b2:	2103      	movs	r1, #3
    21b4:	1d14      	adds	r4, r2, #4
    21b6:	7201      	strb	r1, [r0, #8]
    21b8:	021a      	lsls	r2, r3, #8
    21ba:	6044      	str	r4, [r0, #4]
    21bc:	6002      	str	r2, [r0, #0]
    21be:	bc10      	pop	{r4}
    21c0:	0e18      	lsrs	r0, r3, #24
    21c2:	4770      	bx	lr
    21c4:	6803      	ldr	r3, [r0, #0]
    21c6:	3a01      	subs	r2, #1
    21c8:	7202      	strb	r2, [r0, #8]
    21ca:	021a      	lsls	r2, r3, #8
    21cc:	6002      	str	r2, [r0, #0]
    21ce:	0e18      	lsrs	r0, r3, #24
    21d0:	4770      	bx	lr
    21d2:	20b0      	movs	r0, #176	; 0xb0
    21d4:	4770      	bx	lr
    21d6:	bf00      	nop

000021d8 <_Unwind_GetGR.constprop.0>:
    21d8:	b500      	push	{lr}
    21da:	b085      	sub	sp, #20
    21dc:	aa03      	add	r2, sp, #12
    21de:	2300      	movs	r3, #0
    21e0:	9200      	str	r2, [sp, #0]
    21e2:	4619      	mov	r1, r3
    21e4:	220c      	movs	r2, #12
    21e6:	f7ff fbeb 	bl	19c0 <_Unwind_VRS_Get>
    21ea:	9803      	ldr	r0, [sp, #12]
    21ec:	b005      	add	sp, #20
    21ee:	f85d fb04 	ldr.w	pc, [sp], #4
    21f2:	bf00      	nop

000021f4 <unwind_UCB_from_context>:
    21f4:	e7f0      	b.n	21d8 <_Unwind_GetGR.constprop.0>
    21f6:	bf00      	nop

000021f8 <__gnu_unwind_execute>:
    21f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    21fc:	4605      	mov	r5, r0
    21fe:	b085      	sub	sp, #20
    2200:	460e      	mov	r6, r1
    2202:	f04f 0800 	mov.w	r8, #0
    2206:	4630      	mov	r0, r6
    2208:	f7ff ffca 	bl	21a0 <next_unwind_byte>
    220c:	28b0      	cmp	r0, #176	; 0xb0
    220e:	4604      	mov	r4, r0
    2210:	f000 80b2 	beq.w	2378 <__gnu_unwind_execute+0x180>
    2214:	0607      	lsls	r7, r0, #24
    2216:	d520      	bpl.n	225a <__gnu_unwind_execute+0x62>
    2218:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    221c:	2b80      	cmp	r3, #128	; 0x80
    221e:	d04d      	beq.n	22bc <__gnu_unwind_execute+0xc4>
    2220:	2b90      	cmp	r3, #144	; 0x90
    2222:	d036      	beq.n	2292 <__gnu_unwind_execute+0x9a>
    2224:	2ba0      	cmp	r3, #160	; 0xa0
    2226:	d060      	beq.n	22ea <__gnu_unwind_execute+0xf2>
    2228:	2bb0      	cmp	r3, #176	; 0xb0
    222a:	d074      	beq.n	2316 <__gnu_unwind_execute+0x11e>
    222c:	2bc0      	cmp	r3, #192	; 0xc0
    222e:	f000 808b 	beq.w	2348 <__gnu_unwind_execute+0x150>
    2232:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    2236:	2bd0      	cmp	r3, #208	; 0xd0
    2238:	d10b      	bne.n	2252 <__gnu_unwind_execute+0x5a>
    223a:	f000 0207 	and.w	r2, r0, #7
    223e:	3201      	adds	r2, #1
    2240:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    2244:	2305      	movs	r3, #5
    2246:	2101      	movs	r1, #1
    2248:	4628      	mov	r0, r5
    224a:	f7ff fd97 	bl	1d7c <_Unwind_VRS_Pop>
    224e:	2800      	cmp	r0, #0
    2250:	d0d9      	beq.n	2206 <__gnu_unwind_execute+0xe>
    2252:	2009      	movs	r0, #9
    2254:	b005      	add	sp, #20
    2256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    225a:	f10d 090c 	add.w	r9, sp, #12
    225e:	2300      	movs	r3, #0
    2260:	4619      	mov	r1, r3
    2262:	0087      	lsls	r7, r0, #2
    2264:	f8cd 9000 	str.w	r9, [sp]
    2268:	220d      	movs	r2, #13
    226a:	4628      	mov	r0, r5
    226c:	f7ff fba8 	bl	19c0 <_Unwind_VRS_Get>
    2270:	b2ff      	uxtb	r7, r7
    2272:	9b03      	ldr	r3, [sp, #12]
    2274:	f8cd 9000 	str.w	r9, [sp]
    2278:	3704      	adds	r7, #4
    227a:	0660      	lsls	r0, r4, #25
    227c:	bf4c      	ite	mi
    227e:	1bdf      	submi	r7, r3, r7
    2280:	18ff      	addpl	r7, r7, r3
    2282:	2300      	movs	r3, #0
    2284:	4619      	mov	r1, r3
    2286:	220d      	movs	r2, #13
    2288:	4628      	mov	r0, r5
    228a:	9703      	str	r7, [sp, #12]
    228c:	f7ff fbbc 	bl	1a08 <_Unwind_VRS_Set>
    2290:	e7b9      	b.n	2206 <__gnu_unwind_execute+0xe>
    2292:	f000 030d 	and.w	r3, r0, #13
    2296:	2b0d      	cmp	r3, #13
    2298:	d0db      	beq.n	2252 <__gnu_unwind_execute+0x5a>
    229a:	af03      	add	r7, sp, #12
    229c:	2300      	movs	r3, #0
    229e:	f000 020f 	and.w	r2, r0, #15
    22a2:	4619      	mov	r1, r3
    22a4:	9700      	str	r7, [sp, #0]
    22a6:	4628      	mov	r0, r5
    22a8:	f7ff fb8a 	bl	19c0 <_Unwind_VRS_Get>
    22ac:	2300      	movs	r3, #0
    22ae:	9700      	str	r7, [sp, #0]
    22b0:	4619      	mov	r1, r3
    22b2:	220d      	movs	r2, #13
    22b4:	4628      	mov	r0, r5
    22b6:	f7ff fba7 	bl	1a08 <_Unwind_VRS_Set>
    22ba:	e7a4      	b.n	2206 <__gnu_unwind_execute+0xe>
    22bc:	4630      	mov	r0, r6
    22be:	f7ff ff6f 	bl	21a0 <next_unwind_byte>
    22c2:	0224      	lsls	r4, r4, #8
    22c4:	4320      	orrs	r0, r4
    22c6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    22ca:	d0c2      	beq.n	2252 <__gnu_unwind_execute+0x5a>
    22cc:	0104      	lsls	r4, r0, #4
    22ce:	2300      	movs	r3, #0
    22d0:	b2a2      	uxth	r2, r4
    22d2:	4619      	mov	r1, r3
    22d4:	4628      	mov	r0, r5
    22d6:	f7ff fd51 	bl	1d7c <_Unwind_VRS_Pop>
    22da:	2800      	cmp	r0, #0
    22dc:	d1b9      	bne.n	2252 <__gnu_unwind_execute+0x5a>
    22de:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    22e2:	bf18      	it	ne
    22e4:	f04f 0801 	movne.w	r8, #1
    22e8:	e78d      	b.n	2206 <__gnu_unwind_execute+0xe>
    22ea:	43c2      	mvns	r2, r0
    22ec:	f002 0307 	and.w	r3, r2, #7
    22f0:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    22f4:	411a      	asrs	r2, r3
    22f6:	0701      	lsls	r1, r0, #28
    22f8:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    22fc:	f04f 0300 	mov.w	r3, #0
    2300:	bf48      	it	mi
    2302:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    2306:	4619      	mov	r1, r3
    2308:	4628      	mov	r0, r5
    230a:	f7ff fd37 	bl	1d7c <_Unwind_VRS_Pop>
    230e:	2800      	cmp	r0, #0
    2310:	f43f af79 	beq.w	2206 <__gnu_unwind_execute+0xe>
    2314:	e79d      	b.n	2252 <__gnu_unwind_execute+0x5a>
    2316:	28b1      	cmp	r0, #177	; 0xb1
    2318:	d033      	beq.n	2382 <__gnu_unwind_execute+0x18a>
    231a:	28b2      	cmp	r0, #178	; 0xb2
    231c:	f000 808b 	beq.w	2436 <__gnu_unwind_execute+0x23e>
    2320:	28b3      	cmp	r0, #179	; 0xb3
    2322:	d039      	beq.n	2398 <__gnu_unwind_execute+0x1a0>
    2324:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    2328:	2bb4      	cmp	r3, #180	; 0xb4
    232a:	d092      	beq.n	2252 <__gnu_unwind_execute+0x5a>
    232c:	f000 0207 	and.w	r2, r0, #7
    2330:	3201      	adds	r2, #1
    2332:	2301      	movs	r3, #1
    2334:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    2338:	4619      	mov	r1, r3
    233a:	4628      	mov	r0, r5
    233c:	f7ff fd1e 	bl	1d7c <_Unwind_VRS_Pop>
    2340:	2800      	cmp	r0, #0
    2342:	f43f af60 	beq.w	2206 <__gnu_unwind_execute+0xe>
    2346:	e784      	b.n	2252 <__gnu_unwind_execute+0x5a>
    2348:	28c6      	cmp	r0, #198	; 0xc6
    234a:	d042      	beq.n	23d2 <__gnu_unwind_execute+0x1da>
    234c:	28c7      	cmp	r0, #199	; 0xc7
    234e:	d04c      	beq.n	23ea <__gnu_unwind_execute+0x1f2>
    2350:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    2354:	2bc0      	cmp	r3, #192	; 0xc0
    2356:	d05b      	beq.n	2410 <__gnu_unwind_execute+0x218>
    2358:	28c8      	cmp	r0, #200	; 0xc8
    235a:	d060      	beq.n	241e <__gnu_unwind_execute+0x226>
    235c:	28c9      	cmp	r0, #201	; 0xc9
    235e:	f47f af78 	bne.w	2252 <__gnu_unwind_execute+0x5a>
    2362:	4630      	mov	r0, r6
    2364:	f7ff ff1c 	bl	21a0 <next_unwind_byte>
    2368:	0302      	lsls	r2, r0, #12
    236a:	f000 000f 	and.w	r0, r0, #15
    236e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    2372:	3001      	adds	r0, #1
    2374:	4302      	orrs	r2, r0
    2376:	e765      	b.n	2244 <__gnu_unwind_execute+0x4c>
    2378:	f1b8 0f00 	cmp.w	r8, #0
    237c:	d018      	beq.n	23b0 <__gnu_unwind_execute+0x1b8>
    237e:	2000      	movs	r0, #0
    2380:	e768      	b.n	2254 <__gnu_unwind_execute+0x5c>
    2382:	4630      	mov	r0, r6
    2384:	f7ff ff0c 	bl	21a0 <next_unwind_byte>
    2388:	4602      	mov	r2, r0
    238a:	2800      	cmp	r0, #0
    238c:	f43f af61 	beq.w	2252 <__gnu_unwind_execute+0x5a>
    2390:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    2394:	d0d0      	beq.n	2338 <__gnu_unwind_execute+0x140>
    2396:	e75c      	b.n	2252 <__gnu_unwind_execute+0x5a>
    2398:	4630      	mov	r0, r6
    239a:	f7ff ff01 	bl	21a0 <next_unwind_byte>
    239e:	0301      	lsls	r1, r0, #12
    23a0:	f000 000f 	and.w	r0, r0, #15
    23a4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    23a8:	1c42      	adds	r2, r0, #1
    23aa:	2301      	movs	r3, #1
    23ac:	430a      	orrs	r2, r1
    23ae:	e7c3      	b.n	2338 <__gnu_unwind_execute+0x140>
    23b0:	ac03      	add	r4, sp, #12
    23b2:	4643      	mov	r3, r8
    23b4:	220e      	movs	r2, #14
    23b6:	4641      	mov	r1, r8
    23b8:	9400      	str	r4, [sp, #0]
    23ba:	4628      	mov	r0, r5
    23bc:	f7ff fb00 	bl	19c0 <_Unwind_VRS_Get>
    23c0:	9400      	str	r4, [sp, #0]
    23c2:	4628      	mov	r0, r5
    23c4:	4643      	mov	r3, r8
    23c6:	220f      	movs	r2, #15
    23c8:	4641      	mov	r1, r8
    23ca:	f7ff fb1d 	bl	1a08 <_Unwind_VRS_Set>
    23ce:	4640      	mov	r0, r8
    23d0:	e740      	b.n	2254 <__gnu_unwind_execute+0x5c>
    23d2:	4630      	mov	r0, r6
    23d4:	f7ff fee4 	bl	21a0 <next_unwind_byte>
    23d8:	0301      	lsls	r1, r0, #12
    23da:	f000 000f 	and.w	r0, r0, #15
    23de:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    23e2:	1c42      	adds	r2, r0, #1
    23e4:	2303      	movs	r3, #3
    23e6:	430a      	orrs	r2, r1
    23e8:	e7a6      	b.n	2338 <__gnu_unwind_execute+0x140>
    23ea:	4630      	mov	r0, r6
    23ec:	f7ff fed8 	bl	21a0 <next_unwind_byte>
    23f0:	4602      	mov	r2, r0
    23f2:	2800      	cmp	r0, #0
    23f4:	f43f af2d 	beq.w	2252 <__gnu_unwind_execute+0x5a>
    23f8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    23fc:	f47f af29 	bne.w	2252 <__gnu_unwind_execute+0x5a>
    2400:	2104      	movs	r1, #4
    2402:	4628      	mov	r0, r5
    2404:	f7ff fcba 	bl	1d7c <_Unwind_VRS_Pop>
    2408:	2800      	cmp	r0, #0
    240a:	f43f aefc 	beq.w	2206 <__gnu_unwind_execute+0xe>
    240e:	e720      	b.n	2252 <__gnu_unwind_execute+0x5a>
    2410:	f000 020f 	and.w	r2, r0, #15
    2414:	3201      	adds	r2, #1
    2416:	2303      	movs	r3, #3
    2418:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    241c:	e78c      	b.n	2338 <__gnu_unwind_execute+0x140>
    241e:	4630      	mov	r0, r6
    2420:	f7ff febe 	bl	21a0 <next_unwind_byte>
    2424:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    2428:	f000 030f 	and.w	r3, r0, #15
    242c:	3210      	adds	r2, #16
    242e:	3301      	adds	r3, #1
    2430:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    2434:	e706      	b.n	2244 <__gnu_unwind_execute+0x4c>
    2436:	2300      	movs	r3, #0
    2438:	f10d 090c 	add.w	r9, sp, #12
    243c:	220d      	movs	r2, #13
    243e:	4619      	mov	r1, r3
    2440:	f8cd 9000 	str.w	r9, [sp]
    2444:	4628      	mov	r0, r5
    2446:	f7ff fabb 	bl	19c0 <_Unwind_VRS_Get>
    244a:	4630      	mov	r0, r6
    244c:	f7ff fea8 	bl	21a0 <next_unwind_byte>
    2450:	0602      	lsls	r2, r0, #24
    2452:	f04f 0702 	mov.w	r7, #2
    2456:	d50c      	bpl.n	2472 <__gnu_unwind_execute+0x27a>
    2458:	9b03      	ldr	r3, [sp, #12]
    245a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    245e:	40b8      	lsls	r0, r7
    2460:	4403      	add	r3, r0
    2462:	4630      	mov	r0, r6
    2464:	9303      	str	r3, [sp, #12]
    2466:	f7ff fe9b 	bl	21a0 <next_unwind_byte>
    246a:	0603      	lsls	r3, r0, #24
    246c:	f107 0707 	add.w	r7, r7, #7
    2470:	d4f2      	bmi.n	2458 <__gnu_unwind_execute+0x260>
    2472:	9b03      	ldr	r3, [sp, #12]
    2474:	f8cd 9000 	str.w	r9, [sp]
    2478:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    247c:	f503 7201 	add.w	r2, r3, #516	; 0x204
    2480:	40bc      	lsls	r4, r7
    2482:	2300      	movs	r3, #0
    2484:	4414      	add	r4, r2
    2486:	4619      	mov	r1, r3
    2488:	220d      	movs	r2, #13
    248a:	4628      	mov	r0, r5
    248c:	9403      	str	r4, [sp, #12]
    248e:	f7ff fabb 	bl	1a08 <_Unwind_VRS_Set>
    2492:	e6b8      	b.n	2206 <__gnu_unwind_execute+0xe>

00002494 <__gnu_unwind_frame>:
    2494:	b510      	push	{r4, lr}
    2496:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    2498:	b084      	sub	sp, #16
    249a:	6853      	ldr	r3, [r2, #4]
    249c:	2403      	movs	r4, #3
    249e:	f88d 400c 	strb.w	r4, [sp, #12]
    24a2:	021b      	lsls	r3, r3, #8
    24a4:	f102 0408 	add.w	r4, r2, #8
    24a8:	4608      	mov	r0, r1
    24aa:	79d2      	ldrb	r2, [r2, #7]
    24ac:	9301      	str	r3, [sp, #4]
    24ae:	a901      	add	r1, sp, #4
    24b0:	9402      	str	r4, [sp, #8]
    24b2:	f88d 200d 	strb.w	r2, [sp, #13]
    24b6:	f7ff fe9f 	bl	21f8 <__gnu_unwind_execute>
    24ba:	b004      	add	sp, #16
    24bc:	bd10      	pop	{r4, pc}
    24be:	bf00      	nop

000024c0 <_Unwind_GetRegionStart>:
    24c0:	b508      	push	{r3, lr}
    24c2:	f7ff fe97 	bl	21f4 <unwind_UCB_from_context>
    24c6:	6c80      	ldr	r0, [r0, #72]	; 0x48
    24c8:	bd08      	pop	{r3, pc}
    24ca:	bf00      	nop

000024cc <_Unwind_GetLanguageSpecificData>:
    24cc:	b508      	push	{r3, lr}
    24ce:	f7ff fe91 	bl	21f4 <unwind_UCB_from_context>
    24d2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    24d4:	79c3      	ldrb	r3, [r0, #7]
    24d6:	3302      	adds	r3, #2
    24d8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    24dc:	bd08      	pop	{r3, pc}
    24de:	bf00      	nop

000024e0 <abort>:
    24e0:	b508      	push	{r3, lr}
    24e2:	2006      	movs	r0, #6
    24e4:	f000 f91a 	bl	271c <raise>
    24e8:	2001      	movs	r0, #1
    24ea:	f000 fb8d 	bl	2c08 <_exit>
	...

000024f0 <__cxa_atexit>:
    24f0:	b510      	push	{r4, lr}
    24f2:	4c05      	ldr	r4, [pc, #20]	; (2508 <__cxa_atexit+0x18>)
    24f4:	4613      	mov	r3, r2
    24f6:	b12c      	cbz	r4, 2504 <__cxa_atexit+0x14>
    24f8:	460a      	mov	r2, r1
    24fa:	4601      	mov	r1, r0
    24fc:	2002      	movs	r0, #2
    24fe:	f3af 8000 	nop.w
    2502:	bd10      	pop	{r4, pc}
    2504:	4620      	mov	r0, r4
    2506:	e7fc      	b.n	2502 <__cxa_atexit+0x12>
    2508:	00000000 	.word	0x00000000

0000250c <malloc>:
    250c:	4b02      	ldr	r3, [pc, #8]	; (2518 <malloc+0xc>)
    250e:	4601      	mov	r1, r0
    2510:	6818      	ldr	r0, [r3, #0]
    2512:	f000 b871 	b.w	25f8 <_malloc_r>
    2516:	bf00      	nop
    2518:	20000008 	.word	0x20000008

0000251c <free>:
    251c:	4b02      	ldr	r3, [pc, #8]	; (2528 <free+0xc>)
    251e:	4601      	mov	r1, r0
    2520:	6818      	ldr	r0, [r3, #0]
    2522:	f000 b819 	b.w	2558 <_free_r>
    2526:	bf00      	nop
    2528:	20000008 	.word	0x20000008

0000252c <memcpy>:
    252c:	440a      	add	r2, r1
    252e:	4291      	cmp	r1, r2
    2530:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    2534:	d100      	bne.n	2538 <memcpy+0xc>
    2536:	4770      	bx	lr
    2538:	b510      	push	{r4, lr}
    253a:	f811 4b01 	ldrb.w	r4, [r1], #1
    253e:	f803 4f01 	strb.w	r4, [r3, #1]!
    2542:	4291      	cmp	r1, r2
    2544:	d1f9      	bne.n	253a <memcpy+0xe>
    2546:	bd10      	pop	{r4, pc}

00002548 <memset>:
    2548:	4402      	add	r2, r0
    254a:	4603      	mov	r3, r0
    254c:	4293      	cmp	r3, r2
    254e:	d100      	bne.n	2552 <memset+0xa>
    2550:	4770      	bx	lr
    2552:	f803 1b01 	strb.w	r1, [r3], #1
    2556:	e7f9      	b.n	254c <memset+0x4>

00002558 <_free_r>:
    2558:	b537      	push	{r0, r1, r2, r4, r5, lr}
    255a:	2900      	cmp	r1, #0
    255c:	d048      	beq.n	25f0 <_free_r+0x98>
    255e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2562:	9001      	str	r0, [sp, #4]
    2564:	2b00      	cmp	r3, #0
    2566:	f1a1 0404 	sub.w	r4, r1, #4
    256a:	bfb8      	it	lt
    256c:	18e4      	addlt	r4, r4, r3
    256e:	f000 f8f1 	bl	2754 <__malloc_lock>
    2572:	4a20      	ldr	r2, [pc, #128]	; (25f4 <_free_r+0x9c>)
    2574:	9801      	ldr	r0, [sp, #4]
    2576:	6813      	ldr	r3, [r2, #0]
    2578:	4615      	mov	r5, r2
    257a:	b933      	cbnz	r3, 258a <_free_r+0x32>
    257c:	6063      	str	r3, [r4, #4]
    257e:	6014      	str	r4, [r2, #0]
    2580:	b003      	add	sp, #12
    2582:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2586:	f000 b8eb 	b.w	2760 <__malloc_unlock>
    258a:	42a3      	cmp	r3, r4
    258c:	d90b      	bls.n	25a6 <_free_r+0x4e>
    258e:	6821      	ldr	r1, [r4, #0]
    2590:	1862      	adds	r2, r4, r1
    2592:	4293      	cmp	r3, r2
    2594:	bf04      	itt	eq
    2596:	681a      	ldreq	r2, [r3, #0]
    2598:	685b      	ldreq	r3, [r3, #4]
    259a:	6063      	str	r3, [r4, #4]
    259c:	bf04      	itt	eq
    259e:	1852      	addeq	r2, r2, r1
    25a0:	6022      	streq	r2, [r4, #0]
    25a2:	602c      	str	r4, [r5, #0]
    25a4:	e7ec      	b.n	2580 <_free_r+0x28>
    25a6:	461a      	mov	r2, r3
    25a8:	685b      	ldr	r3, [r3, #4]
    25aa:	b10b      	cbz	r3, 25b0 <_free_r+0x58>
    25ac:	42a3      	cmp	r3, r4
    25ae:	d9fa      	bls.n	25a6 <_free_r+0x4e>
    25b0:	6811      	ldr	r1, [r2, #0]
    25b2:	1855      	adds	r5, r2, r1
    25b4:	42a5      	cmp	r5, r4
    25b6:	d10b      	bne.n	25d0 <_free_r+0x78>
    25b8:	6824      	ldr	r4, [r4, #0]
    25ba:	4421      	add	r1, r4
    25bc:	1854      	adds	r4, r2, r1
    25be:	42a3      	cmp	r3, r4
    25c0:	6011      	str	r1, [r2, #0]
    25c2:	d1dd      	bne.n	2580 <_free_r+0x28>
    25c4:	681c      	ldr	r4, [r3, #0]
    25c6:	685b      	ldr	r3, [r3, #4]
    25c8:	6053      	str	r3, [r2, #4]
    25ca:	4421      	add	r1, r4
    25cc:	6011      	str	r1, [r2, #0]
    25ce:	e7d7      	b.n	2580 <_free_r+0x28>
    25d0:	d902      	bls.n	25d8 <_free_r+0x80>
    25d2:	230c      	movs	r3, #12
    25d4:	6003      	str	r3, [r0, #0]
    25d6:	e7d3      	b.n	2580 <_free_r+0x28>
    25d8:	6825      	ldr	r5, [r4, #0]
    25da:	1961      	adds	r1, r4, r5
    25dc:	428b      	cmp	r3, r1
    25de:	bf04      	itt	eq
    25e0:	6819      	ldreq	r1, [r3, #0]
    25e2:	685b      	ldreq	r3, [r3, #4]
    25e4:	6063      	str	r3, [r4, #4]
    25e6:	bf04      	itt	eq
    25e8:	1949      	addeq	r1, r1, r5
    25ea:	6021      	streq	r1, [r4, #0]
    25ec:	6054      	str	r4, [r2, #4]
    25ee:	e7c7      	b.n	2580 <_free_r+0x28>
    25f0:	b003      	add	sp, #12
    25f2:	bd30      	pop	{r4, r5, pc}
    25f4:	20000158 	.word	0x20000158

000025f8 <_malloc_r>:
    25f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    25fa:	1ccd      	adds	r5, r1, #3
    25fc:	f025 0503 	bic.w	r5, r5, #3
    2600:	3508      	adds	r5, #8
    2602:	2d0c      	cmp	r5, #12
    2604:	bf38      	it	cc
    2606:	250c      	movcc	r5, #12
    2608:	2d00      	cmp	r5, #0
    260a:	4606      	mov	r6, r0
    260c:	db01      	blt.n	2612 <_malloc_r+0x1a>
    260e:	42a9      	cmp	r1, r5
    2610:	d903      	bls.n	261a <_malloc_r+0x22>
    2612:	230c      	movs	r3, #12
    2614:	6033      	str	r3, [r6, #0]
    2616:	2000      	movs	r0, #0
    2618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    261a:	f000 f89b 	bl	2754 <__malloc_lock>
    261e:	4921      	ldr	r1, [pc, #132]	; (26a4 <_malloc_r+0xac>)
    2620:	680a      	ldr	r2, [r1, #0]
    2622:	4614      	mov	r4, r2
    2624:	b99c      	cbnz	r4, 264e <_malloc_r+0x56>
    2626:	4f20      	ldr	r7, [pc, #128]	; (26a8 <_malloc_r+0xb0>)
    2628:	683b      	ldr	r3, [r7, #0]
    262a:	b923      	cbnz	r3, 2636 <_malloc_r+0x3e>
    262c:	4621      	mov	r1, r4
    262e:	4630      	mov	r0, r6
    2630:	f000 f83c 	bl	26ac <_sbrk_r>
    2634:	6038      	str	r0, [r7, #0]
    2636:	4629      	mov	r1, r5
    2638:	4630      	mov	r0, r6
    263a:	f000 f837 	bl	26ac <_sbrk_r>
    263e:	1c43      	adds	r3, r0, #1
    2640:	d123      	bne.n	268a <_malloc_r+0x92>
    2642:	230c      	movs	r3, #12
    2644:	6033      	str	r3, [r6, #0]
    2646:	4630      	mov	r0, r6
    2648:	f000 f88a 	bl	2760 <__malloc_unlock>
    264c:	e7e3      	b.n	2616 <_malloc_r+0x1e>
    264e:	6823      	ldr	r3, [r4, #0]
    2650:	1b5b      	subs	r3, r3, r5
    2652:	d417      	bmi.n	2684 <_malloc_r+0x8c>
    2654:	2b0b      	cmp	r3, #11
    2656:	d903      	bls.n	2660 <_malloc_r+0x68>
    2658:	6023      	str	r3, [r4, #0]
    265a:	441c      	add	r4, r3
    265c:	6025      	str	r5, [r4, #0]
    265e:	e004      	b.n	266a <_malloc_r+0x72>
    2660:	6863      	ldr	r3, [r4, #4]
    2662:	42a2      	cmp	r2, r4
    2664:	bf0c      	ite	eq
    2666:	600b      	streq	r3, [r1, #0]
    2668:	6053      	strne	r3, [r2, #4]
    266a:	4630      	mov	r0, r6
    266c:	f000 f878 	bl	2760 <__malloc_unlock>
    2670:	f104 000b 	add.w	r0, r4, #11
    2674:	1d23      	adds	r3, r4, #4
    2676:	f020 0007 	bic.w	r0, r0, #7
    267a:	1ac2      	subs	r2, r0, r3
    267c:	d0cc      	beq.n	2618 <_malloc_r+0x20>
    267e:	1a1b      	subs	r3, r3, r0
    2680:	50a3      	str	r3, [r4, r2]
    2682:	e7c9      	b.n	2618 <_malloc_r+0x20>
    2684:	4622      	mov	r2, r4
    2686:	6864      	ldr	r4, [r4, #4]
    2688:	e7cc      	b.n	2624 <_malloc_r+0x2c>
    268a:	1cc4      	adds	r4, r0, #3
    268c:	f024 0403 	bic.w	r4, r4, #3
    2690:	42a0      	cmp	r0, r4
    2692:	d0e3      	beq.n	265c <_malloc_r+0x64>
    2694:	1a21      	subs	r1, r4, r0
    2696:	4630      	mov	r0, r6
    2698:	f000 f808 	bl	26ac <_sbrk_r>
    269c:	3001      	adds	r0, #1
    269e:	d1dd      	bne.n	265c <_malloc_r+0x64>
    26a0:	e7cf      	b.n	2642 <_malloc_r+0x4a>
    26a2:	bf00      	nop
    26a4:	20000158 	.word	0x20000158
    26a8:	2000015c 	.word	0x2000015c

000026ac <_sbrk_r>:
    26ac:	b538      	push	{r3, r4, r5, lr}
    26ae:	4d06      	ldr	r5, [pc, #24]	; (26c8 <_sbrk_r+0x1c>)
    26b0:	2300      	movs	r3, #0
    26b2:	4604      	mov	r4, r0
    26b4:	4608      	mov	r0, r1
    26b6:	602b      	str	r3, [r5, #0]
    26b8:	f000 f968 	bl	298c <_sbrk>
    26bc:	1c43      	adds	r3, r0, #1
    26be:	d102      	bne.n	26c6 <_sbrk_r+0x1a>
    26c0:	682b      	ldr	r3, [r5, #0]
    26c2:	b103      	cbz	r3, 26c6 <_sbrk_r+0x1a>
    26c4:	6023      	str	r3, [r4, #0]
    26c6:	bd38      	pop	{r3, r4, r5, pc}
    26c8:	20000204 	.word	0x20000204

000026cc <_raise_r>:
    26cc:	291f      	cmp	r1, #31
    26ce:	b538      	push	{r3, r4, r5, lr}
    26d0:	4604      	mov	r4, r0
    26d2:	460d      	mov	r5, r1
    26d4:	d904      	bls.n	26e0 <_raise_r+0x14>
    26d6:	2316      	movs	r3, #22
    26d8:	6003      	str	r3, [r0, #0]
    26da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    26de:	bd38      	pop	{r3, r4, r5, pc}
    26e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
    26e2:	b112      	cbz	r2, 26ea <_raise_r+0x1e>
    26e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    26e8:	b94b      	cbnz	r3, 26fe <_raise_r+0x32>
    26ea:	4620      	mov	r0, r4
    26ec:	f000 f830 	bl	2750 <_getpid_r>
    26f0:	462a      	mov	r2, r5
    26f2:	4601      	mov	r1, r0
    26f4:	4620      	mov	r0, r4
    26f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    26fa:	f000 b817 	b.w	272c <_kill_r>
    26fe:	2b01      	cmp	r3, #1
    2700:	d00a      	beq.n	2718 <_raise_r+0x4c>
    2702:	1c59      	adds	r1, r3, #1
    2704:	d103      	bne.n	270e <_raise_r+0x42>
    2706:	2316      	movs	r3, #22
    2708:	6003      	str	r3, [r0, #0]
    270a:	2001      	movs	r0, #1
    270c:	e7e7      	b.n	26de <_raise_r+0x12>
    270e:	2400      	movs	r4, #0
    2710:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    2714:	4628      	mov	r0, r5
    2716:	4798      	blx	r3
    2718:	2000      	movs	r0, #0
    271a:	e7e0      	b.n	26de <_raise_r+0x12>

0000271c <raise>:
    271c:	4b02      	ldr	r3, [pc, #8]	; (2728 <raise+0xc>)
    271e:	4601      	mov	r1, r0
    2720:	6818      	ldr	r0, [r3, #0]
    2722:	f7ff bfd3 	b.w	26cc <_raise_r>
    2726:	bf00      	nop
    2728:	20000008 	.word	0x20000008

0000272c <_kill_r>:
    272c:	b538      	push	{r3, r4, r5, lr}
    272e:	4d07      	ldr	r5, [pc, #28]	; (274c <_kill_r+0x20>)
    2730:	2300      	movs	r3, #0
    2732:	4604      	mov	r4, r0
    2734:	4608      	mov	r0, r1
    2736:	4611      	mov	r1, r2
    2738:	602b      	str	r3, [r5, #0]
    273a:	f000 fa83 	bl	2c44 <_kill>
    273e:	1c43      	adds	r3, r0, #1
    2740:	d102      	bne.n	2748 <_kill_r+0x1c>
    2742:	682b      	ldr	r3, [r5, #0]
    2744:	b103      	cbz	r3, 2748 <_kill_r+0x1c>
    2746:	6023      	str	r3, [r4, #0]
    2748:	bd38      	pop	{r3, r4, r5, pc}
    274a:	bf00      	nop
    274c:	20000204 	.word	0x20000204

00002750 <_getpid_r>:
    2750:	f000 b91a 	b.w	2988 <_getpid>

00002754 <__malloc_lock>:
    2754:	4801      	ldr	r0, [pc, #4]	; (275c <__malloc_lock+0x8>)
    2756:	f000 b80a 	b.w	276e <__retarget_lock_acquire_recursive>
    275a:	bf00      	nop
    275c:	2000020c 	.word	0x2000020c

00002760 <__malloc_unlock>:
    2760:	4801      	ldr	r0, [pc, #4]	; (2768 <__malloc_unlock+0x8>)
    2762:	f000 b805 	b.w	2770 <__retarget_lock_release_recursive>
    2766:	bf00      	nop
    2768:	2000020c 	.word	0x2000020c

0000276c <__retarget_lock_init_recursive>:
    276c:	4770      	bx	lr

0000276e <__retarget_lock_acquire_recursive>:
    276e:	4770      	bx	lr

00002770 <__retarget_lock_release_recursive>:
    2770:	4770      	bx	lr
	...

00002774 <findslot>:
    2774:	4b0a      	ldr	r3, [pc, #40]	; (27a0 <findslot+0x2c>)
    2776:	b510      	push	{r4, lr}
    2778:	4604      	mov	r4, r0
    277a:	6818      	ldr	r0, [r3, #0]
    277c:	b118      	cbz	r0, 2786 <findslot+0x12>
    277e:	6983      	ldr	r3, [r0, #24]
    2780:	b90b      	cbnz	r3, 2786 <findslot+0x12>
    2782:	f000 fac9 	bl	2d18 <__sinit>
    2786:	2c13      	cmp	r4, #19
    2788:	d807      	bhi.n	279a <findslot+0x26>
    278a:	4806      	ldr	r0, [pc, #24]	; (27a4 <findslot+0x30>)
    278c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
    2790:	3201      	adds	r2, #1
    2792:	d002      	beq.n	279a <findslot+0x26>
    2794:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    2798:	bd10      	pop	{r4, pc}
    279a:	2000      	movs	r0, #0
    279c:	e7fc      	b.n	2798 <findslot+0x24>
    279e:	bf00      	nop
    27a0:	20000008 	.word	0x20000008
    27a4:	20000164 	.word	0x20000164

000027a8 <checkerror>:
    27a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27aa:	1c43      	adds	r3, r0, #1
    27ac:	4604      	mov	r4, r0
    27ae:	d109      	bne.n	27c4 <checkerror+0x1c>
    27b0:	f000 fa54 	bl	2c5c <__errno>
    27b4:	2613      	movs	r6, #19
    27b6:	4605      	mov	r5, r0
    27b8:	2700      	movs	r7, #0
    27ba:	4630      	mov	r0, r6
    27bc:	4639      	mov	r1, r7
    27be:	beab      	bkpt	0x00ab
    27c0:	4606      	mov	r6, r0
    27c2:	602e      	str	r6, [r5, #0]
    27c4:	4620      	mov	r0, r4
    27c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000027c8 <error>:
    27c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27ca:	4604      	mov	r4, r0
    27cc:	f000 fa46 	bl	2c5c <__errno>
    27d0:	2613      	movs	r6, #19
    27d2:	4605      	mov	r5, r0
    27d4:	2700      	movs	r7, #0
    27d6:	4630      	mov	r0, r6
    27d8:	4639      	mov	r1, r7
    27da:	beab      	bkpt	0x00ab
    27dc:	4606      	mov	r6, r0
    27de:	602e      	str	r6, [r5, #0]
    27e0:	4620      	mov	r0, r4
    27e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000027e4 <_swiread>:
    27e4:	b530      	push	{r4, r5, lr}
    27e6:	b085      	sub	sp, #20
    27e8:	e9cd 0101 	strd	r0, r1, [sp, #4]
    27ec:	9203      	str	r2, [sp, #12]
    27ee:	2406      	movs	r4, #6
    27f0:	ad01      	add	r5, sp, #4
    27f2:	4620      	mov	r0, r4
    27f4:	4629      	mov	r1, r5
    27f6:	beab      	bkpt	0x00ab
    27f8:	4604      	mov	r4, r0
    27fa:	4620      	mov	r0, r4
    27fc:	f7ff ffd4 	bl	27a8 <checkerror>
    2800:	b005      	add	sp, #20
    2802:	bd30      	pop	{r4, r5, pc}

00002804 <_read>:
    2804:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2806:	4615      	mov	r5, r2
    2808:	9101      	str	r1, [sp, #4]
    280a:	f7ff ffb3 	bl	2774 <findslot>
    280e:	9901      	ldr	r1, [sp, #4]
    2810:	4604      	mov	r4, r0
    2812:	b938      	cbnz	r0, 2824 <_read+0x20>
    2814:	f000 fa22 	bl	2c5c <__errno>
    2818:	2309      	movs	r3, #9
    281a:	6003      	str	r3, [r0, #0]
    281c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2820:	b003      	add	sp, #12
    2822:	bd30      	pop	{r4, r5, pc}
    2824:	6800      	ldr	r0, [r0, #0]
    2826:	462a      	mov	r2, r5
    2828:	f7ff ffdc 	bl	27e4 <_swiread>
    282c:	1c43      	adds	r3, r0, #1
    282e:	d0f7      	beq.n	2820 <_read+0x1c>
    2830:	6863      	ldr	r3, [r4, #4]
    2832:	1a2a      	subs	r2, r5, r0
    2834:	4413      	add	r3, r2
    2836:	6063      	str	r3, [r4, #4]
    2838:	4610      	mov	r0, r2
    283a:	e7f1      	b.n	2820 <_read+0x1c>

0000283c <_swilseek>:
    283c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    283e:	460c      	mov	r4, r1
    2840:	4616      	mov	r6, r2
    2842:	f7ff ff97 	bl	2774 <findslot>
    2846:	4605      	mov	r5, r0
    2848:	b940      	cbnz	r0, 285c <_swilseek+0x20>
    284a:	f000 fa07 	bl	2c5c <__errno>
    284e:	2309      	movs	r3, #9
    2850:	6003      	str	r3, [r0, #0]
    2852:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2856:	4620      	mov	r0, r4
    2858:	b003      	add	sp, #12
    285a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    285c:	2e02      	cmp	r6, #2
    285e:	d903      	bls.n	2868 <_swilseek+0x2c>
    2860:	f000 f9fc 	bl	2c5c <__errno>
    2864:	2316      	movs	r3, #22
    2866:	e7f3      	b.n	2850 <_swilseek+0x14>
    2868:	2e01      	cmp	r6, #1
    286a:	d112      	bne.n	2892 <_swilseek+0x56>
    286c:	6843      	ldr	r3, [r0, #4]
    286e:	18e4      	adds	r4, r4, r3
    2870:	d4f6      	bmi.n	2860 <_swilseek+0x24>
    2872:	682b      	ldr	r3, [r5, #0]
    2874:	260a      	movs	r6, #10
    2876:	e9cd 3400 	strd	r3, r4, [sp]
    287a:	466f      	mov	r7, sp
    287c:	4630      	mov	r0, r6
    287e:	4639      	mov	r1, r7
    2880:	beab      	bkpt	0x00ab
    2882:	4606      	mov	r6, r0
    2884:	4630      	mov	r0, r6
    2886:	f7ff ff8f 	bl	27a8 <checkerror>
    288a:	2800      	cmp	r0, #0
    288c:	dbe1      	blt.n	2852 <_swilseek+0x16>
    288e:	606c      	str	r4, [r5, #4]
    2890:	e7e1      	b.n	2856 <_swilseek+0x1a>
    2892:	2e02      	cmp	r6, #2
    2894:	d1ed      	bne.n	2872 <_swilseek+0x36>
    2896:	6803      	ldr	r3, [r0, #0]
    2898:	9300      	str	r3, [sp, #0]
    289a:	260c      	movs	r6, #12
    289c:	466f      	mov	r7, sp
    289e:	4630      	mov	r0, r6
    28a0:	4639      	mov	r1, r7
    28a2:	beab      	bkpt	0x00ab
    28a4:	4606      	mov	r6, r0
    28a6:	4630      	mov	r0, r6
    28a8:	f7ff ff7e 	bl	27a8 <checkerror>
    28ac:	1c43      	adds	r3, r0, #1
    28ae:	d0d0      	beq.n	2852 <_swilseek+0x16>
    28b0:	4404      	add	r4, r0
    28b2:	e7de      	b.n	2872 <_swilseek+0x36>

000028b4 <_lseek>:
    28b4:	f7ff bfc2 	b.w	283c <_swilseek>

000028b8 <_swiwrite>:
    28b8:	b530      	push	{r4, r5, lr}
    28ba:	b085      	sub	sp, #20
    28bc:	e9cd 0101 	strd	r0, r1, [sp, #4]
    28c0:	9203      	str	r2, [sp, #12]
    28c2:	2405      	movs	r4, #5
    28c4:	ad01      	add	r5, sp, #4
    28c6:	4620      	mov	r0, r4
    28c8:	4629      	mov	r1, r5
    28ca:	beab      	bkpt	0x00ab
    28cc:	4604      	mov	r4, r0
    28ce:	4620      	mov	r0, r4
    28d0:	f7ff ff6a 	bl	27a8 <checkerror>
    28d4:	b005      	add	sp, #20
    28d6:	bd30      	pop	{r4, r5, pc}

000028d8 <_write>:
    28d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    28da:	4615      	mov	r5, r2
    28dc:	9101      	str	r1, [sp, #4]
    28de:	f7ff ff49 	bl	2774 <findslot>
    28e2:	9901      	ldr	r1, [sp, #4]
    28e4:	4604      	mov	r4, r0
    28e6:	b930      	cbnz	r0, 28f6 <_write+0x1e>
    28e8:	f000 f9b8 	bl	2c5c <__errno>
    28ec:	2309      	movs	r3, #9
    28ee:	6003      	str	r3, [r0, #0]
    28f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    28f4:	e012      	b.n	291c <_write+0x44>
    28f6:	6800      	ldr	r0, [r0, #0]
    28f8:	462a      	mov	r2, r5
    28fa:	f7ff ffdd 	bl	28b8 <_swiwrite>
    28fe:	2800      	cmp	r0, #0
    2900:	dbf6      	blt.n	28f0 <_write+0x18>
    2902:	6862      	ldr	r2, [r4, #4]
    2904:	1a2b      	subs	r3, r5, r0
    2906:	441a      	add	r2, r3
    2908:	42a8      	cmp	r0, r5
    290a:	6062      	str	r2, [r4, #4]
    290c:	d105      	bne.n	291a <_write+0x42>
    290e:	2000      	movs	r0, #0
    2910:	b003      	add	sp, #12
    2912:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2916:	f7ff bf57 	b.w	27c8 <error>
    291a:	4618      	mov	r0, r3
    291c:	b003      	add	sp, #12
    291e:	bd30      	pop	{r4, r5, pc}

00002920 <_swiclose>:
    2920:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2922:	2402      	movs	r4, #2
    2924:	9001      	str	r0, [sp, #4]
    2926:	ad01      	add	r5, sp, #4
    2928:	4620      	mov	r0, r4
    292a:	4629      	mov	r1, r5
    292c:	beab      	bkpt	0x00ab
    292e:	4604      	mov	r4, r0
    2930:	4620      	mov	r0, r4
    2932:	f7ff ff39 	bl	27a8 <checkerror>
    2936:	b003      	add	sp, #12
    2938:	bd30      	pop	{r4, r5, pc}
	...

0000293c <_close>:
    293c:	b538      	push	{r3, r4, r5, lr}
    293e:	4605      	mov	r5, r0
    2940:	f7ff ff18 	bl	2774 <findslot>
    2944:	4604      	mov	r4, r0
    2946:	b930      	cbnz	r0, 2956 <_close+0x1a>
    2948:	f000 f988 	bl	2c5c <__errno>
    294c:	2309      	movs	r3, #9
    294e:	6003      	str	r3, [r0, #0]
    2950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2954:	bd38      	pop	{r3, r4, r5, pc}
    2956:	3d01      	subs	r5, #1
    2958:	2d01      	cmp	r5, #1
    295a:	d809      	bhi.n	2970 <_close+0x34>
    295c:	4b09      	ldr	r3, [pc, #36]	; (2984 <_close+0x48>)
    295e:	689a      	ldr	r2, [r3, #8]
    2960:	691b      	ldr	r3, [r3, #16]
    2962:	429a      	cmp	r2, r3
    2964:	d104      	bne.n	2970 <_close+0x34>
    2966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    296a:	6003      	str	r3, [r0, #0]
    296c:	2000      	movs	r0, #0
    296e:	e7f1      	b.n	2954 <_close+0x18>
    2970:	6820      	ldr	r0, [r4, #0]
    2972:	f7ff ffd5 	bl	2920 <_swiclose>
    2976:	2800      	cmp	r0, #0
    2978:	d1ec      	bne.n	2954 <_close+0x18>
    297a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    297e:	6023      	str	r3, [r4, #0]
    2980:	e7e8      	b.n	2954 <_close+0x18>
    2982:	bf00      	nop
    2984:	20000164 	.word	0x20000164

00002988 <_getpid>:
    2988:	2001      	movs	r0, #1
    298a:	4770      	bx	lr

0000298c <_sbrk>:
    298c:	4a0d      	ldr	r2, [pc, #52]	; (29c4 <_sbrk+0x38>)
    298e:	6811      	ldr	r1, [r2, #0]
    2990:	b510      	push	{r4, lr}
    2992:	4603      	mov	r3, r0
    2994:	b909      	cbnz	r1, 299a <_sbrk+0xe>
    2996:	490c      	ldr	r1, [pc, #48]	; (29c8 <_sbrk+0x3c>)
    2998:	6011      	str	r1, [r2, #0]
    299a:	6810      	ldr	r0, [r2, #0]
    299c:	4669      	mov	r1, sp
    299e:	4403      	add	r3, r0
    29a0:	428b      	cmp	r3, r1
    29a2:	d806      	bhi.n	29b2 <_sbrk+0x26>
    29a4:	4909      	ldr	r1, [pc, #36]	; (29cc <_sbrk+0x40>)
    29a6:	4c0a      	ldr	r4, [pc, #40]	; (29d0 <_sbrk+0x44>)
    29a8:	6809      	ldr	r1, [r1, #0]
    29aa:	42a1      	cmp	r1, r4
    29ac:	d008      	beq.n	29c0 <_sbrk+0x34>
    29ae:	428b      	cmp	r3, r1
    29b0:	d906      	bls.n	29c0 <_sbrk+0x34>
    29b2:	f000 f953 	bl	2c5c <__errno>
    29b6:	230c      	movs	r3, #12
    29b8:	6003      	str	r3, [r0, #0]
    29ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    29be:	bd10      	pop	{r4, pc}
    29c0:	6013      	str	r3, [r2, #0]
    29c2:	e7fc      	b.n	29be <_sbrk+0x32>
    29c4:	20000160 	.word	0x20000160
    29c8:	20000218 	.word	0x20000218
    29cc:	2000006c 	.word	0x2000006c
    29d0:	cafedead 	.word	0xcafedead

000029d4 <_swistat>:
    29d4:	b570      	push	{r4, r5, r6, lr}
    29d6:	460c      	mov	r4, r1
    29d8:	f7ff fecc 	bl	2774 <findslot>
    29dc:	4605      	mov	r5, r0
    29de:	b930      	cbnz	r0, 29ee <_swistat+0x1a>
    29e0:	f000 f93c 	bl	2c5c <__errno>
    29e4:	2309      	movs	r3, #9
    29e6:	6003      	str	r3, [r0, #0]
    29e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    29ec:	bd70      	pop	{r4, r5, r6, pc}
    29ee:	6863      	ldr	r3, [r4, #4]
    29f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    29f4:	6063      	str	r3, [r4, #4]
    29f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    29fa:	6463      	str	r3, [r4, #68]	; 0x44
    29fc:	260c      	movs	r6, #12
    29fe:	4630      	mov	r0, r6
    2a00:	4629      	mov	r1, r5
    2a02:	beab      	bkpt	0x00ab
    2a04:	4605      	mov	r5, r0
    2a06:	4628      	mov	r0, r5
    2a08:	f7ff fece 	bl	27a8 <checkerror>
    2a0c:	1c43      	adds	r3, r0, #1
    2a0e:	bf1c      	itt	ne
    2a10:	6120      	strne	r0, [r4, #16]
    2a12:	2000      	movne	r0, #0
    2a14:	e7ea      	b.n	29ec <_swistat+0x18>

00002a16 <_stat>:
    2a16:	b538      	push	{r3, r4, r5, lr}
    2a18:	460d      	mov	r5, r1
    2a1a:	4604      	mov	r4, r0
    2a1c:	2258      	movs	r2, #88	; 0x58
    2a1e:	2100      	movs	r1, #0
    2a20:	4628      	mov	r0, r5
    2a22:	f7ff fd91 	bl	2548 <memset>
    2a26:	4620      	mov	r0, r4
    2a28:	2100      	movs	r1, #0
    2a2a:	f000 f811 	bl	2a50 <_swiopen>
    2a2e:	1c43      	adds	r3, r0, #1
    2a30:	4604      	mov	r4, r0
    2a32:	d00b      	beq.n	2a4c <_stat+0x36>
    2a34:	686b      	ldr	r3, [r5, #4]
    2a36:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
    2a3a:	606b      	str	r3, [r5, #4]
    2a3c:	4629      	mov	r1, r5
    2a3e:	f7ff ffc9 	bl	29d4 <_swistat>
    2a42:	4605      	mov	r5, r0
    2a44:	4620      	mov	r0, r4
    2a46:	f7ff ff79 	bl	293c <_close>
    2a4a:	462c      	mov	r4, r5
    2a4c:	4620      	mov	r0, r4
    2a4e:	bd38      	pop	{r3, r4, r5, pc}

00002a50 <_swiopen>:
    2a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2a54:	4b2a      	ldr	r3, [pc, #168]	; (2b00 <_swiopen+0xb0>)
    2a56:	b097      	sub	sp, #92	; 0x5c
    2a58:	4681      	mov	r9, r0
    2a5a:	460f      	mov	r7, r1
    2a5c:	2500      	movs	r5, #0
    2a5e:	461e      	mov	r6, r3
    2a60:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
    2a64:	1c61      	adds	r1, r4, #1
    2a66:	d037      	beq.n	2ad8 <_swiopen+0x88>
    2a68:	3501      	adds	r5, #1
    2a6a:	2d14      	cmp	r5, #20
    2a6c:	d1f8      	bne.n	2a60 <_swiopen+0x10>
    2a6e:	f000 f8f5 	bl	2c5c <__errno>
    2a72:	2318      	movs	r3, #24
    2a74:	6003      	str	r3, [r0, #0]
    2a76:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2a7a:	e03d      	b.n	2af8 <_swiopen+0xa8>
    2a7c:	f3c7 4400 	ubfx	r4, r7, #16, #1
    2a80:	f240 6301 	movw	r3, #1537	; 0x601
    2a84:	07ba      	lsls	r2, r7, #30
    2a86:	bf48      	it	mi
    2a88:	f044 0402 	orrmi.w	r4, r4, #2
    2a8c:	421f      	tst	r7, r3
    2a8e:	bf18      	it	ne
    2a90:	f044 0404 	orrne.w	r4, r4, #4
    2a94:	073b      	lsls	r3, r7, #28
    2a96:	bf48      	it	mi
    2a98:	f024 0404 	bicmi.w	r4, r4, #4
    2a9c:	4648      	mov	r0, r9
    2a9e:	bf48      	it	mi
    2aa0:	f044 0408 	orrmi.w	r4, r4, #8
    2aa4:	f8cd 9000 	str.w	r9, [sp]
    2aa8:	f000 fa16 	bl	2ed8 <strlen>
    2aac:	e9cd 4001 	strd	r4, r0, [sp, #4]
    2ab0:	2401      	movs	r4, #1
    2ab2:	4620      	mov	r0, r4
    2ab4:	4641      	mov	r1, r8
    2ab6:	beab      	bkpt	0x00ab
    2ab8:	4604      	mov	r4, r0
    2aba:	2c00      	cmp	r4, #0
    2abc:	db07      	blt.n	2ace <_swiopen+0x7e>
    2abe:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
    2ac2:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
    2ac6:	2300      	movs	r3, #0
    2ac8:	6073      	str	r3, [r6, #4]
    2aca:	462c      	mov	r4, r5
    2acc:	e014      	b.n	2af8 <_swiopen+0xa8>
    2ace:	4620      	mov	r0, r4
    2ad0:	f7ff fe7a 	bl	27c8 <error>
    2ad4:	4604      	mov	r4, r0
    2ad6:	e00f      	b.n	2af8 <_swiopen+0xa8>
    2ad8:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
    2adc:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
    2ae0:	46e8      	mov	r8, sp
    2ae2:	d1cb      	bne.n	2a7c <_swiopen+0x2c>
    2ae4:	4641      	mov	r1, r8
    2ae6:	4648      	mov	r0, r9
    2ae8:	f7ff ff95 	bl	2a16 <_stat>
    2aec:	3001      	adds	r0, #1
    2aee:	d0c5      	beq.n	2a7c <_swiopen+0x2c>
    2af0:	f000 f8b4 	bl	2c5c <__errno>
    2af4:	2311      	movs	r3, #17
    2af6:	6003      	str	r3, [r0, #0]
    2af8:	4620      	mov	r0, r4
    2afa:	b017      	add	sp, #92	; 0x5c
    2afc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2b00:	20000164 	.word	0x20000164

00002b04 <_get_semihosting_exts>:
    2b04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2b08:	4606      	mov	r6, r0
    2b0a:	460f      	mov	r7, r1
    2b0c:	482a      	ldr	r0, [pc, #168]	; (2bb8 <_get_semihosting_exts+0xb4>)
    2b0e:	2100      	movs	r1, #0
    2b10:	4615      	mov	r5, r2
    2b12:	f7ff ff9d 	bl	2a50 <_swiopen>
    2b16:	462a      	mov	r2, r5
    2b18:	4604      	mov	r4, r0
    2b1a:	2100      	movs	r1, #0
    2b1c:	4630      	mov	r0, r6
    2b1e:	f7ff fd13 	bl	2548 <memset>
    2b22:	1c63      	adds	r3, r4, #1
    2b24:	d016      	beq.n	2b54 <_get_semihosting_exts+0x50>
    2b26:	4620      	mov	r0, r4
    2b28:	f7ff fe24 	bl	2774 <findslot>
    2b2c:	f04f 090c 	mov.w	r9, #12
    2b30:	4680      	mov	r8, r0
    2b32:	4648      	mov	r0, r9
    2b34:	4641      	mov	r1, r8
    2b36:	beab      	bkpt	0x00ab
    2b38:	4680      	mov	r8, r0
    2b3a:	4640      	mov	r0, r8
    2b3c:	f7ff fe34 	bl	27a8 <checkerror>
    2b40:	2803      	cmp	r0, #3
    2b42:	dd02      	ble.n	2b4a <_get_semihosting_exts+0x46>
    2b44:	1ec3      	subs	r3, r0, #3
    2b46:	42ab      	cmp	r3, r5
    2b48:	dc08      	bgt.n	2b5c <_get_semihosting_exts+0x58>
    2b4a:	4620      	mov	r0, r4
    2b4c:	f7ff fef6 	bl	293c <_close>
    2b50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2b54:	4620      	mov	r0, r4
    2b56:	b003      	add	sp, #12
    2b58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2b5c:	2204      	movs	r2, #4
    2b5e:	eb0d 0102 	add.w	r1, sp, r2
    2b62:	4620      	mov	r0, r4
    2b64:	f7ff fe4e 	bl	2804 <_read>
    2b68:	2803      	cmp	r0, #3
    2b6a:	ddee      	ble.n	2b4a <_get_semihosting_exts+0x46>
    2b6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2b70:	2b53      	cmp	r3, #83	; 0x53
    2b72:	d1ea      	bne.n	2b4a <_get_semihosting_exts+0x46>
    2b74:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2b78:	2b48      	cmp	r3, #72	; 0x48
    2b7a:	d1e6      	bne.n	2b4a <_get_semihosting_exts+0x46>
    2b7c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    2b80:	2b46      	cmp	r3, #70	; 0x46
    2b82:	d1e2      	bne.n	2b4a <_get_semihosting_exts+0x46>
    2b84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2b88:	2b42      	cmp	r3, #66	; 0x42
    2b8a:	d1de      	bne.n	2b4a <_get_semihosting_exts+0x46>
    2b8c:	2201      	movs	r2, #1
    2b8e:	4639      	mov	r1, r7
    2b90:	4620      	mov	r0, r4
    2b92:	f7ff fe53 	bl	283c <_swilseek>
    2b96:	2800      	cmp	r0, #0
    2b98:	dbd7      	blt.n	2b4a <_get_semihosting_exts+0x46>
    2b9a:	462a      	mov	r2, r5
    2b9c:	4631      	mov	r1, r6
    2b9e:	4620      	mov	r0, r4
    2ba0:	f7ff fe30 	bl	2804 <_read>
    2ba4:	4605      	mov	r5, r0
    2ba6:	4620      	mov	r0, r4
    2ba8:	f7ff fec8 	bl	293c <_close>
    2bac:	4628      	mov	r0, r5
    2bae:	f7ff fdfb 	bl	27a8 <checkerror>
    2bb2:	4604      	mov	r4, r0
    2bb4:	e7ce      	b.n	2b54 <_get_semihosting_exts+0x50>
    2bb6:	bf00      	nop
    2bb8:	00003208 	.word	0x00003208

00002bbc <initialise_semihosting_exts>:
    2bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2bbe:	4d0a      	ldr	r5, [pc, #40]	; (2be8 <initialise_semihosting_exts+0x2c>)
    2bc0:	4c0a      	ldr	r4, [pc, #40]	; (2bec <initialise_semihosting_exts+0x30>)
    2bc2:	2100      	movs	r1, #0
    2bc4:	2201      	movs	r2, #1
    2bc6:	a801      	add	r0, sp, #4
    2bc8:	6029      	str	r1, [r5, #0]
    2bca:	6022      	str	r2, [r4, #0]
    2bcc:	f7ff ff9a 	bl	2b04 <_get_semihosting_exts>
    2bd0:	2800      	cmp	r0, #0
    2bd2:	dd07      	ble.n	2be4 <initialise_semihosting_exts+0x28>
    2bd4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2bd8:	f003 0201 	and.w	r2, r3, #1
    2bdc:	f003 0302 	and.w	r3, r3, #2
    2be0:	602a      	str	r2, [r5, #0]
    2be2:	6023      	str	r3, [r4, #0]
    2be4:	b003      	add	sp, #12
    2be6:	bd30      	pop	{r4, r5, pc}
    2be8:	20000070 	.word	0x20000070
    2bec:	20000074 	.word	0x20000074

00002bf0 <_has_ext_exit_extended>:
    2bf0:	b510      	push	{r4, lr}
    2bf2:	4c04      	ldr	r4, [pc, #16]	; (2c04 <_has_ext_exit_extended+0x14>)
    2bf4:	6822      	ldr	r2, [r4, #0]
    2bf6:	2a00      	cmp	r2, #0
    2bf8:	da01      	bge.n	2bfe <_has_ext_exit_extended+0xe>
    2bfa:	f7ff ffdf 	bl	2bbc <initialise_semihosting_exts>
    2bfe:	6820      	ldr	r0, [r4, #0]
    2c00:	bd10      	pop	{r4, pc}
    2c02:	bf00      	nop
    2c04:	20000070 	.word	0x20000070

00002c08 <_exit>:
    2c08:	4601      	mov	r1, r0
    2c0a:	b508      	push	{r3, lr}
    2c0c:	4a02      	ldr	r2, [pc, #8]	; (2c18 <_exit+0x10>)
    2c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2c12:	f000 f803 	bl	2c1c <_kill_shared>
    2c16:	bf00      	nop
    2c18:	00020026 	.word	0x00020026

00002c1c <_kill_shared>:
    2c1c:	b507      	push	{r0, r1, r2, lr}
    2c1e:	e9cd 2100 	strd	r2, r1, [sp]
    2c22:	f7ff ffe5 	bl	2bf0 <_has_ext_exit_extended>
    2c26:	2800      	cmp	r0, #0
    2c28:	bf14      	ite	ne
    2c2a:	2420      	movne	r4, #32
    2c2c:	2418      	moveq	r4, #24
    2c2e:	f7ff ffdf 	bl	2bf0 <_has_ext_exit_extended>
    2c32:	b120      	cbz	r0, 2c3e <_kill_shared+0x22>
    2c34:	466d      	mov	r5, sp
    2c36:	4620      	mov	r0, r4
    2c38:	4629      	mov	r1, r5
    2c3a:	beab      	bkpt	0x00ab
    2c3c:	4604      	mov	r4, r0
    2c3e:	9d00      	ldr	r5, [sp, #0]
    2c40:	e7f9      	b.n	2c36 <_kill_shared+0x1a>
	...

00002c44 <_kill>:
    2c44:	2906      	cmp	r1, #6
    2c46:	b508      	push	{r3, lr}
    2c48:	bf0c      	ite	eq
    2c4a:	4a02      	ldreq	r2, [pc, #8]	; (2c54 <_kill+0x10>)
    2c4c:	4a02      	ldrne	r2, [pc, #8]	; (2c58 <_kill+0x14>)
    2c4e:	f7ff ffe5 	bl	2c1c <_kill_shared>
    2c52:	bf00      	nop
    2c54:	00020023 	.word	0x00020023
    2c58:	00020026 	.word	0x00020026

00002c5c <__errno>:
    2c5c:	4b01      	ldr	r3, [pc, #4]	; (2c64 <__errno+0x8>)
    2c5e:	6818      	ldr	r0, [r3, #0]
    2c60:	4770      	bx	lr
    2c62:	bf00      	nop
    2c64:	20000008 	.word	0x20000008

00002c68 <std>:
    2c68:	2300      	movs	r3, #0
    2c6a:	b510      	push	{r4, lr}
    2c6c:	4604      	mov	r4, r0
    2c6e:	e9c0 3300 	strd	r3, r3, [r0]
    2c72:	e9c0 3304 	strd	r3, r3, [r0, #16]
    2c76:	6083      	str	r3, [r0, #8]
    2c78:	8181      	strh	r1, [r0, #12]
    2c7a:	6643      	str	r3, [r0, #100]	; 0x64
    2c7c:	81c2      	strh	r2, [r0, #14]
    2c7e:	6183      	str	r3, [r0, #24]
    2c80:	4619      	mov	r1, r3
    2c82:	2208      	movs	r2, #8
    2c84:	305c      	adds	r0, #92	; 0x5c
    2c86:	f7ff fc5f 	bl	2548 <memset>
    2c8a:	4b05      	ldr	r3, [pc, #20]	; (2ca0 <std+0x38>)
    2c8c:	6263      	str	r3, [r4, #36]	; 0x24
    2c8e:	4b05      	ldr	r3, [pc, #20]	; (2ca4 <std+0x3c>)
    2c90:	62a3      	str	r3, [r4, #40]	; 0x28
    2c92:	4b05      	ldr	r3, [pc, #20]	; (2ca8 <std+0x40>)
    2c94:	62e3      	str	r3, [r4, #44]	; 0x2c
    2c96:	4b05      	ldr	r3, [pc, #20]	; (2cac <std+0x44>)
    2c98:	6224      	str	r4, [r4, #32]
    2c9a:	6323      	str	r3, [r4, #48]	; 0x30
    2c9c:	bd10      	pop	{r4, pc}
    2c9e:	bf00      	nop
    2ca0:	00002e53 	.word	0x00002e53
    2ca4:	00002e75 	.word	0x00002e75
    2ca8:	00002ead 	.word	0x00002ead
    2cac:	00002ed1 	.word	0x00002ed1

00002cb0 <_cleanup_r>:
    2cb0:	4901      	ldr	r1, [pc, #4]	; (2cb8 <_cleanup_r+0x8>)
    2cb2:	f000 b8af 	b.w	2e14 <_fwalk_reent>
    2cb6:	bf00      	nop
    2cb8:	00003039 	.word	0x00003039

00002cbc <__sfmoreglue>:
    2cbc:	b570      	push	{r4, r5, r6, lr}
    2cbe:	1e4a      	subs	r2, r1, #1
    2cc0:	2568      	movs	r5, #104	; 0x68
    2cc2:	4355      	muls	r5, r2
    2cc4:	460e      	mov	r6, r1
    2cc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
    2cca:	f7ff fc95 	bl	25f8 <_malloc_r>
    2cce:	4604      	mov	r4, r0
    2cd0:	b140      	cbz	r0, 2ce4 <__sfmoreglue+0x28>
    2cd2:	2100      	movs	r1, #0
    2cd4:	e9c0 1600 	strd	r1, r6, [r0]
    2cd8:	300c      	adds	r0, #12
    2cda:	60a0      	str	r0, [r4, #8]
    2cdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
    2ce0:	f7ff fc32 	bl	2548 <memset>
    2ce4:	4620      	mov	r0, r4
    2ce6:	bd70      	pop	{r4, r5, r6, pc}

00002ce8 <__sfp_lock_acquire>:
    2ce8:	4801      	ldr	r0, [pc, #4]	; (2cf0 <__sfp_lock_acquire+0x8>)
    2cea:	f7ff bd40 	b.w	276e <__retarget_lock_acquire_recursive>
    2cee:	bf00      	nop
    2cf0:	20000210 	.word	0x20000210

00002cf4 <__sfp_lock_release>:
    2cf4:	4801      	ldr	r0, [pc, #4]	; (2cfc <__sfp_lock_release+0x8>)
    2cf6:	f7ff bd3b 	b.w	2770 <__retarget_lock_release_recursive>
    2cfa:	bf00      	nop
    2cfc:	20000210 	.word	0x20000210

00002d00 <__sinit_lock_acquire>:
    2d00:	4801      	ldr	r0, [pc, #4]	; (2d08 <__sinit_lock_acquire+0x8>)
    2d02:	f7ff bd34 	b.w	276e <__retarget_lock_acquire_recursive>
    2d06:	bf00      	nop
    2d08:	2000020b 	.word	0x2000020b

00002d0c <__sinit_lock_release>:
    2d0c:	4801      	ldr	r0, [pc, #4]	; (2d14 <__sinit_lock_release+0x8>)
    2d0e:	f7ff bd2f 	b.w	2770 <__retarget_lock_release_recursive>
    2d12:	bf00      	nop
    2d14:	2000020b 	.word	0x2000020b

00002d18 <__sinit>:
    2d18:	b510      	push	{r4, lr}
    2d1a:	4604      	mov	r4, r0
    2d1c:	f7ff fff0 	bl	2d00 <__sinit_lock_acquire>
    2d20:	69a3      	ldr	r3, [r4, #24]
    2d22:	b11b      	cbz	r3, 2d2c <__sinit+0x14>
    2d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2d28:	f7ff bff0 	b.w	2d0c <__sinit_lock_release>
    2d2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    2d30:	6523      	str	r3, [r4, #80]	; 0x50
    2d32:	4b13      	ldr	r3, [pc, #76]	; (2d80 <__sinit+0x68>)
    2d34:	4a13      	ldr	r2, [pc, #76]	; (2d84 <__sinit+0x6c>)
    2d36:	681b      	ldr	r3, [r3, #0]
    2d38:	62a2      	str	r2, [r4, #40]	; 0x28
    2d3a:	42a3      	cmp	r3, r4
    2d3c:	bf04      	itt	eq
    2d3e:	2301      	moveq	r3, #1
    2d40:	61a3      	streq	r3, [r4, #24]
    2d42:	4620      	mov	r0, r4
    2d44:	f000 f820 	bl	2d88 <__sfp>
    2d48:	6060      	str	r0, [r4, #4]
    2d4a:	4620      	mov	r0, r4
    2d4c:	f000 f81c 	bl	2d88 <__sfp>
    2d50:	60a0      	str	r0, [r4, #8]
    2d52:	4620      	mov	r0, r4
    2d54:	f000 f818 	bl	2d88 <__sfp>
    2d58:	2200      	movs	r2, #0
    2d5a:	60e0      	str	r0, [r4, #12]
    2d5c:	2104      	movs	r1, #4
    2d5e:	6860      	ldr	r0, [r4, #4]
    2d60:	f7ff ff82 	bl	2c68 <std>
    2d64:	68a0      	ldr	r0, [r4, #8]
    2d66:	2201      	movs	r2, #1
    2d68:	2109      	movs	r1, #9
    2d6a:	f7ff ff7d 	bl	2c68 <std>
    2d6e:	68e0      	ldr	r0, [r4, #12]
    2d70:	2202      	movs	r2, #2
    2d72:	2112      	movs	r1, #18
    2d74:	f7ff ff78 	bl	2c68 <std>
    2d78:	2301      	movs	r3, #1
    2d7a:	61a3      	str	r3, [r4, #24]
    2d7c:	e7d2      	b.n	2d24 <__sinit+0xc>
    2d7e:	bf00      	nop
    2d80:	00003204 	.word	0x00003204
    2d84:	00002cb1 	.word	0x00002cb1

00002d88 <__sfp>:
    2d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d8a:	4607      	mov	r7, r0
    2d8c:	f7ff ffac 	bl	2ce8 <__sfp_lock_acquire>
    2d90:	4b1e      	ldr	r3, [pc, #120]	; (2e0c <__sfp+0x84>)
    2d92:	681e      	ldr	r6, [r3, #0]
    2d94:	69b3      	ldr	r3, [r6, #24]
    2d96:	b913      	cbnz	r3, 2d9e <__sfp+0x16>
    2d98:	4630      	mov	r0, r6
    2d9a:	f7ff ffbd 	bl	2d18 <__sinit>
    2d9e:	3648      	adds	r6, #72	; 0x48
    2da0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    2da4:	3b01      	subs	r3, #1
    2da6:	d503      	bpl.n	2db0 <__sfp+0x28>
    2da8:	6833      	ldr	r3, [r6, #0]
    2daa:	b30b      	cbz	r3, 2df0 <__sfp+0x68>
    2dac:	6836      	ldr	r6, [r6, #0]
    2dae:	e7f7      	b.n	2da0 <__sfp+0x18>
    2db0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    2db4:	b9d5      	cbnz	r5, 2dec <__sfp+0x64>
    2db6:	4b16      	ldr	r3, [pc, #88]	; (2e10 <__sfp+0x88>)
    2db8:	60e3      	str	r3, [r4, #12]
    2dba:	f104 0058 	add.w	r0, r4, #88	; 0x58
    2dbe:	6665      	str	r5, [r4, #100]	; 0x64
    2dc0:	f7ff fcd4 	bl	276c <__retarget_lock_init_recursive>
    2dc4:	f7ff ff96 	bl	2cf4 <__sfp_lock_release>
    2dc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
    2dcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
    2dd0:	6025      	str	r5, [r4, #0]
    2dd2:	61a5      	str	r5, [r4, #24]
    2dd4:	2208      	movs	r2, #8
    2dd6:	4629      	mov	r1, r5
    2dd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    2ddc:	f7ff fbb4 	bl	2548 <memset>
    2de0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    2de4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    2de8:	4620      	mov	r0, r4
    2dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dec:	3468      	adds	r4, #104	; 0x68
    2dee:	e7d9      	b.n	2da4 <__sfp+0x1c>
    2df0:	2104      	movs	r1, #4
    2df2:	4638      	mov	r0, r7
    2df4:	f7ff ff62 	bl	2cbc <__sfmoreglue>
    2df8:	4604      	mov	r4, r0
    2dfa:	6030      	str	r0, [r6, #0]
    2dfc:	2800      	cmp	r0, #0
    2dfe:	d1d5      	bne.n	2dac <__sfp+0x24>
    2e00:	f7ff ff78 	bl	2cf4 <__sfp_lock_release>
    2e04:	230c      	movs	r3, #12
    2e06:	603b      	str	r3, [r7, #0]
    2e08:	e7ee      	b.n	2de8 <__sfp+0x60>
    2e0a:	bf00      	nop
    2e0c:	00003204 	.word	0x00003204
    2e10:	ffff0001 	.word	0xffff0001

00002e14 <_fwalk_reent>:
    2e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e18:	4606      	mov	r6, r0
    2e1a:	4688      	mov	r8, r1
    2e1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
    2e20:	2700      	movs	r7, #0
    2e22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
    2e26:	f1b9 0901 	subs.w	r9, r9, #1
    2e2a:	d505      	bpl.n	2e38 <_fwalk_reent+0x24>
    2e2c:	6824      	ldr	r4, [r4, #0]
    2e2e:	2c00      	cmp	r4, #0
    2e30:	d1f7      	bne.n	2e22 <_fwalk_reent+0xe>
    2e32:	4638      	mov	r0, r7
    2e34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2e38:	89ab      	ldrh	r3, [r5, #12]
    2e3a:	2b01      	cmp	r3, #1
    2e3c:	d907      	bls.n	2e4e <_fwalk_reent+0x3a>
    2e3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    2e42:	3301      	adds	r3, #1
    2e44:	d003      	beq.n	2e4e <_fwalk_reent+0x3a>
    2e46:	4629      	mov	r1, r5
    2e48:	4630      	mov	r0, r6
    2e4a:	47c0      	blx	r8
    2e4c:	4307      	orrs	r7, r0
    2e4e:	3568      	adds	r5, #104	; 0x68
    2e50:	e7e9      	b.n	2e26 <_fwalk_reent+0x12>

00002e52 <__sread>:
    2e52:	b510      	push	{r4, lr}
    2e54:	460c      	mov	r4, r1
    2e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2e5a:	f000 f93b 	bl	30d4 <_read_r>
    2e5e:	2800      	cmp	r0, #0
    2e60:	bfab      	itete	ge
    2e62:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    2e64:	89a3      	ldrhlt	r3, [r4, #12]
    2e66:	181b      	addge	r3, r3, r0
    2e68:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    2e6c:	bfac      	ite	ge
    2e6e:	6563      	strge	r3, [r4, #84]	; 0x54
    2e70:	81a3      	strhlt	r3, [r4, #12]
    2e72:	bd10      	pop	{r4, pc}

00002e74 <__swrite>:
    2e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e78:	461f      	mov	r7, r3
    2e7a:	898b      	ldrh	r3, [r1, #12]
    2e7c:	05db      	lsls	r3, r3, #23
    2e7e:	4605      	mov	r5, r0
    2e80:	460c      	mov	r4, r1
    2e82:	4616      	mov	r6, r2
    2e84:	d505      	bpl.n	2e92 <__swrite+0x1e>
    2e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2e8a:	2302      	movs	r3, #2
    2e8c:	2200      	movs	r2, #0
    2e8e:	f000 f90f 	bl	30b0 <_lseek_r>
    2e92:	89a3      	ldrh	r3, [r4, #12]
    2e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    2e98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2e9c:	81a3      	strh	r3, [r4, #12]
    2e9e:	4632      	mov	r2, r6
    2ea0:	463b      	mov	r3, r7
    2ea2:	4628      	mov	r0, r5
    2ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2ea8:	f000 b81e 	b.w	2ee8 <_write_r>

00002eac <__sseek>:
    2eac:	b510      	push	{r4, lr}
    2eae:	460c      	mov	r4, r1
    2eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2eb4:	f000 f8fc 	bl	30b0 <_lseek_r>
    2eb8:	1c43      	adds	r3, r0, #1
    2eba:	89a3      	ldrh	r3, [r4, #12]
    2ebc:	bf15      	itete	ne
    2ebe:	6560      	strne	r0, [r4, #84]	; 0x54
    2ec0:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    2ec4:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    2ec8:	81a3      	strheq	r3, [r4, #12]
    2eca:	bf18      	it	ne
    2ecc:	81a3      	strhne	r3, [r4, #12]
    2ece:	bd10      	pop	{r4, pc}

00002ed0 <__sclose>:
    2ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2ed4:	f000 b81a 	b.w	2f0c <_close_r>

00002ed8 <strlen>:
    2ed8:	4603      	mov	r3, r0
    2eda:	f813 2b01 	ldrb.w	r2, [r3], #1
    2ede:	2a00      	cmp	r2, #0
    2ee0:	d1fb      	bne.n	2eda <strlen+0x2>
    2ee2:	1a18      	subs	r0, r3, r0
    2ee4:	3801      	subs	r0, #1
    2ee6:	4770      	bx	lr

00002ee8 <_write_r>:
    2ee8:	b538      	push	{r3, r4, r5, lr}
    2eea:	4d07      	ldr	r5, [pc, #28]	; (2f08 <_write_r+0x20>)
    2eec:	4604      	mov	r4, r0
    2eee:	4608      	mov	r0, r1
    2ef0:	4611      	mov	r1, r2
    2ef2:	2200      	movs	r2, #0
    2ef4:	602a      	str	r2, [r5, #0]
    2ef6:	461a      	mov	r2, r3
    2ef8:	f7ff fcee 	bl	28d8 <_write>
    2efc:	1c43      	adds	r3, r0, #1
    2efe:	d102      	bne.n	2f06 <_write_r+0x1e>
    2f00:	682b      	ldr	r3, [r5, #0]
    2f02:	b103      	cbz	r3, 2f06 <_write_r+0x1e>
    2f04:	6023      	str	r3, [r4, #0]
    2f06:	bd38      	pop	{r3, r4, r5, pc}
    2f08:	20000204 	.word	0x20000204

00002f0c <_close_r>:
    2f0c:	b538      	push	{r3, r4, r5, lr}
    2f0e:	4d06      	ldr	r5, [pc, #24]	; (2f28 <_close_r+0x1c>)
    2f10:	2300      	movs	r3, #0
    2f12:	4604      	mov	r4, r0
    2f14:	4608      	mov	r0, r1
    2f16:	602b      	str	r3, [r5, #0]
    2f18:	f7ff fd10 	bl	293c <_close>
    2f1c:	1c43      	adds	r3, r0, #1
    2f1e:	d102      	bne.n	2f26 <_close_r+0x1a>
    2f20:	682b      	ldr	r3, [r5, #0]
    2f22:	b103      	cbz	r3, 2f26 <_close_r+0x1a>
    2f24:	6023      	str	r3, [r4, #0]
    2f26:	bd38      	pop	{r3, r4, r5, pc}
    2f28:	20000204 	.word	0x20000204

00002f2c <__sflush_r>:
    2f2c:	898a      	ldrh	r2, [r1, #12]
    2f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f32:	4605      	mov	r5, r0
    2f34:	0710      	lsls	r0, r2, #28
    2f36:	460c      	mov	r4, r1
    2f38:	d458      	bmi.n	2fec <__sflush_r+0xc0>
    2f3a:	684b      	ldr	r3, [r1, #4]
    2f3c:	2b00      	cmp	r3, #0
    2f3e:	dc05      	bgt.n	2f4c <__sflush_r+0x20>
    2f40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    2f42:	2b00      	cmp	r3, #0
    2f44:	dc02      	bgt.n	2f4c <__sflush_r+0x20>
    2f46:	2000      	movs	r0, #0
    2f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    2f4e:	2e00      	cmp	r6, #0
    2f50:	d0f9      	beq.n	2f46 <__sflush_r+0x1a>
    2f52:	2300      	movs	r3, #0
    2f54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    2f58:	682f      	ldr	r7, [r5, #0]
    2f5a:	602b      	str	r3, [r5, #0]
    2f5c:	d032      	beq.n	2fc4 <__sflush_r+0x98>
    2f5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2f60:	89a3      	ldrh	r3, [r4, #12]
    2f62:	075a      	lsls	r2, r3, #29
    2f64:	d505      	bpl.n	2f72 <__sflush_r+0x46>
    2f66:	6863      	ldr	r3, [r4, #4]
    2f68:	1ac0      	subs	r0, r0, r3
    2f6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2f6c:	b10b      	cbz	r3, 2f72 <__sflush_r+0x46>
    2f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2f70:	1ac0      	subs	r0, r0, r3
    2f72:	2300      	movs	r3, #0
    2f74:	4602      	mov	r2, r0
    2f76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    2f78:	6a21      	ldr	r1, [r4, #32]
    2f7a:	4628      	mov	r0, r5
    2f7c:	47b0      	blx	r6
    2f7e:	1c43      	adds	r3, r0, #1
    2f80:	89a3      	ldrh	r3, [r4, #12]
    2f82:	d106      	bne.n	2f92 <__sflush_r+0x66>
    2f84:	6829      	ldr	r1, [r5, #0]
    2f86:	291d      	cmp	r1, #29
    2f88:	d82c      	bhi.n	2fe4 <__sflush_r+0xb8>
    2f8a:	4a2a      	ldr	r2, [pc, #168]	; (3034 <__sflush_r+0x108>)
    2f8c:	40ca      	lsrs	r2, r1
    2f8e:	07d6      	lsls	r6, r2, #31
    2f90:	d528      	bpl.n	2fe4 <__sflush_r+0xb8>
    2f92:	2200      	movs	r2, #0
    2f94:	6062      	str	r2, [r4, #4]
    2f96:	04d9      	lsls	r1, r3, #19
    2f98:	6922      	ldr	r2, [r4, #16]
    2f9a:	6022      	str	r2, [r4, #0]
    2f9c:	d504      	bpl.n	2fa8 <__sflush_r+0x7c>
    2f9e:	1c42      	adds	r2, r0, #1
    2fa0:	d101      	bne.n	2fa6 <__sflush_r+0x7a>
    2fa2:	682b      	ldr	r3, [r5, #0]
    2fa4:	b903      	cbnz	r3, 2fa8 <__sflush_r+0x7c>
    2fa6:	6560      	str	r0, [r4, #84]	; 0x54
    2fa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2faa:	602f      	str	r7, [r5, #0]
    2fac:	2900      	cmp	r1, #0
    2fae:	d0ca      	beq.n	2f46 <__sflush_r+0x1a>
    2fb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2fb4:	4299      	cmp	r1, r3
    2fb6:	d002      	beq.n	2fbe <__sflush_r+0x92>
    2fb8:	4628      	mov	r0, r5
    2fba:	f7ff facd 	bl	2558 <_free_r>
    2fbe:	2000      	movs	r0, #0
    2fc0:	6360      	str	r0, [r4, #52]	; 0x34
    2fc2:	e7c1      	b.n	2f48 <__sflush_r+0x1c>
    2fc4:	6a21      	ldr	r1, [r4, #32]
    2fc6:	2301      	movs	r3, #1
    2fc8:	4628      	mov	r0, r5
    2fca:	47b0      	blx	r6
    2fcc:	1c41      	adds	r1, r0, #1
    2fce:	d1c7      	bne.n	2f60 <__sflush_r+0x34>
    2fd0:	682b      	ldr	r3, [r5, #0]
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	d0c4      	beq.n	2f60 <__sflush_r+0x34>
    2fd6:	2b1d      	cmp	r3, #29
    2fd8:	d001      	beq.n	2fde <__sflush_r+0xb2>
    2fda:	2b16      	cmp	r3, #22
    2fdc:	d101      	bne.n	2fe2 <__sflush_r+0xb6>
    2fde:	602f      	str	r7, [r5, #0]
    2fe0:	e7b1      	b.n	2f46 <__sflush_r+0x1a>
    2fe2:	89a3      	ldrh	r3, [r4, #12]
    2fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2fe8:	81a3      	strh	r3, [r4, #12]
    2fea:	e7ad      	b.n	2f48 <__sflush_r+0x1c>
    2fec:	690f      	ldr	r7, [r1, #16]
    2fee:	2f00      	cmp	r7, #0
    2ff0:	d0a9      	beq.n	2f46 <__sflush_r+0x1a>
    2ff2:	0793      	lsls	r3, r2, #30
    2ff4:	680e      	ldr	r6, [r1, #0]
    2ff6:	bf08      	it	eq
    2ff8:	694b      	ldreq	r3, [r1, #20]
    2ffa:	600f      	str	r7, [r1, #0]
    2ffc:	bf18      	it	ne
    2ffe:	2300      	movne	r3, #0
    3000:	eba6 0807 	sub.w	r8, r6, r7
    3004:	608b      	str	r3, [r1, #8]
    3006:	f1b8 0f00 	cmp.w	r8, #0
    300a:	dd9c      	ble.n	2f46 <__sflush_r+0x1a>
    300c:	6a21      	ldr	r1, [r4, #32]
    300e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3010:	4643      	mov	r3, r8
    3012:	463a      	mov	r2, r7
    3014:	4628      	mov	r0, r5
    3016:	47b0      	blx	r6
    3018:	2800      	cmp	r0, #0
    301a:	dc06      	bgt.n	302a <__sflush_r+0xfe>
    301c:	89a3      	ldrh	r3, [r4, #12]
    301e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3022:	81a3      	strh	r3, [r4, #12]
    3024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3028:	e78e      	b.n	2f48 <__sflush_r+0x1c>
    302a:	4407      	add	r7, r0
    302c:	eba8 0800 	sub.w	r8, r8, r0
    3030:	e7e9      	b.n	3006 <__sflush_r+0xda>
    3032:	bf00      	nop
    3034:	20400001 	.word	0x20400001

00003038 <_fflush_r>:
    3038:	b538      	push	{r3, r4, r5, lr}
    303a:	690b      	ldr	r3, [r1, #16]
    303c:	4605      	mov	r5, r0
    303e:	460c      	mov	r4, r1
    3040:	b913      	cbnz	r3, 3048 <_fflush_r+0x10>
    3042:	2500      	movs	r5, #0
    3044:	4628      	mov	r0, r5
    3046:	bd38      	pop	{r3, r4, r5, pc}
    3048:	b118      	cbz	r0, 3052 <_fflush_r+0x1a>
    304a:	6983      	ldr	r3, [r0, #24]
    304c:	b90b      	cbnz	r3, 3052 <_fflush_r+0x1a>
    304e:	f7ff fe63 	bl	2d18 <__sinit>
    3052:	4b14      	ldr	r3, [pc, #80]	; (30a4 <_fflush_r+0x6c>)
    3054:	429c      	cmp	r4, r3
    3056:	d11b      	bne.n	3090 <_fflush_r+0x58>
    3058:	686c      	ldr	r4, [r5, #4]
    305a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    305e:	2b00      	cmp	r3, #0
    3060:	d0ef      	beq.n	3042 <_fflush_r+0xa>
    3062:	6e62      	ldr	r2, [r4, #100]	; 0x64
    3064:	07d0      	lsls	r0, r2, #31
    3066:	d404      	bmi.n	3072 <_fflush_r+0x3a>
    3068:	0599      	lsls	r1, r3, #22
    306a:	d402      	bmi.n	3072 <_fflush_r+0x3a>
    306c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    306e:	f7ff fb7e 	bl	276e <__retarget_lock_acquire_recursive>
    3072:	4628      	mov	r0, r5
    3074:	4621      	mov	r1, r4
    3076:	f7ff ff59 	bl	2f2c <__sflush_r>
    307a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    307c:	07da      	lsls	r2, r3, #31
    307e:	4605      	mov	r5, r0
    3080:	d4e0      	bmi.n	3044 <_fflush_r+0xc>
    3082:	89a3      	ldrh	r3, [r4, #12]
    3084:	059b      	lsls	r3, r3, #22
    3086:	d4dd      	bmi.n	3044 <_fflush_r+0xc>
    3088:	6da0      	ldr	r0, [r4, #88]	; 0x58
    308a:	f7ff fb71 	bl	2770 <__retarget_lock_release_recursive>
    308e:	e7d9      	b.n	3044 <_fflush_r+0xc>
    3090:	4b05      	ldr	r3, [pc, #20]	; (30a8 <_fflush_r+0x70>)
    3092:	429c      	cmp	r4, r3
    3094:	d101      	bne.n	309a <_fflush_r+0x62>
    3096:	68ac      	ldr	r4, [r5, #8]
    3098:	e7df      	b.n	305a <_fflush_r+0x22>
    309a:	4b04      	ldr	r3, [pc, #16]	; (30ac <_fflush_r+0x74>)
    309c:	429c      	cmp	r4, r3
    309e:	bf08      	it	eq
    30a0:	68ec      	ldreq	r4, [r5, #12]
    30a2:	e7da      	b.n	305a <_fflush_r+0x22>
    30a4:	00003240 	.word	0x00003240
    30a8:	00003260 	.word	0x00003260
    30ac:	00003220 	.word	0x00003220

000030b0 <_lseek_r>:
    30b0:	b538      	push	{r3, r4, r5, lr}
    30b2:	4d07      	ldr	r5, [pc, #28]	; (30d0 <_lseek_r+0x20>)
    30b4:	4604      	mov	r4, r0
    30b6:	4608      	mov	r0, r1
    30b8:	4611      	mov	r1, r2
    30ba:	2200      	movs	r2, #0
    30bc:	602a      	str	r2, [r5, #0]
    30be:	461a      	mov	r2, r3
    30c0:	f7ff fbf8 	bl	28b4 <_lseek>
    30c4:	1c43      	adds	r3, r0, #1
    30c6:	d102      	bne.n	30ce <_lseek_r+0x1e>
    30c8:	682b      	ldr	r3, [r5, #0]
    30ca:	b103      	cbz	r3, 30ce <_lseek_r+0x1e>
    30cc:	6023      	str	r3, [r4, #0]
    30ce:	bd38      	pop	{r3, r4, r5, pc}
    30d0:	20000204 	.word	0x20000204

000030d4 <_read_r>:
    30d4:	b538      	push	{r3, r4, r5, lr}
    30d6:	4d07      	ldr	r5, [pc, #28]	; (30f4 <_read_r+0x20>)
    30d8:	4604      	mov	r4, r0
    30da:	4608      	mov	r0, r1
    30dc:	4611      	mov	r1, r2
    30de:	2200      	movs	r2, #0
    30e0:	602a      	str	r2, [r5, #0]
    30e2:	461a      	mov	r2, r3
    30e4:	f7ff fb8e 	bl	2804 <_read>
    30e8:	1c43      	adds	r3, r0, #1
    30ea:	d102      	bne.n	30f2 <_read_r+0x1e>
    30ec:	682b      	ldr	r3, [r5, #0]
    30ee:	b103      	cbz	r3, 30f2 <_read_r+0x1e>
    30f0:	6023      	str	r3, [r4, #0]
    30f2:	bd38      	pop	{r3, r4, r5, pc}
    30f4:	20000204 	.word	0x20000204

000030f8 <_init>:
    30f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30fa:	bf00      	nop
    30fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    30fe:	bc08      	pop	{r3}
    3100:	469e      	mov	lr, r3
    3102:	4770      	bx	lr

00003104 <_fini>:
    3104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3106:	bf00      	nop
    3108:	bcf8      	pop	{r3, r4, r5, r6, r7}
    310a:	bc08      	pop	{r3}
    310c:	469e      	mov	lr, r3
    310e:	4770      	bx	lr

00003110 <_ZL18corePeripheralBase>:
    3110:	e000 e000                                   ....

00003114 <_ZN4Nvic10ENn_OFFSETE>:
    3114:	0100 0000 0104 0000 0108 0000 010c 0000     ................
    3124:	0110 0000                                   ....

00003128 <_ZN4Nvic11DISn_OFFSETE>:
    3128:	0180 0000 0184 0000 0188 0000 018c 0000     ................
    3138:	0190 0000                                   ....

0000313c <_ZN4Nvic12PENDn_OFFSETE>:
    313c:	0200 0000 0204 0000 0208 0000 020c 0000     ................
    314c:	0210 0000                                   ....

00003150 <_ZN4Nvic14UNPENDn_OFFSETE>:
    3150:	0280 0000 0284 0000 0288 0000 028c 0000     ................
    3160:	0290 0000                                   ....

00003164 <_ZN4Nvic14ACTIVEn_OFFSETE>:
    3164:	0300 0000 0304 0000 0308 0000 030c 0000     ................
    3174:	0310 0000                                   ....

00003178 <_ZN4Nvic11PRIn_OFFSETE>:
    3178:	0400 0000 0404 0000 0408 0000 040c 0000     ................
    3188:	040c 0000 0414 0000 0418 0000 041c 0000     ................
    3198:	0420 0000 0424 0000 0428 0000 042c 0000      ...$...(...,...
    31a8:	0430 0000 0434 0000 0438 0000 043c 0000     0...4...8...<...
    31b8:	0440 0000 0444 0000 0448 0000 044c 0000     @...D...H...L...
    31c8:	0450 0000 0454 0000 0458 0000 045c 0000     P...T...X...\...
    31d8:	0460 0000 0464 0000 0468 0000 046c 0000     `...d...h...l...
    31e8:	0470 0000 0474 0000 0478 0000 047c 0000     p...t...x...|...
    31f8:	0480 0000 0484 0000 0488 0000               ............

00003204 <_global_impure_ptr>:
    3204:	000c 2000 733a 6d65 6869 736f 6974 676e     ... :semihosting
    3214:	662d 6165 7574 6572 0073 0000               -features...

00003220 <__sf_fake_stderr>:
	...

00003240 <__sf_fake_stdin>:
	...

00003260 <__sf_fake_stdout>:
	...

00003280 <__EH_FRAME_BEGIN__>:
    3280:	0000 0000                                   ....
