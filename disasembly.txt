
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	00 80 00 20 ad 02 00 00 ed 02 00 00 ed 02 00 00     ... ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      7c:	ed 02 00 00 ed 02 00 00 a5 03 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	00 00 00 00 ed 02 00 00 ed 02 00 00 fd 02 00 00     ................
	...
      c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	...
      ec:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      fc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     10c:	ed 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
     150:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	...
     1b0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
     258:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     268:	ed 02 00 00                                         ....

0000026c <__do_global_dtors_aux>:
     26c:	b510      	push	{r4, lr}
     26e:	4c05      	ldr	r4, [pc, #20]	; (284 <__do_global_dtors_aux+0x18>)
     270:	7823      	ldrb	r3, [r4, #0]
     272:	b933      	cbnz	r3, 282 <__do_global_dtors_aux+0x16>
     274:	4b04      	ldr	r3, [pc, #16]	; (288 <__do_global_dtors_aux+0x1c>)
     276:	b113      	cbz	r3, 27e <__do_global_dtors_aux+0x12>
     278:	4804      	ldr	r0, [pc, #16]	; (28c <__do_global_dtors_aux+0x20>)
     27a:	f3af 8000 	nop.w
     27e:	2301      	movs	r3, #1
     280:	7023      	strb	r3, [r4, #0]
     282:	bd10      	pop	{r4, pc}
     284:	2000008c 	.word	0x2000008c
     288:	00000000 	.word	0x00000000
     28c:	00003600 	.word	0x00003600

00000290 <frame_dummy>:
     290:	b508      	push	{r3, lr}
     292:	4b03      	ldr	r3, [pc, #12]	; (2a0 <frame_dummy+0x10>)
     294:	b11b      	cbz	r3, 29e <frame_dummy+0xe>
     296:	4903      	ldr	r1, [pc, #12]	; (2a4 <frame_dummy+0x14>)
     298:	4803      	ldr	r0, [pc, #12]	; (2a8 <frame_dummy+0x18>)
     29a:	f3af 8000 	nop.w
     29e:	bd08      	pop	{r3, pc}
     2a0:	00000000 	.word	0x00000000
     2a4:	20000090 	.word	0x20000090
     2a8:	00003600 	.word	0x00003600

000002ac <Reset_Handler>:
 *    __data_start__: VMA of start of the section to copy to
 *    __data_end__: VMA of end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r1, =__etext
     2ac:	490a      	ldr	r1, [pc, #40]	; (2d8 <Reset_Handler+0x2c>)
	ldr	r2, =__data_start__
     2ae:	4a0b      	ldr	r2, [pc, #44]	; (2dc <Reset_Handler+0x30>)
	ldr	r3, =__data_end__
     2b0:	4b0b      	ldr	r3, [pc, #44]	; (2e0 <Reset_Handler+0x34>)

.L_loop1:
	cmp	r2, r3
     2b2:	429a      	cmp	r2, r3
	ittt	lt
     2b4:	bfbe      	ittt	lt
	ldrlt	r0, [r1], #4
     2b6:	f851 0b04 	ldrlt.w	r0, [r1], #4
	strlt	r0, [r2], #4
     2ba:	f842 0b04 	strlt.w	r0, [r2], #4
	blt	.L_loop1
     2be:	e7f8      	blt.n	2b2 <Reset_Handler+0x6>
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
	ldr	r1, =__bss_start__
     2c0:	4908      	ldr	r1, [pc, #32]	; (2e4 <Reset_Handler+0x38>)
	ldr	r2, =__bss_end__
     2c2:	4a09      	ldr	r2, [pc, #36]	; (2e8 <Reset_Handler+0x3c>)

	movs	r0, 0
     2c4:	2000      	movs	r0, #0
.L_loop3:
	cmp	r1, r2
     2c6:	4291      	cmp	r1, r2
	itt	lt
     2c8:	bfbc      	itt	lt
	strlt	r0, [r1], #4
     2ca:	f841 0b04 	strlt.w	r0, [r1], #4
	blt	.L_loop3
     2ce:	e7fa      	blt.n	2c6 <Reset_Handler+0x1a>
#endif /* __STARTUP_CLEAR_BSS_MULTIPLE || __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
	bl	SystemInit
     2d0:	f000 f87e 	bl	3d0 <SystemInit>
#endif

#ifndef __START
#define __START _start
#endif
	bl	__START
     2d4:	f000 f8d2 	bl	47c <main>
	ldr	r1, =__etext
     2d8:	00003910 	.word	0x00003910
	ldr	r2, =__data_start__
     2dc:	20000000 	.word	0x20000000
	ldr	r3, =__data_end__
     2e0:	2000008c 	.word	0x2000008c
	ldr	r1, =__bss_start__
     2e4:	2000008c 	.word	0x2000008c
	ldr	r2, =__bss_end__
     2e8:	20000228 	.word	0x20000228

000002ec <ADC_0_Sequence_0_Handler>:
	.align	1
	.thumb_func
	.weak	Default_Handler
	.type	Default_Handler, %function
Default_Handler:
	b	.
     2ec:	e7fe      	b.n	2ec <ADC_0_Sequence_0_Handler>
     2ee:	bf00      	nop

000002f0 <__cxa_pure_virtual>:
/**
 * These functions further help eliminate unwanted exceptions
 */

extern "C" void __cxa_pure_virtual() 
{ 
     2f0:	b480      	push	{r7}
     2f2:	af00      	add	r7, sp, #0
    while(1); 
     2f4:	e7fe      	b.n	2f4 <__cxa_pure_virtual+0x4>

000002f6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
}

void __gnu_cxx::__verbose_terminate_handler()
{
     2f6:	b480      	push	{r7}
     2f8:	af00      	add	r7, sp, #0
    while(1);
     2fa:	e7fe      	b.n	2fa <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x4>

000002fc <GPIO_Port_F_Handler>:
}

extern "C" void GPIO_Port_F_Handler(void)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	af00      	add	r7, sp, #0
    
    if(swtich1.read() == 1)
     300:	4824      	ldr	r0, [pc, #144]	; (394 <GPIO_Port_F_Handler+0x98>)
     302:	f001 f985 	bl	1610 <_ZN4Gpio4readEv>
     306:	4603      	mov	r3, r0
     308:	2b01      	cmp	r3, #1
     30a:	bf0c      	ite	eq
     30c:	2301      	moveq	r3, #1
     30e:	2300      	movne	r3, #0
     310:	b2db      	uxtb	r3, r3
     312:	2b00      	cmp	r3, #0
     314:	d006      	beq.n	324 <GPIO_Port_F_Handler+0x28>
    {
        redLed.write((uint32_t)setORClear::clear);
     316:	2100      	movs	r1, #0
     318:	481f      	ldr	r0, [pc, #124]	; (398 <GPIO_Port_F_Handler+0x9c>)
     31a:	f001 f95d 	bl	15d8 <_ZN4Gpio5writeEm>
        swtich1.interruptClear();
     31e:	481d      	ldr	r0, [pc, #116]	; (394 <GPIO_Port_F_Handler+0x98>)
     320:	f001 f945 	bl	15ae <_ZN4Gpio14interruptClearEv>
    }

    if(swtich1.read() == 0)
     324:	481b      	ldr	r0, [pc, #108]	; (394 <GPIO_Port_F_Handler+0x98>)
     326:	f001 f973 	bl	1610 <_ZN4Gpio4readEv>
     32a:	4603      	mov	r3, r0
     32c:	2b00      	cmp	r3, #0
     32e:	bf0c      	ite	eq
     330:	2301      	moveq	r3, #1
     332:	2300      	movne	r3, #0
     334:	b2db      	uxtb	r3, r3
     336:	2b00      	cmp	r3, #0
     338:	d006      	beq.n	348 <GPIO_Port_F_Handler+0x4c>
    {
        redLed.write((uint32_t)setORClear::set);
     33a:	2101      	movs	r1, #1
     33c:	4816      	ldr	r0, [pc, #88]	; (398 <GPIO_Port_F_Handler+0x9c>)
     33e:	f001 f94b 	bl	15d8 <_ZN4Gpio5writeEm>
        swtich1.interruptClear();
     342:	4814      	ldr	r0, [pc, #80]	; (394 <GPIO_Port_F_Handler+0x98>)
     344:	f001 f933 	bl	15ae <_ZN4Gpio14interruptClearEv>
    }

    if(swtich2.read() == 1)
     348:	4814      	ldr	r0, [pc, #80]	; (39c <GPIO_Port_F_Handler+0xa0>)
     34a:	f001 f961 	bl	1610 <_ZN4Gpio4readEv>
     34e:	4603      	mov	r3, r0
     350:	2b01      	cmp	r3, #1
     352:	bf0c      	ite	eq
     354:	2301      	moveq	r3, #1
     356:	2300      	movne	r3, #0
     358:	b2db      	uxtb	r3, r3
     35a:	2b00      	cmp	r3, #0
     35c:	d006      	beq.n	36c <GPIO_Port_F_Handler+0x70>
    {
        blueLed.write((uint32_t)setORClear::clear);
     35e:	2100      	movs	r1, #0
     360:	480f      	ldr	r0, [pc, #60]	; (3a0 <GPIO_Port_F_Handler+0xa4>)
     362:	f001 f939 	bl	15d8 <_ZN4Gpio5writeEm>
        swtich2.interruptClear();
     366:	480d      	ldr	r0, [pc, #52]	; (39c <GPIO_Port_F_Handler+0xa0>)
     368:	f001 f921 	bl	15ae <_ZN4Gpio14interruptClearEv>
    }

    if(swtich2.read() == 0)
     36c:	480b      	ldr	r0, [pc, #44]	; (39c <GPIO_Port_F_Handler+0xa0>)
     36e:	f001 f94f 	bl	1610 <_ZN4Gpio4readEv>
     372:	4603      	mov	r3, r0
     374:	2b00      	cmp	r3, #0
     376:	bf0c      	ite	eq
     378:	2301      	moveq	r3, #1
     37a:	2300      	movne	r3, #0
     37c:	b2db      	uxtb	r3, r3
     37e:	2b00      	cmp	r3, #0
     380:	d006      	beq.n	390 <GPIO_Port_F_Handler+0x94>
    {
        blueLed.write((uint32_t)setORClear::set);
     382:	2101      	movs	r1, #1
     384:	4806      	ldr	r0, [pc, #24]	; (3a0 <GPIO_Port_F_Handler+0xa4>)
     386:	f001 f927 	bl	15d8 <_ZN4Gpio5writeEm>
        swtich2.interruptClear();
     38a:	4804      	ldr	r0, [pc, #16]	; (39c <GPIO_Port_F_Handler+0xa0>)
     38c:	f001 f90f 	bl	15ae <_ZN4Gpio14interruptClearEv>
    }

}
     390:	bf00      	nop
     392:	bd80      	pop	{r7, pc}
     394:	200000f4 	.word	0x200000f4
     398:	200000dc 	.word	0x200000dc
     39c:	2000010c 	.word	0x2000010c
     3a0:	200000c4 	.word	0x200000c4

000003a4 <ADC_0_Sequence_3_Handler>:
//     } 
// }

// void pollTest(void)
extern "C" void ADC_0_Sequence_3_Handler(void)      /* Interrupt 17 */
{
     3a4:	b580      	push	{r7, lr}
     3a6:	af00      	add	r7, sp, #0

    (void)testAdc.getAdcSample(); 
     3a8:	4807      	ldr	r0, [pc, #28]	; (3c8 <ADC_0_Sequence_3_Handler+0x24>)
     3aa:	f000 fc88 	bl	cbe <_ZN3Adc12getAdcSampleEv>
    readme = testAdc.getAdcSample();
     3ae:	4806      	ldr	r0, [pc, #24]	; (3c8 <ADC_0_Sequence_3_Handler+0x24>)
     3b0:	f000 fc85 	bl	cbe <_ZN3Adc12getAdcSampleEv>
     3b4:	4603      	mov	r3, r0
     3b6:	461a      	mov	r2, r3
     3b8:	4b04      	ldr	r3, [pc, #16]	; (3cc <ADC_0_Sequence_3_Handler+0x28>)
     3ba:	601a      	str	r2, [r3, #0]
    testAdc.clearInterrupt();
     3bc:	4802      	ldr	r0, [pc, #8]	; (3c8 <ADC_0_Sequence_3_Handler+0x24>)
     3be:	f000 fc94 	bl	cea <_ZN3Adc14clearInterruptEv>
}
     3c2:	bf00      	nop
     3c4:	bd80      	pop	{r7, pc}
     3c6:	bf00      	nop
     3c8:	20000144 	.word	0x20000144
     3cc:	20000004 	.word	0x20000004

000003d0 <SystemInit>:

extern "C" void SystemInit(void)
{
     3d0:	b580      	push	{r7, lr}
     3d2:	b086      	sub	sp, #24
     3d4:	af06      	add	r7, sp, #24
    SystemControl::initializeGPIOHB();
     3d6:	f000 fead 	bl	1134 <_ZN13SystemControl16initializeGPIOHBEv>
    SystemControl::initializeClock(_80MHz);
     3da:	2005      	movs	r0, #5
     3dc:	f000 fee2 	bl	11a4 <_ZN13SystemControl15initializeClockE7SYSDIV2>

    greenLed.initialize((uint32_t)PF3::M1PWM7, output);
     3e0:	2201      	movs	r2, #1
     3e2:	f241 01d2 	movw	r1, #4306	; 0x10d2
     3e6:	481d      	ldr	r0, [pc, #116]	; (45c <Stack_Size+0x5c>)
     3e8:	f000 ff62 	bl	12b0 <_ZN4Gpio10initializeEm9direction>
    blueLed.initialize((uint32_t)PF2::GPIO, output); 
     3ec:	2201      	movs	r2, #1
     3ee:	f241 0168 	movw	r1, #4200	; 0x1068
     3f2:	481b      	ldr	r0, [pc, #108]	; (460 <Stack_Size+0x60>)
     3f4:	f000 ff5c 	bl	12b0 <_ZN4Gpio10initializeEm9direction>
    redLed.initialize((uint32_t)PF1::GPIO, output);
     3f8:	2201      	movs	r2, #1
     3fa:	f241 0104 	movw	r1, #4100	; 0x1004
     3fe:	4819      	ldr	r0, [pc, #100]	; (464 <Stack_Size+0x64>)
     400:	f000 ff56 	bl	12b0 <_ZN4Gpio10initializeEm9direction>
    adcPin.initialize((uint32_t)PE3::AIN0, input);
     404:	2200      	movs	r2, #0
     406:	f640 51ad 	movw	r1, #3501	; 0xdad
     40a:	4817      	ldr	r0, [pc, #92]	; (468 <Stack_Size+0x68>)
     40c:	f000 ff50 	bl	12b0 <_ZN4Gpio10initializeEm9direction>

    greenPwm.initializeSingle(7, module1, 0xFFFF, 0xFFFF/2, 0x1, countDirectionPwm::down, (uint32_t)ACTZERO::invertPwm, true, (uint32_t)pwmUnitClockDivisor::_64);
     410:	2305      	movs	r3, #5
     412:	9305      	str	r3, [sp, #20]
     414:	2301      	movs	r3, #1
     416:	9304      	str	r3, [sp, #16]
     418:	2301      	movs	r3, #1
     41a:	9303      	str	r3, [sp, #12]
     41c:	2300      	movs	r3, #0
     41e:	9302      	str	r3, [sp, #8]
     420:	2301      	movs	r3, #1
     422:	9301      	str	r3, [sp, #4]
     424:	f647 73ff 	movw	r3, #32767	; 0x7fff
     428:	9300      	str	r3, [sp, #0]
     42a:	f64f 73ff 	movw	r3, #65535	; 0xffff
     42e:	2201      	movs	r2, #1
     430:	2107      	movs	r1, #7
     432:	480e      	ldr	r0, [pc, #56]	; (46c <Stack_Size+0x6c>)
     434:	f001 f916 	bl	1664 <_ZN3Pwm16initializeSingleEm9pwmModulemmm17countDirectionPwmmbm>

    testAdc.initializeModule((uint32_t)adcModule::module0, sequencerPriority, false, false);
     438:	4b0d      	ldr	r3, [pc, #52]	; (470 <Stack_Size+0x70>)
     43a:	681a      	ldr	r2, [r3, #0]
     43c:	2300      	movs	r3, #0
     43e:	9300      	str	r3, [sp, #0]
     440:	2300      	movs	r3, #0
     442:	2100      	movs	r1, #0
     444:	480b      	ldr	r0, [pc, #44]	; (474 <Stack_Size+0x74>)
     446:	f000 fa45 	bl	8d4 <_ZN3Adc16initializeModuleEmmmm>

    adcResolution = Adc::getAdcResolution();
     44a:	f000 fc8f 	bl	d6c <_ZN3Adc16getAdcResolutionEv>
     44e:	4602      	mov	r2, r0
     450:	4b09      	ldr	r3, [pc, #36]	; (478 <Stack_Size+0x78>)
     452:	601a      	str	r2, [r3, #0]
}
     454:	bf00      	nop
     456:	46bd      	mov	sp, r7
     458:	bd80      	pop	{r7, pc}
     45a:	bf00      	nop
     45c:	200000ac 	.word	0x200000ac
     460:	200000c4 	.word	0x200000c4
     464:	200000dc 	.word	0x200000dc
     468:	20000124 	.word	0x20000124
     46c:	2000013c 	.word	0x2000013c
     470:	2000000c 	.word	0x2000000c
     474:	20000144 	.word	0x20000144
     478:	200000a8 	.word	0x200000a8

0000047c <main>:
 
int main(void)
{
     47c:	b580      	push	{r7, lr}
     47e:	b082      	sub	sp, #8
     480:	af02      	add	r7, sp, #8
    
    Nvic::disableInterrupts();
     482:	f000 f9e3 	bl	84c <_ZN4Nvic17disableInterruptsEv>

    swtich1.initialize((uint32_t)PF4::GPIO, input, 3);
     486:	2303      	movs	r3, #3
     488:	2200      	movs	r2, #0
     48a:	f241 1130 	movw	r1, #4400	; 0x1130
     48e:	4812      	ldr	r0, [pc, #72]	; (4d8 <main+0x5c>)
     490:	f001 f828 	bl	14e4 <_ZN4Gpio10initializeEm9directionm>
    swtich2.initialize((uint32_t)PF0::GPIO, input, 3);
     494:	2303      	movs	r3, #3
     496:	2200      	movs	r2, #0
     498:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
     49c:	480f      	ldr	r0, [pc, #60]	; (4dc <main+0x60>)
     49e:	f001 f821 	bl	14e4 <_ZN4Gpio10initializeEm9directionm>

    // myTimer.initializeForInterupt(periodic, shortTimer0, 80000000, down, concatenated, 3);
    // myTimer.enableTimer();

    Nvic::enableInterrupts();
     4a2:	f000 f9e2 	bl	86a <_ZN4Nvic16enableInterruptsEv>

    // testAdc.initializeForPolling((uint32_t)sampleSequencer::SS3, (uint32_t)ssTriggerSource::processor, (uint32_t)ssInputSrc0::AIN0, (uint32_t)ssControl0::END0|(uint32_t)ssControl0::IE0, pollTest);
    testAdc.initializeForInterrupt((uint32_t)sampleSequencer::SS3, (uint32_t)ssTriggerSource::processor, (uint32_t)ssInputSrc0::AIN0, (uint32_t)ssControl0::END0|(uint32_t)ssControl0::IE0, 3);
     4a6:	2303      	movs	r3, #3
     4a8:	9301      	str	r3, [sp, #4]
     4aa:	2306      	movs	r3, #6
     4ac:	9300      	str	r3, [sp, #0]
     4ae:	2300      	movs	r3, #0
     4b0:	2200      	movs	r2, #0
     4b2:	2103      	movs	r1, #3
     4b4:	480a      	ldr	r0, [pc, #40]	; (4e0 <main+0x64>)
     4b6:	f000 fab7 	bl	a28 <_ZN3Adc22initializeForInterruptEmmmmm>
    testAdc.enableSampleSequencer();
     4ba:	4809      	ldr	r0, [pc, #36]	; (4e0 <main+0x64>)
     4bc:	f000 fb40 	bl	b40 <_ZN3Adc21enableSampleSequencerEv>
    testAdc.initiateSampling();
     4c0:	4807      	ldr	r0, [pc, #28]	; (4e0 <main+0x64>)
     4c2:	f000 fbe8 	bl	c96 <_ZN3Adc16initiateSamplingEv>

    blueLed.write((uint32_t)setORClear::set);
     4c6:	2101      	movs	r1, #1
     4c8:	4806      	ldr	r0, [pc, #24]	; (4e4 <main+0x68>)
     4ca:	f001 f885 	bl	15d8 <_ZN4Gpio5writeEm>
    redLed.write((uint32_t)setORClear::set);
     4ce:	2101      	movs	r1, #1
     4d0:	4805      	ldr	r0, [pc, #20]	; (4e8 <main+0x6c>)
     4d2:	f001 f881 	bl	15d8 <_ZN4Gpio5writeEm>
        
    while(1)
     4d6:	e7fe      	b.n	4d6 <main+0x5a>
     4d8:	200000f4 	.word	0x200000f4
     4dc:	2000010c 	.word	0x2000010c
     4e0:	20000144 	.word	0x20000144
     4e4:	200000c4 	.word	0x200000c4
     4e8:	200000dc 	.word	0x200000dc

000004ec <_Z41__static_initialization_and_destruction_0ii>:
        // testAdc.pollStatus();
        // voltageValue = (3.3/(1<<adcResolution))*readme;
        // voltageValue = voltageValue;
    }

}
     4ec:	b580      	push	{r7, lr}
     4ee:	b082      	sub	sp, #8
     4f0:	af00      	add	r7, sp, #0
     4f2:	6078      	str	r0, [r7, #4]
     4f4:	6039      	str	r1, [r7, #0]
     4f6:	687b      	ldr	r3, [r7, #4]
     4f8:	2b01      	cmp	r3, #1
     4fa:	d144      	bne.n	586 <_Z41__static_initialization_and_destruction_0ii+0x9a>
     4fc:	683b      	ldr	r3, [r7, #0]
     4fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
     502:	4293      	cmp	r3, r2
     504:	d13f      	bne.n	586 <_Z41__static_initialization_and_destruction_0ii+0x9a>
Gpio greenLed;
     506:	4822      	ldr	r0, [pc, #136]	; (590 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
     508:	f000 feb8 	bl	127c <_ZN4GpioC1Ev>
     50c:	4a21      	ldr	r2, [pc, #132]	; (594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     50e:	4922      	ldr	r1, [pc, #136]	; (598 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     510:	481f      	ldr	r0, [pc, #124]	; (590 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
     512:	f001 fa2f 	bl	1974 <__aeabi_atexit>
Gpio blueLed;
     516:	4821      	ldr	r0, [pc, #132]	; (59c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     518:	f000 feb0 	bl	127c <_ZN4GpioC1Ev>
     51c:	4a1d      	ldr	r2, [pc, #116]	; (594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     51e:	491e      	ldr	r1, [pc, #120]	; (598 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     520:	481e      	ldr	r0, [pc, #120]	; (59c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     522:	f001 fa27 	bl	1974 <__aeabi_atexit>
Gpio redLed;
     526:	481e      	ldr	r0, [pc, #120]	; (5a0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     528:	f000 fea8 	bl	127c <_ZN4GpioC1Ev>
     52c:	4a19      	ldr	r2, [pc, #100]	; (594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     52e:	491a      	ldr	r1, [pc, #104]	; (598 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     530:	481b      	ldr	r0, [pc, #108]	; (5a0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     532:	f001 fa1f 	bl	1974 <__aeabi_atexit>
Gpio swtich1;
     536:	481b      	ldr	r0, [pc, #108]	; (5a4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     538:	f000 fea0 	bl	127c <_ZN4GpioC1Ev>
     53c:	4a15      	ldr	r2, [pc, #84]	; (594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     53e:	4916      	ldr	r1, [pc, #88]	; (598 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     540:	4818      	ldr	r0, [pc, #96]	; (5a4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     542:	f001 fa17 	bl	1974 <__aeabi_atexit>
Gpio swtich2;
     546:	4818      	ldr	r0, [pc, #96]	; (5a8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     548:	f000 fe98 	bl	127c <_ZN4GpioC1Ev>
     54c:	4a11      	ldr	r2, [pc, #68]	; (594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     54e:	4912      	ldr	r1, [pc, #72]	; (598 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     550:	4815      	ldr	r0, [pc, #84]	; (5a8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     552:	f001 fa0f 	bl	1974 <__aeabi_atexit>
Gpio adcPin;
     556:	4815      	ldr	r0, [pc, #84]	; (5ac <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     558:	f000 fe90 	bl	127c <_ZN4GpioC1Ev>
     55c:	4a0d      	ldr	r2, [pc, #52]	; (594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     55e:	490e      	ldr	r1, [pc, #56]	; (598 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     560:	4812      	ldr	r0, [pc, #72]	; (5ac <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     562:	f001 fa07 	bl	1974 <__aeabi_atexit>
Pwm greenPwm;
     566:	4812      	ldr	r0, [pc, #72]	; (5b0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     568:	f001 f866 	bl	1638 <_ZN3PwmC1Ev>
     56c:	4a09      	ldr	r2, [pc, #36]	; (594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     56e:	4911      	ldr	r1, [pc, #68]	; (5b4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     570:	480f      	ldr	r0, [pc, #60]	; (5b0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     572:	f001 f9ff 	bl	1974 <__aeabi_atexit>
Adc testAdc;
     576:	4810      	ldr	r0, [pc, #64]	; (5b8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     578:	f000 f990 	bl	89c <_ZN3AdcC1Ev>
     57c:	4a05      	ldr	r2, [pc, #20]	; (594 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     57e:	490f      	ldr	r1, [pc, #60]	; (5bc <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     580:	480d      	ldr	r0, [pc, #52]	; (5b8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     582:	f001 f9f7 	bl	1974 <__aeabi_atexit>
}
     586:	bf00      	nop
     588:	3708      	adds	r7, #8
     58a:	46bd      	mov	sp, r7
     58c:	bd80      	pop	{r7, pc}
     58e:	bf00      	nop
     590:	200000ac 	.word	0x200000ac
     594:	20000000 	.word	0x20000000
     598:	0000129b 	.word	0x0000129b
     59c:	200000c4 	.word	0x200000c4
     5a0:	200000dc 	.word	0x200000dc
     5a4:	200000f4 	.word	0x200000f4
     5a8:	2000010c 	.word	0x2000010c
     5ac:	20000124 	.word	0x20000124
     5b0:	2000013c 	.word	0x2000013c
     5b4:	0000164f 	.word	0x0000164f
     5b8:	20000144 	.word	0x20000144
     5bc:	000008bf 	.word	0x000008bf

000005c0 <_GLOBAL__sub_I_readme>:
     5c0:	b580      	push	{r7, lr}
     5c2:	af00      	add	r7, sp, #0
     5c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
     5c8:	2001      	movs	r0, #1
     5ca:	f7ff ff8f 	bl	4ec <_Z41__static_initialization_and_destruction_0ii>
     5ce:	bd80      	pop	{r7, pc}

000005d0 <_ZN8RegisterC1Ev>:
#include "register.h"

/**
 * @brief empty constructor placeholder
 */
Register::Register()
     5d0:	b480      	push	{r7}
     5d2:	b083      	sub	sp, #12
     5d4:	af00      	add	r7, sp, #0
     5d6:	6078      	str	r0, [r7, #4]
{
    
}
     5d8:	687b      	ldr	r3, [r7, #4]
     5da:	4618      	mov	r0, r3
     5dc:	370c      	adds	r7, #12
     5de:	46bd      	mov	sp, r7
     5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     5e4:	4770      	bx	lr

000005e6 <_ZN8RegisterD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Register::~Register()
     5e6:	b480      	push	{r7}
     5e8:	b083      	sub	sp, #12
     5ea:	af00      	add	r7, sp, #0
     5ec:	6078      	str	r0, [r7, #4]
{

}
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	4618      	mov	r0, r3
     5f2:	370c      	adds	r7, #12
     5f4:	46bd      	mov	sp, r7
     5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     5fa:	4770      	bx	lr

000005fc <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>:
 * @param permission of the bitfield, read-only, write-only, etc...
 * 
 * @return retrieved information in the bitfield
 */
uint32_t Register::getRegisterBitFieldStatus(volatile uint32_t* address, uint32_t bit, uint32_t bitWidth, bitFieldPermission permission)
{
     5fc:	b480      	push	{r7}
     5fe:	b087      	sub	sp, #28
     600:	af00      	add	r7, sp, #0
     602:	60f8      	str	r0, [r7, #12]
     604:	60b9      	str	r1, [r7, #8]
     606:	607a      	str	r2, [r7, #4]
     608:	70fb      	strb	r3, [r7, #3]
    if((permission == RW) || (permission == RO) || (permission == RW1C))
     60a:	78fb      	ldrb	r3, [r7, #3]
     60c:	2b00      	cmp	r3, #0
     60e:	d005      	beq.n	61c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x20>
     610:	78fb      	ldrb	r3, [r7, #3]
     612:	2b01      	cmp	r3, #1
     614:	d002      	beq.n	61c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x20>
     616:	78fb      	ldrb	r3, [r7, #3]
     618:	2b03      	cmp	r3, #3
     61a:	d111      	bne.n	640 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x44>
    {
        uint32_t select = ((((0xFFFFFFFF >> (32 - bitWidth)))) << bit);
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	f1c3 0320 	rsb	r3, r3, #32
     622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     626:	40da      	lsrs	r2, r3
     628:	68bb      	ldr	r3, [r7, #8]
     62a:	fa02 f303 	lsl.w	r3, r2, r3
     62e:	617b      	str	r3, [r7, #20]
        return(((*address) & select) >> bit);
     630:	68fb      	ldr	r3, [r7, #12]
     632:	681a      	ldr	r2, [r3, #0]
     634:	697b      	ldr	r3, [r7, #20]
     636:	401a      	ands	r2, r3
     638:	68bb      	ldr	r3, [r7, #8]
     63a:	fa22 f303 	lsr.w	r3, r2, r3
     63e:	e001      	b.n	644 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x48>
    }

    else
    {
        return(UINT32_MAX);
     640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
     644:	4618      	mov	r0, r3
     646:	371c      	adds	r7, #28
     648:	46bd      	mov	sp, r7
     64a:	f85d 7b04 	ldr.w	r7, [sp], #4
     64e:	4770      	bx	lr

00000650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>:
 * @param bit to be set or the first bit of the bitfield to be set
 * @param width of the bitfield
 * @param permission of the bitfield, read-only, write-only, etc...
 */
void Register::setRegisterBitFieldStatus(volatile uint32_t* address, uint32_t value, uint32_t bit, uint32_t bitWidth, bitFieldPermission permission)
{
     650:	b480      	push	{r7}
     652:	b087      	sub	sp, #28
     654:	af00      	add	r7, sp, #0
     656:	60f8      	str	r0, [r7, #12]
     658:	60b9      	str	r1, [r7, #8]
     65a:	607a      	str	r2, [r7, #4]
     65c:	603b      	str	r3, [r7, #0]
    if((permission == RW1C) && (value != 1))
     65e:	f897 3020 	ldrb.w	r3, [r7, #32]
     662:	2b03      	cmp	r3, #3
     664:	d102      	bne.n	66c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x1c>
     666:	68bb      	ldr	r3, [r7, #8]
     668:	2b01      	cmp	r3, #1
     66a:	d131      	bne.n	6d0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x80>
    {
        return;
    }
    
    else if((permission == RW) || (permission == WO) || (permission == RW1C))
     66c:	f897 3020 	ldrb.w	r3, [r7, #32]
     670:	2b00      	cmp	r3, #0
     672:	d007      	beq.n	684 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x34>
     674:	f897 3020 	ldrb.w	r3, [r7, #32]
     678:	2b02      	cmp	r3, #2
     67a:	d003      	beq.n	684 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x34>
     67c:	f897 3020 	ldrb.w	r3, [r7, #32]
     680:	2b03      	cmp	r3, #3
     682:	d127      	bne.n	6d4 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x84>
    {
        uint32_t maxValue = (0xFFFFFFFF >> (32 - bitWidth));
     684:	683b      	ldr	r3, [r7, #0]
     686:	f1c3 0320 	rsb	r3, r3, #32
     68a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     68e:	fa22 f303 	lsr.w	r3, r2, r3
     692:	617b      	str	r3, [r7, #20]

        if((value <= maxValue))
     694:	68ba      	ldr	r2, [r7, #8]
     696:	697b      	ldr	r3, [r7, #20]
     698:	429a      	cmp	r2, r3
     69a:	d81d      	bhi.n	6d8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x88>
        {
            uint32_t clear = (~(maxValue << bit));
     69c:	697a      	ldr	r2, [r7, #20]
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	fa02 f303 	lsl.w	r3, r2, r3
     6a4:	43db      	mvns	r3, r3
     6a6:	613b      	str	r3, [r7, #16]
            //value = value << bit;
            value = (value & maxValue) << bit;
     6a8:	68ba      	ldr	r2, [r7, #8]
     6aa:	697b      	ldr	r3, [r7, #20]
     6ac:	401a      	ands	r2, r3
     6ae:	687b      	ldr	r3, [r7, #4]
     6b0:	fa02 f303 	lsl.w	r3, r2, r3
     6b4:	60bb      	str	r3, [r7, #8]
    
            (*address) &= clear;
     6b6:	68fb      	ldr	r3, [r7, #12]
     6b8:	681a      	ldr	r2, [r3, #0]
     6ba:	693b      	ldr	r3, [r7, #16]
     6bc:	401a      	ands	r2, r3
     6be:	68fb      	ldr	r3, [r7, #12]
     6c0:	601a      	str	r2, [r3, #0]
            (*address) |= value;
     6c2:	68fb      	ldr	r3, [r7, #12]
     6c4:	681a      	ldr	r2, [r3, #0]
     6c6:	68bb      	ldr	r3, [r7, #8]
     6c8:	431a      	orrs	r2, r3
     6ca:	68fb      	ldr	r3, [r7, #12]
     6cc:	601a      	str	r2, [r3, #0]
        }

        else
        {
            return;
        }
     6ce:	e004      	b.n	6da <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x8a>
        return;
     6d0:	bf00      	nop
     6d2:	e002      	b.n	6da <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x8a>
        
    }

    else
    {
        return;
     6d4:	bf00      	nop
     6d6:	e000      	b.n	6da <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x8a>
            return;
     6d8:	bf00      	nop
    }
}
     6da:	371c      	adds	r7, #28
     6dc:	46bd      	mov	sp, r7
     6de:	f85d 7b04 	ldr.w	r7, [sp], #4
     6e2:	4770      	bx	lr

000006e4 <_Znwj>:


void* operator new(size_t size) noexcept 
{ 
     6e4:	b580      	push	{r7, lr}
     6e6:	b082      	sub	sp, #8
     6e8:	af00      	add	r7, sp, #0
     6ea:	6078      	str	r0, [r7, #4]
    return malloc(size); 
     6ec:	6878      	ldr	r0, [r7, #4]
     6ee:	f002 f8d7 	bl	28a0 <malloc>
     6f2:	4603      	mov	r3, r0
} 
     6f4:	4618      	mov	r0, r3
     6f6:	3708      	adds	r7, #8
     6f8:	46bd      	mov	sp, r7
     6fa:	bd80      	pop	{r7, pc}

000006fc <_ZdlPv>:

void operator delete(void *p) noexcept 
{ 
     6fc:	b580      	push	{r7, lr}
     6fe:	b082      	sub	sp, #8
     700:	af00      	add	r7, sp, #0
     702:	6078      	str	r0, [r7, #4]
    free(p); 
     704:	6878      	ldr	r0, [r7, #4]
     706:	f002 f8d3 	bl	28b0 <free>
} 
     70a:	bf00      	nop
     70c:	3708      	adds	r7, #8
     70e:	46bd      	mov	sp, r7
     710:	bd80      	pop	{r7, pc}

00000712 <_Znaj>:

void* operator new[](size_t size) noexcept 
{ 
     712:	b580      	push	{r7, lr}
     714:	b082      	sub	sp, #8
     716:	af00      	add	r7, sp, #0
     718:	6078      	str	r0, [r7, #4]
    return operator new(size); // Same as regular new
     71a:	6878      	ldr	r0, [r7, #4]
     71c:	f7ff ffe2 	bl	6e4 <_Znwj>
     720:	4603      	mov	r3, r0
} 
     722:	4618      	mov	r0, r3
     724:	3708      	adds	r7, #8
     726:	46bd      	mov	sp, r7
     728:	bd80      	pop	{r7, pc}

0000072a <_ZdaPv>:

void operator delete[](void *p) noexcept 
{ 
     72a:	b580      	push	{r7, lr}
     72c:	b082      	sub	sp, #8
     72e:	af00      	add	r7, sp, #0
     730:	6078      	str	r0, [r7, #4]
    operator delete(p); // Same as regular delete
     732:	6878      	ldr	r0, [r7, #4]
     734:	f7ff ffe2 	bl	6fc <_ZdlPv>
} 
     738:	bf00      	nop
     73a:	3708      	adds	r7, #8
     73c:	46bd      	mov	sp, r7
     73e:	bd80      	pop	{r7, pc}

00000740 <_ZnwjSt9nothrow_t>:

void* operator new(size_t size, std::nothrow_t) noexcept 
{ 
     740:	b580      	push	{r7, lr}
     742:	b082      	sub	sp, #8
     744:	af00      	add	r7, sp, #0
     746:	6078      	str	r0, [r7, #4]
     748:	7039      	strb	r1, [r7, #0]
    return operator new(size); // Same as regular new 
     74a:	6878      	ldr	r0, [r7, #4]
     74c:	f7ff ffca 	bl	6e4 <_Znwj>
     750:	4603      	mov	r3, r0
} 
     752:	4618      	mov	r0, r3
     754:	3708      	adds	r7, #8
     756:	46bd      	mov	sp, r7
     758:	bd80      	pop	{r7, pc}

0000075a <_ZdlPvSt9nothrow_t>:

void operator delete(void *p,  std::nothrow_t) noexcept 
{ 
     75a:	b580      	push	{r7, lr}
     75c:	b082      	sub	sp, #8
     75e:	af00      	add	r7, sp, #0
     760:	6078      	str	r0, [r7, #4]
     762:	7039      	strb	r1, [r7, #0]
    operator delete(p); // Same as regular delete
     764:	6878      	ldr	r0, [r7, #4]
     766:	f7ff ffc9 	bl	6fc <_ZdlPv>
} 
     76a:	bf00      	nop
     76c:	3708      	adds	r7, #8
     76e:	46bd      	mov	sp, r7
     770:	bd80      	pop	{r7, pc}

00000772 <_ZnajSt9nothrow_t>:

void* operator new[](size_t size, std::nothrow_t) noexcept 
{ 
     772:	b580      	push	{r7, lr}
     774:	b082      	sub	sp, #8
     776:	af00      	add	r7, sp, #0
     778:	6078      	str	r0, [r7, #4]
     77a:	7039      	strb	r1, [r7, #0]
    return operator new(size); // Same as regular new
     77c:	6878      	ldr	r0, [r7, #4]
     77e:	f7ff ffb1 	bl	6e4 <_Znwj>
     782:	4603      	mov	r3, r0
} 
     784:	4618      	mov	r0, r3
     786:	3708      	adds	r7, #8
     788:	46bd      	mov	sp, r7
     78a:	bd80      	pop	{r7, pc}

0000078c <_ZdaPvSt9nothrow_t>:

void operator delete[](void *p,  std::nothrow_t) noexcept 
{ 
     78c:	b580      	push	{r7, lr}
     78e:	b082      	sub	sp, #8
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
     794:	7039      	strb	r1, [r7, #0]
    operator delete(p); // Same as regular delete
     796:	6878      	ldr	r0, [r7, #4]
     798:	f7ff ffb0 	bl	6fc <_ZdlPv>
}
     79c:	bf00      	nop
     79e:	3708      	adds	r7, #8
     7a0:	46bd      	mov	sp, r7
     7a2:	bd80      	pop	{r7, pc}

000007a4 <_ZN4NvicC1Ev>:


/**
 * @brief empty constructor placeholder
 */
Nvic::Nvic()
     7a4:	b480      	push	{r7}
     7a6:	b083      	sub	sp, #12
     7a8:	af00      	add	r7, sp, #0
     7aa:	6078      	str	r0, [r7, #4]
{

}
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	4618      	mov	r0, r3
     7b0:	370c      	adds	r7, #12
     7b2:	46bd      	mov	sp, r7
     7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
     7b8:	4770      	bx	lr

000007ba <_ZN4NvicD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Nvic::~Nvic()
     7ba:	b480      	push	{r7}
     7bc:	b083      	sub	sp, #12
     7be:	af00      	add	r7, sp, #0
     7c0:	6078      	str	r0, [r7, #4]
{

}
     7c2:	687b      	ldr	r3, [r7, #4]
     7c4:	4618      	mov	r0, r3
     7c6:	370c      	adds	r7, #12
     7c8:	46bd      	mov	sp, r7
     7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
     7ce:	4770      	bx	lr

000007d0 <_ZN4Nvic17activateInterruptE9interruptm>:
 * @param myInterrupt coresponds to the interrupt number of the interrupt that 
 *        you want to activate.
 * @param priority of the interrput that you want to activate
 */
void Nvic::activateInterrupt(interrupt myInterrupt, uint32_t priority)
{
     7d0:	b580      	push	{r7, lr}
     7d2:	b084      	sub	sp, #16
     7d4:	af02      	add	r7, sp, #8
     7d6:	4603      	mov	r3, r0
     7d8:	6039      	str	r1, [r7, #0]
     7da:	71fb      	strb	r3, [r7, #7]
    
    if((myInterrupt < 139) && (priority < 8))
     7dc:	79fb      	ldrb	r3, [r7, #7]
     7de:	2b8a      	cmp	r3, #138	; 0x8a
     7e0:	d82b      	bhi.n	83a <_ZN4Nvic17activateInterruptE9interruptm+0x6a>
     7e2:	683b      	ldr	r3, [r7, #0]
     7e4:	2b07      	cmp	r3, #7
     7e6:	d828      	bhi.n	83a <_ZN4Nvic17activateInterruptE9interruptm+0x6a>
    {   
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(corePeripheralBase + PRIn_OFFSET[myInterrupt/4])), priority, ((myInterrupt % nvicRegisterOffset) * 8) + 5, 3, RW);
     7e8:	79fb      	ldrb	r3, [r7, #7]
     7ea:	089b      	lsrs	r3, r3, #2
     7ec:	b2db      	uxtb	r3, r3
     7ee:	461a      	mov	r2, r3
     7f0:	4b14      	ldr	r3, [pc, #80]	; (844 <_ZN4Nvic17activateInterruptE9interruptm+0x74>)
     7f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     7f6:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
     7fa:	4618      	mov	r0, r3
     7fc:	79fb      	ldrb	r3, [r7, #7]
     7fe:	f003 0303 	and.w	r3, r3, #3
     802:	00db      	lsls	r3, r3, #3
     804:	1d5a      	adds	r2, r3, #5
     806:	2300      	movs	r3, #0
     808:	9300      	str	r3, [sp, #0]
     80a:	2303      	movs	r3, #3
     80c:	6839      	ldr	r1, [r7, #0]
     80e:	f7ff ff1f 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(corePeripheralBase + ENn_OFFSET[myInterrupt/32])), (uint32_t)setORClear::set, (uint32_t)(myInterrupt % 32), 1, RW);
     812:	79fb      	ldrb	r3, [r7, #7]
     814:	095b      	lsrs	r3, r3, #5
     816:	b2db      	uxtb	r3, r3
     818:	461a      	mov	r2, r3
     81a:	4b0b      	ldr	r3, [pc, #44]	; (848 <_ZN4Nvic17activateInterruptE9interruptm+0x78>)
     81c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     820:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
     824:	4618      	mov	r0, r3
     826:	79fb      	ldrb	r3, [r7, #7]
     828:	f003 021f 	and.w	r2, r3, #31
     82c:	2300      	movs	r3, #0
     82e:	9300      	str	r3, [sp, #0]
     830:	2301      	movs	r3, #1
     832:	2101      	movs	r1, #1
     834:	f7ff ff0c 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
     838:	e000      	b.n	83c <_ZN4Nvic17activateInterruptE9interruptm+0x6c>

    }
    
    else
    {
        return;
     83a:	bf00      	nop
    }
}
     83c:	3708      	adds	r7, #8
     83e:	46bd      	mov	sp, r7
     840:	bd80      	pop	{r7, pc}
     842:	bf00      	nop
     844:	000034f8 	.word	0x000034f8
     848:	00003494 	.word	0x00003494

0000084c <_ZN4Nvic17disableInterruptsEv>:
 *         value to void.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
uint32_t Nvic::disableInterrupts(void)
{
     84c:	b480      	push	{r7}
     84e:	b083      	sub	sp, #12
     850:	af00      	add	r7, sp, #0

        "mrs     r0, PRIMASK\n"
        "cpsid   i\n"
        "bx      lr\n"
        : "=r" (ui32Ret)
    );
     852:	f3ef 8010 	mrs	r0, PRIMASK
     856:	b672      	cpsid	i
     858:	4770      	bx	lr
     85a:	607b      	str	r3, [r7, #4]

    return(ui32Ret);
     85c:	687b      	ldr	r3, [r7, #4]
}
     85e:	4618      	mov	r0, r3
     860:	370c      	adds	r7, #12
     862:	46bd      	mov	sp, r7
     864:	f85d 7b04 	ldr.w	r7, [sp], #4
     868:	4770      	bx	lr

0000086a <_ZN4Nvic16enableInterruptsEv>:
 *         value to void.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
uint32_t Nvic::enableInterrupts(void)
{
     86a:	b480      	push	{r7}
     86c:	b083      	sub	sp, #12
     86e:	af00      	add	r7, sp, #0

        "mrs     r0, PRIMASK\n"
        "cpsie   i\n"
        "bx      lr\n"
        : "=r" (ui32Ret)
    );
     870:	f3ef 8010 	mrs	r0, PRIMASK
     874:	b662      	cpsie	i
     876:	4770      	bx	lr
     878:	607b      	str	r3, [r7, #4]

    return(ui32Ret);
     87a:	687b      	ldr	r3, [r7, #4]
}
     87c:	4618      	mov	r0, r3
     87e:	370c      	adds	r7, #12
     880:	46bd      	mov	sp, r7
     882:	f85d 7b04 	ldr.w	r7, [sp], #4
     886:	4770      	bx	lr

00000888 <_ZN4Nvic3wfiEv>:
 *        module and waits for another interrupt.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
void Nvic::wfi(void)
{
     888:	b480      	push	{r7}
     88a:	af00      	add	r7, sp, #0
    //
    asm volatile(

        "wfi     \n"
        "bx    lr\n"
    );
     88c:	bf30      	wfi
     88e:	4770      	bx	lr
    
}
     890:	bf00      	nop
     892:	46bd      	mov	sp, r7
     894:	f85d 7b04 	ldr.w	r7, [sp], #4
     898:	4770      	bx	lr
     89a:	bf00      	nop

0000089c <_ZN3AdcC1Ev>:
#include "adc.h"

/**
 * @brief empty constructor placeholder
 */
Adc::Adc()
     89c:	b480      	push	{r7}
     89e:	b083      	sub	sp, #12
     8a0:	af00      	add	r7, sp, #0
     8a2:	6078      	str	r0, [r7, #4]
     8a4:	687b      	ldr	r3, [r7, #4]
     8a6:	2200      	movs	r2, #0
     8a8:	621a      	str	r2, [r3, #32]
     8aa:	687b      	ldr	r3, [r7, #4]
     8ac:	2200      	movs	r2, #0
     8ae:	625a      	str	r2, [r3, #36]	; 0x24
{

}
     8b0:	687b      	ldr	r3, [r7, #4]
     8b2:	4618      	mov	r0, r3
     8b4:	370c      	adds	r7, #12
     8b6:	46bd      	mov	sp, r7
     8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8bc:	4770      	bx	lr

000008be <_ZN3AdcD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Adc::~Adc()
     8be:	b480      	push	{r7}
     8c0:	b083      	sub	sp, #12
     8c2:	af00      	add	r7, sp, #0
     8c4:	6078      	str	r0, [r7, #4]
{

}
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	4618      	mov	r0, r3
     8ca:	370c      	adds	r7, #12
     8cc:	46bd      	mov	sp, r7
     8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
     8d2:	4770      	bx	lr

000008d4 <_ZN3Adc16initializeModuleEmmmm>:
 * @param phaseDelay of the ADC module. Phase delay can be used to increase the
 *                   overal sample rate of the ADC module. See the datasheet for 
 *                   more details.
 */
void Adc::initializeModule(uint32_t adcModule, uint32_t sequencerPriority, uint32_t hardwareAveraging, uint32_t phaseDelay)
{
     8d4:	b580      	push	{r7, lr}
     8d6:	b088      	sub	sp, #32
     8d8:	af02      	add	r7, sp, #8
     8da:	60f8      	str	r0, [r7, #12]
     8dc:	60b9      	str	r1, [r7, #8]
     8de:	607a      	str	r2, [r7, #4]
     8e0:	603b      	str	r3, [r7, #0]
    (*this).adcModule = adcModule;
     8e2:	68fb      	ldr	r3, [r7, #12]
     8e4:	68ba      	ldr	r2, [r7, #8]
     8e6:	609a      	str	r2, [r3, #8]
    baseAddress = adc0BaseAddress + (adcModule * 0x1000);
     8e8:	68bb      	ldr	r3, [r7, #8]
     8ea:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     8ee:	3338      	adds	r3, #56	; 0x38
     8f0:	031a      	lsls	r2, r3, #12
     8f2:	68fb      	ldr	r3, [r7, #12]
     8f4:	605a      	str	r2, [r3, #4]

    //0. Enable ADC module clock
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCADC_OFFSET)), (uint32_t)setORClear::set, adcModule, 1, RW);
     8f6:	2300      	movs	r3, #0
     8f8:	9300      	str	r3, [sp, #0]
     8fa:	2301      	movs	r3, #1
     8fc:	68ba      	ldr	r2, [r7, #8]
     8fe:	2101      	movs	r1, #1
     900:	482b      	ldr	r0, [pc, #172]	; (9b0 <_ZN3Adc16initializeModuleEmmmm+0xdc>)
     902:	f7ff fea5 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRADC_OFFSET), adcModule, 1, RO) == 0)
     906:	2301      	movs	r3, #1
     908:	2201      	movs	r2, #1
     90a:	68b9      	ldr	r1, [r7, #8]
     90c:	4829      	ldr	r0, [pc, #164]	; (9b4 <_ZN3Adc16initializeModuleEmmmm+0xe0>)
     90e:	f7ff fe75 	bl	5fc <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     912:	4603      	mov	r3, r0
     914:	2b00      	cmp	r3, #0
     916:	bf0c      	ite	eq
     918:	2301      	moveq	r3, #1
     91a:	2300      	movne	r3, #0
     91c:	b2db      	uxtb	r3, r3
     91e:	2b00      	cmp	r3, #0
     920:	d000      	beq.n	924 <_ZN3Adc16initializeModuleEmmmm+0x50>
     922:	e7f0      	b.n	906 <_ZN3Adc16initializeModuleEmmmm+0x32>
     * 0.A If required by the application, reconfigure the sample sequencer 
     * priorities in the ADCSSPRI register. The default configuration has 
     * Sample Sequencer 0 with the highest priority and Sample Sequencer 3 as 
     * the lowest priority.
     */
    for(int i = 0; i < 4; i++)
     924:	2300      	movs	r3, #0
     926:	617b      	str	r3, [r7, #20]
     928:	697b      	ldr	r3, [r7, #20]
     92a:	2b03      	cmp	r3, #3
     92c:	dc14      	bgt.n	958 <_ZN3Adc16initializeModuleEmmmm+0x84>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSPRI_OFFSET)), sequencerPriority >> (4 * i), i * 4, 1 + 1, RW);
     92e:	68fb      	ldr	r3, [r7, #12]
     930:	685b      	ldr	r3, [r3, #4]
     932:	3320      	adds	r3, #32
     934:	4618      	mov	r0, r3
     936:	697b      	ldr	r3, [r7, #20]
     938:	009b      	lsls	r3, r3, #2
     93a:	687a      	ldr	r2, [r7, #4]
     93c:	fa22 f103 	lsr.w	r1, r2, r3
     940:	697b      	ldr	r3, [r7, #20]
     942:	009b      	lsls	r3, r3, #2
     944:	461a      	mov	r2, r3
     946:	2300      	movs	r3, #0
     948:	9300      	str	r3, [sp, #0]
     94a:	2302      	movs	r3, #2
     94c:	f7ff fe80 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    for(int i = 0; i < 4; i++)
     950:	697b      	ldr	r3, [r7, #20]
     952:	3301      	adds	r3, #1
     954:	617b      	str	r3, [r7, #20]
     956:	e7e7      	b.n	928 <_ZN3Adc16initializeModuleEmmmm+0x54>
    }

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSAC_OFFSET)), hardwareAveraging, 0, 2 + 1, RW);
     958:	68fb      	ldr	r3, [r7, #12]
     95a:	685b      	ldr	r3, [r3, #4]
     95c:	3330      	adds	r3, #48	; 0x30
     95e:	4618      	mov	r0, r3
     960:	2300      	movs	r3, #0
     962:	9300      	str	r3, [sp, #0]
     964:	2303      	movs	r3, #3
     966:	2200      	movs	r2, #0
     968:	6839      	ldr	r1, [r7, #0]
     96a:	f7ff fe71 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCCTL_OFFSET)), hardwareAveraging == 0 ? 0x0 : 0x1, 6, 1, RW);
     96e:	68fb      	ldr	r3, [r7, #12]
     970:	685b      	ldr	r3, [r3, #4]
     972:	3338      	adds	r3, #56	; 0x38
     974:	4618      	mov	r0, r3
     976:	683b      	ldr	r3, [r7, #0]
     978:	2b00      	cmp	r3, #0
     97a:	bf14      	ite	ne
     97c:	2301      	movne	r3, #1
     97e:	2300      	moveq	r3, #0
     980:	b2db      	uxtb	r3, r3
     982:	4619      	mov	r1, r3
     984:	2300      	movs	r3, #0
     986:	9300      	str	r3, [sp, #0]
     988:	2301      	movs	r3, #1
     98a:	2206      	movs	r2, #6
     98c:	f7ff fe60 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSPC_OFFSET)), phaseDelay, 0, 3 + 1, RW);
     990:	68fb      	ldr	r3, [r7, #12]
     992:	685b      	ldr	r3, [r3, #4]
     994:	3324      	adds	r3, #36	; 0x24
     996:	4618      	mov	r0, r3
     998:	2300      	movs	r3, #0
     99a:	9300      	str	r3, [sp, #0]
     99c:	2304      	movs	r3, #4
     99e:	2200      	movs	r2, #0
     9a0:	6a39      	ldr	r1, [r7, #32]
     9a2:	f7ff fe55 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    
}
     9a6:	bf00      	nop
     9a8:	3718      	adds	r7, #24
     9aa:	46bd      	mov	sp, r7
     9ac:	bd80      	pop	{r7, pc}
     9ae:	bf00      	nop
     9b0:	400fe638 	.word	0x400fe638
     9b4:	400fea38 	.word	0x400fea38

000009b8 <_ZN3Adc20initializeForPollingEmmmmPFvvE>:
 * @param inputSource sets the input source of a particular sample in the sample sequencer
 * @param sequencerControl set the configuration of a particular sample in the sample sequncer
 * @param action taken when the RIS is set.
 */
void Adc::initializeForPolling(uint32_t sampleSequencer, uint32_t sequencerTrigSrc, uint32_t inputSource, uint32_t sequencerControl, void (*action)(void))
{
     9b8:	b580      	push	{r7, lr}
     9ba:	b084      	sub	sp, #16
     9bc:	af00      	add	r7, sp, #0
     9be:	60f8      	str	r0, [r7, #12]
     9c0:	60b9      	str	r1, [r7, #8]
     9c2:	607a      	str	r2, [r7, #4]
     9c4:	603b      	str	r3, [r7, #0]
    (*this).sampleSequencer = sampleSequencer;
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	68ba      	ldr	r2, [r7, #8]
     9ca:	60da      	str	r2, [r3, #12]
    (*this).sequencerTrigSrc = sequencerTrigSrc;
     9cc:	68fb      	ldr	r3, [r7, #12]
     9ce:	687a      	ldr	r2, [r7, #4]
     9d0:	615a      	str	r2, [r3, #20]
    (*this).inputSource = inputSource;
     9d2:	68fb      	ldr	r3, [r7, #12]
     9d4:	683a      	ldr	r2, [r7, #0]
     9d6:	619a      	str	r2, [r3, #24]
    (*this).sequencerControl = sequencerControl;
     9d8:	68fb      	ldr	r3, [r7, #12]
     9da:	69ba      	ldr	r2, [r7, #24]
     9dc:	61da      	str	r2, [r3, #28]
    (*this).action = action;
     9de:	68fb      	ldr	r3, [r7, #12]
     9e0:	69fa      	ldr	r2, [r7, #28]
     9e2:	601a      	str	r2, [r3, #0]
    initialization();
     9e4:	68f8      	ldr	r0, [r7, #12]
     9e6:	f000 f9cf 	bl	d88 <_ZN3Adc14initializationEv>
    // (*this).action = action;

}
     9ea:	bf00      	nop
     9ec:	3710      	adds	r7, #16
     9ee:	46bd      	mov	sp, r7
     9f0:	bd80      	pop	{r7, pc}

000009f2 <_ZN3Adc20initializeForPollingEmmmmPFvvEmm>:
 * The DC generates an interrupt on ADCDCISC and that is promoted to the ADCRIS INRDC bit.
 * The ADCIM register bit DCONSSn determines which ss interrupt line the DC interrupt is
 * sent on.
 */
void Adc::initializeForPolling(uint32_t sampleSequencer, uint32_t sequencerTrigSrc, uint32_t inputSource, uint32_t sequencerControl, void (*action)(void), uint32_t sampleDcOperation, uint32_t sampleDcSelect)
{
     9f2:	b580      	push	{r7, lr}
     9f4:	b086      	sub	sp, #24
     9f6:	af02      	add	r7, sp, #8
     9f8:	60f8      	str	r0, [r7, #12]
     9fa:	60b9      	str	r1, [r7, #8]
     9fc:	607a      	str	r2, [r7, #4]
     9fe:	603b      	str	r3, [r7, #0]
    (*this).sampleDcOperation = sampleDcOperation;
     a00:	68fb      	ldr	r3, [r7, #12]
     a02:	6a3a      	ldr	r2, [r7, #32]
     a04:	621a      	str	r2, [r3, #32]
    (*this).sampleDcSelect = sampleDcSelect;
     a06:	68fb      	ldr	r3, [r7, #12]
     a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     a0a:	625a      	str	r2, [r3, #36]	; 0x24
    initializeForPolling(sampleSequencer, sequencerTrigSrc, inputSource, sequencerControl, action);
     a0c:	69fb      	ldr	r3, [r7, #28]
     a0e:	9301      	str	r3, [sp, #4]
     a10:	69bb      	ldr	r3, [r7, #24]
     a12:	9300      	str	r3, [sp, #0]
     a14:	683b      	ldr	r3, [r7, #0]
     a16:	687a      	ldr	r2, [r7, #4]
     a18:	68b9      	ldr	r1, [r7, #8]
     a1a:	68f8      	ldr	r0, [r7, #12]
     a1c:	f7ff ffcc 	bl	9b8 <_ZN3Adc20initializeForPollingEmmmmPFvvE>

}
     a20:	bf00      	nop
     a22:	3710      	adds	r7, #16
     a24:	46bd      	mov	sp, r7
     a26:	bd80      	pop	{r7, pc}

00000a28 <_ZN3Adc22initializeForInterruptEmmmmm>:
 * @param inputSource sets the input source of a particular sample in the sample sequencer
 * @param sequencerControl set the configuration of a particular sample in the sample sequncer
 * @param interruptPriority of the interrupt. 0 is the highest and 7 is the lowest
 */
void Adc::initializeForInterrupt(uint32_t sampleSequencer, uint32_t sequencerTrigSrc, uint32_t inputSource, uint32_t sequencerControl, uint32_t interruptPriority)
{
     a28:	b580      	push	{r7, lr}
     a2a:	b086      	sub	sp, #24
     a2c:	af02      	add	r7, sp, #8
     a2e:	60f8      	str	r0, [r7, #12]
     a30:	60b9      	str	r1, [r7, #8]
     a32:	607a      	str	r2, [r7, #4]
     a34:	603b      	str	r3, [r7, #0]
    (*this).sampleSequencer = sampleSequencer;
     a36:	68fb      	ldr	r3, [r7, #12]
     a38:	68ba      	ldr	r2, [r7, #8]
     a3a:	60da      	str	r2, [r3, #12]
    (*this).sequencerTrigSrc = sequencerTrigSrc;
     a3c:	68fb      	ldr	r3, [r7, #12]
     a3e:	687a      	ldr	r2, [r7, #4]
     a40:	615a      	str	r2, [r3, #20]
    (*this).inputSource = inputSource;
     a42:	68fb      	ldr	r3, [r7, #12]
     a44:	683a      	ldr	r2, [r7, #0]
     a46:	619a      	str	r2, [r3, #24]
    (*this).sequencerControl = sequencerControl;
     a48:	68fb      	ldr	r3, [r7, #12]
     a4a:	69ba      	ldr	r2, [r7, #24]
     a4c:	61da      	str	r2, [r3, #28]
    initialization();
     a4e:	68f8      	ldr	r0, [r7, #12]
     a50:	f000 f99a 	bl	d88 <_ZN3Adc14initializationEv>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCIM_OFFSET)), (uint32_t)setORClear::set, sampleSequencer, 1, RW);
     a54:	68fb      	ldr	r3, [r7, #12]
     a56:	685b      	ldr	r3, [r3, #4]
     a58:	3308      	adds	r3, #8
     a5a:	4618      	mov	r0, r3
     a5c:	2300      	movs	r3, #0
     a5e:	9300      	str	r3, [sp, #0]
     a60:	2301      	movs	r3, #1
     a62:	68ba      	ldr	r2, [r7, #8]
     a64:	2101      	movs	r1, #1
     a66:	f7ff fdf3 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    if(adcModule == (uint32_t)adcModule::module0)
     a6a:	68fb      	ldr	r3, [r7, #12]
     a6c:	689b      	ldr	r3, [r3, #8]
     a6e:	2b00      	cmp	r3, #0
     a70:	d122      	bne.n	ab8 <_ZN3Adc22initializeForInterruptEmmmmm+0x90>
    {
        switch (sampleSequencer)
     a72:	68bb      	ldr	r3, [r7, #8]
     a74:	2b03      	cmp	r3, #3
     a76:	d841      	bhi.n	afc <_ZN3Adc22initializeForInterruptEmmmmm+0xd4>
     a78:	a201      	add	r2, pc, #4	; (adr r2, a80 <_ZN3Adc22initializeForInterruptEmmmmm+0x58>)
     a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a7e:	bf00      	nop
     a80:	00000a91 	.word	0x00000a91
     a84:	00000a9b 	.word	0x00000a9b
     a88:	00000aa5 	.word	0x00000aa5
     a8c:	00000aaf 	.word	0x00000aaf
        {
            case (uint32_t)sampleSequencer::SS0:
                Nvic::activateInterrupt(ADC_0_Sequence_0_Interrupt, interruptPriority);
     a90:	69f9      	ldr	r1, [r7, #28]
     a92:	200e      	movs	r0, #14
     a94:	f7ff fe9c 	bl	7d0 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a98:	e033      	b.n	b02 <_ZN3Adc22initializeForInterruptEmmmmm+0xda>

            case (uint32_t)sampleSequencer::SS1:
                Nvic::activateInterrupt(ADC_0_Sequence_1_Interrupt, interruptPriority);
     a9a:	69f9      	ldr	r1, [r7, #28]
     a9c:	200f      	movs	r0, #15
     a9e:	f7ff fe97 	bl	7d0 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     aa2:	e02e      	b.n	b02 <_ZN3Adc22initializeForInterruptEmmmmm+0xda>

            case (uint32_t)sampleSequencer::SS2:
                Nvic::activateInterrupt(ADC_0_Sequence_2_Interrupt, interruptPriority);
     aa4:	69f9      	ldr	r1, [r7, #28]
     aa6:	2010      	movs	r0, #16
     aa8:	f7ff fe92 	bl	7d0 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     aac:	e029      	b.n	b02 <_ZN3Adc22initializeForInterruptEmmmmm+0xda>

            case (uint32_t)sampleSequencer::SS3:
                Nvic::activateInterrupt(ADC_0_Sequence_3_Interrupt, interruptPriority);
     aae:	69f9      	ldr	r1, [r7, #28]
     ab0:	2011      	movs	r0, #17
     ab2:	f7ff fe8d 	bl	7d0 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     ab6:	e024      	b.n	b02 <_ZN3Adc22initializeForInterruptEmmmmm+0xda>
        }
    }

    else
    {
        switch (sampleSequencer)
     ab8:	68bb      	ldr	r3, [r7, #8]
     aba:	2b03      	cmp	r3, #3
     abc:	d820      	bhi.n	b00 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>
     abe:	a201      	add	r2, pc, #4	; (adr r2, ac4 <_ZN3Adc22initializeForInterruptEmmmmm+0x9c>)
     ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ac4:	00000ad5 	.word	0x00000ad5
     ac8:	00000adf 	.word	0x00000adf
     acc:	00000ae9 	.word	0x00000ae9
     ad0:	00000af3 	.word	0x00000af3
        {
            case (uint32_t)sampleSequencer::SS0:
                Nvic::activateInterrupt(ADC_1_Sequence_0_Interrupt, interruptPriority);
     ad4:	69f9      	ldr	r1, [r7, #28]
     ad6:	2030      	movs	r0, #48	; 0x30
     ad8:	f7ff fe7a 	bl	7d0 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     adc:	e011      	b.n	b02 <_ZN3Adc22initializeForInterruptEmmmmm+0xda>

            case (uint32_t)sampleSequencer::SS1:
                Nvic::activateInterrupt(ADC_1_Sequence_1_Interrupt, interruptPriority);
     ade:	69f9      	ldr	r1, [r7, #28]
     ae0:	2031      	movs	r0, #49	; 0x31
     ae2:	f7ff fe75 	bl	7d0 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     ae6:	e00c      	b.n	b02 <_ZN3Adc22initializeForInterruptEmmmmm+0xda>

            case (uint32_t)sampleSequencer::SS2:
                Nvic::activateInterrupt(ADC_1_Sequence_2_Interrupt, interruptPriority);
     ae8:	69f9      	ldr	r1, [r7, #28]
     aea:	2032      	movs	r0, #50	; 0x32
     aec:	f7ff fe70 	bl	7d0 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     af0:	e007      	b.n	b02 <_ZN3Adc22initializeForInterruptEmmmmm+0xda>

            case (uint32_t)sampleSequencer::SS3:
                Nvic::activateInterrupt(ADC_1_Sequence_3_Interrupt, interruptPriority);
     af2:	69f9      	ldr	r1, [r7, #28]
     af4:	2033      	movs	r0, #51	; 0x33
     af6:	f7ff fe6b 	bl	7d0 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     afa:	e002      	b.n	b02 <_ZN3Adc22initializeForInterruptEmmmmm+0xda>
                break;
     afc:	bf00      	nop
     afe:	e000      	b.n	b02 <_ZN3Adc22initializeForInterruptEmmmmm+0xda>
            
            default:
                break;
     b00:	bf00      	nop
        }
    }
    
}
     b02:	bf00      	nop
     b04:	3710      	adds	r7, #16
     b06:	46bd      	mov	sp, r7
     b08:	bd80      	pop	{r7, pc}

00000b0a <_ZN3Adc22initializeForInterruptEmmmmmmm>:
 * The ADCIM register bit DCONSSn determines which ss interrupt line the DC interrupt is
 * sent on.
 * 
 */
void Adc::initializeForInterrupt(uint32_t sampleSequencer, uint32_t sequencerTrigSrc, uint32_t inputSource, uint32_t sequencerControl, uint32_t interruptPriority, uint32_t sampleDcOperation, uint32_t sampleDcSelect)
{
     b0a:	b580      	push	{r7, lr}
     b0c:	b086      	sub	sp, #24
     b0e:	af02      	add	r7, sp, #8
     b10:	60f8      	str	r0, [r7, #12]
     b12:	60b9      	str	r1, [r7, #8]
     b14:	607a      	str	r2, [r7, #4]
     b16:	603b      	str	r3, [r7, #0]
    (*this).sampleDcOperation = sampleDcOperation;
     b18:	68fb      	ldr	r3, [r7, #12]
     b1a:	6a3a      	ldr	r2, [r7, #32]
     b1c:	621a      	str	r2, [r3, #32]
    (*this).sampleDcSelect = sampleDcSelect;
     b1e:	68fb      	ldr	r3, [r7, #12]
     b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
     b22:	625a      	str	r2, [r3, #36]	; 0x24
    initializeForInterrupt(sampleSequencer, sequencerTrigSrc, inputSource, sequencerControl, interruptPriority);
     b24:	69fb      	ldr	r3, [r7, #28]
     b26:	9301      	str	r3, [sp, #4]
     b28:	69bb      	ldr	r3, [r7, #24]
     b2a:	9300      	str	r3, [sp, #0]
     b2c:	683b      	ldr	r3, [r7, #0]
     b2e:	687a      	ldr	r2, [r7, #4]
     b30:	68b9      	ldr	r1, [r7, #8]
     b32:	68f8      	ldr	r0, [r7, #12]
     b34:	f7ff ff78 	bl	a28 <_ZN3Adc22initializeForInterruptEmmmmm>
}
     b38:	bf00      	nop
     b3a:	3710      	adds	r7, #16
     b3c:	46bd      	mov	sp, r7
     b3e:	bd80      	pop	{r7, pc}

00000b40 <_ZN3Adc21enableSampleSequencerEv>:

/**
 * @brief Enables the sample sequncer associated with the adc object
 */
void Adc::enableSampleSequencer(void)
{
     b40:	b580      	push	{r7, lr}
     b42:	b084      	sub	sp, #16
     b44:	af02      	add	r7, sp, #8
     b46:	6078      	str	r0, [r7, #4]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCACTSS_OFFSET)), (uint32_t)setORClear::set, sampleSequencer, 1, RW);
     b48:	687b      	ldr	r3, [r7, #4]
     b4a:	685b      	ldr	r3, [r3, #4]
     b4c:	4618      	mov	r0, r3
     b4e:	687b      	ldr	r3, [r7, #4]
     b50:	68da      	ldr	r2, [r3, #12]
     b52:	2300      	movs	r3, #0
     b54:	9300      	str	r3, [sp, #0]
     b56:	2301      	movs	r3, #1
     b58:	2101      	movs	r1, #1
     b5a:	f7ff fd79 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     b5e:	bf00      	nop
     b60:	3708      	adds	r7, #8
     b62:	46bd      	mov	sp, r7
     b64:	bd80      	pop	{r7, pc}

00000b66 <_ZN3Adc12initializeDcEmmmm>:

/**
 * @brief 
 */
void Adc::initializeDc(uint32_t dc, uint32_t dcControlBits, uint32_t highBand, uint32_t lowBand)
{
     b66:	b580      	push	{r7, lr}
     b68:	b088      	sub	sp, #32
     b6a:	af02      	add	r7, sp, #8
     b6c:	60f8      	str	r0, [r7, #12]
     b6e:	60b9      	str	r1, [r7, #8]
     b70:	607a      	str	r2, [r7, #4]
     b72:	603b      	str	r3, [r7, #0]
    uint32_t dcCtlAddress = (adc0BaseAddress + (ADCDCCTL0_OFFSET + dc*0x4));
     b74:	68fa      	ldr	r2, [r7, #12]
     b76:	4b29      	ldr	r3, [pc, #164]	; (c1c <_ZN3Adc12initializeDcEmmmm+0xb6>)
     b78:	4413      	add	r3, r2
     b7a:	009b      	lsls	r3, r3, #2
     b7c:	617b      	str	r3, [r7, #20]
    uint32_t dcCmpAddress = (adc0BaseAddress + (ADCDCCMP0_OFFSET + dc*0x4));
     b7e:	68fa      	ldr	r2, [r7, #12]
     b80:	4b27      	ldr	r3, [pc, #156]	; (c20 <_ZN3Adc12initializeDcEmmmm+0xba>)
     b82:	4413      	add	r3, r2
     b84:	009b      	lsls	r3, r3, #2
     b86:	613b      	str	r3, [r7, #16]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), dcControlBits, 0, 2, RW);
     b88:	6978      	ldr	r0, [r7, #20]
     b8a:	2300      	movs	r3, #0
     b8c:	9300      	str	r3, [sp, #0]
     b8e:	2302      	movs	r3, #2
     b90:	2200      	movs	r2, #0
     b92:	68b9      	ldr	r1, [r7, #8]
     b94:	f7ff fd5c 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), dcControlBits >> 2, 2, 2, RW);
     b98:	6978      	ldr	r0, [r7, #20]
     b9a:	68bb      	ldr	r3, [r7, #8]
     b9c:	0899      	lsrs	r1, r3, #2
     b9e:	2300      	movs	r3, #0
     ba0:	9300      	str	r3, [sp, #0]
     ba2:	2302      	movs	r3, #2
     ba4:	2202      	movs	r2, #2
     ba6:	f7ff fd53 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), dcControlBits >> 4, 4, 1, RW);
     baa:	6978      	ldr	r0, [r7, #20]
     bac:	68bb      	ldr	r3, [r7, #8]
     bae:	0919      	lsrs	r1, r3, #4
     bb0:	2300      	movs	r3, #0
     bb2:	9300      	str	r3, [sp, #0]
     bb4:	2301      	movs	r3, #1
     bb6:	2204      	movs	r2, #4
     bb8:	f7ff fd4a 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), dcControlBits >> 8, 8, 2, RW);
     bbc:	6978      	ldr	r0, [r7, #20]
     bbe:	68bb      	ldr	r3, [r7, #8]
     bc0:	0a19      	lsrs	r1, r3, #8
     bc2:	2300      	movs	r3, #0
     bc4:	9300      	str	r3, [sp, #0]
     bc6:	2302      	movs	r3, #2
     bc8:	2208      	movs	r2, #8
     bca:	f7ff fd41 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), dcControlBits >> 10, 10, 2, RW);
     bce:	6978      	ldr	r0, [r7, #20]
     bd0:	68bb      	ldr	r3, [r7, #8]
     bd2:	0a99      	lsrs	r1, r3, #10
     bd4:	2300      	movs	r3, #0
     bd6:	9300      	str	r3, [sp, #0]
     bd8:	2302      	movs	r3, #2
     bda:	220a      	movs	r2, #10
     bdc:	f7ff fd38 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), dcControlBits >> 12, 12, 1, RW);
     be0:	6978      	ldr	r0, [r7, #20]
     be2:	68bb      	ldr	r3, [r7, #8]
     be4:	0b19      	lsrs	r1, r3, #12
     be6:	2300      	movs	r3, #0
     be8:	9300      	str	r3, [sp, #0]
     bea:	2301      	movs	r3, #1
     bec:	220c      	movs	r2, #12
     bee:	f7ff fd2f 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCmpAddress), lowBand, 0, 11 + 1, RW);
     bf2:	6938      	ldr	r0, [r7, #16]
     bf4:	2300      	movs	r3, #0
     bf6:	9300      	str	r3, [sp, #0]
     bf8:	230c      	movs	r3, #12
     bfa:	2200      	movs	r2, #0
     bfc:	6839      	ldr	r1, [r7, #0]
     bfe:	f7ff fd27 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCmpAddress), highBand, 16, 27 - 16 + 1, RW);
     c02:	6938      	ldr	r0, [r7, #16]
     c04:	2300      	movs	r3, #0
     c06:	9300      	str	r3, [sp, #0]
     c08:	230c      	movs	r3, #12
     c0a:	2210      	movs	r2, #16
     c0c:	6879      	ldr	r1, [r7, #4]
     c0e:	f7ff fd1f 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

}
     c12:	bf00      	nop
     c14:	3718      	adds	r7, #24
     c16:	46bd      	mov	sp, r7
     c18:	bd80      	pop	{r7, pc}
     c1a:	bf00      	nop
     c1c:	1000e380 	.word	0x1000e380
     c20:	1000e390 	.word	0x1000e390

00000c24 <_ZN3Adc10pollStatusEv>:

void Adc::pollStatus(void)
{
     c24:	b580      	push	{r7, lr}
     c26:	b082      	sub	sp, #8
     c28:	af00      	add	r7, sp, #0
     c2a:	6078      	str	r0, [r7, #4]
    if(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCRIS_OFFSET)), sampleSequencer, 1, RO) == (uint32_t)setORClear::set)
     c2c:	687b      	ldr	r3, [r7, #4]
     c2e:	685b      	ldr	r3, [r3, #4]
     c30:	3304      	adds	r3, #4
     c32:	4618      	mov	r0, r3
     c34:	687b      	ldr	r3, [r7, #4]
     c36:	68d9      	ldr	r1, [r3, #12]
     c38:	2301      	movs	r3, #1
     c3a:	2201      	movs	r2, #1
     c3c:	f7ff fcde 	bl	5fc <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     c40:	4603      	mov	r3, r0
     c42:	2b01      	cmp	r3, #1
     c44:	bf0c      	ite	eq
     c46:	2301      	moveq	r3, #1
     c48:	2300      	movne	r3, #0
     c4a:	b2db      	uxtb	r3, r3
     c4c:	2b00      	cmp	r3, #0
     c4e:	d002      	beq.n	c56 <_ZN3Adc10pollStatusEv+0x32>
    {
        action();
     c50:	687b      	ldr	r3, [r7, #4]
     c52:	681b      	ldr	r3, [r3, #0]
     c54:	4798      	blx	r3
    }
}
     c56:	bf00      	nop
     c58:	3708      	adds	r7, #8
     c5a:	46bd      	mov	sp, r7
     c5c:	bd80      	pop	{r7, pc}

00000c5e <_ZN3Adc21pollDigitalComparatorEv>:

void Adc::pollDigitalComparator(void)
{
     c5e:	b580      	push	{r7, lr}
     c60:	b082      	sub	sp, #8
     c62:	af00      	add	r7, sp, #0
     c64:	6078      	str	r0, [r7, #4]
    if(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCRIS_OFFSET)), 16, 1, RO) == (uint32_t)setORClear::set)
     c66:	687b      	ldr	r3, [r7, #4]
     c68:	685b      	ldr	r3, [r3, #4]
     c6a:	3304      	adds	r3, #4
     c6c:	4618      	mov	r0, r3
     c6e:	2301      	movs	r3, #1
     c70:	2201      	movs	r2, #1
     c72:	2110      	movs	r1, #16
     c74:	f7ff fcc2 	bl	5fc <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     c78:	4603      	mov	r3, r0
     c7a:	2b01      	cmp	r3, #1
     c7c:	bf0c      	ite	eq
     c7e:	2301      	moveq	r3, #1
     c80:	2300      	movne	r3, #0
     c82:	b2db      	uxtb	r3, r3
     c84:	2b00      	cmp	r3, #0
     c86:	d002      	beq.n	c8e <_ZN3Adc21pollDigitalComparatorEv+0x30>
    {
        action();
     c88:	687b      	ldr	r3, [r7, #4]
     c8a:	681b      	ldr	r3, [r3, #0]
     c8c:	4798      	blx	r3
    }
}
     c8e:	bf00      	nop
     c90:	3708      	adds	r7, #8
     c92:	46bd      	mov	sp, r7
     c94:	bd80      	pop	{r7, pc}

00000c96 <_ZN3Adc16initiateSamplingEv>:


void Adc::initiateSampling(void)
{
     c96:	b580      	push	{r7, lr}
     c98:	b084      	sub	sp, #16
     c9a:	af02      	add	r7, sp, #8
     c9c:	6078      	str	r0, [r7, #4]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCPSSI_OFFSET)), (uint32_t)setORClear::set, sampleSequencer, 1, RW);
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	685b      	ldr	r3, [r3, #4]
     ca2:	3328      	adds	r3, #40	; 0x28
     ca4:	4618      	mov	r0, r3
     ca6:	687b      	ldr	r3, [r7, #4]
     ca8:	68da      	ldr	r2, [r3, #12]
     caa:	2300      	movs	r3, #0
     cac:	9300      	str	r3, [sp, #0]
     cae:	2301      	movs	r3, #1
     cb0:	2101      	movs	r1, #1
     cb2:	f7ff fccd 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     cb6:	bf00      	nop
     cb8:	3708      	adds	r7, #8
     cba:	46bd      	mov	sp, r7
     cbc:	bd80      	pop	{r7, pc}

00000cbe <_ZN3Adc12getAdcSampleEv>:
 *          behind (FIFO depth depends on the sample sequencer) To get a 
 *          current value of the signal read n+1 times from the FIFO. In the 
 *          case of SS3, you read from the FIFO twice.
 */
uint32_t Adc::getAdcSample(void)
{
     cbe:	b580      	push	{r7, lr}
     cc0:	b082      	sub	sp, #8
     cc2:	af00      	add	r7, sp, #0
     cc4:	6078      	str	r0, [r7, #4]
    return(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSFIFO0_OFFSET + (ssOffset * sampleSequencer)))), 0, 11 + 1, RO));
     cc6:	687b      	ldr	r3, [r7, #4]
     cc8:	685a      	ldr	r2, [r3, #4]
     cca:	687b      	ldr	r3, [r7, #4]
     ccc:	68db      	ldr	r3, [r3, #12]
     cce:	015b      	lsls	r3, r3, #5
     cd0:	4413      	add	r3, r2
     cd2:	3348      	adds	r3, #72	; 0x48
     cd4:	4618      	mov	r0, r3
     cd6:	2301      	movs	r3, #1
     cd8:	220c      	movs	r2, #12
     cda:	2100      	movs	r1, #0
     cdc:	f7ff fc8e 	bl	5fc <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     ce0:	4603      	mov	r3, r0
}
     ce2:	4618      	mov	r0, r3
     ce4:	3708      	adds	r7, #8
     ce6:	46bd      	mov	sp, r7
     ce8:	bd80      	pop	{r7, pc}

00000cea <_ZN3Adc14clearInterruptEv>:

void Adc::clearInterrupt(void)
{
     cea:	b580      	push	{r7, lr}
     cec:	b084      	sub	sp, #16
     cee:	af02      	add	r7, sp, #8
     cf0:	6078      	str	r0, [r7, #4]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCISC_OFFSET)), (uint32_t)setORClear::set, sampleSequencer, 1, RW1C);
     cf2:	687b      	ldr	r3, [r7, #4]
     cf4:	685b      	ldr	r3, [r3, #4]
     cf6:	330c      	adds	r3, #12
     cf8:	4618      	mov	r0, r3
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	68da      	ldr	r2, [r3, #12]
     cfe:	2303      	movs	r3, #3
     d00:	9300      	str	r3, [sp, #0]
     d02:	2301      	movs	r3, #1
     d04:	2101      	movs	r1, #1
     d06:	f7ff fca3 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     d0a:	bf00      	nop
     d0c:	3708      	adds	r7, #8
     d0e:	46bd      	mov	sp, r7
     d10:	bd80      	pop	{r7, pc}

00000d12 <_ZN3Adc20getDcInterruptStatusEmm>:

uint32_t Adc::getDcInterruptStatus(uint32_t adcModule, uint32_t digitalComparator)
{
     d12:	b580      	push	{r7, lr}
     d14:	b082      	sub	sp, #8
     d16:	af00      	add	r7, sp, #0
     d18:	6078      	str	r0, [r7, #4]
     d1a:	6039      	str	r1, [r7, #0]
    return(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(adc0BaseAddress + (adcModule * 0x1000) + ADCDCISC_OFFSET)), digitalComparator, 1, RW1C));
     d1c:	687b      	ldr	r3, [r7, #4]
     d1e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     d22:	3338      	adds	r3, #56	; 0x38
     d24:	031b      	lsls	r3, r3, #12
     d26:	3334      	adds	r3, #52	; 0x34
     d28:	4618      	mov	r0, r3
     d2a:	2303      	movs	r3, #3
     d2c:	2201      	movs	r2, #1
     d2e:	6839      	ldr	r1, [r7, #0]
     d30:	f7ff fc64 	bl	5fc <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     d34:	4603      	mov	r3, r0
}
     d36:	4618      	mov	r0, r3
     d38:	3708      	adds	r7, #8
     d3a:	46bd      	mov	sp, r7
     d3c:	bd80      	pop	{r7, pc}

00000d3e <_ZN3Adc16clearDcInterruptEmm>:

void Adc::clearDcInterrupt(uint32_t adcModule, uint32_t digitalComparator)
{
     d3e:	b580      	push	{r7, lr}
     d40:	b084      	sub	sp, #16
     d42:	af02      	add	r7, sp, #8
     d44:	6078      	str	r0, [r7, #4]
     d46:	6039      	str	r1, [r7, #0]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(adc0BaseAddress + (adcModule * 0x1000) + ADCDCISC_OFFSET)), (uint32_t)setORClear::set , digitalComparator, 1, RW1C);
     d48:	687b      	ldr	r3, [r7, #4]
     d4a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     d4e:	3338      	adds	r3, #56	; 0x38
     d50:	031b      	lsls	r3, r3, #12
     d52:	3334      	adds	r3, #52	; 0x34
     d54:	4618      	mov	r0, r3
     d56:	2303      	movs	r3, #3
     d58:	9300      	str	r3, [sp, #0]
     d5a:	2301      	movs	r3, #1
     d5c:	683a      	ldr	r2, [r7, #0]
     d5e:	2101      	movs	r1, #1
     d60:	f7ff fc76 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     d64:	bf00      	nop
     d66:	3708      	adds	r7, #8
     d68:	46bd      	mov	sp, r7
     d6a:	bd80      	pop	{r7, pc}

00000d6c <_ZN3Adc16getAdcResolutionEv>:

uint32_t Adc::getAdcResolution()
{
     d6c:	b580      	push	{r7, lr}
     d6e:	af00      	add	r7, sp, #0
    return(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(adc0BaseAddress + ADCPP_OFFSET)), 18, 22 - 18 + 1, RO));
     d70:	2301      	movs	r3, #1
     d72:	2205      	movs	r2, #5
     d74:	2112      	movs	r1, #18
     d76:	4803      	ldr	r0, [pc, #12]	; (d84 <_ZN3Adc16getAdcResolutionEv+0x18>)
     d78:	f7ff fc40 	bl	5fc <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     d7c:	4603      	mov	r3, r0
}
     d7e:	4618      	mov	r0, r3
     d80:	bd80      	pop	{r7, pc}
     d82:	bf00      	nop
     d84:	40038fc0 	.word	0x40038fc0

00000d88 <_ZN3Adc14initializationEv>:
 *          Configuration of the sample sequencers is slightly more complex 
 *          than the module initialization because each sample sequencer is 
 *          completely programmable.
 */
void Adc::initialization(void)
{    
     d88:	b580      	push	{r7, lr}
     d8a:	b08c      	sub	sp, #48	; 0x30
     d8c:	af02      	add	r7, sp, #8
     d8e:	6078      	str	r0, [r7, #4]
     * corresponding ASENn bit in the ADCACTSS register. Programming of the 
     * sample sequencers is allowed without having them enabled. Disabling the 
     * sequencer during programming prevents erroneous execution if a trigger
     * event were to occur during the configuration process.
     */
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCACTSS_OFFSET)), (uint32_t)setORClear::clear, sampleSequencer, 1, RW);
     d90:	687b      	ldr	r3, [r7, #4]
     d92:	685b      	ldr	r3, [r3, #4]
     d94:	4618      	mov	r0, r3
     d96:	687b      	ldr	r3, [r7, #4]
     d98:	68da      	ldr	r2, [r3, #12]
     d9a:	2300      	movs	r3, #0
     d9c:	9300      	str	r3, [sp, #0]
     d9e:	2301      	movs	r3, #1
     da0:	2100      	movs	r1, #0
     da2:	f7ff fc55 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
     * 0 for all generators.
     */


    //2. Configure the trigger event for the sample sequencer in the ADCEMUX register.
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCEMUX_OFFSET)), sequencerTrigSrc, sampleSequencer * 4, 3 + 1, RW);
     da6:	687b      	ldr	r3, [r7, #4]
     da8:	685b      	ldr	r3, [r3, #4]
     daa:	3314      	adds	r3, #20
     dac:	4618      	mov	r0, r3
     dae:	687b      	ldr	r3, [r7, #4]
     db0:	6959      	ldr	r1, [r3, #20]
     db2:	687b      	ldr	r3, [r7, #4]
     db4:	68db      	ldr	r3, [r3, #12]
     db6:	009a      	lsls	r2, r3, #2
     db8:	2300      	movs	r3, #0
     dba:	9300      	str	r3, [sp, #0]
     dbc:	2304      	movs	r3, #4
     dbe:	f7ff fc47 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //3. For each sample in the sample sequence, configure the corresponding input source in the ADCSSMUXn register.
    if(sampleSequencer == (uint32_t)sampleSequencer::SS0)
     dc2:	687b      	ldr	r3, [r7, #4]
     dc4:	68db      	ldr	r3, [r3, #12]
     dc6:	2b00      	cmp	r3, #0
     dc8:	d166      	bne.n	e98 <_ZN3Adc14initializationEv+0x110>
    {
        //3. For each sample in the sample sequence, configure the corresponding input source in the ADCSSMUXn register.
        for(int i = 0; i < 8; i++)
     dca:	2300      	movs	r3, #0
     dcc:	627b      	str	r3, [r7, #36]	; 0x24
     dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     dd0:	2b07      	cmp	r3, #7
     dd2:	f300 8195 	bgt.w	1100 <_ZN3Adc14initializationEv+0x378>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
     dd6:	687b      	ldr	r3, [r7, #4]
     dd8:	685a      	ldr	r2, [r3, #4]
     dda:	687b      	ldr	r3, [r7, #4]
     ddc:	68db      	ldr	r3, [r3, #12]
     dde:	3302      	adds	r3, #2
     de0:	015b      	lsls	r3, r3, #5
     de2:	4413      	add	r3, r2
     de4:	4618      	mov	r0, r3
     de6:	687b      	ldr	r3, [r7, #4]
     de8:	699a      	ldr	r2, [r3, #24]
     dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     dec:	009b      	lsls	r3, r3, #2
     dee:	fa22 f103 	lsr.w	r1, r2, r3
     df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     df4:	009b      	lsls	r3, r3, #2
     df6:	461a      	mov	r2, r3
     df8:	2300      	movs	r3, #0
     dfa:	9300      	str	r3, [sp, #0]
     dfc:	2304      	movs	r3, #4
     dfe:	f7ff fc27 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            * 4. For each sample in the sample sequence, configure the sample control 
            * bits in the corresponding nibble in the ADCSSCTLn register. When 
            * programming the last nibble, ensure that the END bit is set. Failure to 
            * set the END bit causes unpredictable behavior.
            */
            for(int j = 0; j < 4; j++)
     e02:	2300      	movs	r3, #0
     e04:	623b      	str	r3, [r7, #32]
     e06:	6a3b      	ldr	r3, [r7, #32]
     e08:	2b03      	cmp	r3, #3
     e0a:	dc1d      	bgt.n	e48 <_ZN3Adc14initializationEv+0xc0>
            {
                Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> ((i * 4) + j), (i * 4) + j, 1, RW);
     e0c:	687b      	ldr	r3, [r7, #4]
     e0e:	685a      	ldr	r2, [r3, #4]
     e10:	687b      	ldr	r3, [r7, #4]
     e12:	68db      	ldr	r3, [r3, #12]
     e14:	015b      	lsls	r3, r3, #5
     e16:	4413      	add	r3, r2
     e18:	3344      	adds	r3, #68	; 0x44
     e1a:	4618      	mov	r0, r3
     e1c:	687b      	ldr	r3, [r7, #4]
     e1e:	69da      	ldr	r2, [r3, #28]
     e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e22:	0099      	lsls	r1, r3, #2
     e24:	6a3b      	ldr	r3, [r7, #32]
     e26:	440b      	add	r3, r1
     e28:	fa22 f103 	lsr.w	r1, r2, r3
     e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e2e:	009a      	lsls	r2, r3, #2
     e30:	6a3b      	ldr	r3, [r7, #32]
     e32:	4413      	add	r3, r2
     e34:	461a      	mov	r2, r3
     e36:	2300      	movs	r3, #0
     e38:	9300      	str	r3, [sp, #0]
     e3a:	2301      	movs	r3, #1
     e3c:	f7ff fc08 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            for(int j = 0; j < 4; j++)
     e40:	6a3b      	ldr	r3, [r7, #32]
     e42:	3301      	adds	r3, #1
     e44:	623b      	str	r3, [r7, #32]
     e46:	e7de      	b.n	e06 <_ZN3Adc14initializationEv+0x7e>
            }

            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSOP0_OFFSET)), sampleDcOperation >> (4*i), 4*i, 1, RW);
     e48:	687b      	ldr	r3, [r7, #4]
     e4a:	685b      	ldr	r3, [r3, #4]
     e4c:	3350      	adds	r3, #80	; 0x50
     e4e:	4618      	mov	r0, r3
     e50:	687b      	ldr	r3, [r7, #4]
     e52:	6a1a      	ldr	r2, [r3, #32]
     e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e56:	009b      	lsls	r3, r3, #2
     e58:	fa22 f103 	lsr.w	r1, r2, r3
     e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e5e:	009b      	lsls	r3, r3, #2
     e60:	461a      	mov	r2, r3
     e62:	2300      	movs	r3, #0
     e64:	9300      	str	r3, [sp, #0]
     e66:	2301      	movs	r3, #1
     e68:	f7ff fbf2 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSDC0_OFFSET)), sampleDcSelect >> (4*i), 4*i, 4, RW);
     e6c:	687b      	ldr	r3, [r7, #4]
     e6e:	685b      	ldr	r3, [r3, #4]
     e70:	3354      	adds	r3, #84	; 0x54
     e72:	4618      	mov	r0, r3
     e74:	687b      	ldr	r3, [r7, #4]
     e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e7a:	009b      	lsls	r3, r3, #2
     e7c:	fa22 f103 	lsr.w	r1, r2, r3
     e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e82:	009b      	lsls	r3, r3, #2
     e84:	461a      	mov	r2, r3
     e86:	2300      	movs	r3, #0
     e88:	9300      	str	r3, [sp, #0]
     e8a:	2304      	movs	r3, #4
     e8c:	f7ff fbe0 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 8; i++)
     e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e92:	3301      	adds	r3, #1
     e94:	627b      	str	r3, [r7, #36]	; 0x24
     e96:	e79a      	b.n	dce <_ZN3Adc14initializationEv+0x46>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS1)
     e98:	687b      	ldr	r3, [r7, #4]
     e9a:	68db      	ldr	r3, [r3, #12]
     e9c:	2b01      	cmp	r3, #1
     e9e:	d166      	bne.n	f6e <_ZN3Adc14initializationEv+0x1e6>
    {
        //3. For each sample in the sample sequence, configure the corresponding input source in the ADCSSMUXn register.
        for(int i = 0; i < 4; i++)
     ea0:	2300      	movs	r3, #0
     ea2:	61fb      	str	r3, [r7, #28]
     ea4:	69fb      	ldr	r3, [r7, #28]
     ea6:	2b03      	cmp	r3, #3
     ea8:	f300 812a 	bgt.w	1100 <_ZN3Adc14initializationEv+0x378>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
     eac:	687b      	ldr	r3, [r7, #4]
     eae:	685a      	ldr	r2, [r3, #4]
     eb0:	687b      	ldr	r3, [r7, #4]
     eb2:	68db      	ldr	r3, [r3, #12]
     eb4:	3302      	adds	r3, #2
     eb6:	015b      	lsls	r3, r3, #5
     eb8:	4413      	add	r3, r2
     eba:	4618      	mov	r0, r3
     ebc:	687b      	ldr	r3, [r7, #4]
     ebe:	699a      	ldr	r2, [r3, #24]
     ec0:	69fb      	ldr	r3, [r7, #28]
     ec2:	009b      	lsls	r3, r3, #2
     ec4:	fa22 f103 	lsr.w	r1, r2, r3
     ec8:	69fb      	ldr	r3, [r7, #28]
     eca:	009b      	lsls	r3, r3, #2
     ecc:	461a      	mov	r2, r3
     ece:	2300      	movs	r3, #0
     ed0:	9300      	str	r3, [sp, #0]
     ed2:	2304      	movs	r3, #4
     ed4:	f7ff fbbc 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            * 4. For each sample in the sample sequence, configure the sample control 
            * bits in the corresponding nibble in the ADCSSCTLn register. When 
            * programming the last nibble, ensure that the END bit is set. Failure to 
            * set the END bit causes unpredictable behavior.
            */
            for(int j = 0; j < 4; j++)
     ed8:	2300      	movs	r3, #0
     eda:	61bb      	str	r3, [r7, #24]
     edc:	69bb      	ldr	r3, [r7, #24]
     ede:	2b03      	cmp	r3, #3
     ee0:	dc1d      	bgt.n	f1e <_ZN3Adc14initializationEv+0x196>
            {
                Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> ((i * 4) + j), (i * 4) + j, 1, RW);
     ee2:	687b      	ldr	r3, [r7, #4]
     ee4:	685a      	ldr	r2, [r3, #4]
     ee6:	687b      	ldr	r3, [r7, #4]
     ee8:	68db      	ldr	r3, [r3, #12]
     eea:	015b      	lsls	r3, r3, #5
     eec:	4413      	add	r3, r2
     eee:	3344      	adds	r3, #68	; 0x44
     ef0:	4618      	mov	r0, r3
     ef2:	687b      	ldr	r3, [r7, #4]
     ef4:	69da      	ldr	r2, [r3, #28]
     ef6:	69fb      	ldr	r3, [r7, #28]
     ef8:	0099      	lsls	r1, r3, #2
     efa:	69bb      	ldr	r3, [r7, #24]
     efc:	440b      	add	r3, r1
     efe:	fa22 f103 	lsr.w	r1, r2, r3
     f02:	69fb      	ldr	r3, [r7, #28]
     f04:	009a      	lsls	r2, r3, #2
     f06:	69bb      	ldr	r3, [r7, #24]
     f08:	4413      	add	r3, r2
     f0a:	461a      	mov	r2, r3
     f0c:	2300      	movs	r3, #0
     f0e:	9300      	str	r3, [sp, #0]
     f10:	2301      	movs	r3, #1
     f12:	f7ff fb9d 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            for(int j = 0; j < 4; j++)
     f16:	69bb      	ldr	r3, [r7, #24]
     f18:	3301      	adds	r3, #1
     f1a:	61bb      	str	r3, [r7, #24]
     f1c:	e7de      	b.n	edc <_ZN3Adc14initializationEv+0x154>
            }

            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSOP1_OFFSET)), sampleDcOperation >> (4*i), 4*i, 1, RW);
     f1e:	687b      	ldr	r3, [r7, #4]
     f20:	685b      	ldr	r3, [r3, #4]
     f22:	3370      	adds	r3, #112	; 0x70
     f24:	4618      	mov	r0, r3
     f26:	687b      	ldr	r3, [r7, #4]
     f28:	6a1a      	ldr	r2, [r3, #32]
     f2a:	69fb      	ldr	r3, [r7, #28]
     f2c:	009b      	lsls	r3, r3, #2
     f2e:	fa22 f103 	lsr.w	r1, r2, r3
     f32:	69fb      	ldr	r3, [r7, #28]
     f34:	009b      	lsls	r3, r3, #2
     f36:	461a      	mov	r2, r3
     f38:	2300      	movs	r3, #0
     f3a:	9300      	str	r3, [sp, #0]
     f3c:	2301      	movs	r3, #1
     f3e:	f7ff fb87 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSDC1_OFFSET)), sampleDcSelect >> (4*i), 4*i, 4, RW);
     f42:	687b      	ldr	r3, [r7, #4]
     f44:	685b      	ldr	r3, [r3, #4]
     f46:	3374      	adds	r3, #116	; 0x74
     f48:	4618      	mov	r0, r3
     f4a:	687b      	ldr	r3, [r7, #4]
     f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
     f4e:	69fb      	ldr	r3, [r7, #28]
     f50:	009b      	lsls	r3, r3, #2
     f52:	fa22 f103 	lsr.w	r1, r2, r3
     f56:	69fb      	ldr	r3, [r7, #28]
     f58:	009b      	lsls	r3, r3, #2
     f5a:	461a      	mov	r2, r3
     f5c:	2300      	movs	r3, #0
     f5e:	9300      	str	r3, [sp, #0]
     f60:	2304      	movs	r3, #4
     f62:	f7ff fb75 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 4; i++)
     f66:	69fb      	ldr	r3, [r7, #28]
     f68:	3301      	adds	r3, #1
     f6a:	61fb      	str	r3, [r7, #28]
     f6c:	e79a      	b.n	ea4 <_ZN3Adc14initializationEv+0x11c>
        }
        
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS2)
     f6e:	687b      	ldr	r3, [r7, #4]
     f70:	68db      	ldr	r3, [r3, #12]
     f72:	2b02      	cmp	r3, #2
     f74:	d166      	bne.n	1044 <_ZN3Adc14initializationEv+0x2bc>
    {
        
        //3. For each sample in the sample sequence, configure the corresponding input source in the ADCSSMUXn register.
        for(int i = 0; i < 4; i++)
     f76:	2300      	movs	r3, #0
     f78:	617b      	str	r3, [r7, #20]
     f7a:	697b      	ldr	r3, [r7, #20]
     f7c:	2b03      	cmp	r3, #3
     f7e:	f300 80bf 	bgt.w	1100 <_ZN3Adc14initializationEv+0x378>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
     f82:	687b      	ldr	r3, [r7, #4]
     f84:	685a      	ldr	r2, [r3, #4]
     f86:	687b      	ldr	r3, [r7, #4]
     f88:	68db      	ldr	r3, [r3, #12]
     f8a:	3302      	adds	r3, #2
     f8c:	015b      	lsls	r3, r3, #5
     f8e:	4413      	add	r3, r2
     f90:	4618      	mov	r0, r3
     f92:	687b      	ldr	r3, [r7, #4]
     f94:	699a      	ldr	r2, [r3, #24]
     f96:	697b      	ldr	r3, [r7, #20]
     f98:	009b      	lsls	r3, r3, #2
     f9a:	fa22 f103 	lsr.w	r1, r2, r3
     f9e:	697b      	ldr	r3, [r7, #20]
     fa0:	009b      	lsls	r3, r3, #2
     fa2:	461a      	mov	r2, r3
     fa4:	2300      	movs	r3, #0
     fa6:	9300      	str	r3, [sp, #0]
     fa8:	2304      	movs	r3, #4
     faa:	f7ff fb51 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            * 4. For each sample in the sample sequence, configure the sample control 
            * bits in the corresponding nibble in the ADCSSCTLn register. When 
            * programming the last nibble, ensure that the END bit is set. Failure to 
            * set the END bit causes unpredictable behavior.
            */
            for(int j = 0; j < 4; j++)
     fae:	2300      	movs	r3, #0
     fb0:	613b      	str	r3, [r7, #16]
     fb2:	693b      	ldr	r3, [r7, #16]
     fb4:	2b03      	cmp	r3, #3
     fb6:	dc1d      	bgt.n	ff4 <_ZN3Adc14initializationEv+0x26c>
            {
                Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> ((i * 4) + j), (i * 4) + j, 1, RW);
     fb8:	687b      	ldr	r3, [r7, #4]
     fba:	685a      	ldr	r2, [r3, #4]
     fbc:	687b      	ldr	r3, [r7, #4]
     fbe:	68db      	ldr	r3, [r3, #12]
     fc0:	015b      	lsls	r3, r3, #5
     fc2:	4413      	add	r3, r2
     fc4:	3344      	adds	r3, #68	; 0x44
     fc6:	4618      	mov	r0, r3
     fc8:	687b      	ldr	r3, [r7, #4]
     fca:	69da      	ldr	r2, [r3, #28]
     fcc:	697b      	ldr	r3, [r7, #20]
     fce:	0099      	lsls	r1, r3, #2
     fd0:	693b      	ldr	r3, [r7, #16]
     fd2:	440b      	add	r3, r1
     fd4:	fa22 f103 	lsr.w	r1, r2, r3
     fd8:	697b      	ldr	r3, [r7, #20]
     fda:	009a      	lsls	r2, r3, #2
     fdc:	693b      	ldr	r3, [r7, #16]
     fde:	4413      	add	r3, r2
     fe0:	461a      	mov	r2, r3
     fe2:	2300      	movs	r3, #0
     fe4:	9300      	str	r3, [sp, #0]
     fe6:	2301      	movs	r3, #1
     fe8:	f7ff fb32 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            for(int j = 0; j < 4; j++)
     fec:	693b      	ldr	r3, [r7, #16]
     fee:	3301      	adds	r3, #1
     ff0:	613b      	str	r3, [r7, #16]
     ff2:	e7de      	b.n	fb2 <_ZN3Adc14initializationEv+0x22a>
            }

            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSOP2_OFFSET)), sampleDcOperation >> (4*i), 4*i, 1, RW);
     ff4:	687b      	ldr	r3, [r7, #4]
     ff6:	685b      	ldr	r3, [r3, #4]
     ff8:	3390      	adds	r3, #144	; 0x90
     ffa:	4618      	mov	r0, r3
     ffc:	687b      	ldr	r3, [r7, #4]
     ffe:	6a1a      	ldr	r2, [r3, #32]
    1000:	697b      	ldr	r3, [r7, #20]
    1002:	009b      	lsls	r3, r3, #2
    1004:	fa22 f103 	lsr.w	r1, r2, r3
    1008:	697b      	ldr	r3, [r7, #20]
    100a:	009b      	lsls	r3, r3, #2
    100c:	461a      	mov	r2, r3
    100e:	2300      	movs	r3, #0
    1010:	9300      	str	r3, [sp, #0]
    1012:	2301      	movs	r3, #1
    1014:	f7ff fb1c 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSDC2_OFFSET)), sampleDcSelect >> (4*i), 4*i, 4, RW);
    1018:	687b      	ldr	r3, [r7, #4]
    101a:	685b      	ldr	r3, [r3, #4]
    101c:	3394      	adds	r3, #148	; 0x94
    101e:	4618      	mov	r0, r3
    1020:	687b      	ldr	r3, [r7, #4]
    1022:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1024:	697b      	ldr	r3, [r7, #20]
    1026:	009b      	lsls	r3, r3, #2
    1028:	fa22 f103 	lsr.w	r1, r2, r3
    102c:	697b      	ldr	r3, [r7, #20]
    102e:	009b      	lsls	r3, r3, #2
    1030:	461a      	mov	r2, r3
    1032:	2300      	movs	r3, #0
    1034:	9300      	str	r3, [sp, #0]
    1036:	2304      	movs	r3, #4
    1038:	f7ff fb0a 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 4; i++)
    103c:	697b      	ldr	r3, [r7, #20]
    103e:	3301      	adds	r3, #1
    1040:	617b      	str	r3, [r7, #20]
    1042:	e79a      	b.n	f7a <_ZN3Adc14initializationEv+0x1f2>

        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS3)
    1044:	687b      	ldr	r3, [r7, #4]
    1046:	68db      	ldr	r3, [r3, #12]
    1048:	2b03      	cmp	r3, #3
    104a:	d159      	bne.n	1100 <_ZN3Adc14initializationEv+0x378>
    {
        //3. For each sample in the sample sequence, configure the corresponding input source in the ADCSSMUXn register.
        for(int i = 0; i < 1; i++)
    104c:	2300      	movs	r3, #0
    104e:	60fb      	str	r3, [r7, #12]
    1050:	68fb      	ldr	r3, [r7, #12]
    1052:	2b00      	cmp	r3, #0
    1054:	dc54      	bgt.n	1100 <_ZN3Adc14initializationEv+0x378>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
    1056:	687b      	ldr	r3, [r7, #4]
    1058:	685a      	ldr	r2, [r3, #4]
    105a:	687b      	ldr	r3, [r7, #4]
    105c:	68db      	ldr	r3, [r3, #12]
    105e:	3302      	adds	r3, #2
    1060:	015b      	lsls	r3, r3, #5
    1062:	4413      	add	r3, r2
    1064:	4618      	mov	r0, r3
    1066:	687b      	ldr	r3, [r7, #4]
    1068:	699a      	ldr	r2, [r3, #24]
    106a:	68fb      	ldr	r3, [r7, #12]
    106c:	009b      	lsls	r3, r3, #2
    106e:	fa22 f103 	lsr.w	r1, r2, r3
    1072:	68fb      	ldr	r3, [r7, #12]
    1074:	009b      	lsls	r3, r3, #2
    1076:	461a      	mov	r2, r3
    1078:	2300      	movs	r3, #0
    107a:	9300      	str	r3, [sp, #0]
    107c:	2304      	movs	r3, #4
    107e:	f7ff fae7 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            * 4. For each sample in the sample sequence, configure the sample control 
            * bits in the corresponding nibble in the ADCSSCTLn register. When 
            * programming the last nibble, ensure that the END bit is set. Failure to
            * set the END bit causes unpredictable behavior.
            */
            for(int j = 0; j < 4; j++)
    1082:	2300      	movs	r3, #0
    1084:	60bb      	str	r3, [r7, #8]
    1086:	68bb      	ldr	r3, [r7, #8]
    1088:	2b03      	cmp	r3, #3
    108a:	dc1d      	bgt.n	10c8 <_ZN3Adc14initializationEv+0x340>
            {
                Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> ((i * 4) + j), (i * 4) + j, 1, RW);
    108c:	687b      	ldr	r3, [r7, #4]
    108e:	685a      	ldr	r2, [r3, #4]
    1090:	687b      	ldr	r3, [r7, #4]
    1092:	68db      	ldr	r3, [r3, #12]
    1094:	015b      	lsls	r3, r3, #5
    1096:	4413      	add	r3, r2
    1098:	3344      	adds	r3, #68	; 0x44
    109a:	4618      	mov	r0, r3
    109c:	687b      	ldr	r3, [r7, #4]
    109e:	69da      	ldr	r2, [r3, #28]
    10a0:	68fb      	ldr	r3, [r7, #12]
    10a2:	0099      	lsls	r1, r3, #2
    10a4:	68bb      	ldr	r3, [r7, #8]
    10a6:	440b      	add	r3, r1
    10a8:	fa22 f103 	lsr.w	r1, r2, r3
    10ac:	68fb      	ldr	r3, [r7, #12]
    10ae:	009a      	lsls	r2, r3, #2
    10b0:	68bb      	ldr	r3, [r7, #8]
    10b2:	4413      	add	r3, r2
    10b4:	461a      	mov	r2, r3
    10b6:	2300      	movs	r3, #0
    10b8:	9300      	str	r3, [sp, #0]
    10ba:	2301      	movs	r3, #1
    10bc:	f7ff fac8 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            for(int j = 0; j < 4; j++)
    10c0:	68bb      	ldr	r3, [r7, #8]
    10c2:	3301      	adds	r3, #1
    10c4:	60bb      	str	r3, [r7, #8]
    10c6:	e7de      	b.n	1086 <_ZN3Adc14initializationEv+0x2fe>
            }

            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSOP3_OFFSET)), sampleDcOperation, 0, 1, RW);
    10c8:	687b      	ldr	r3, [r7, #4]
    10ca:	685b      	ldr	r3, [r3, #4]
    10cc:	33b0      	adds	r3, #176	; 0xb0
    10ce:	4618      	mov	r0, r3
    10d0:	687b      	ldr	r3, [r7, #4]
    10d2:	6a19      	ldr	r1, [r3, #32]
    10d4:	2300      	movs	r3, #0
    10d6:	9300      	str	r3, [sp, #0]
    10d8:	2301      	movs	r3, #1
    10da:	2200      	movs	r2, #0
    10dc:	f7ff fab8 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSDC3_OFFSET)), sampleDcSelect, 0, 4, RW);
    10e0:	687b      	ldr	r3, [r7, #4]
    10e2:	685b      	ldr	r3, [r3, #4]
    10e4:	33b4      	adds	r3, #180	; 0xb4
    10e6:	4618      	mov	r0, r3
    10e8:	687b      	ldr	r3, [r7, #4]
    10ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
    10ec:	2300      	movs	r3, #0
    10ee:	9300      	str	r3, [sp, #0]
    10f0:	2304      	movs	r3, #4
    10f2:	2200      	movs	r2, #0
    10f4:	f7ff faac 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 1; i++)
    10f8:	68fb      	ldr	r3, [r7, #12]
    10fa:	3301      	adds	r3, #1
    10fc:	60fb      	str	r3, [r7, #12]
    10fe:	e7a7      	b.n	1050 <_ZN3Adc14initializationEv+0x2c8>
    //     {
    //         Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> i, i, 1, RW);
    //     }
    // }

    1100:	bf00      	nop
    1102:	3728      	adds	r7, #40	; 0x28
    1104:	46bd      	mov	sp, r7
    1106:	bd80      	pop	{r7, pc}

00001108 <_ZN13SystemControlC1Ev>:
#include "systemControl.h"

/**
 * @brief empty constructor placeholder
 */
SystemControl::SystemControl()
    1108:	b480      	push	{r7}
    110a:	b083      	sub	sp, #12
    110c:	af00      	add	r7, sp, #0
    110e:	6078      	str	r0, [r7, #4]
{
    
}
    1110:	687b      	ldr	r3, [r7, #4]
    1112:	4618      	mov	r0, r3
    1114:	370c      	adds	r7, #12
    1116:	46bd      	mov	sp, r7
    1118:	f85d 7b04 	ldr.w	r7, [sp], #4
    111c:	4770      	bx	lr

0000111e <_ZN13SystemControlD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
SystemControl::~SystemControl()
    111e:	b480      	push	{r7}
    1120:	b083      	sub	sp, #12
    1122:	af00      	add	r7, sp, #0
    1124:	6078      	str	r0, [r7, #4]
{
	
}
    1126:	687b      	ldr	r3, [r7, #4]
    1128:	4618      	mov	r0, r3
    112a:	370c      	adds	r7, #12
    112c:	46bd      	mov	sp, r7
    112e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1132:	4770      	bx	lr

00001134 <_ZN13SystemControl16initializeGPIOHBEv>:

/**
 * @brief Initializes the system to use GPIO AHB for use instead of the APB
 */
void SystemControl::initializeGPIOHB(void)
{
    1134:	b580      	push	{r7, lr}
    1136:	b082      	sub	sp, #8
    1138:	af02      	add	r7, sp, #8

	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 0, 1, RW);
    113a:	2300      	movs	r3, #0
    113c:	9300      	str	r3, [sp, #0]
    113e:	2301      	movs	r3, #1
    1140:	2200      	movs	r2, #0
    1142:	2101      	movs	r1, #1
    1144:	4816      	ldr	r0, [pc, #88]	; (11a0 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    1146:	f7ff fa83 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 1, 1, RW);
    114a:	2300      	movs	r3, #0
    114c:	9300      	str	r3, [sp, #0]
    114e:	2301      	movs	r3, #1
    1150:	2201      	movs	r2, #1
    1152:	2101      	movs	r1, #1
    1154:	4812      	ldr	r0, [pc, #72]	; (11a0 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    1156:	f7ff fa7b 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 2, 1, RW);
    115a:	2300      	movs	r3, #0
    115c:	9300      	str	r3, [sp, #0]
    115e:	2301      	movs	r3, #1
    1160:	2202      	movs	r2, #2
    1162:	2101      	movs	r1, #1
    1164:	480e      	ldr	r0, [pc, #56]	; (11a0 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    1166:	f7ff fa73 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 3, 1, RW);
    116a:	2300      	movs	r3, #0
    116c:	9300      	str	r3, [sp, #0]
    116e:	2301      	movs	r3, #1
    1170:	2203      	movs	r2, #3
    1172:	2101      	movs	r1, #1
    1174:	480a      	ldr	r0, [pc, #40]	; (11a0 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    1176:	f7ff fa6b 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 4, 1, RW);
    117a:	2300      	movs	r3, #0
    117c:	9300      	str	r3, [sp, #0]
    117e:	2301      	movs	r3, #1
    1180:	2204      	movs	r2, #4
    1182:	2101      	movs	r1, #1
    1184:	4806      	ldr	r0, [pc, #24]	; (11a0 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    1186:	f7ff fa63 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 5, 1, RW);
    118a:	2300      	movs	r3, #0
    118c:	9300      	str	r3, [sp, #0]
    118e:	2301      	movs	r3, #1
    1190:	2205      	movs	r2, #5
    1192:	2101      	movs	r1, #1
    1194:	4802      	ldr	r0, [pc, #8]	; (11a0 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    1196:	f7ff fa5b 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    119a:	bf00      	nop
    119c:	46bd      	mov	sp, r7
    119e:	bd80      	pop	{r7, pc}
    11a0:	400fe06c 	.word	0x400fe06c

000011a4 <_ZN13SystemControl15initializeClockE7SYSDIV2>:
 * @brief Initializes the PLL for system clock use
 *
 * @param frequency of the new system clock.
 */ 
void SystemControl::initializeClock(SYSDIV2 frequency)
{
    11a4:	b580      	push	{r7, lr}
    11a6:	b084      	sub	sp, #16
    11a8:	af02      	add	r7, sp, #8
    11aa:	4603      	mov	r3, r0
    11ac:	71fb      	strb	r3, [r7, #7]
	
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::set, 31, 1, RW); //0. Use RCC2.
    11ae:	2300      	movs	r3, #0
    11b0:	9300      	str	r3, [sp, #0]
    11b2:	2301      	movs	r3, #1
    11b4:	221f      	movs	r2, #31
    11b6:	2101      	movs	r1, #1
    11b8:	482d      	ldr	r0, [pc, #180]	; (1270 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    11ba:	f7ff fa49 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::set, 11, 1, RW); //1. Bypass PLL while initiializing
    11be:	2300      	movs	r3, #0
    11c0:	9300      	str	r3, [sp, #0]
    11c2:	2301      	movs	r3, #1
    11c4:	220b      	movs	r2, #11
    11c6:	2101      	movs	r1, #1
    11c8:	4829      	ldr	r0, [pc, #164]	; (1270 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    11ca:	f7ff fa41 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC_OFFSET)), _16MHz_XTAL, 6, 5, RW); // 2. Select the crystal value and the oscillator source, configure for 16MHz crystal.
    11ce:	2300      	movs	r3, #0
    11d0:	9300      	str	r3, [sp, #0]
    11d2:	2305      	movs	r3, #5
    11d4:	2206      	movs	r2, #6
    11d6:	2115      	movs	r1, #21
    11d8:	4826      	ldr	r0, [pc, #152]	; (1274 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xd0>)
    11da:	f7ff fa39 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), MOSC, 4, 3, RW);  //Confgure for main oscillator source.
    11de:	2300      	movs	r3, #0
    11e0:	9300      	str	r3, [sp, #0]
    11e2:	2303      	movs	r3, #3
    11e4:	2204      	movs	r2, #4
    11e6:	2100      	movs	r1, #0
    11e8:	4821      	ldr	r0, [pc, #132]	; (1270 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    11ea:	f7ff fa31 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::clear, 13, 1, RW); // 3. Activate PLL by clearing PWRDN.
    11ee:	2300      	movs	r3, #0
    11f0:	9300      	str	r3, [sp, #0]
    11f2:	2301      	movs	r3, #1
    11f4:	220d      	movs	r2, #13
    11f6:	2100      	movs	r1, #0
    11f8:	481d      	ldr	r0, [pc, #116]	; (1270 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    11fa:	f7ff fa29 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

	/*
	 * Append the SYSDIV2LSB bit to the SYSDIV2 field to create a 7 bit divisor 
	 * using the 400 MHz PLL output.
	 */
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::set, 30, 1, RW);
    11fe:	2300      	movs	r3, #0
    1200:	9300      	str	r3, [sp, #0]
    1202:	2301      	movs	r3, #1
    1204:	221e      	movs	r2, #30
    1206:	2101      	movs	r1, #1
    1208:	4819      	ldr	r0, [pc, #100]	; (1270 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    120a:	f7ff fa21 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), ((frequency - 1) & 0x01), 22, 1, RW);
    120e:	79fb      	ldrb	r3, [r7, #7]
    1210:	3b01      	subs	r3, #1
    1212:	f003 0101 	and.w	r1, r3, #1
    1216:	2300      	movs	r3, #0
    1218:	9300      	str	r3, [sp, #0]
    121a:	2301      	movs	r3, #1
    121c:	2216      	movs	r2, #22
    121e:	4814      	ldr	r0, [pc, #80]	; (1270 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    1220:	f7ff fa16 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), ((frequency - 1) >> 1), 23, 6, RW);
    1224:	79fb      	ldrb	r3, [r7, #7]
    1226:	3b01      	subs	r3, #1
    1228:	105b      	asrs	r3, r3, #1
    122a:	4619      	mov	r1, r3
    122c:	2300      	movs	r3, #0
    122e:	9300      	str	r3, [sp, #0]
    1230:	2306      	movs	r3, #6
    1232:	2217      	movs	r2, #23
    1234:	480e      	ldr	r0, [pc, #56]	; (1270 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    1236:	f7ff fa0b 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

	while((Register::getRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RIS_OFFSET)), 6, 1, RO)) == 0)  // 5. Wait for the PLL to lock by polling PLLRIS.
    123a:	2301      	movs	r3, #1
    123c:	2201      	movs	r2, #1
    123e:	2106      	movs	r1, #6
    1240:	480d      	ldr	r0, [pc, #52]	; (1278 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xd4>)
    1242:	f7ff f9db 	bl	5fc <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    1246:	4603      	mov	r3, r0
    1248:	2b00      	cmp	r3, #0
    124a:	bf0c      	ite	eq
    124c:	2301      	moveq	r3, #1
    124e:	2300      	movne	r3, #0
    1250:	b2db      	uxtb	r3, r3
    1252:	2b00      	cmp	r3, #0
    1254:	d000      	beq.n	1258 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xb4>
    1256:	e7f0      	b.n	123a <_ZN13SystemControl15initializeClockE7SYSDIV2+0x96>
	{

	}
	
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::clear, 11, 1, RW); // 6. Enable use of the PLL by clearing BYPASS.
    1258:	2300      	movs	r3, #0
    125a:	9300      	str	r3, [sp, #0]
    125c:	2301      	movs	r3, #1
    125e:	220b      	movs	r2, #11
    1260:	2100      	movs	r1, #0
    1262:	4803      	ldr	r0, [pc, #12]	; (1270 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    1264:	f7ff f9f4 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    1268:	bf00      	nop
    126a:	3708      	adds	r7, #8
    126c:	46bd      	mov	sp, r7
    126e:	bd80      	pop	{r7, pc}
    1270:	400fe070 	.word	0x400fe070
    1274:	400fe060 	.word	0x400fe060
    1278:	400fe050 	.word	0x400fe050

0000127c <_ZN4GpioC1Ev>:
#include "gpio.h"

/**
 * @brief empty constructor placeholder
 */
Gpio::Gpio()
    127c:	b480      	push	{r7}
    127e:	b083      	sub	sp, #12
    1280:	af00      	add	r7, sp, #0
    1282:	6078      	str	r0, [r7, #4]
    1284:	687b      	ldr	r3, [r7, #4]
    1286:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    128a:	60da      	str	r2, [r3, #12]
{

}
    128c:	687b      	ldr	r3, [r7, #4]
    128e:	4618      	mov	r0, r3
    1290:	370c      	adds	r7, #12
    1292:	46bd      	mov	sp, r7
    1294:	f85d 7b04 	ldr.w	r7, [sp], #4
    1298:	4770      	bx	lr

0000129a <_ZN4GpioD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Gpio::~Gpio()
    129a:	b480      	push	{r7}
    129c:	b083      	sub	sp, #12
    129e:	af00      	add	r7, sp, #0
    12a0:	6078      	str	r0, [r7, #4]
{   

}
    12a2:	687b      	ldr	r3, [r7, #4]
    12a4:	4618      	mov	r0, r3
    12a6:	370c      	adds	r7, #12
    12a8:	46bd      	mov	sp, r7
    12aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    12ae:	4770      	bx	lr

000012b0 <_ZN4Gpio10initializeEm9direction>:
 * @brief Simple gpio initializer constructor.
 * @param gpio pin to be initialized.
 * @param dir of the gpio, to be an output or input.
 */
void Gpio::initialize(uint32_t gpio, direction dir)
{  
    12b0:	b580      	push	{r7, lr}
    12b2:	b086      	sub	sp, #24
    12b4:	af02      	add	r7, sp, #8
    12b6:	60f8      	str	r0, [r7, #12]
    12b8:	60b9      	str	r1, [r7, #8]
    12ba:	4613      	mov	r3, r2
    12bc:	71fb      	strb	r3, [r7, #7]
    alternateFunction = gpio%100; //get encoding for alternate function
    12be:	68ba      	ldr	r2, [r7, #8]
    12c0:	4b84      	ldr	r3, [pc, #528]	; (14d4 <_ZN4Gpio10initializeEm9direction+0x224>)
    12c2:	fba3 1302 	umull	r1, r3, r3, r2
    12c6:	095b      	lsrs	r3, r3, #5
    12c8:	2164      	movs	r1, #100	; 0x64
    12ca:	fb01 f303 	mul.w	r3, r1, r3
    12ce:	1ad3      	subs	r3, r2, r3
    12d0:	461a      	mov	r2, r3
    12d2:	68fb      	ldr	r3, [r7, #12]
    12d4:	60da      	str	r2, [r3, #12]
    gpio = gpio/100; //get rid of gpio encoding
    12d6:	68bb      	ldr	r3, [r7, #8]
    12d8:	4a7e      	ldr	r2, [pc, #504]	; (14d4 <_ZN4Gpio10initializeEm9direction+0x224>)
    12da:	fba2 2303 	umull	r2, r3, r2, r3
    12de:	095b      	lsrs	r3, r3, #5
    12e0:	60bb      	str	r3, [r7, #8]

    gpioPort = (gpio/8);
    12e2:	68bb      	ldr	r3, [r7, #8]
    12e4:	08da      	lsrs	r2, r3, #3
    12e6:	68fb      	ldr	r3, [r7, #12]
    12e8:	615a      	str	r2, [r3, #20]
    (*this).gpio = (gpio%8);
    12ea:	68bb      	ldr	r3, [r7, #8]
    12ec:	f003 0207 	and.w	r2, r3, #7
    12f0:	68fb      	ldr	r3, [r7, #12]
    12f2:	601a      	str	r2, [r3, #0]
    (*this).dir = dir;
    12f4:	68fb      	ldr	r3, [r7, #12]
    12f6:	79fa      	ldrb	r2, [r7, #7]
    12f8:	711a      	strb	r2, [r3, #4]
    baseAddress = GPIO_Port_AHB_BASE + (gpioPort) * 0x1000;
    12fa:	68fb      	ldr	r3, [r7, #12]
    12fc:	695b      	ldr	r3, [r3, #20]
    12fe:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    1302:	3358      	adds	r3, #88	; 0x58
    1304:	031a      	lsls	r2, r3, #12
    1306:	68fb      	ldr	r3, [r7, #12]
    1308:	611a      	str	r2, [r3, #16]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCGPIO_OFFSET)), (uint32_t)setORClear::set, (uint32_t)(gpioPort), 1, RW);
    130a:	68fb      	ldr	r3, [r7, #12]
    130c:	695a      	ldr	r2, [r3, #20]
    130e:	2300      	movs	r3, #0
    1310:	9300      	str	r3, [sp, #0]
    1312:	2301      	movs	r3, #1
    1314:	2101      	movs	r1, #1
    1316:	4870      	ldr	r0, [pc, #448]	; (14d8 <_ZN4Gpio10initializeEm9direction+0x228>)
    1318:	f7ff f99a 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + PRGPIO_OFFSET)), (uint32_t)(gpioPort), 1, RO) == 0)
    131c:	68fb      	ldr	r3, [r7, #12]
    131e:	6959      	ldr	r1, [r3, #20]
    1320:	2301      	movs	r3, #1
    1322:	2201      	movs	r2, #1
    1324:	486d      	ldr	r0, [pc, #436]	; (14dc <_ZN4Gpio10initializeEm9direction+0x22c>)
    1326:	f7ff f969 	bl	5fc <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    132a:	4603      	mov	r3, r0
    132c:	2b00      	cmp	r3, #0
    132e:	bf0c      	ite	eq
    1330:	2301      	moveq	r3, #1
    1332:	2300      	movne	r3, #0
    1334:	b2db      	uxtb	r3, r3
    1336:	2b00      	cmp	r3, #0
    1338:	d000      	beq.n	133c <_ZN4Gpio10initializeEm9direction+0x8c>
    133a:	e7ef      	b.n	131c <_ZN4Gpio10initializeEm9direction+0x6c>
    {
        //Ready?
    }

    //Unlock NMI for use.
    if(gpio == ((uint32_t)PF0::GPIO)/100)
    133c:	68bb      	ldr	r3, [r7, #8]
    133e:	2b28      	cmp	r3, #40	; 0x28
    1340:	d11c      	bne.n	137c <_ZN4Gpio10initializeEm9direction+0xcc>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOLOCK_OFFSET)), gpioKey, 0, 32, RW);
    1342:	68fb      	ldr	r3, [r7, #12]
    1344:	691b      	ldr	r3, [r3, #16]
    1346:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
    134a:	4618      	mov	r0, r3
    134c:	2300      	movs	r3, #0
    134e:	9300      	str	r3, [sp, #0]
    1350:	2320      	movs	r3, #32
    1352:	2200      	movs	r2, #0
    1354:	4962      	ldr	r1, [pc, #392]	; (14e0 <_ZN4Gpio10initializeEm9direction+0x230>)
    1356:	f7ff f97b 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        *(((volatile uint32_t*)(baseAddress + GPIOCR_OFFSET))) |= (0x1 << (*this).gpio);
    135a:	68fb      	ldr	r3, [r7, #12]
    135c:	691b      	ldr	r3, [r3, #16]
    135e:	f203 5324 	addw	r3, r3, #1316	; 0x524
    1362:	681b      	ldr	r3, [r3, #0]
    1364:	68fa      	ldr	r2, [r7, #12]
    1366:	6812      	ldr	r2, [r2, #0]
    1368:	2101      	movs	r1, #1
    136a:	fa01 f202 	lsl.w	r2, r1, r2
    136e:	4611      	mov	r1, r2
    1370:	68fa      	ldr	r2, [r7, #12]
    1372:	6912      	ldr	r2, [r2, #16]
    1374:	f202 5224 	addw	r2, r2, #1316	; 0x524
    1378:	430b      	orrs	r3, r1
    137a:	6013      	str	r3, [r2, #0]
    }

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODIR_OFFSET)), (*this).dir, (*this).gpio, 1, RW);
    137c:	68fb      	ldr	r3, [r7, #12]
    137e:	691b      	ldr	r3, [r3, #16]
    1380:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1384:	4618      	mov	r0, r3
    1386:	68fb      	ldr	r3, [r7, #12]
    1388:	791b      	ldrb	r3, [r3, #4]
    138a:	4619      	mov	r1, r3
    138c:	68fb      	ldr	r3, [r7, #12]
    138e:	681a      	ldr	r2, [r3, #0]
    1390:	2300      	movs	r3, #0
    1392:	9300      	str	r3, [sp, #0]
    1394:	2301      	movs	r3, #1
    1396:	f7ff f95b 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    
    //If no alternate function encoding
    if(alternateFunction == 0)
    139a:	68fb      	ldr	r3, [r7, #12]
    139c:	68db      	ldr	r3, [r3, #12]
    139e:	2b00      	cmp	r3, #0
    13a0:	d138      	bne.n	1414 <_ZN4Gpio10initializeEm9direction+0x164>
    {
        if((*this).dir == input)
    13a2:	68fb      	ldr	r3, [r7, #12]
    13a4:	791b      	ldrb	r3, [r3, #4]
    13a6:	2b00      	cmp	r3, #0
    13a8:	d10c      	bne.n	13c4 <_ZN4Gpio10initializeEm9direction+0x114>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOPUR_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    13aa:	68fb      	ldr	r3, [r7, #12]
    13ac:	691b      	ldr	r3, [r3, #16]
    13ae:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
    13b2:	4618      	mov	r0, r3
    13b4:	68fb      	ldr	r3, [r7, #12]
    13b6:	681a      	ldr	r2, [r3, #0]
    13b8:	2300      	movs	r3, #0
    13ba:	9300      	str	r3, [sp, #0]
    13bc:	2301      	movs	r3, #1
    13be:	2101      	movs	r1, #1
    13c0:	f7ff f946 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        }


        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAFSEl_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    13c4:	68fb      	ldr	r3, [r7, #12]
    13c6:	691b      	ldr	r3, [r3, #16]
    13c8:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    13cc:	4618      	mov	r0, r3
    13ce:	68fb      	ldr	r3, [r7, #12]
    13d0:	681a      	ldr	r2, [r3, #0]
    13d2:	2300      	movs	r3, #0
    13d4:	9300      	str	r3, [sp, #0]
    13d6:	2301      	movs	r3, #1
    13d8:	2100      	movs	r1, #0
    13da:	f7ff f939 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    13de:	68fb      	ldr	r3, [r7, #12]
    13e0:	691b      	ldr	r3, [r3, #16]
    13e2:	f203 531c 	addw	r3, r3, #1308	; 0x51c
    13e6:	4618      	mov	r0, r3
    13e8:	68fb      	ldr	r3, [r7, #12]
    13ea:	681a      	ldr	r2, [r3, #0]
    13ec:	2300      	movs	r3, #0
    13ee:	9300      	str	r3, [sp, #0]
    13f0:	2301      	movs	r3, #1
    13f2:	2101      	movs	r1, #1
    13f4:	f7ff f92c 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    13f8:	68fb      	ldr	r3, [r7, #12]
    13fa:	691b      	ldr	r3, [r3, #16]
    13fc:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    1400:	4618      	mov	r0, r3
    1402:	68fb      	ldr	r3, [r7, #12]
    1404:	681a      	ldr	r2, [r3, #0]
    1406:	2300      	movs	r3, #0
    1408:	9300      	str	r3, [sp, #0]
    140a:	2301      	movs	r3, #1
    140c:	2100      	movs	r1, #0
    140e:	f7ff f91f 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
        }


    }
}
    1412:	e05a      	b.n	14ca <_ZN4Gpio10initializeEm9direction+0x21a>
        alternateFunction = alternateFunction - 1; //Get rid of encoding offset
    1414:	68fb      	ldr	r3, [r7, #12]
    1416:	68db      	ldr	r3, [r3, #12]
    1418:	1e5a      	subs	r2, r3, #1
    141a:	68fb      	ldr	r3, [r7, #12]
    141c:	60da      	str	r2, [r3, #12]
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAFSEl_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW); //Enable alternate function for GPIO pin
    141e:	68fb      	ldr	r3, [r7, #12]
    1420:	691b      	ldr	r3, [r3, #16]
    1422:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    1426:	4618      	mov	r0, r3
    1428:	68fb      	ldr	r3, [r7, #12]
    142a:	681a      	ldr	r2, [r3, #0]
    142c:	2300      	movs	r3, #0
    142e:	9300      	str	r3, [sp, #0]
    1430:	2301      	movs	r3, #1
    1432:	2101      	movs	r1, #1
    1434:	f7ff f90c 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        if(alternateFunction == 0)
    1438:	68fb      	ldr	r3, [r7, #12]
    143a:	68db      	ldr	r3, [r3, #12]
    143c:	2b00      	cmp	r3, #0
    143e:	d11a      	bne.n	1476 <_ZN4Gpio10initializeEm9direction+0x1c6>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    1440:	68fb      	ldr	r3, [r7, #12]
    1442:	691b      	ldr	r3, [r3, #16]
    1444:	f203 531c 	addw	r3, r3, #1308	; 0x51c
    1448:	4618      	mov	r0, r3
    144a:	68fb      	ldr	r3, [r7, #12]
    144c:	681a      	ldr	r2, [r3, #0]
    144e:	2300      	movs	r3, #0
    1450:	9300      	str	r3, [sp, #0]
    1452:	2301      	movs	r3, #1
    1454:	2100      	movs	r1, #0
    1456:	f7ff f8fb 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    145a:	68fb      	ldr	r3, [r7, #12]
    145c:	691b      	ldr	r3, [r3, #16]
    145e:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    1462:	4618      	mov	r0, r3
    1464:	68fb      	ldr	r3, [r7, #12]
    1466:	681a      	ldr	r2, [r3, #0]
    1468:	2300      	movs	r3, #0
    146a:	9300      	str	r3, [sp, #0]
    146c:	2301      	movs	r3, #1
    146e:	2101      	movs	r1, #1
    1470:	f7ff f8ee 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    1474:	e029      	b.n	14ca <_ZN4Gpio10initializeEm9direction+0x21a>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOPCTL_OFFSET)), alternateFunction, ((*this).gpio) * 4, 4, RW);
    1476:	68fb      	ldr	r3, [r7, #12]
    1478:	691b      	ldr	r3, [r3, #16]
    147a:	f203 532c 	addw	r3, r3, #1324	; 0x52c
    147e:	4618      	mov	r0, r3
    1480:	68fb      	ldr	r3, [r7, #12]
    1482:	68db      	ldr	r3, [r3, #12]
    1484:	4619      	mov	r1, r3
    1486:	68fb      	ldr	r3, [r7, #12]
    1488:	681b      	ldr	r3, [r3, #0]
    148a:	009a      	lsls	r2, r3, #2
    148c:	2300      	movs	r3, #0
    148e:	9300      	str	r3, [sp, #0]
    1490:	2304      	movs	r3, #4
    1492:	f7ff f8dd 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    1496:	68fb      	ldr	r3, [r7, #12]
    1498:	691b      	ldr	r3, [r3, #16]
    149a:	f203 531c 	addw	r3, r3, #1308	; 0x51c
    149e:	4618      	mov	r0, r3
    14a0:	68fb      	ldr	r3, [r7, #12]
    14a2:	681a      	ldr	r2, [r3, #0]
    14a4:	2300      	movs	r3, #0
    14a6:	9300      	str	r3, [sp, #0]
    14a8:	2301      	movs	r3, #1
    14aa:	2101      	movs	r1, #1
    14ac:	f7ff f8d0 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    14b0:	68fb      	ldr	r3, [r7, #12]
    14b2:	691b      	ldr	r3, [r3, #16]
    14b4:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    14b8:	4618      	mov	r0, r3
    14ba:	68fb      	ldr	r3, [r7, #12]
    14bc:	681a      	ldr	r2, [r3, #0]
    14be:	2300      	movs	r3, #0
    14c0:	9300      	str	r3, [sp, #0]
    14c2:	2301      	movs	r3, #1
    14c4:	2100      	movs	r1, #0
    14c6:	f7ff f8c3 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    14ca:	bf00      	nop
    14cc:	3710      	adds	r7, #16
    14ce:	46bd      	mov	sp, r7
    14d0:	bd80      	pop	{r7, pc}
    14d2:	bf00      	nop
    14d4:	51eb851f 	.word	0x51eb851f
    14d8:	400fe608 	.word	0x400fe608
    14dc:	400fea08 	.word	0x400fea08
    14e0:	4c4f434b 	.word	0x4c4f434b

000014e4 <_ZN4Gpio10initializeEm9directionm>:
 * @param dir of the gpio, to be an output or input.
 * @param interruptPriority of the gpio, 0 being the highest priority and 7
 *        being the lowest.
 */
void Gpio::initialize(uint32_t gpio, direction dir, uint32_t interruptPriority)
{
    14e4:	b580      	push	{r7, lr}
    14e6:	b086      	sub	sp, #24
    14e8:	af02      	add	r7, sp, #8
    14ea:	60f8      	str	r0, [r7, #12]
    14ec:	60b9      	str	r1, [r7, #8]
    14ee:	603b      	str	r3, [r7, #0]
    14f0:	4613      	mov	r3, r2
    14f2:	71fb      	strb	r3, [r7, #7]
    (*this).interruptPriority = interruptPriority;
    14f4:	68fb      	ldr	r3, [r7, #12]
    14f6:	683a      	ldr	r2, [r7, #0]
    14f8:	609a      	str	r2, [r3, #8]
    
    initialize(gpio, dir);
    14fa:	79fb      	ldrb	r3, [r7, #7]
    14fc:	461a      	mov	r2, r3
    14fe:	68b9      	ldr	r1, [r7, #8]
    1500:	68f8      	ldr	r0, [r7, #12]
    1502:	f7ff fed5 	bl	12b0 <_ZN4Gpio10initializeEm9direction>
    
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIM_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    1506:	68fb      	ldr	r3, [r7, #12]
    1508:	691b      	ldr	r3, [r3, #16]
    150a:	f503 6382 	add.w	r3, r3, #1040	; 0x410
    150e:	4618      	mov	r0, r3
    1510:	68fb      	ldr	r3, [r7, #12]
    1512:	681a      	ldr	r2, [r3, #0]
    1514:	2300      	movs	r3, #0
    1516:	9300      	str	r3, [sp, #0]
    1518:	2301      	movs	r3, #1
    151a:	2100      	movs	r1, #0
    151c:	f7ff f898 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIS_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    1520:	68fb      	ldr	r3, [r7, #12]
    1522:	691b      	ldr	r3, [r3, #16]
    1524:	f203 4304 	addw	r3, r3, #1028	; 0x404
    1528:	4618      	mov	r0, r3
    152a:	68fb      	ldr	r3, [r7, #12]
    152c:	681a      	ldr	r2, [r3, #0]
    152e:	2300      	movs	r3, #0
    1530:	9300      	str	r3, [sp, #0]
    1532:	2301      	movs	r3, #1
    1534:	2100      	movs	r1, #0
    1536:	f7ff f88b 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIBE_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    153a:	68fb      	ldr	r3, [r7, #12]
    153c:	691b      	ldr	r3, [r3, #16]
    153e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
    1542:	4618      	mov	r0, r3
    1544:	68fb      	ldr	r3, [r7, #12]
    1546:	681a      	ldr	r2, [r3, #0]
    1548:	2300      	movs	r3, #0
    154a:	9300      	str	r3, [sp, #0]
    154c:	2301      	movs	r3, #1
    154e:	2101      	movs	r1, #1
    1550:	f7ff f87e 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOICR_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    1554:	68fb      	ldr	r3, [r7, #12]
    1556:	691b      	ldr	r3, [r3, #16]
    1558:	f203 431c 	addw	r3, r3, #1052	; 0x41c
    155c:	4618      	mov	r0, r3
    155e:	68fb      	ldr	r3, [r7, #12]
    1560:	681a      	ldr	r2, [r3, #0]
    1562:	2300      	movs	r3, #0
    1564:	9300      	str	r3, [sp, #0]
    1566:	2301      	movs	r3, #1
    1568:	2101      	movs	r1, #1
    156a:	f7ff f871 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIM_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    156e:	68fb      	ldr	r3, [r7, #12]
    1570:	691b      	ldr	r3, [r3, #16]
    1572:	f503 6382 	add.w	r3, r3, #1040	; 0x410
    1576:	4618      	mov	r0, r3
    1578:	68fb      	ldr	r3, [r7, #12]
    157a:	681a      	ldr	r2, [r3, #0]
    157c:	2300      	movs	r3, #0
    157e:	9300      	str	r3, [sp, #0]
    1580:	2301      	movs	r3, #1
    1582:	2101      	movs	r1, #1
    1584:	f7ff f864 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    /*
    * If gpio is == to Port F (Port number 5) use interrupt number 30 
    * (according to interrupt table), else use interrupt number 0 -> 4 
    * (corresponding to interrupt Port A through Port E)
    */
    Nvic::activateInterrupt((interrupt)((((gpioPort) == 5) ? 30 : (gpioPort))), (*this).interruptPriority);
    1588:	68fb      	ldr	r3, [r7, #12]
    158a:	695b      	ldr	r3, [r3, #20]
    158c:	2b05      	cmp	r3, #5
    158e:	d003      	beq.n	1598 <_ZN4Gpio10initializeEm9directionm+0xb4>
    1590:	68fb      	ldr	r3, [r7, #12]
    1592:	695b      	ldr	r3, [r3, #20]
    1594:	b2da      	uxtb	r2, r3
    1596:	e000      	b.n	159a <_ZN4Gpio10initializeEm9directionm+0xb6>
    1598:	221e      	movs	r2, #30
    159a:	68fb      	ldr	r3, [r7, #12]
    159c:	689b      	ldr	r3, [r3, #8]
    159e:	4619      	mov	r1, r3
    15a0:	4610      	mov	r0, r2
    15a2:	f7ff f915 	bl	7d0 <_ZN4Nvic17activateInterruptE9interruptm>
}
    15a6:	bf00      	nop
    15a8:	3710      	adds	r7, #16
    15aa:	46bd      	mov	sp, r7
    15ac:	bd80      	pop	{r7, pc}

000015ae <_ZN4Gpio14interruptClearEv>:

/**
 * @brief Clears the interrupt. Generally used in an ISR.
 */
void Gpio::interruptClear()
{
    15ae:	b580      	push	{r7, lr}
    15b0:	b084      	sub	sp, #16
    15b2:	af02      	add	r7, sp, #8
    15b4:	6078      	str	r0, [r7, #4]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOICR_OFFSET)), (uint32_t)setORClear::set, gpio, 1, RW);
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	691b      	ldr	r3, [r3, #16]
    15ba:	f203 431c 	addw	r3, r3, #1052	; 0x41c
    15be:	4618      	mov	r0, r3
    15c0:	687b      	ldr	r3, [r7, #4]
    15c2:	681a      	ldr	r2, [r3, #0]
    15c4:	2300      	movs	r3, #0
    15c6:	9300      	str	r3, [sp, #0]
    15c8:	2301      	movs	r3, #1
    15ca:	2101      	movs	r1, #1
    15cc:	f7ff f840 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    15d0:	bf00      	nop
    15d2:	3708      	adds	r7, #8
    15d4:	46bd      	mov	sp, r7
    15d6:	bd80      	pop	{r7, pc}

000015d8 <_ZN4Gpio5writeEm>:
/**
 * @brief Writes to the gpio pin.
 * @param value to write to pin. Accepted values are 1 or 0.
 */
void Gpio::write(uint32_t value)
{
    15d8:	b580      	push	{r7, lr}
    15da:	b084      	sub	sp, #16
    15dc:	af02      	add	r7, sp, #8
    15de:	6078      	str	r0, [r7, #4]
    15e0:	6039      	str	r1, [r7, #0]
    if((value == 0x0) || (value == 0x1))
    15e2:	683b      	ldr	r3, [r7, #0]
    15e4:	2b00      	cmp	r3, #0
    15e6:	d002      	beq.n	15ee <_ZN4Gpio5writeEm+0x16>
    15e8:	683b      	ldr	r3, [r7, #0]
    15ea:	2b01      	cmp	r3, #1
    15ec:	d10c      	bne.n	1608 <_ZN4Gpio5writeEm+0x30>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODATA_OFFSET)), value, gpio, 1, RW);
    15ee:	687b      	ldr	r3, [r7, #4]
    15f0:	691b      	ldr	r3, [r3, #16]
    15f2:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
    15f6:	4618      	mov	r0, r3
    15f8:	687b      	ldr	r3, [r7, #4]
    15fa:	681a      	ldr	r2, [r3, #0]
    15fc:	2300      	movs	r3, #0
    15fe:	9300      	str	r3, [sp, #0]
    1600:	2301      	movs	r3, #1
    1602:	6839      	ldr	r1, [r7, #0]
    1604:	f7ff f824 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    }
}
    1608:	bf00      	nop
    160a:	3708      	adds	r7, #8
    160c:	46bd      	mov	sp, r7
    160e:	bd80      	pop	{r7, pc}

00001610 <_ZN4Gpio4readEv>:
/**
 * @brief Reads from a gpio pin.
 * @return Value of the gpio pin, either a 1 or 0.
 */
uint32_t Gpio::read()
{
    1610:	b580      	push	{r7, lr}
    1612:	b082      	sub	sp, #8
    1614:	af00      	add	r7, sp, #0
    1616:	6078      	str	r0, [r7, #4]
    return((Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODATA_OFFSET)), gpio, 1, RW)));
    1618:	687b      	ldr	r3, [r7, #4]
    161a:	691b      	ldr	r3, [r3, #16]
    161c:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
    1620:	4618      	mov	r0, r3
    1622:	687b      	ldr	r3, [r7, #4]
    1624:	6819      	ldr	r1, [r3, #0]
    1626:	2300      	movs	r3, #0
    1628:	2201      	movs	r2, #1
    162a:	f7fe ffe7 	bl	5fc <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    162e:	4603      	mov	r3, r0
    1630:	4618      	mov	r0, r3
    1632:	3708      	adds	r7, #8
    1634:	46bd      	mov	sp, r7
    1636:	bd80      	pop	{r7, pc}

00001638 <_ZN3PwmC1Ev>:
#include "pwm.h"

/**
 * @brief empty constructor placeholder
 */
Pwm::Pwm()
    1638:	b480      	push	{r7}
    163a:	b083      	sub	sp, #12
    163c:	af00      	add	r7, sp, #0
    163e:	6078      	str	r0, [r7, #4]
{

}
    1640:	687b      	ldr	r3, [r7, #4]
    1642:	4618      	mov	r0, r3
    1644:	370c      	adds	r7, #12
    1646:	46bd      	mov	sp, r7
    1648:	f85d 7b04 	ldr.w	r7, [sp], #4
    164c:	4770      	bx	lr

0000164e <_ZN3PwmD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Pwm::~Pwm()
    164e:	b480      	push	{r7}
    1650:	b083      	sub	sp, #12
    1652:	af00      	add	r7, sp, #0
    1654:	6078      	str	r0, [r7, #4]
{

}
    1656:	687b      	ldr	r3, [r7, #4]
    1658:	4618      	mov	r0, r3
    165a:	370c      	adds	r7, #12
    165c:	46bd      	mov	sp, r7
    165e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1662:	4770      	bx	lr

00001664 <_ZN3Pwm16initializeSingleEm9pwmModulemmm17countDirectionPwmmbm>:
 *                     peripheral
 * @param divisor Binary divisor used to pre-divide the system clock. Must be
 *                enabled with the \c enablePwmDiv first.
 */
void Pwm::initializeSingle(uint32_t pwmPin, pwmModule module, uint32_t period, uint32_t compA, uint32_t compB, countDirectionPwm countDir, uint32_t genOptions, bool enablePwmDiv, uint32_t divisor)
{
    1664:	b580      	push	{r7, lr}
    1666:	b086      	sub	sp, #24
    1668:	af02      	add	r7, sp, #8
    166a:	60f8      	str	r0, [r7, #12]
    166c:	60b9      	str	r1, [r7, #8]
    166e:	603b      	str	r3, [r7, #0]
    1670:	4613      	mov	r3, r2
    1672:	71fb      	strb	r3, [r7, #7]
    myPwmGen = pwmPin/2;
    1674:	68bb      	ldr	r3, [r7, #8]
    1676:	085a      	lsrs	r2, r3, #1
    1678:	68fb      	ldr	r3, [r7, #12]
    167a:	605a      	str	r2, [r3, #4]
    
    initialize(module, period, countDir, enablePwmDiv, divisor);
    167c:	79f9      	ldrb	r1, [r7, #7]
    167e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1680:	9301      	str	r3, [sp, #4]
    1682:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    1686:	9300      	str	r3, [sp, #0]
    1688:	6a3b      	ldr	r3, [r7, #32]
    168a:	683a      	ldr	r2, [r7, #0]
    168c:	68f8      	ldr	r0, [r7, #12]
    168e:	f000 f8c5 	bl	181c <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>
    
    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.
    
    //2b. Write the PWMnGENn register. 
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENA_OFFSET + (0x40 * myPwmGen) + ((pwmPin%2) * 4))), genOptions, 0, 11+1, RW);
    1692:	68fb      	ldr	r3, [r7, #12]
    1694:	681a      	ldr	r2, [r3, #0]
    1696:	68fb      	ldr	r3, [r7, #12]
    1698:	685b      	ldr	r3, [r3, #4]
    169a:	0119      	lsls	r1, r3, #4
    169c:	68bb      	ldr	r3, [r7, #8]
    169e:	f003 0301 	and.w	r3, r3, #1
    16a2:	440b      	add	r3, r1
    16a4:	3318      	adds	r3, #24
    16a6:	009b      	lsls	r3, r3, #2
    16a8:	4413      	add	r3, r2
    16aa:	4618      	mov	r0, r3
    16ac:	2300      	movs	r3, #0
    16ae:	9300      	str	r3, [sp, #0]
    16b0:	230c      	movs	r3, #12
    16b2:	2200      	movs	r2, #0
    16b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    16b6:	f7fe ffcb 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //4. Set counter comparators
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPA_OFFSET + (0x40 * myPwmGen))), compA, 0, 15+1, RW);
    16ba:	68fb      	ldr	r3, [r7, #12]
    16bc:	681a      	ldr	r2, [r3, #0]
    16be:	68fb      	ldr	r3, [r7, #12]
    16c0:	685b      	ldr	r3, [r3, #4]
    16c2:	019b      	lsls	r3, r3, #6
    16c4:	4413      	add	r3, r2
    16c6:	3358      	adds	r3, #88	; 0x58
    16c8:	4618      	mov	r0, r3
    16ca:	2300      	movs	r3, #0
    16cc:	9300      	str	r3, [sp, #0]
    16ce:	2310      	movs	r3, #16
    16d0:	2200      	movs	r2, #0
    16d2:	69b9      	ldr	r1, [r7, #24]
    16d4:	f7fe ffbc 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPB_OFFSET + (0x40 * myPwmGen))), compB, 0, 15+1, RW);
    16d8:	68fb      	ldr	r3, [r7, #12]
    16da:	681a      	ldr	r2, [r3, #0]
    16dc:	68fb      	ldr	r3, [r7, #12]
    16de:	685b      	ldr	r3, [r3, #4]
    16e0:	019b      	lsls	r3, r3, #6
    16e2:	4413      	add	r3, r2
    16e4:	335c      	adds	r3, #92	; 0x5c
    16e6:	4618      	mov	r0, r3
    16e8:	2300      	movs	r3, #0
    16ea:	9300      	str	r3, [sp, #0]
    16ec:	2310      	movs	r3, #16
    16ee:	2200      	movs	r2, #0
    16f0:	69f9      	ldr	r1, [r7, #28]
    16f2:	f7fe ffad 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //6. Enable PWM
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)setORClear::set, 0, 1, RW);
    16f6:	68fb      	ldr	r3, [r7, #12]
    16f8:	681a      	ldr	r2, [r3, #0]
    16fa:	68fb      	ldr	r3, [r7, #12]
    16fc:	685b      	ldr	r3, [r3, #4]
    16fe:	3301      	adds	r3, #1
    1700:	019b      	lsls	r3, r3, #6
    1702:	4413      	add	r3, r2
    1704:	4618      	mov	r0, r3
    1706:	2300      	movs	r3, #0
    1708:	9300      	str	r3, [sp, #0]
    170a:	2301      	movs	r3, #1
    170c:	2200      	movs	r2, #0
    170e:	2101      	movs	r1, #1
    1710:	f7fe ff9e 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //7. Enable PWM output.
    // Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + PWMENABLE_OFFSET), set, 0 + ((myPwmGen*2)+(((pwmPin%2) * 4)/4)), 1, RW); //(uint32_t)output >> 2
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + PWMENABLE_OFFSET), (uint32_t)setORClear::set, pwmPin, 1, RW); //(uint32_t)output >> 2
    1714:	68fb      	ldr	r3, [r7, #12]
    1716:	681b      	ldr	r3, [r3, #0]
    1718:	3308      	adds	r3, #8
    171a:	4618      	mov	r0, r3
    171c:	2300      	movs	r3, #0
    171e:	9300      	str	r3, [sp, #0]
    1720:	2301      	movs	r3, #1
    1722:	68ba      	ldr	r2, [r7, #8]
    1724:	2101      	movs	r1, #1
    1726:	f7fe ff93 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

}
    172a:	bf00      	nop
    172c:	3710      	adds	r7, #16
    172e:	46bd      	mov	sp, r7
    1730:	bd80      	pop	{r7, pc}

00001732 <_ZN3Pwm14initializePairEm9pwmModulemmm17countDirectionPwmmmbm>:
 * @param divisor Binary divisor used to pre-divide the system clock. Must be
 *                enabled with the \c enablePwmDiv first.
 */

void Pwm::initializePair(uint32_t pwmPin, pwmModule module, uint32_t period, uint32_t compA, uint32_t compB, countDirectionPwm countDir, uint32_t genOptionsA, uint32_t genOptionsB, bool enablePwmDiv, uint32_t divisor)
{
    1732:	b580      	push	{r7, lr}
    1734:	b086      	sub	sp, #24
    1736:	af02      	add	r7, sp, #8
    1738:	60f8      	str	r0, [r7, #12]
    173a:	60b9      	str	r1, [r7, #8]
    173c:	603b      	str	r3, [r7, #0]
    173e:	4613      	mov	r3, r2
    1740:	71fb      	strb	r3, [r7, #7]
    myPwmGen = pwmPin/2;
    1742:	68bb      	ldr	r3, [r7, #8]
    1744:	085a      	lsrs	r2, r3, #1
    1746:	68fb      	ldr	r3, [r7, #12]
    1748:	605a      	str	r2, [r3, #4]

    initialize(module, period, countDir, enablePwmDiv, divisor);
    174a:	79f9      	ldrb	r1, [r7, #7]
    174c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    174e:	9301      	str	r3, [sp, #4]
    1750:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1754:	9300      	str	r3, [sp, #0]
    1756:	6a3b      	ldr	r3, [r7, #32]
    1758:	683a      	ldr	r2, [r7, #0]
    175a:	68f8      	ldr	r0, [r7, #12]
    175c:	f000 f85e 	bl	181c <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>
    
    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.
    
    //2b. Write the PWMnGENA register.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENA_OFFSET + (0x40 * myPwmGen))), genOptionsA, 0, 11+1, RW);
    1760:	68fb      	ldr	r3, [r7, #12]
    1762:	681a      	ldr	r2, [r3, #0]
    1764:	68fb      	ldr	r3, [r7, #12]
    1766:	685b      	ldr	r3, [r3, #4]
    1768:	019b      	lsls	r3, r3, #6
    176a:	4413      	add	r3, r2
    176c:	3360      	adds	r3, #96	; 0x60
    176e:	4618      	mov	r0, r3
    1770:	2300      	movs	r3, #0
    1772:	9300      	str	r3, [sp, #0]
    1774:	230c      	movs	r3, #12
    1776:	2200      	movs	r2, #0
    1778:	6a79      	ldr	r1, [r7, #36]	; 0x24
    177a:	f7fe ff69 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //2c. Write the PWMnGENB register.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENB_OFFSET + (0x40 * myPwmGen))), genOptionsB, 0, 11+1, RW);
    177e:	68fb      	ldr	r3, [r7, #12]
    1780:	681a      	ldr	r2, [r3, #0]
    1782:	68fb      	ldr	r3, [r7, #12]
    1784:	685b      	ldr	r3, [r3, #4]
    1786:	019b      	lsls	r3, r3, #6
    1788:	4413      	add	r3, r2
    178a:	3364      	adds	r3, #100	; 0x64
    178c:	4618      	mov	r0, r3
    178e:	2300      	movs	r3, #0
    1790:	9300      	str	r3, [sp, #0]
    1792:	230c      	movs	r3, #12
    1794:	2200      	movs	r2, #0
    1796:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    1798:	f7fe ff5a 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //4. Set counter comparator for pwmA
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPA_OFFSET + (0x40 * myPwmGen))), compA, 0, 15+1, RW);
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	681a      	ldr	r2, [r3, #0]
    17a0:	68fb      	ldr	r3, [r7, #12]
    17a2:	685b      	ldr	r3, [r3, #4]
    17a4:	019b      	lsls	r3, r3, #6
    17a6:	4413      	add	r3, r2
    17a8:	3358      	adds	r3, #88	; 0x58
    17aa:	4618      	mov	r0, r3
    17ac:	2300      	movs	r3, #0
    17ae:	9300      	str	r3, [sp, #0]
    17b0:	2310      	movs	r3, #16
    17b2:	2200      	movs	r2, #0
    17b4:	69b9      	ldr	r1, [r7, #24]
    17b6:	f7fe ff4b 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //5. Set counter comparator for pwmB
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPB_OFFSET + (0x40 * myPwmGen))), compB, 0, 15+1, RW);
    17ba:	68fb      	ldr	r3, [r7, #12]
    17bc:	681a      	ldr	r2, [r3, #0]
    17be:	68fb      	ldr	r3, [r7, #12]
    17c0:	685b      	ldr	r3, [r3, #4]
    17c2:	019b      	lsls	r3, r3, #6
    17c4:	4413      	add	r3, r2
    17c6:	335c      	adds	r3, #92	; 0x5c
    17c8:	4618      	mov	r0, r3
    17ca:	2300      	movs	r3, #0
    17cc:	9300      	str	r3, [sp, #0]
    17ce:	2310      	movs	r3, #16
    17d0:	2200      	movs	r2, #0
    17d2:	69f9      	ldr	r1, [r7, #28]
    17d4:	f7fe ff3c 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //6. Enable PWM
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)setORClear::set, 0, 1, RW);
    17d8:	68fb      	ldr	r3, [r7, #12]
    17da:	681a      	ldr	r2, [r3, #0]
    17dc:	68fb      	ldr	r3, [r7, #12]
    17de:	685b      	ldr	r3, [r3, #4]
    17e0:	3301      	adds	r3, #1
    17e2:	019b      	lsls	r3, r3, #6
    17e4:	4413      	add	r3, r2
    17e6:	4618      	mov	r0, r3
    17e8:	2300      	movs	r3, #0
    17ea:	9300      	str	r3, [sp, #0]
    17ec:	2301      	movs	r3, #1
    17ee:	2200      	movs	r2, #0
    17f0:	2101      	movs	r1, #1
    17f2:	f7fe ff2d 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //7. Enable PWM output.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWMENABLE_OFFSET + (0x40 * myPwmGen))), 0x3, pwmPin, 2, RW); 
    17f6:	68fb      	ldr	r3, [r7, #12]
    17f8:	681a      	ldr	r2, [r3, #0]
    17fa:	68fb      	ldr	r3, [r7, #12]
    17fc:	685b      	ldr	r3, [r3, #4]
    17fe:	019b      	lsls	r3, r3, #6
    1800:	4413      	add	r3, r2
    1802:	3308      	adds	r3, #8
    1804:	4618      	mov	r0, r3
    1806:	2300      	movs	r3, #0
    1808:	9300      	str	r3, [sp, #0]
    180a:	2302      	movs	r3, #2
    180c:	68ba      	ldr	r2, [r7, #8]
    180e:	2103      	movs	r1, #3
    1810:	f7fe ff1e 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    1814:	bf00      	nop
    1816:	3710      	adds	r7, #16
    1818:	46bd      	mov	sp, r7
    181a:	bd80      	pop	{r7, pc}

0000181c <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>:
 * @param enablePwmDiv Enables the PWM peripheral clock pre-divider
 * @param divisor The value of the PWM clock pre-divider chosen by enum
 *                pwmUnitClockDivisor.       
 */
void Pwm::initialize(pwmModule module, uint32_t period, countDirectionPwm countDir, bool enablePwmDiv, uint32_t divisor)
{    
    181c:	b580      	push	{r7, lr}
    181e:	b088      	sub	sp, #32
    1820:	af02      	add	r7, sp, #8
    1822:	60f8      	str	r0, [r7, #12]
    1824:	607a      	str	r2, [r7, #4]
    1826:	603b      	str	r3, [r7, #0]
    1828:	460b      	mov	r3, r1
    182a:	72fb      	strb	r3, [r7, #11]
    baseAddress = pwm0BaseAddress + (module * 0x1000);
    182c:	7afb      	ldrb	r3, [r7, #11]
    182e:	031b      	lsls	r3, r3, #12
    1830:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1834:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
    1838:	68fa      	ldr	r2, [r7, #12]
    183a:	6013      	str	r3, [r2, #0]
    
    //0. Enable the clock for PWM
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCPWM_OFFSET)), (uint32_t)setORClear::set, module, 1, RW);
    183c:	7afa      	ldrb	r2, [r7, #11]
    183e:	2300      	movs	r3, #0
    1840:	9300      	str	r3, [sp, #0]
    1842:	2301      	movs	r3, #1
    1844:	2101      	movs	r1, #1
    1846:	4847      	ldr	r0, [pc, #284]	; (1964 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x148>)
    1848:	f7fe ff02 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRPWM_OFFSET), module, 1, RO) == 0)
    184c:	7af9      	ldrb	r1, [r7, #11]
    184e:	2301      	movs	r3, #1
    1850:	2201      	movs	r2, #1
    1852:	4845      	ldr	r0, [pc, #276]	; (1968 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x14c>)
    1854:	f7fe fed2 	bl	5fc <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    1858:	4603      	mov	r3, r0
    185a:	2b00      	cmp	r3, #0
    185c:	bf0c      	ite	eq
    185e:	2301      	moveq	r3, #1
    1860:	2300      	movne	r3, #0
    1862:	b2db      	uxtb	r3, r3
    1864:	2b00      	cmp	r3, #0
    1866:	d000      	beq.n	186a <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x4e>
    1868:	e7f0      	b.n	184c <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x30>
        //Ready??
    }

    // Clear count register by reseting PWM

    Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + SRPWM_OFFSET), (uint32_t)setORClear::set, module, 1, RW);
    186a:	7afa      	ldrb	r2, [r7, #11]
    186c:	2300      	movs	r3, #0
    186e:	9300      	str	r3, [sp, #0]
    1870:	2301      	movs	r3, #1
    1872:	2101      	movs	r1, #1
    1874:	483d      	ldr	r0, [pc, #244]	; (196c <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x150>)
    1876:	f7fe feeb 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    for(uint32_t i = 0; i < 100; i++)
    187a:	2300      	movs	r3, #0
    187c:	617b      	str	r3, [r7, #20]
    187e:	697b      	ldr	r3, [r7, #20]
    1880:	2b63      	cmp	r3, #99	; 0x63
    1882:	d803      	bhi.n	188c <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x70>
    1884:	697b      	ldr	r3, [r7, #20]
    1886:	3301      	adds	r3, #1
    1888:	617b      	str	r3, [r7, #20]
    188a:	e7f8      	b.n	187e <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x62>
    {
        //wait
    }

    Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + SRPWM_OFFSET), (uint32_t)setORClear::clear, module, 1, RW);
    188c:	7afa      	ldrb	r2, [r7, #11]
    188e:	2300      	movs	r3, #0
    1890:	9300      	str	r3, [sp, #0]
    1892:	2301      	movs	r3, #1
    1894:	2100      	movs	r1, #0
    1896:	4835      	ldr	r0, [pc, #212]	; (196c <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x150>)
    1898:	f7fe feda 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRPWM_OFFSET), module, 1, RO) == 0)
    189c:	7af9      	ldrb	r1, [r7, #11]
    189e:	2301      	movs	r3, #1
    18a0:	2201      	movs	r2, #1
    18a2:	4831      	ldr	r0, [pc, #196]	; (1968 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x14c>)
    18a4:	f7fe feaa 	bl	5fc <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    18a8:	4603      	mov	r3, r0
    18aa:	2b00      	cmp	r3, #0
    18ac:	bf0c      	ite	eq
    18ae:	2301      	moveq	r3, #1
    18b0:	2300      	movne	r3, #0
    18b2:	b2db      	uxtb	r3, r3
    18b4:	2b00      	cmp	r3, #0
    18b6:	d000      	beq.n	18ba <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x9e>
    18b8:	e7f0      	b.n	189c <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x80>
    {
        //Ready??
    }

    if(enablePwmDiv == true)
    18ba:	f897 3020 	ldrb.w	r3, [r7, #32]
    18be:	2b00      	cmp	r3, #0
    18c0:	d00f      	beq.n	18e2 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0xc6>
    {
        //1a. Configure the Run-Mode Clock Configuration (RCC) register in the System Control module to use the PWM divide (USEPWMDIV).
        Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + RCC_OFFSET), (uint32_t)setORClear::set, 20, 1, RW);
    18c2:	2300      	movs	r3, #0
    18c4:	9300      	str	r3, [sp, #0]
    18c6:	2301      	movs	r3, #1
    18c8:	2214      	movs	r2, #20
    18ca:	2101      	movs	r1, #1
    18cc:	4828      	ldr	r0, [pc, #160]	; (1970 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x154>)
    18ce:	f7fe febf 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        //1b. Set the divider (PWMDIV).
        Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + RCC_OFFSET), divisor, 17, (19-17)+1, RW);
    18d2:	2300      	movs	r3, #0
    18d4:	9300      	str	r3, [sp, #0]
    18d6:	2303      	movs	r3, #3
    18d8:	2211      	movs	r2, #17
    18da:	6a79      	ldr	r1, [r7, #36]	; 0x24
    18dc:	4824      	ldr	r0, [pc, #144]	; (1970 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x154>)
    18de:	f7fe feb7 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    }

    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.

    //2a. Write the PWMnCTL register with a value of 0x0000.0000 to clear it.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)setORClear::clear, 0, 1, RW);
    18e2:	68fb      	ldr	r3, [r7, #12]
    18e4:	681a      	ldr	r2, [r3, #0]
    18e6:	68fb      	ldr	r3, [r7, #12]
    18e8:	685b      	ldr	r3, [r3, #4]
    18ea:	3301      	adds	r3, #1
    18ec:	019b      	lsls	r3, r3, #6
    18ee:	4413      	add	r3, r2
    18f0:	4618      	mov	r0, r3
    18f2:	2300      	movs	r3, #0
    18f4:	9300      	str	r3, [sp, #0]
    18f6:	2301      	movs	r3, #1
    18f8:	2200      	movs	r2, #0
    18fa:	2100      	movs	r1, #0
    18fc:	f7fe fea8 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)setORClear::set, 2, 1, RW);
    1900:	68fb      	ldr	r3, [r7, #12]
    1902:	681a      	ldr	r2, [r3, #0]
    1904:	68fb      	ldr	r3, [r7, #12]
    1906:	685b      	ldr	r3, [r3, #4]
    1908:	3301      	adds	r3, #1
    190a:	019b      	lsls	r3, r3, #6
    190c:	4413      	add	r3, r2
    190e:	4618      	mov	r0, r3
    1910:	2300      	movs	r3, #0
    1912:	9300      	str	r3, [sp, #0]
    1914:	2301      	movs	r3, #1
    1916:	2202      	movs	r2, #2
    1918:	2101      	movs	r1, #1
    191a:	f7fe fe99 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //Set count direction
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)countDir, 3, 1, RW);
    191e:	68fb      	ldr	r3, [r7, #12]
    1920:	681a      	ldr	r2, [r3, #0]
    1922:	68fb      	ldr	r3, [r7, #12]
    1924:	685b      	ldr	r3, [r3, #4]
    1926:	3301      	adds	r3, #1
    1928:	019b      	lsls	r3, r3, #6
    192a:	4413      	add	r3, r2
    192c:	4618      	mov	r0, r3
    192e:	6839      	ldr	r1, [r7, #0]
    1930:	2300      	movs	r3, #0
    1932:	9300      	str	r3, [sp, #0]
    1934:	2301      	movs	r3, #1
    1936:	2203      	movs	r2, #3
    1938:	f7fe fe8a 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //3. Set the period
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0LOAD_OFFSET + (0x40 * myPwmGen))), period, 0, 15+1, RW);
    193c:	68fb      	ldr	r3, [r7, #12]
    193e:	681a      	ldr	r2, [r3, #0]
    1940:	68fb      	ldr	r3, [r7, #12]
    1942:	685b      	ldr	r3, [r3, #4]
    1944:	019b      	lsls	r3, r3, #6
    1946:	4413      	add	r3, r2
    1948:	3350      	adds	r3, #80	; 0x50
    194a:	4618      	mov	r0, r3
    194c:	2300      	movs	r3, #0
    194e:	9300      	str	r3, [sp, #0]
    1950:	2310      	movs	r3, #16
    1952:	2200      	movs	r2, #0
    1954:	6879      	ldr	r1, [r7, #4]
    1956:	f7fe fe7b 	bl	650 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    195a:	bf00      	nop
    195c:	3718      	adds	r7, #24
    195e:	46bd      	mov	sp, r7
    1960:	bd80      	pop	{r7, pc}
    1962:	bf00      	nop
    1964:	400fe640 	.word	0x400fe640
    1968:	400fea40 	.word	0x400fea40
    196c:	400fe540 	.word	0x400fe540
    1970:	400fe060 	.word	0x400fe060

00001974 <__aeabi_atexit>:
    1974:	460b      	mov	r3, r1
    1976:	4601      	mov	r1, r0
    1978:	4618      	mov	r0, r3
    197a:	f000 bf83 	b.w	2884 <__cxa_atexit>
	...

00001980 <selfrel_offset31>:
    1980:	6803      	ldr	r3, [r0, #0]
    1982:	005a      	lsls	r2, r3, #1
    1984:	bf4c      	ite	mi
    1986:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    198a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    198e:	4418      	add	r0, r3
    1990:	4770      	bx	lr
    1992:	bf00      	nop

00001994 <search_EIT_table>:
    1994:	b369      	cbz	r1, 19f2 <search_EIT_table+0x5e>
    1996:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    199a:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
    199e:	4617      	mov	r7, r2
    19a0:	4606      	mov	r6, r0
    19a2:	46c8      	mov	r8, r9
    19a4:	f04f 0a00 	mov.w	sl, #0
    19a8:	eb0a 0408 	add.w	r4, sl, r8
    19ac:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    19b0:	1064      	asrs	r4, r4, #1
    19b2:	00e5      	lsls	r5, r4, #3
    19b4:	1971      	adds	r1, r6, r5
    19b6:	4608      	mov	r0, r1
    19b8:	f7ff ffe2 	bl	1980 <selfrel_offset31>
    19bc:	45a1      	cmp	r9, r4
    19be:	4603      	mov	r3, r0
    19c0:	f105 0008 	add.w	r0, r5, #8
    19c4:	4430      	add	r0, r6
    19c6:	d009      	beq.n	19dc <search_EIT_table+0x48>
    19c8:	42bb      	cmp	r3, r7
    19ca:	d809      	bhi.n	19e0 <search_EIT_table+0x4c>
    19cc:	f7ff ffd8 	bl	1980 <selfrel_offset31>
    19d0:	3801      	subs	r0, #1
    19d2:	42b8      	cmp	r0, r7
    19d4:	d20a      	bcs.n	19ec <search_EIT_table+0x58>
    19d6:	f104 0a01 	add.w	sl, r4, #1
    19da:	e7e5      	b.n	19a8 <search_EIT_table+0x14>
    19dc:	42bb      	cmp	r3, r7
    19de:	d905      	bls.n	19ec <search_EIT_table+0x58>
    19e0:	45a2      	cmp	sl, r4
    19e2:	d002      	beq.n	19ea <search_EIT_table+0x56>
    19e4:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    19e8:	e7de      	b.n	19a8 <search_EIT_table+0x14>
    19ea:	2100      	movs	r1, #0
    19ec:	4608      	mov	r0, r1
    19ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    19f2:	4608      	mov	r0, r1
    19f4:	4770      	bx	lr
    19f6:	bf00      	nop

000019f8 <__gnu_unwind_get_pr_addr>:
    19f8:	2801      	cmp	r0, #1
    19fa:	d007      	beq.n	1a0c <__gnu_unwind_get_pr_addr+0x14>
    19fc:	2802      	cmp	r0, #2
    19fe:	d007      	beq.n	1a10 <__gnu_unwind_get_pr_addr+0x18>
    1a00:	4b04      	ldr	r3, [pc, #16]	; (1a14 <__gnu_unwind_get_pr_addr+0x1c>)
    1a02:	2800      	cmp	r0, #0
    1a04:	bf0c      	ite	eq
    1a06:	4618      	moveq	r0, r3
    1a08:	2000      	movne	r0, #0
    1a0a:	4770      	bx	lr
    1a0c:	4802      	ldr	r0, [pc, #8]	; (1a18 <__gnu_unwind_get_pr_addr+0x20>)
    1a0e:	4770      	bx	lr
    1a10:	4802      	ldr	r0, [pc, #8]	; (1a1c <__gnu_unwind_get_pr_addr+0x24>)
    1a12:	4770      	bx	lr
    1a14:	000020d5 	.word	0x000020d5
    1a18:	000020d9 	.word	0x000020d9
    1a1c:	000020dd 	.word	0x000020dd

00001a20 <get_eit_entry>:
    1a20:	b530      	push	{r4, r5, lr}
    1a22:	4b24      	ldr	r3, [pc, #144]	; (1ab4 <get_eit_entry+0x94>)
    1a24:	b083      	sub	sp, #12
    1a26:	4604      	mov	r4, r0
    1a28:	1e8d      	subs	r5, r1, #2
    1a2a:	b34b      	cbz	r3, 1a80 <get_eit_entry+0x60>
    1a2c:	a901      	add	r1, sp, #4
    1a2e:	4628      	mov	r0, r5
    1a30:	f3af 8000 	nop.w
    1a34:	b1f0      	cbz	r0, 1a74 <get_eit_entry+0x54>
    1a36:	9901      	ldr	r1, [sp, #4]
    1a38:	462a      	mov	r2, r5
    1a3a:	f7ff ffab 	bl	1994 <search_EIT_table>
    1a3e:	4601      	mov	r1, r0
    1a40:	b1c0      	cbz	r0, 1a74 <get_eit_entry+0x54>
    1a42:	f7ff ff9d 	bl	1980 <selfrel_offset31>
    1a46:	684b      	ldr	r3, [r1, #4]
    1a48:	64a0      	str	r0, [r4, #72]	; 0x48
    1a4a:	2b01      	cmp	r3, #1
    1a4c:	d02e      	beq.n	1aac <get_eit_entry+0x8c>
    1a4e:	2b00      	cmp	r3, #0
    1a50:	f101 0004 	add.w	r0, r1, #4
    1a54:	db26      	blt.n	1aa4 <get_eit_entry+0x84>
    1a56:	f7ff ff93 	bl	1980 <selfrel_offset31>
    1a5a:	2300      	movs	r3, #0
    1a5c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    1a60:	6803      	ldr	r3, [r0, #0]
    1a62:	2b00      	cmp	r3, #0
    1a64:	db12      	blt.n	1a8c <get_eit_entry+0x6c>
    1a66:	f7ff ff8b 	bl	1980 <selfrel_offset31>
    1a6a:	2300      	movs	r3, #0
    1a6c:	6120      	str	r0, [r4, #16]
    1a6e:	4618      	mov	r0, r3
    1a70:	b003      	add	sp, #12
    1a72:	bd30      	pop	{r4, r5, pc}
    1a74:	2300      	movs	r3, #0
    1a76:	6123      	str	r3, [r4, #16]
    1a78:	2309      	movs	r3, #9
    1a7a:	4618      	mov	r0, r3
    1a7c:	b003      	add	sp, #12
    1a7e:	bd30      	pop	{r4, r5, pc}
    1a80:	490d      	ldr	r1, [pc, #52]	; (1ab8 <get_eit_entry+0x98>)
    1a82:	480e      	ldr	r0, [pc, #56]	; (1abc <get_eit_entry+0x9c>)
    1a84:	1a09      	subs	r1, r1, r0
    1a86:	10c9      	asrs	r1, r1, #3
    1a88:	9101      	str	r1, [sp, #4]
    1a8a:	e7d5      	b.n	1a38 <get_eit_entry+0x18>
    1a8c:	f3c3 6003 	ubfx	r0, r3, #24, #4
    1a90:	f7ff ffb2 	bl	19f8 <__gnu_unwind_get_pr_addr>
    1a94:	2800      	cmp	r0, #0
    1a96:	bf14      	ite	ne
    1a98:	2300      	movne	r3, #0
    1a9a:	2309      	moveq	r3, #9
    1a9c:	6120      	str	r0, [r4, #16]
    1a9e:	4618      	mov	r0, r3
    1aa0:	b003      	add	sp, #12
    1aa2:	bd30      	pop	{r4, r5, pc}
    1aa4:	2301      	movs	r3, #1
    1aa6:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    1aaa:	e7d9      	b.n	1a60 <get_eit_entry+0x40>
    1aac:	2300      	movs	r3, #0
    1aae:	6123      	str	r3, [r4, #16]
    1ab0:	2305      	movs	r3, #5
    1ab2:	e7dc      	b.n	1a6e <get_eit_entry+0x4e>
    1ab4:	00000000 	.word	0x00000000
    1ab8:	00003910 	.word	0x00003910
    1abc:	00003748 	.word	0x00003748

00001ac0 <restore_non_core_regs>:
    1ac0:	6803      	ldr	r3, [r0, #0]
    1ac2:	07da      	lsls	r2, r3, #31
    1ac4:	b510      	push	{r4, lr}
    1ac6:	4604      	mov	r4, r0
    1ac8:	d406      	bmi.n	1ad8 <restore_non_core_regs+0x18>
    1aca:	079b      	lsls	r3, r3, #30
    1acc:	f100 0048 	add.w	r0, r0, #72	; 0x48
    1ad0:	d509      	bpl.n	1ae6 <restore_non_core_regs+0x26>
    1ad2:	f000 fc59 	bl	2388 <__gnu_Unwind_Restore_VFP_D>
    1ad6:	6823      	ldr	r3, [r4, #0]
    1ad8:	0759      	lsls	r1, r3, #29
    1ada:	d509      	bpl.n	1af0 <restore_non_core_regs+0x30>
    1adc:	071a      	lsls	r2, r3, #28
    1ade:	d50e      	bpl.n	1afe <restore_non_core_regs+0x3e>
    1ae0:	06db      	lsls	r3, r3, #27
    1ae2:	d513      	bpl.n	1b0c <restore_non_core_regs+0x4c>
    1ae4:	bd10      	pop	{r4, pc}
    1ae6:	f000 fc47 	bl	2378 <__gnu_Unwind_Restore_VFP>
    1aea:	6823      	ldr	r3, [r4, #0]
    1aec:	0759      	lsls	r1, r3, #29
    1aee:	d4f5      	bmi.n	1adc <restore_non_core_regs+0x1c>
    1af0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    1af4:	f000 fc50 	bl	2398 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    1af8:	6823      	ldr	r3, [r4, #0]
    1afa:	071a      	lsls	r2, r3, #28
    1afc:	d4f0      	bmi.n	1ae0 <restore_non_core_regs+0x20>
    1afe:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    1b02:	f000 fc51 	bl	23a8 <__gnu_Unwind_Restore_WMMXD>
    1b06:	6823      	ldr	r3, [r4, #0]
    1b08:	06db      	lsls	r3, r3, #27
    1b0a:	d4eb      	bmi.n	1ae4 <restore_non_core_regs+0x24>
    1b0c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    1b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b14:	f000 bc8c 	b.w	2430 <__gnu_Unwind_Restore_WMMXC>

00001b18 <_Unwind_decode_typeinfo_ptr.isra.0>:
    1b18:	6803      	ldr	r3, [r0, #0]
    1b1a:	b103      	cbz	r3, 1b1e <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    1b1c:	4403      	add	r3, r0
    1b1e:	4618      	mov	r0, r3
    1b20:	4770      	bx	lr
    1b22:	bf00      	nop

00001b24 <__gnu_unwind_24bit.isra.1>:
    1b24:	2009      	movs	r0, #9
    1b26:	4770      	bx	lr

00001b28 <_Unwind_DebugHook>:
    1b28:	4770      	bx	lr
    1b2a:	bf00      	nop

00001b2c <unwind_phase2>:
    1b2c:	b570      	push	{r4, r5, r6, lr}
    1b2e:	4604      	mov	r4, r0
    1b30:	460d      	mov	r5, r1
    1b32:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1b34:	4620      	mov	r0, r4
    1b36:	f7ff ff73 	bl	1a20 <get_eit_entry>
    1b3a:	4606      	mov	r6, r0
    1b3c:	b988      	cbnz	r0, 1b62 <unwind_phase2+0x36>
    1b3e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    1b40:	6163      	str	r3, [r4, #20]
    1b42:	462a      	mov	r2, r5
    1b44:	6923      	ldr	r3, [r4, #16]
    1b46:	4621      	mov	r1, r4
    1b48:	2001      	movs	r0, #1
    1b4a:	4798      	blx	r3
    1b4c:	2808      	cmp	r0, #8
    1b4e:	d0f0      	beq.n	1b32 <unwind_phase2+0x6>
    1b50:	2807      	cmp	r0, #7
    1b52:	d106      	bne.n	1b62 <unwind_phase2+0x36>
    1b54:	4630      	mov	r0, r6
    1b56:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1b58:	f7ff ffe6 	bl	1b28 <_Unwind_DebugHook>
    1b5c:	1d28      	adds	r0, r5, #4
    1b5e:	f000 fbff 	bl	2360 <__restore_core_regs>
    1b62:	f000 fe87 	bl	2874 <abort>
    1b66:	bf00      	nop

00001b68 <unwind_phase2_forced>:
    1b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1b6c:	1d0c      	adds	r4, r1, #4
    1b6e:	4605      	mov	r5, r0
    1b70:	4617      	mov	r7, r2
    1b72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1b74:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    1b78:	ae03      	add	r6, sp, #12
    1b7a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1b7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1b80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1b82:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1b84:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    1b88:	ac02      	add	r4, sp, #8
    1b8a:	f8d5 800c 	ldr.w	r8, [r5, #12]
    1b8e:	f8d5 9018 	ldr.w	r9, [r5, #24]
    1b92:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    1b96:	2300      	movs	r3, #0
    1b98:	4628      	mov	r0, r5
    1b9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1b9c:	6023      	str	r3, [r4, #0]
    1b9e:	f7ff ff3f 	bl	1a20 <get_eit_entry>
    1ba2:	2f00      	cmp	r7, #0
    1ba4:	4606      	mov	r6, r0
    1ba6:	bf14      	ite	ne
    1ba8:	270a      	movne	r7, #10
    1baa:	2709      	moveq	r7, #9
    1bac:	bb46      	cbnz	r6, 1c00 <unwind_phase2_forced+0x98>
    1bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1bb0:	616b      	str	r3, [r5, #20]
    1bb2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    1bb6:	4621      	mov	r1, r4
    1bb8:	a87a      	add	r0, sp, #488	; 0x1e8
    1bba:	f000 fe81 	bl	28c0 <memcpy>
    1bbe:	692b      	ldr	r3, [r5, #16]
    1bc0:	aa7a      	add	r2, sp, #488	; 0x1e8
    1bc2:	4629      	mov	r1, r5
    1bc4:	4638      	mov	r0, r7
    1bc6:	4798      	blx	r3
    1bc8:	9b88      	ldr	r3, [sp, #544]	; 0x220
    1bca:	4682      	mov	sl, r0
    1bcc:	e9cd 4900 	strd	r4, r9, [sp]
    1bd0:	4639      	mov	r1, r7
    1bd2:	6463      	str	r3, [r4, #68]	; 0x44
    1bd4:	462a      	mov	r2, r5
    1bd6:	462b      	mov	r3, r5
    1bd8:	2001      	movs	r0, #1
    1bda:	47c0      	blx	r8
    1bdc:	b9d8      	cbnz	r0, 1c16 <unwind_phase2_forced+0xae>
    1bde:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    1be2:	a97a      	add	r1, sp, #488	; 0x1e8
    1be4:	4620      	mov	r0, r4
    1be6:	f000 fe6b 	bl	28c0 <memcpy>
    1bea:	f1ba 0f08 	cmp.w	sl, #8
    1bee:	d118      	bne.n	1c22 <unwind_phase2_forced+0xba>
    1bf0:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1bf2:	4628      	mov	r0, r5
    1bf4:	f7ff ff14 	bl	1a20 <get_eit_entry>
    1bf8:	4606      	mov	r6, r0
    1bfa:	2709      	movs	r7, #9
    1bfc:	2e00      	cmp	r6, #0
    1bfe:	d0d6      	beq.n	1bae <unwind_phase2_forced+0x46>
    1c00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1c02:	f047 0110 	orr.w	r1, r7, #16
    1c06:	e9cd 4900 	strd	r4, r9, [sp]
    1c0a:	462a      	mov	r2, r5
    1c0c:	6463      	str	r3, [r4, #68]	; 0x44
    1c0e:	2001      	movs	r0, #1
    1c10:	462b      	mov	r3, r5
    1c12:	47c0      	blx	r8
    1c14:	b100      	cbz	r0, 1c18 <unwind_phase2_forced+0xb0>
    1c16:	2609      	movs	r6, #9
    1c18:	4630      	mov	r0, r6
    1c1a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    1c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1c22:	f1ba 0f07 	cmp.w	sl, #7
    1c26:	d1f6      	bne.n	1c16 <unwind_phase2_forced+0xae>
    1c28:	4630      	mov	r0, r6
    1c2a:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1c2c:	f7ff ff7c 	bl	1b28 <_Unwind_DebugHook>
    1c30:	a803      	add	r0, sp, #12
    1c32:	f000 fb95 	bl	2360 <__restore_core_regs>
    1c36:	bf00      	nop

00001c38 <_Unwind_GetCFA>:
    1c38:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1c3a:	4770      	bx	lr

00001c3c <__gnu_Unwind_RaiseException>:
    1c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c3e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    1c40:	640b      	str	r3, [r1, #64]	; 0x40
    1c42:	1d0e      	adds	r6, r1, #4
    1c44:	460f      	mov	r7, r1
    1c46:	4604      	mov	r4, r0
    1c48:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1c4a:	b0f9      	sub	sp, #484	; 0x1e4
    1c4c:	ad01      	add	r5, sp, #4
    1c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1c50:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1c52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1c54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1c58:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    1c5c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    1c60:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    1c64:	9600      	str	r6, [sp, #0]
    1c66:	e006      	b.n	1c76 <__gnu_Unwind_RaiseException+0x3a>
    1c68:	6923      	ldr	r3, [r4, #16]
    1c6a:	466a      	mov	r2, sp
    1c6c:	4621      	mov	r1, r4
    1c6e:	4798      	blx	r3
    1c70:	2808      	cmp	r0, #8
    1c72:	4605      	mov	r5, r0
    1c74:	d108      	bne.n	1c88 <__gnu_Unwind_RaiseException+0x4c>
    1c76:	9910      	ldr	r1, [sp, #64]	; 0x40
    1c78:	4620      	mov	r0, r4
    1c7a:	f7ff fed1 	bl	1a20 <get_eit_entry>
    1c7e:	2800      	cmp	r0, #0
    1c80:	d0f2      	beq.n	1c68 <__gnu_Unwind_RaiseException+0x2c>
    1c82:	2009      	movs	r0, #9
    1c84:	b079      	add	sp, #484	; 0x1e4
    1c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c88:	4668      	mov	r0, sp
    1c8a:	f7ff ff19 	bl	1ac0 <restore_non_core_regs>
    1c8e:	2d06      	cmp	r5, #6
    1c90:	d1f7      	bne.n	1c82 <__gnu_Unwind_RaiseException+0x46>
    1c92:	4639      	mov	r1, r7
    1c94:	4620      	mov	r0, r4
    1c96:	f7ff ff49 	bl	1b2c <unwind_phase2>
    1c9a:	bf00      	nop

00001c9c <__gnu_Unwind_ForcedUnwind>:
    1c9c:	b430      	push	{r4, r5}
    1c9e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    1ca0:	60c1      	str	r1, [r0, #12]
    1ca2:	6182      	str	r2, [r0, #24]
    1ca4:	4619      	mov	r1, r3
    1ca6:	641d      	str	r5, [r3, #64]	; 0x40
    1ca8:	2200      	movs	r2, #0
    1caa:	bc30      	pop	{r4, r5}
    1cac:	e75c      	b.n	1b68 <unwind_phase2_forced>
    1cae:	bf00      	nop

00001cb0 <__gnu_Unwind_Resume>:
    1cb0:	b570      	push	{r4, r5, r6, lr}
    1cb2:	68c6      	ldr	r6, [r0, #12]
    1cb4:	6943      	ldr	r3, [r0, #20]
    1cb6:	640b      	str	r3, [r1, #64]	; 0x40
    1cb8:	b9ae      	cbnz	r6, 1ce6 <__gnu_Unwind_Resume+0x36>
    1cba:	6903      	ldr	r3, [r0, #16]
    1cbc:	460a      	mov	r2, r1
    1cbe:	4604      	mov	r4, r0
    1cc0:	460d      	mov	r5, r1
    1cc2:	4601      	mov	r1, r0
    1cc4:	2002      	movs	r0, #2
    1cc6:	4798      	blx	r3
    1cc8:	2807      	cmp	r0, #7
    1cca:	d005      	beq.n	1cd8 <__gnu_Unwind_Resume+0x28>
    1ccc:	2808      	cmp	r0, #8
    1cce:	d10f      	bne.n	1cf0 <__gnu_Unwind_Resume+0x40>
    1cd0:	4629      	mov	r1, r5
    1cd2:	4620      	mov	r0, r4
    1cd4:	f7ff ff2a 	bl	1b2c <unwind_phase2>
    1cd8:	4630      	mov	r0, r6
    1cda:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1cdc:	f7ff ff24 	bl	1b28 <_Unwind_DebugHook>
    1ce0:	1d28      	adds	r0, r5, #4
    1ce2:	f000 fb3d 	bl	2360 <__restore_core_regs>
    1ce6:	2201      	movs	r2, #1
    1ce8:	f7ff ff3e 	bl	1b68 <unwind_phase2_forced>
    1cec:	f000 fdc2 	bl	2874 <abort>
    1cf0:	f000 fdc0 	bl	2874 <abort>

00001cf4 <__gnu_Unwind_Resume_or_Rethrow>:
    1cf4:	68c2      	ldr	r2, [r0, #12]
    1cf6:	b11a      	cbz	r2, 1d00 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    1cf8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    1cfa:	640a      	str	r2, [r1, #64]	; 0x40
    1cfc:	2200      	movs	r2, #0
    1cfe:	e733      	b.n	1b68 <unwind_phase2_forced>
    1d00:	e79c      	b.n	1c3c <__gnu_Unwind_RaiseException>
    1d02:	bf00      	nop

00001d04 <_Unwind_Complete>:
    1d04:	4770      	bx	lr
    1d06:	bf00      	nop

00001d08 <_Unwind_DeleteException>:
    1d08:	6883      	ldr	r3, [r0, #8]
    1d0a:	b113      	cbz	r3, 1d12 <_Unwind_DeleteException+0xa>
    1d0c:	4601      	mov	r1, r0
    1d0e:	2001      	movs	r0, #1
    1d10:	4718      	bx	r3
    1d12:	4770      	bx	lr

00001d14 <_Unwind_VRS_Get>:
    1d14:	2904      	cmp	r1, #4
    1d16:	d810      	bhi.n	1d3a <_Unwind_VRS_Get+0x26>
    1d18:	e8df f001 	tbb	[pc, r1]
    1d1c:	030f0305 	.word	0x030f0305
    1d20:	03          	.byte	0x03
    1d21:	00          	.byte	0x00
    1d22:	2001      	movs	r0, #1
    1d24:	4770      	bx	lr
    1d26:	b943      	cbnz	r3, 1d3a <_Unwind_VRS_Get+0x26>
    1d28:	2a0f      	cmp	r2, #15
    1d2a:	d806      	bhi.n	1d3a <_Unwind_VRS_Get+0x26>
    1d2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1d30:	4618      	mov	r0, r3
    1d32:	6853      	ldr	r3, [r2, #4]
    1d34:	9a00      	ldr	r2, [sp, #0]
    1d36:	6013      	str	r3, [r2, #0]
    1d38:	4770      	bx	lr
    1d3a:	2002      	movs	r0, #2
    1d3c:	4770      	bx	lr
    1d3e:	bf00      	nop

00001d40 <_Unwind_GetGR>:
    1d40:	b510      	push	{r4, lr}
    1d42:	b084      	sub	sp, #16
    1d44:	2300      	movs	r3, #0
    1d46:	ac03      	add	r4, sp, #12
    1d48:	460a      	mov	r2, r1
    1d4a:	9400      	str	r4, [sp, #0]
    1d4c:	4619      	mov	r1, r3
    1d4e:	f7ff ffe1 	bl	1d14 <_Unwind_VRS_Get>
    1d52:	9803      	ldr	r0, [sp, #12]
    1d54:	b004      	add	sp, #16
    1d56:	bd10      	pop	{r4, pc}

00001d58 <_Unwind_VRS_Set>:
    1d58:	2904      	cmp	r1, #4
    1d5a:	d810      	bhi.n	1d7e <_Unwind_VRS_Set+0x26>
    1d5c:	e8df f001 	tbb	[pc, r1]
    1d60:	030f0305 	.word	0x030f0305
    1d64:	03          	.byte	0x03
    1d65:	00          	.byte	0x00
    1d66:	2001      	movs	r0, #1
    1d68:	4770      	bx	lr
    1d6a:	b943      	cbnz	r3, 1d7e <_Unwind_VRS_Set+0x26>
    1d6c:	2a0f      	cmp	r2, #15
    1d6e:	d806      	bhi.n	1d7e <_Unwind_VRS_Set+0x26>
    1d70:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    1d74:	9a00      	ldr	r2, [sp, #0]
    1d76:	6812      	ldr	r2, [r2, #0]
    1d78:	6042      	str	r2, [r0, #4]
    1d7a:	4618      	mov	r0, r3
    1d7c:	4770      	bx	lr
    1d7e:	2002      	movs	r0, #2
    1d80:	4770      	bx	lr
    1d82:	bf00      	nop

00001d84 <_Unwind_SetGR>:
    1d84:	b510      	push	{r4, lr}
    1d86:	b084      	sub	sp, #16
    1d88:	2300      	movs	r3, #0
    1d8a:	ac03      	add	r4, sp, #12
    1d8c:	9203      	str	r2, [sp, #12]
    1d8e:	9400      	str	r4, [sp, #0]
    1d90:	460a      	mov	r2, r1
    1d92:	4619      	mov	r1, r3
    1d94:	f7ff ffe0 	bl	1d58 <_Unwind_VRS_Set>
    1d98:	b004      	add	sp, #16
    1d9a:	bd10      	pop	{r4, pc}

00001d9c <__gnu_Unwind_Backtrace>:
    1d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d9e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    1da0:	6413      	str	r3, [r2, #64]	; 0x40
    1da2:	1d15      	adds	r5, r2, #4
    1da4:	4607      	mov	r7, r0
    1da6:	460e      	mov	r6, r1
    1da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1daa:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    1dae:	ac17      	add	r4, sp, #92	; 0x5c
    1db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1db2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1db4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1dba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1dbe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1dc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1dc6:	9516      	str	r5, [sp, #88]	; 0x58
    1dc8:	e010      	b.n	1dec <__gnu_Unwind_Backtrace+0x50>
    1dca:	a816      	add	r0, sp, #88	; 0x58
    1dcc:	f7ff ffda 	bl	1d84 <_Unwind_SetGR>
    1dd0:	4631      	mov	r1, r6
    1dd2:	a816      	add	r0, sp, #88	; 0x58
    1dd4:	47b8      	blx	r7
    1dd6:	aa16      	add	r2, sp, #88	; 0x58
    1dd8:	4669      	mov	r1, sp
    1dda:	b978      	cbnz	r0, 1dfc <__gnu_Unwind_Backtrace+0x60>
    1ddc:	9b04      	ldr	r3, [sp, #16]
    1dde:	2008      	movs	r0, #8
    1de0:	4798      	blx	r3
    1de2:	2805      	cmp	r0, #5
    1de4:	4604      	mov	r4, r0
    1de6:	d00a      	beq.n	1dfe <__gnu_Unwind_Backtrace+0x62>
    1de8:	2809      	cmp	r0, #9
    1dea:	d007      	beq.n	1dfc <__gnu_Unwind_Backtrace+0x60>
    1dec:	9926      	ldr	r1, [sp, #152]	; 0x98
    1dee:	4668      	mov	r0, sp
    1df0:	f7ff fe16 	bl	1a20 <get_eit_entry>
    1df4:	466a      	mov	r2, sp
    1df6:	210c      	movs	r1, #12
    1df8:	2800      	cmp	r0, #0
    1dfa:	d0e6      	beq.n	1dca <__gnu_Unwind_Backtrace+0x2e>
    1dfc:	2409      	movs	r4, #9
    1dfe:	a816      	add	r0, sp, #88	; 0x58
    1e00:	f7ff fe5e 	bl	1ac0 <restore_non_core_regs>
    1e04:	4620      	mov	r0, r4
    1e06:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    1e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e0c <__gnu_unwind_pr_common>:
    1e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e10:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
    1e12:	b089      	sub	sp, #36	; 0x24
    1e14:	460d      	mov	r5, r1
    1e16:	f854 1b04 	ldr.w	r1, [r4], #4
    1e1a:	9406      	str	r4, [sp, #24]
    1e1c:	4617      	mov	r7, r2
    1e1e:	f000 0803 	and.w	r8, r0, #3
    1e22:	461e      	mov	r6, r3
    1e24:	2b00      	cmp	r3, #0
    1e26:	d061      	beq.n	1eec <__gnu_unwind_pr_common+0xe0>
    1e28:	0c0b      	lsrs	r3, r1, #16
    1e2a:	b2da      	uxtb	r2, r3
    1e2c:	0409      	lsls	r1, r1, #16
    1e2e:	f88d 301d 	strb.w	r3, [sp, #29]
    1e32:	2302      	movs	r3, #2
    1e34:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    1e38:	9105      	str	r1, [sp, #20]
    1e3a:	f88d 301c 	strb.w	r3, [sp, #28]
    1e3e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    1e40:	f1b8 0f02 	cmp.w	r8, #2
    1e44:	bf08      	it	eq
    1e46:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    1e48:	f013 0301 	ands.w	r3, r3, #1
    1e4c:	d178      	bne.n	1f40 <__gnu_unwind_pr_common+0x134>
    1e4e:	9301      	str	r3, [sp, #4]
    1e50:	f000 0308 	and.w	r3, r0, #8
    1e54:	9302      	str	r3, [sp, #8]
    1e56:	f8d4 a000 	ldr.w	sl, [r4]
    1e5a:	f1ba 0f00 	cmp.w	sl, #0
    1e5e:	f000 811b 	beq.w	2098 <__gnu_unwind_pr_common+0x28c>
    1e62:	2e02      	cmp	r6, #2
    1e64:	d03e      	beq.n	1ee4 <__gnu_unwind_pr_common+0xd8>
    1e66:	f8b4 a000 	ldrh.w	sl, [r4]
    1e6a:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    1e6e:	3404      	adds	r4, #4
    1e70:	6caa      	ldr	r2, [r5, #72]	; 0x48
    1e72:	f029 0b01 	bic.w	fp, r9, #1
    1e76:	210f      	movs	r1, #15
    1e78:	4638      	mov	r0, r7
    1e7a:	4493      	add	fp, r2
    1e7c:	f7ff ff60 	bl	1d40 <_Unwind_GetGR>
    1e80:	4583      	cmp	fp, r0
    1e82:	d82d      	bhi.n	1ee0 <__gnu_unwind_pr_common+0xd4>
    1e84:	f02a 0201 	bic.w	r2, sl, #1
    1e88:	445a      	add	r2, fp
    1e8a:	4282      	cmp	r2, r0
    1e8c:	bf94      	ite	ls
    1e8e:	2000      	movls	r0, #0
    1e90:	2001      	movhi	r0, #1
    1e92:	ea4f 0349 	mov.w	r3, r9, lsl #1
    1e96:	f003 0302 	and.w	r3, r3, #2
    1e9a:	f00a 0a01 	and.w	sl, sl, #1
    1e9e:	ea43 030a 	orr.w	r3, r3, sl
    1ea2:	2b01      	cmp	r3, #1
    1ea4:	d030      	beq.n	1f08 <__gnu_unwind_pr_common+0xfc>
    1ea6:	b33b      	cbz	r3, 1ef8 <__gnu_unwind_pr_common+0xec>
    1ea8:	2b02      	cmp	r3, #2
    1eaa:	d115      	bne.n	1ed8 <__gnu_unwind_pr_common+0xcc>
    1eac:	6823      	ldr	r3, [r4, #0]
    1eae:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
    1eb2:	f1b8 0f00 	cmp.w	r8, #0
    1eb6:	d14d      	bne.n	1f54 <__gnu_unwind_pr_common+0x148>
    1eb8:	b130      	cbz	r0, 1ec8 <__gnu_unwind_pr_common+0xbc>
    1eba:	9a02      	ldr	r2, [sp, #8]
    1ebc:	2a00      	cmp	r2, #0
    1ebe:	d06d      	beq.n	1f9c <__gnu_unwind_pr_common+0x190>
    1ec0:	f1bb 0f00 	cmp.w	fp, #0
    1ec4:	f000 80a0 	beq.w	2008 <__gnu_unwind_pr_common+0x1fc>
    1ec8:	2b00      	cmp	r3, #0
    1eca:	da00      	bge.n	1ece <__gnu_unwind_pr_common+0xc2>
    1ecc:	3404      	adds	r4, #4
    1ece:	f10b 0b01 	add.w	fp, fp, #1
    1ed2:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    1ed6:	e7be      	b.n	1e56 <__gnu_unwind_pr_common+0x4a>
    1ed8:	2009      	movs	r0, #9
    1eda:	b009      	add	sp, #36	; 0x24
    1edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ee0:	2000      	movs	r0, #0
    1ee2:	e7d6      	b.n	1e92 <__gnu_unwind_pr_common+0x86>
    1ee4:	f8d4 9004 	ldr.w	r9, [r4, #4]
    1ee8:	3408      	adds	r4, #8
    1eea:	e7c1      	b.n	1e70 <__gnu_unwind_pr_common+0x64>
    1eec:	0209      	lsls	r1, r1, #8
    1eee:	2303      	movs	r3, #3
    1ef0:	9105      	str	r1, [sp, #20]
    1ef2:	f8ad 301c 	strh.w	r3, [sp, #28]
    1ef6:	e7a2      	b.n	1e3e <__gnu_unwind_pr_common+0x32>
    1ef8:	f1b8 0f00 	cmp.w	r8, #0
    1efc:	d002      	beq.n	1f04 <__gnu_unwind_pr_common+0xf8>
    1efe:	2800      	cmp	r0, #0
    1f00:	f040 809d 	bne.w	203e <__gnu_unwind_pr_common+0x232>
    1f04:	3404      	adds	r4, #4
    1f06:	e7a6      	b.n	1e56 <__gnu_unwind_pr_common+0x4a>
    1f08:	f1b8 0f00 	cmp.w	r8, #0
    1f0c:	d12c      	bne.n	1f68 <__gnu_unwind_pr_common+0x15c>
    1f0e:	b1a8      	cbz	r0, 1f3c <__gnu_unwind_pr_common+0x130>
    1f10:	e9d4 2300 	ldrd	r2, r3, [r4]
    1f14:	1c99      	adds	r1, r3, #2
    1f16:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    1f1a:	d0dd      	beq.n	1ed8 <__gnu_unwind_pr_common+0xcc>
    1f1c:	f105 0158 	add.w	r1, r5, #88	; 0x58
    1f20:	3301      	adds	r3, #1
    1f22:	9104      	str	r1, [sp, #16]
    1f24:	f000 809e 	beq.w	2064 <__gnu_unwind_pr_common+0x258>
    1f28:	1d20      	adds	r0, r4, #4
    1f2a:	f7ff fdf5 	bl	1b18 <_Unwind_decode_typeinfo_ptr.isra.0>
    1f2e:	ab04      	add	r3, sp, #16
    1f30:	4601      	mov	r1, r0
    1f32:	4628      	mov	r0, r5
    1f34:	f3af 8000 	nop.w
    1f38:	2800      	cmp	r0, #0
    1f3a:	d16f      	bne.n	201c <__gnu_unwind_pr_common+0x210>
    1f3c:	3408      	adds	r4, #8
    1f3e:	e78a      	b.n	1e56 <__gnu_unwind_pr_common+0x4a>
    1f40:	4638      	mov	r0, r7
    1f42:	a905      	add	r1, sp, #20
    1f44:	f000 fb0e 	bl	2564 <__gnu_unwind_execute>
    1f48:	2800      	cmp	r0, #0
    1f4a:	d1c5      	bne.n	1ed8 <__gnu_unwind_pr_common+0xcc>
    1f4c:	2008      	movs	r0, #8
    1f4e:	b009      	add	sp, #36	; 0x24
    1f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f54:	210d      	movs	r1, #13
    1f56:	4638      	mov	r0, r7
    1f58:	f8d5 9020 	ldr.w	r9, [r5, #32]
    1f5c:	f7ff fef0 	bl	1d40 <_Unwind_GetGR>
    1f60:	4581      	cmp	r9, r0
    1f62:	d040      	beq.n	1fe6 <__gnu_unwind_pr_common+0x1da>
    1f64:	6823      	ldr	r3, [r4, #0]
    1f66:	e7af      	b.n	1ec8 <__gnu_unwind_pr_common+0xbc>
    1f68:	210d      	movs	r1, #13
    1f6a:	4638      	mov	r0, r7
    1f6c:	f8d5 9020 	ldr.w	r9, [r5, #32]
    1f70:	f7ff fee6 	bl	1d40 <_Unwind_GetGR>
    1f74:	4581      	cmp	r9, r0
    1f76:	d1e1      	bne.n	1f3c <__gnu_unwind_pr_common+0x130>
    1f78:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f7a:	429c      	cmp	r4, r3
    1f7c:	d1de      	bne.n	1f3c <__gnu_unwind_pr_common+0x130>
    1f7e:	4620      	mov	r0, r4
    1f80:	f7ff fcfe 	bl	1980 <selfrel_offset31>
    1f84:	210f      	movs	r1, #15
    1f86:	4602      	mov	r2, r0
    1f88:	4638      	mov	r0, r7
    1f8a:	f7ff fefb 	bl	1d84 <_Unwind_SetGR>
    1f8e:	4638      	mov	r0, r7
    1f90:	462a      	mov	r2, r5
    1f92:	2100      	movs	r1, #0
    1f94:	f7ff fef6 	bl	1d84 <_Unwind_SetGR>
    1f98:	2007      	movs	r0, #7
    1f9a:	e79e      	b.n	1eda <__gnu_unwind_pr_common+0xce>
    1f9c:	f1bb 0f00 	cmp.w	fp, #0
    1fa0:	d032      	beq.n	2008 <__gnu_unwind_pr_common+0x1fc>
    1fa2:	f105 0358 	add.w	r3, r5, #88	; 0x58
    1fa6:	f8cd 800c 	str.w	r8, [sp, #12]
    1faa:	f104 0904 	add.w	r9, r4, #4
    1fae:	46b0      	mov	r8, r6
    1fb0:	f8dd a008 	ldr.w	sl, [sp, #8]
    1fb4:	461e      	mov	r6, r3
    1fb6:	e001      	b.n	1fbc <__gnu_unwind_pr_common+0x1b0>
    1fb8:	45da      	cmp	sl, fp
    1fba:	d025      	beq.n	2008 <__gnu_unwind_pr_common+0x1fc>
    1fbc:	4648      	mov	r0, r9
    1fbe:	9604      	str	r6, [sp, #16]
    1fc0:	f7ff fdaa 	bl	1b18 <_Unwind_decode_typeinfo_ptr.isra.0>
    1fc4:	ab04      	add	r3, sp, #16
    1fc6:	4601      	mov	r1, r0
    1fc8:	2200      	movs	r2, #0
    1fca:	4628      	mov	r0, r5
    1fcc:	f3af 8000 	nop.w
    1fd0:	f10a 0a01 	add.w	sl, sl, #1
    1fd4:	f109 0904 	add.w	r9, r9, #4
    1fd8:	2800      	cmp	r0, #0
    1fda:	d0ed      	beq.n	1fb8 <__gnu_unwind_pr_common+0x1ac>
    1fdc:	4646      	mov	r6, r8
    1fde:	6823      	ldr	r3, [r4, #0]
    1fe0:	f8dd 800c 	ldr.w	r8, [sp, #12]
    1fe4:	e770      	b.n	1ec8 <__gnu_unwind_pr_common+0xbc>
    1fe6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1fe8:	429c      	cmp	r4, r3
    1fea:	d1bb      	bne.n	1f64 <__gnu_unwind_pr_common+0x158>
    1fec:	2204      	movs	r2, #4
    1fee:	f04f 0900 	mov.w	r9, #0
    1ff2:	18a3      	adds	r3, r4, r2
    1ff4:	e9c5 b90a 	strd	fp, r9, [r5, #40]	; 0x28
    1ff8:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    1ffc:	6823      	ldr	r3, [r4, #0]
    1ffe:	454b      	cmp	r3, r9
    2000:	db38      	blt.n	2074 <__gnu_unwind_pr_common+0x268>
    2002:	2301      	movs	r3, #1
    2004:	9301      	str	r3, [sp, #4]
    2006:	e762      	b.n	1ece <__gnu_unwind_pr_common+0xc2>
    2008:	4638      	mov	r0, r7
    200a:	210d      	movs	r1, #13
    200c:	f7ff fe98 	bl	1d40 <_Unwind_GetGR>
    2010:	9b04      	ldr	r3, [sp, #16]
    2012:	6228      	str	r0, [r5, #32]
    2014:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    2018:	2006      	movs	r0, #6
    201a:	e75e      	b.n	1eda <__gnu_unwind_pr_common+0xce>
    201c:	4681      	mov	r9, r0
    201e:	210d      	movs	r1, #13
    2020:	4638      	mov	r0, r7
    2022:	f7ff fe8d 	bl	1d40 <_Unwind_GetGR>
    2026:	f1b9 0f02 	cmp.w	r9, #2
    202a:	6228      	str	r0, [r5, #32]
    202c:	d11f      	bne.n	206e <__gnu_unwind_pr_common+0x262>
    202e:	462b      	mov	r3, r5
    2030:	9a04      	ldr	r2, [sp, #16]
    2032:	f843 2f2c 	str.w	r2, [r3, #44]!
    2036:	626b      	str	r3, [r5, #36]	; 0x24
    2038:	62ac      	str	r4, [r5, #40]	; 0x28
    203a:	2006      	movs	r0, #6
    203c:	e74d      	b.n	1eda <__gnu_unwind_pr_common+0xce>
    203e:	4620      	mov	r0, r4
    2040:	f7ff fc9e 	bl	1980 <selfrel_offset31>
    2044:	3404      	adds	r4, #4
    2046:	4606      	mov	r6, r0
    2048:	63ac      	str	r4, [r5, #56]	; 0x38
    204a:	4628      	mov	r0, r5
    204c:	f3af 8000 	nop.w
    2050:	2800      	cmp	r0, #0
    2052:	f43f af41 	beq.w	1ed8 <__gnu_unwind_pr_common+0xcc>
    2056:	4638      	mov	r0, r7
    2058:	4632      	mov	r2, r6
    205a:	210f      	movs	r1, #15
    205c:	f7ff fe92 	bl	1d84 <_Unwind_SetGR>
    2060:	2007      	movs	r0, #7
    2062:	e73a      	b.n	1eda <__gnu_unwind_pr_common+0xce>
    2064:	4638      	mov	r0, r7
    2066:	210d      	movs	r1, #13
    2068:	f7ff fe6a 	bl	1d40 <_Unwind_GetGR>
    206c:	6228      	str	r0, [r5, #32]
    206e:	9b04      	ldr	r3, [sp, #16]
    2070:	626b      	str	r3, [r5, #36]	; 0x24
    2072:	e7e1      	b.n	2038 <__gnu_unwind_pr_common+0x22c>
    2074:	f10b 0001 	add.w	r0, fp, #1
    2078:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    207c:	f7ff fc80 	bl	1980 <selfrel_offset31>
    2080:	210f      	movs	r1, #15
    2082:	4602      	mov	r2, r0
    2084:	4638      	mov	r0, r7
    2086:	f7ff fe7d 	bl	1d84 <_Unwind_SetGR>
    208a:	4638      	mov	r0, r7
    208c:	462a      	mov	r2, r5
    208e:	4649      	mov	r1, r9
    2090:	f7ff fe78 	bl	1d84 <_Unwind_SetGR>
    2094:	2007      	movs	r0, #7
    2096:	e720      	b.n	1eda <__gnu_unwind_pr_common+0xce>
    2098:	a905      	add	r1, sp, #20
    209a:	4638      	mov	r0, r7
    209c:	f000 fa62 	bl	2564 <__gnu_unwind_execute>
    20a0:	2800      	cmp	r0, #0
    20a2:	f47f af19 	bne.w	1ed8 <__gnu_unwind_pr_common+0xcc>
    20a6:	9b01      	ldr	r3, [sp, #4]
    20a8:	2b00      	cmp	r3, #0
    20aa:	f43f af4f 	beq.w	1f4c <__gnu_unwind_pr_common+0x140>
    20ae:	210f      	movs	r1, #15
    20b0:	4638      	mov	r0, r7
    20b2:	f7ff fe45 	bl	1d40 <_Unwind_GetGR>
    20b6:	210e      	movs	r1, #14
    20b8:	4602      	mov	r2, r0
    20ba:	4638      	mov	r0, r7
    20bc:	f7ff fe62 	bl	1d84 <_Unwind_SetGR>
    20c0:	4638      	mov	r0, r7
    20c2:	4a03      	ldr	r2, [pc, #12]	; (20d0 <__gnu_unwind_pr_common+0x2c4>)
    20c4:	210f      	movs	r1, #15
    20c6:	f7ff fe5d 	bl	1d84 <_Unwind_SetGR>
    20ca:	2007      	movs	r0, #7
    20cc:	e705      	b.n	1eda <__gnu_unwind_pr_common+0xce>
    20ce:	bf00      	nop
    20d0:	00000000 	.word	0x00000000

000020d4 <__aeabi_unwind_cpp_pr0>:
    20d4:	2300      	movs	r3, #0
    20d6:	e699      	b.n	1e0c <__gnu_unwind_pr_common>

000020d8 <__aeabi_unwind_cpp_pr1>:
    20d8:	2301      	movs	r3, #1
    20da:	e697      	b.n	1e0c <__gnu_unwind_pr_common>

000020dc <__aeabi_unwind_cpp_pr2>:
    20dc:	2302      	movs	r3, #2
    20de:	e695      	b.n	1e0c <__gnu_unwind_pr_common>

000020e0 <_Unwind_VRS_Pop>:
    20e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20e4:	4605      	mov	r5, r0
    20e6:	b0c4      	sub	sp, #272	; 0x110
    20e8:	2904      	cmp	r1, #4
    20ea:	f200 80b3 	bhi.w	2254 <_Unwind_VRS_Pop+0x174>
    20ee:	e8df f001 	tbb	[pc, r1]
    20f2:	5195      	.short	0x5195
    20f4:	2bb1      	.short	0x2bb1
    20f6:	03          	.byte	0x03
    20f7:	00          	.byte	0x00
    20f8:	2b00      	cmp	r3, #0
    20fa:	f040 80ab 	bne.w	2254 <_Unwind_VRS_Pop+0x174>
    20fe:	2a10      	cmp	r2, #16
    2100:	f200 80a8 	bhi.w	2254 <_Unwind_VRS_Pop+0x174>
    2104:	682b      	ldr	r3, [r5, #0]
    2106:	06dc      	lsls	r4, r3, #27
    2108:	f100 8100 	bmi.w	230c <_Unwind_VRS_Pop+0x22c>
    210c:	ac22      	add	r4, sp, #136	; 0x88
    210e:	4620      	mov	r0, r4
    2110:	9201      	str	r2, [sp, #4]
    2112:	f000 f997 	bl	2444 <__gnu_Unwind_Save_WMMXC>
    2116:	6bae      	ldr	r6, [r5, #56]	; 0x38
    2118:	9a01      	ldr	r2, [sp, #4]
    211a:	2300      	movs	r3, #0
    211c:	2701      	movs	r7, #1
    211e:	fa07 f103 	lsl.w	r1, r7, r3
    2122:	4211      	tst	r1, r2
    2124:	4630      	mov	r0, r6
    2126:	d004      	beq.n	2132 <_Unwind_VRS_Pop+0x52>
    2128:	f850 1b04 	ldr.w	r1, [r0], #4
    212c:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    2130:	4606      	mov	r6, r0
    2132:	3301      	adds	r3, #1
    2134:	2b04      	cmp	r3, #4
    2136:	d1f2      	bne.n	211e <_Unwind_VRS_Pop+0x3e>
    2138:	4620      	mov	r0, r4
    213a:	63ae      	str	r6, [r5, #56]	; 0x38
    213c:	f000 f978 	bl	2430 <__gnu_Unwind_Restore_WMMXC>
    2140:	2000      	movs	r0, #0
    2142:	b044      	add	sp, #272	; 0x110
    2144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2148:	2b03      	cmp	r3, #3
    214a:	f040 8083 	bne.w	2254 <_Unwind_VRS_Pop+0x174>
    214e:	0c16      	lsrs	r6, r2, #16
    2150:	b297      	uxth	r7, r2
    2152:	19f3      	adds	r3, r6, r7
    2154:	2b10      	cmp	r3, #16
    2156:	d87d      	bhi.n	2254 <_Unwind_VRS_Pop+0x174>
    2158:	682b      	ldr	r3, [r5, #0]
    215a:	071a      	lsls	r2, r3, #28
    215c:	f100 80e0 	bmi.w	2320 <_Unwind_VRS_Pop+0x240>
    2160:	ac22      	add	r4, sp, #136	; 0x88
    2162:	4620      	mov	r0, r4
    2164:	f000 f942 	bl	23ec <__gnu_Unwind_Save_WMMXD>
    2168:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
    216c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    216e:	b14f      	cbz	r7, 2184 <_Unwind_VRS_Pop+0xa4>
    2170:	4603      	mov	r3, r0
    2172:	00fa      	lsls	r2, r7, #3
    2174:	4410      	add	r0, r2
    2176:	1ace      	subs	r6, r1, r3
    2178:	599f      	ldr	r7, [r3, r6]
    217a:	f843 7b04 	str.w	r7, [r3], #4
    217e:	4283      	cmp	r3, r0
    2180:	d1fa      	bne.n	2178 <_Unwind_VRS_Pop+0x98>
    2182:	4411      	add	r1, r2
    2184:	4620      	mov	r0, r4
    2186:	63a9      	str	r1, [r5, #56]	; 0x38
    2188:	f000 f90e 	bl	23a8 <__gnu_Unwind_Restore_WMMXD>
    218c:	2000      	movs	r0, #0
    218e:	b044      	add	sp, #272	; 0x110
    2190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2194:	2b01      	cmp	r3, #1
    2196:	ea4f 4612 	mov.w	r6, r2, lsr #16
    219a:	fa1f f882 	uxth.w	r8, r2
    219e:	d055      	beq.n	224c <_Unwind_VRS_Pop+0x16c>
    21a0:	2b05      	cmp	r3, #5
    21a2:	d157      	bne.n	2254 <_Unwind_VRS_Pop+0x174>
    21a4:	eb06 0708 	add.w	r7, r6, r8
    21a8:	2f20      	cmp	r7, #32
    21aa:	d853      	bhi.n	2254 <_Unwind_VRS_Pop+0x174>
    21ac:	2e0f      	cmp	r6, #15
    21ae:	d955      	bls.n	225c <_Unwind_VRS_Pop+0x17c>
    21b0:	4647      	mov	r7, r8
    21b2:	f1b8 0f00 	cmp.w	r8, #0
    21b6:	d164      	bne.n	2282 <_Unwind_VRS_Pop+0x1a2>
    21b8:	4640      	mov	r0, r8
    21ba:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    21bc:	f1b8 0f00 	cmp.w	r8, #0
    21c0:	f000 80ba 	beq.w	2338 <_Unwind_VRS_Pop+0x258>
    21c4:	ac22      	add	r4, sp, #136	; 0x88
    21c6:	2700      	movs	r7, #0
    21c8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    21cc:	3c04      	subs	r4, #4
    21ce:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
    21d2:	f851 0b04 	ldr.w	r0, [r1], #4
    21d6:	f844 0f04 	str.w	r0, [r4, #4]!
    21da:	4291      	cmp	r1, r2
    21dc:	d1f9      	bne.n	21d2 <_Unwind_VRS_Pop+0xf2>
    21de:	b17f      	cbz	r7, 2200 <_Unwind_VRS_Pop+0x120>
    21e0:	ac02      	add	r4, sp, #8
    21e2:	2e10      	cmp	r6, #16
    21e4:	4630      	mov	r0, r6
    21e6:	bf38      	it	cc
    21e8:	2010      	movcc	r0, #16
    21ea:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    21ee:	3884      	subs	r0, #132	; 0x84
    21f0:	eb02 01c7 	add.w	r1, r2, r7, lsl #3
    21f4:	f852 4b04 	ldr.w	r4, [r2], #4
    21f8:	f840 4f04 	str.w	r4, [r0, #4]!
    21fc:	4291      	cmp	r1, r2
    21fe:	d1f9      	bne.n	21f4 <_Unwind_VRS_Pop+0x114>
    2200:	2b01      	cmp	r3, #1
    2202:	f000 8095 	beq.w	2330 <_Unwind_VRS_Pop+0x250>
    2206:	2e0f      	cmp	r6, #15
    2208:	63a9      	str	r1, [r5, #56]	; 0x38
    220a:	d96b      	bls.n	22e4 <_Unwind_VRS_Pop+0x204>
    220c:	b117      	cbz	r7, 2214 <_Unwind_VRS_Pop+0x134>
    220e:	a802      	add	r0, sp, #8
    2210:	f000 f8c2 	bl	2398 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    2214:	2000      	movs	r0, #0
    2216:	b044      	add	sp, #272	; 0x110
    2218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    221c:	b9d3      	cbnz	r3, 2254 <_Unwind_VRS_Pop+0x174>
    221e:	6bac      	ldr	r4, [r5, #56]	; 0x38
    2220:	b297      	uxth	r7, r2
    2222:	2601      	movs	r6, #1
    2224:	f105 0c04 	add.w	ip, r5, #4
    2228:	fa06 f103 	lsl.w	r1, r6, r3
    222c:	4239      	tst	r1, r7
    222e:	4620      	mov	r0, r4
    2230:	d004      	beq.n	223c <_Unwind_VRS_Pop+0x15c>
    2232:	f850 1b04 	ldr.w	r1, [r0], #4
    2236:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
    223a:	4604      	mov	r4, r0
    223c:	3301      	adds	r3, #1
    223e:	2b10      	cmp	r3, #16
    2240:	d1f2      	bne.n	2228 <_Unwind_VRS_Pop+0x148>
    2242:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    2246:	d1e5      	bne.n	2214 <_Unwind_VRS_Pop+0x134>
    2248:	63ac      	str	r4, [r5, #56]	; 0x38
    224a:	e004      	b.n	2256 <_Unwind_VRS_Pop+0x176>
    224c:	eb06 0208 	add.w	r2, r6, r8
    2250:	2a10      	cmp	r2, #16
    2252:	d928      	bls.n	22a6 <_Unwind_VRS_Pop+0x1c6>
    2254:	2002      	movs	r0, #2
    2256:	b044      	add	sp, #272	; 0x110
    2258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    225c:	2f10      	cmp	r7, #16
    225e:	d97c      	bls.n	235a <_Unwind_VRS_Pop+0x27a>
    2260:	3f10      	subs	r7, #16
    2262:	682a      	ldr	r2, [r5, #0]
    2264:	07d0      	lsls	r0, r2, #31
    2266:	d50a      	bpl.n	227e <_Unwind_VRS_Pop+0x19e>
    2268:	4628      	mov	r0, r5
    226a:	f022 0201 	bic.w	r2, r2, #1
    226e:	f042 0202 	orr.w	r2, r2, #2
    2272:	f840 2b48 	str.w	r2, [r0], #72
    2276:	9301      	str	r3, [sp, #4]
    2278:	f000 f88a 	bl	2390 <__gnu_Unwind_Save_VFP_D>
    227c:	9b01      	ldr	r3, [sp, #4]
    227e:	2f00      	cmp	r7, #0
    2280:	d05c      	beq.n	233c <_Unwind_VRS_Pop+0x25c>
    2282:	682a      	ldr	r2, [r5, #0]
    2284:	0751      	lsls	r1, r2, #29
    2286:	d437      	bmi.n	22f8 <_Unwind_VRS_Pop+0x218>
    2288:	2e0f      	cmp	r6, #15
    228a:	d92f      	bls.n	22ec <_Unwind_VRS_Pop+0x20c>
    228c:	ac02      	add	r4, sp, #8
    228e:	4620      	mov	r0, r4
    2290:	9301      	str	r3, [sp, #4]
    2292:	f000 f885 	bl	23a0 <__gnu_Unwind_Save_VFP_D_16_to_31>
    2296:	f1c6 0010 	rsb	r0, r6, #16
    229a:	2800      	cmp	r0, #0
    229c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    229e:	9b01      	ldr	r3, [sp, #4]
    22a0:	dd48      	ble.n	2334 <_Unwind_VRS_Pop+0x254>
    22a2:	ac22      	add	r4, sp, #136	; 0x88
    22a4:	e790      	b.n	21c8 <_Unwind_VRS_Pop+0xe8>
    22a6:	2e0f      	cmp	r6, #15
    22a8:	d8d4      	bhi.n	2254 <_Unwind_VRS_Pop+0x174>
    22aa:	682a      	ldr	r2, [r5, #0]
    22ac:	07d1      	lsls	r1, r2, #31
    22ae:	d508      	bpl.n	22c2 <_Unwind_VRS_Pop+0x1e2>
    22b0:	4628      	mov	r0, r5
    22b2:	f022 0203 	bic.w	r2, r2, #3
    22b6:	f840 2b48 	str.w	r2, [r0], #72
    22ba:	9301      	str	r3, [sp, #4]
    22bc:	f000 f860 	bl	2380 <__gnu_Unwind_Save_VFP>
    22c0:	9b01      	ldr	r3, [sp, #4]
    22c2:	9301      	str	r3, [sp, #4]
    22c4:	ac22      	add	r4, sp, #136	; 0x88
    22c6:	4620      	mov	r0, r4
    22c8:	f000 f85a 	bl	2380 <__gnu_Unwind_Save_VFP>
    22cc:	4640      	mov	r0, r8
    22ce:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    22d0:	9b01      	ldr	r3, [sp, #4]
    22d2:	2800      	cmp	r0, #0
    22d4:	f47f af77 	bne.w	21c6 <_Unwind_VRS_Pop+0xe6>
    22d8:	3104      	adds	r1, #4
    22da:	63a9      	str	r1, [r5, #56]	; 0x38
    22dc:	4620      	mov	r0, r4
    22de:	f000 f84b 	bl	2378 <__gnu_Unwind_Restore_VFP>
    22e2:	e797      	b.n	2214 <_Unwind_VRS_Pop+0x134>
    22e4:	a822      	add	r0, sp, #136	; 0x88
    22e6:	f000 f84f 	bl	2388 <__gnu_Unwind_Restore_VFP_D>
    22ea:	e78f      	b.n	220c <_Unwind_VRS_Pop+0x12c>
    22ec:	a822      	add	r0, sp, #136	; 0x88
    22ee:	9301      	str	r3, [sp, #4]
    22f0:	f000 f84e 	bl	2390 <__gnu_Unwind_Save_VFP_D>
    22f4:	9b01      	ldr	r3, [sp, #4]
    22f6:	e7c9      	b.n	228c <_Unwind_VRS_Pop+0x1ac>
    22f8:	4628      	mov	r0, r5
    22fa:	f022 0204 	bic.w	r2, r2, #4
    22fe:	f840 2bd0 	str.w	r2, [r0], #208
    2302:	9301      	str	r3, [sp, #4]
    2304:	f000 f84c 	bl	23a0 <__gnu_Unwind_Save_VFP_D_16_to_31>
    2308:	9b01      	ldr	r3, [sp, #4]
    230a:	e7bd      	b.n	2288 <_Unwind_VRS_Pop+0x1a8>
    230c:	f023 0310 	bic.w	r3, r3, #16
    2310:	602b      	str	r3, [r5, #0]
    2312:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    2316:	9201      	str	r2, [sp, #4]
    2318:	f000 f894 	bl	2444 <__gnu_Unwind_Save_WMMXC>
    231c:	9a01      	ldr	r2, [sp, #4]
    231e:	e6f5      	b.n	210c <_Unwind_VRS_Pop+0x2c>
    2320:	f023 0308 	bic.w	r3, r3, #8
    2324:	602b      	str	r3, [r5, #0]
    2326:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    232a:	f000 f85f 	bl	23ec <__gnu_Unwind_Save_WMMXD>
    232e:	e717      	b.n	2160 <_Unwind_VRS_Pop+0x80>
    2330:	ac22      	add	r4, sp, #136	; 0x88
    2332:	e7d1      	b.n	22d8 <_Unwind_VRS_Pop+0x1f8>
    2334:	460a      	mov	r2, r1
    2336:	e754      	b.n	21e2 <_Unwind_VRS_Pop+0x102>
    2338:	4647      	mov	r7, r8
    233a:	e764      	b.n	2206 <_Unwind_VRS_Pop+0x126>
    233c:	2e0f      	cmp	r6, #15
    233e:	f63f af3b 	bhi.w	21b8 <_Unwind_VRS_Pop+0xd8>
    2342:	ac22      	add	r4, sp, #136	; 0x88
    2344:	4620      	mov	r0, r4
    2346:	9301      	str	r3, [sp, #4]
    2348:	f000 f822 	bl	2390 <__gnu_Unwind_Save_VFP_D>
    234c:	4640      	mov	r0, r8
    234e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    2350:	9b01      	ldr	r3, [sp, #4]
    2352:	2800      	cmp	r0, #0
    2354:	f47f af37 	bne.w	21c6 <_Unwind_VRS_Pop+0xe6>
    2358:	e755      	b.n	2206 <_Unwind_VRS_Pop+0x126>
    235a:	2700      	movs	r7, #0
    235c:	e781      	b.n	2262 <_Unwind_VRS_Pop+0x182>
    235e:	bf00      	nop

00002360 <__restore_core_regs>:
    2360:	f100 0134 	add.w	r1, r0, #52	; 0x34
    2364:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    2368:	469c      	mov	ip, r3
    236a:	46a6      	mov	lr, r4
    236c:	f84c 5d04 	str.w	r5, [ip, #-4]!
    2370:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    2374:	46e5      	mov	sp, ip
    2376:	bd00      	pop	{pc}

00002378 <__gnu_Unwind_Restore_VFP>:
    2378:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    237c:	4770      	bx	lr
    237e:	bf00      	nop

00002380 <__gnu_Unwind_Save_VFP>:
    2380:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    2384:	4770      	bx	lr
    2386:	bf00      	nop

00002388 <__gnu_Unwind_Restore_VFP_D>:
    2388:	ec90 0b20 	vldmia	r0, {d0-d15}
    238c:	4770      	bx	lr
    238e:	bf00      	nop

00002390 <__gnu_Unwind_Save_VFP_D>:
    2390:	ec80 0b20 	vstmia	r0, {d0-d15}
    2394:	4770      	bx	lr
    2396:	bf00      	nop

00002398 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    2398:	ecd0 0b20 	vldmia	r0, {d16-d31}
    239c:	4770      	bx	lr
    239e:	bf00      	nop

000023a0 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    23a0:	ecc0 0b20 	vstmia	r0, {d16-d31}
    23a4:	4770      	bx	lr
    23a6:	bf00      	nop

000023a8 <__gnu_Unwind_Restore_WMMXD>:
    23a8:	ecf0 0102 	ldfe	f0, [r0], #8
    23ac:	ecf0 1102 	ldfe	f1, [r0], #8
    23b0:	ecf0 2102 	ldfe	f2, [r0], #8
    23b4:	ecf0 3102 	ldfe	f3, [r0], #8
    23b8:	ecf0 4102 	ldfe	f4, [r0], #8
    23bc:	ecf0 5102 	ldfe	f5, [r0], #8
    23c0:	ecf0 6102 	ldfe	f6, [r0], #8
    23c4:	ecf0 7102 	ldfe	f7, [r0], #8
    23c8:	ecf0 8102 	ldfp	f0, [r0], #8
    23cc:	ecf0 9102 	ldfp	f1, [r0], #8
    23d0:	ecf0 a102 	ldfp	f2, [r0], #8
    23d4:	ecf0 b102 	ldfp	f3, [r0], #8
    23d8:	ecf0 c102 	ldfp	f4, [r0], #8
    23dc:	ecf0 d102 	ldfp	f5, [r0], #8
    23e0:	ecf0 e102 	ldfp	f6, [r0], #8
    23e4:	ecf0 f102 	ldfp	f7, [r0], #8
    23e8:	4770      	bx	lr
    23ea:	bf00      	nop

000023ec <__gnu_Unwind_Save_WMMXD>:
    23ec:	ece0 0102 	stfe	f0, [r0], #8
    23f0:	ece0 1102 	stfe	f1, [r0], #8
    23f4:	ece0 2102 	stfe	f2, [r0], #8
    23f8:	ece0 3102 	stfe	f3, [r0], #8
    23fc:	ece0 4102 	stfe	f4, [r0], #8
    2400:	ece0 5102 	stfe	f5, [r0], #8
    2404:	ece0 6102 	stfe	f6, [r0], #8
    2408:	ece0 7102 	stfe	f7, [r0], #8
    240c:	ece0 8102 	stfp	f0, [r0], #8
    2410:	ece0 9102 	stfp	f1, [r0], #8
    2414:	ece0 a102 	stfp	f2, [r0], #8
    2418:	ece0 b102 	stfp	f3, [r0], #8
    241c:	ece0 c102 	stfp	f4, [r0], #8
    2420:	ece0 d102 	stfp	f5, [r0], #8
    2424:	ece0 e102 	stfp	f6, [r0], #8
    2428:	ece0 f102 	stfp	f7, [r0], #8
    242c:	4770      	bx	lr
    242e:	bf00      	nop

00002430 <__gnu_Unwind_Restore_WMMXC>:
    2430:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    2434:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    2438:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    243c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    2440:	4770      	bx	lr
    2442:	bf00      	nop

00002444 <__gnu_Unwind_Save_WMMXC>:
    2444:	fca0 8101 	stc2	1, cr8, [r0], #4
    2448:	fca0 9101 	stc2	1, cr9, [r0], #4
    244c:	fca0 a101 	stc2	1, cr10, [r0], #4
    2450:	fca0 b101 	stc2	1, cr11, [r0], #4
    2454:	4770      	bx	lr
    2456:	bf00      	nop

00002458 <_Unwind_RaiseException>:
    2458:	46ec      	mov	ip, sp
    245a:	b500      	push	{lr}
    245c:	e92d 5000 	stmdb	sp!, {ip, lr}
    2460:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2464:	f04f 0300 	mov.w	r3, #0
    2468:	e92d 000c 	stmdb	sp!, {r2, r3}
    246c:	a901      	add	r1, sp, #4
    246e:	f7ff fbe5 	bl	1c3c <__gnu_Unwind_RaiseException>
    2472:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    2476:	b012      	add	sp, #72	; 0x48
    2478:	4770      	bx	lr
    247a:	bf00      	nop

0000247c <_Unwind_Resume>:
    247c:	46ec      	mov	ip, sp
    247e:	b500      	push	{lr}
    2480:	e92d 5000 	stmdb	sp!, {ip, lr}
    2484:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2488:	f04f 0300 	mov.w	r3, #0
    248c:	e92d 000c 	stmdb	sp!, {r2, r3}
    2490:	a901      	add	r1, sp, #4
    2492:	f7ff fc0d 	bl	1cb0 <__gnu_Unwind_Resume>
    2496:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    249a:	b012      	add	sp, #72	; 0x48
    249c:	4770      	bx	lr
    249e:	bf00      	nop

000024a0 <_Unwind_Resume_or_Rethrow>:
    24a0:	46ec      	mov	ip, sp
    24a2:	b500      	push	{lr}
    24a4:	e92d 5000 	stmdb	sp!, {ip, lr}
    24a8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    24ac:	f04f 0300 	mov.w	r3, #0
    24b0:	e92d 000c 	stmdb	sp!, {r2, r3}
    24b4:	a901      	add	r1, sp, #4
    24b6:	f7ff fc1d 	bl	1cf4 <__gnu_Unwind_Resume_or_Rethrow>
    24ba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    24be:	b012      	add	sp, #72	; 0x48
    24c0:	4770      	bx	lr
    24c2:	bf00      	nop

000024c4 <_Unwind_ForcedUnwind>:
    24c4:	46ec      	mov	ip, sp
    24c6:	b500      	push	{lr}
    24c8:	e92d 5000 	stmdb	sp!, {ip, lr}
    24cc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    24d0:	f04f 0300 	mov.w	r3, #0
    24d4:	e92d 000c 	stmdb	sp!, {r2, r3}
    24d8:	ab01      	add	r3, sp, #4
    24da:	f7ff fbdf 	bl	1c9c <__gnu_Unwind_ForcedUnwind>
    24de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    24e2:	b012      	add	sp, #72	; 0x48
    24e4:	4770      	bx	lr
    24e6:	bf00      	nop

000024e8 <_Unwind_Backtrace>:
    24e8:	46ec      	mov	ip, sp
    24ea:	b500      	push	{lr}
    24ec:	e92d 5000 	stmdb	sp!, {ip, lr}
    24f0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    24f4:	f04f 0300 	mov.w	r3, #0
    24f8:	e92d 000c 	stmdb	sp!, {r2, r3}
    24fc:	aa01      	add	r2, sp, #4
    24fe:	f7ff fc4d 	bl	1d9c <__gnu_Unwind_Backtrace>
    2502:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    2506:	b012      	add	sp, #72	; 0x48
    2508:	4770      	bx	lr
    250a:	bf00      	nop

0000250c <next_unwind_byte>:
    250c:	7a02      	ldrb	r2, [r0, #8]
    250e:	b982      	cbnz	r2, 2532 <next_unwind_byte+0x26>
    2510:	7a43      	ldrb	r3, [r0, #9]
    2512:	b1ab      	cbz	r3, 2540 <next_unwind_byte+0x34>
    2514:	6842      	ldr	r2, [r0, #4]
    2516:	3b01      	subs	r3, #1
    2518:	b410      	push	{r4}
    251a:	7243      	strb	r3, [r0, #9]
    251c:	6813      	ldr	r3, [r2, #0]
    251e:	2103      	movs	r1, #3
    2520:	1d14      	adds	r4, r2, #4
    2522:	7201      	strb	r1, [r0, #8]
    2524:	021a      	lsls	r2, r3, #8
    2526:	6044      	str	r4, [r0, #4]
    2528:	6002      	str	r2, [r0, #0]
    252a:	f85d 4b04 	ldr.w	r4, [sp], #4
    252e:	0e18      	lsrs	r0, r3, #24
    2530:	4770      	bx	lr
    2532:	6803      	ldr	r3, [r0, #0]
    2534:	3a01      	subs	r2, #1
    2536:	7202      	strb	r2, [r0, #8]
    2538:	021a      	lsls	r2, r3, #8
    253a:	6002      	str	r2, [r0, #0]
    253c:	0e18      	lsrs	r0, r3, #24
    253e:	4770      	bx	lr
    2540:	20b0      	movs	r0, #176	; 0xb0
    2542:	4770      	bx	lr

00002544 <_Unwind_GetGR.constprop.0>:
    2544:	b500      	push	{lr}
    2546:	b085      	sub	sp, #20
    2548:	aa03      	add	r2, sp, #12
    254a:	2300      	movs	r3, #0
    254c:	9200      	str	r2, [sp, #0]
    254e:	4619      	mov	r1, r3
    2550:	220c      	movs	r2, #12
    2552:	f7ff fbdf 	bl	1d14 <_Unwind_VRS_Get>
    2556:	9803      	ldr	r0, [sp, #12]
    2558:	b005      	add	sp, #20
    255a:	f85d fb04 	ldr.w	pc, [sp], #4
    255e:	bf00      	nop

00002560 <unwind_UCB_from_context>:
    2560:	e7f0      	b.n	2544 <_Unwind_GetGR.constprop.0>
    2562:	bf00      	nop

00002564 <__gnu_unwind_execute>:
    2564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2568:	4605      	mov	r5, r0
    256a:	b085      	sub	sp, #20
    256c:	460e      	mov	r6, r1
    256e:	f04f 0800 	mov.w	r8, #0
    2572:	4630      	mov	r0, r6
    2574:	f7ff ffca 	bl	250c <next_unwind_byte>
    2578:	28b0      	cmp	r0, #176	; 0xb0
    257a:	4604      	mov	r4, r0
    257c:	f000 80b2 	beq.w	26e4 <__gnu_unwind_execute+0x180>
    2580:	0607      	lsls	r7, r0, #24
    2582:	d520      	bpl.n	25c6 <__gnu_unwind_execute+0x62>
    2584:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    2588:	2b80      	cmp	r3, #128	; 0x80
    258a:	d04d      	beq.n	2628 <__gnu_unwind_execute+0xc4>
    258c:	2b90      	cmp	r3, #144	; 0x90
    258e:	d036      	beq.n	25fe <__gnu_unwind_execute+0x9a>
    2590:	2ba0      	cmp	r3, #160	; 0xa0
    2592:	d060      	beq.n	2656 <__gnu_unwind_execute+0xf2>
    2594:	2bb0      	cmp	r3, #176	; 0xb0
    2596:	d074      	beq.n	2682 <__gnu_unwind_execute+0x11e>
    2598:	2bc0      	cmp	r3, #192	; 0xc0
    259a:	f000 808b 	beq.w	26b4 <__gnu_unwind_execute+0x150>
    259e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    25a2:	2bd0      	cmp	r3, #208	; 0xd0
    25a4:	d10b      	bne.n	25be <__gnu_unwind_execute+0x5a>
    25a6:	f000 0207 	and.w	r2, r0, #7
    25aa:	3201      	adds	r2, #1
    25ac:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    25b0:	2305      	movs	r3, #5
    25b2:	2101      	movs	r1, #1
    25b4:	4628      	mov	r0, r5
    25b6:	f7ff fd93 	bl	20e0 <_Unwind_VRS_Pop>
    25ba:	2800      	cmp	r0, #0
    25bc:	d0d9      	beq.n	2572 <__gnu_unwind_execute+0xe>
    25be:	2009      	movs	r0, #9
    25c0:	b005      	add	sp, #20
    25c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    25c6:	f10d 090c 	add.w	r9, sp, #12
    25ca:	2300      	movs	r3, #0
    25cc:	4619      	mov	r1, r3
    25ce:	0087      	lsls	r7, r0, #2
    25d0:	f8cd 9000 	str.w	r9, [sp]
    25d4:	220d      	movs	r2, #13
    25d6:	4628      	mov	r0, r5
    25d8:	f7ff fb9c 	bl	1d14 <_Unwind_VRS_Get>
    25dc:	b2ff      	uxtb	r7, r7
    25de:	9b03      	ldr	r3, [sp, #12]
    25e0:	f8cd 9000 	str.w	r9, [sp]
    25e4:	3704      	adds	r7, #4
    25e6:	0660      	lsls	r0, r4, #25
    25e8:	bf4c      	ite	mi
    25ea:	1bdf      	submi	r7, r3, r7
    25ec:	18ff      	addpl	r7, r7, r3
    25ee:	2300      	movs	r3, #0
    25f0:	4619      	mov	r1, r3
    25f2:	220d      	movs	r2, #13
    25f4:	4628      	mov	r0, r5
    25f6:	9703      	str	r7, [sp, #12]
    25f8:	f7ff fbae 	bl	1d58 <_Unwind_VRS_Set>
    25fc:	e7b9      	b.n	2572 <__gnu_unwind_execute+0xe>
    25fe:	f000 030d 	and.w	r3, r0, #13
    2602:	2b0d      	cmp	r3, #13
    2604:	d0db      	beq.n	25be <__gnu_unwind_execute+0x5a>
    2606:	af03      	add	r7, sp, #12
    2608:	2300      	movs	r3, #0
    260a:	f000 020f 	and.w	r2, r0, #15
    260e:	4619      	mov	r1, r3
    2610:	9700      	str	r7, [sp, #0]
    2612:	4628      	mov	r0, r5
    2614:	f7ff fb7e 	bl	1d14 <_Unwind_VRS_Get>
    2618:	2300      	movs	r3, #0
    261a:	9700      	str	r7, [sp, #0]
    261c:	4619      	mov	r1, r3
    261e:	220d      	movs	r2, #13
    2620:	4628      	mov	r0, r5
    2622:	f7ff fb99 	bl	1d58 <_Unwind_VRS_Set>
    2626:	e7a4      	b.n	2572 <__gnu_unwind_execute+0xe>
    2628:	4630      	mov	r0, r6
    262a:	f7ff ff6f 	bl	250c <next_unwind_byte>
    262e:	0224      	lsls	r4, r4, #8
    2630:	4304      	orrs	r4, r0
    2632:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    2636:	d0c2      	beq.n	25be <__gnu_unwind_execute+0x5a>
    2638:	0124      	lsls	r4, r4, #4
    263a:	2300      	movs	r3, #0
    263c:	b2a2      	uxth	r2, r4
    263e:	4619      	mov	r1, r3
    2640:	4628      	mov	r0, r5
    2642:	f7ff fd4d 	bl	20e0 <_Unwind_VRS_Pop>
    2646:	2800      	cmp	r0, #0
    2648:	d1b9      	bne.n	25be <__gnu_unwind_execute+0x5a>
    264a:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    264e:	bf18      	it	ne
    2650:	f04f 0801 	movne.w	r8, #1
    2654:	e78d      	b.n	2572 <__gnu_unwind_execute+0xe>
    2656:	43c2      	mvns	r2, r0
    2658:	f002 0307 	and.w	r3, r2, #7
    265c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    2660:	411a      	asrs	r2, r3
    2662:	0701      	lsls	r1, r0, #28
    2664:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    2668:	f04f 0300 	mov.w	r3, #0
    266c:	bf48      	it	mi
    266e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    2672:	4619      	mov	r1, r3
    2674:	4628      	mov	r0, r5
    2676:	f7ff fd33 	bl	20e0 <_Unwind_VRS_Pop>
    267a:	2800      	cmp	r0, #0
    267c:	f43f af79 	beq.w	2572 <__gnu_unwind_execute+0xe>
    2680:	e79d      	b.n	25be <__gnu_unwind_execute+0x5a>
    2682:	28b1      	cmp	r0, #177	; 0xb1
    2684:	d033      	beq.n	26ee <__gnu_unwind_execute+0x18a>
    2686:	28b2      	cmp	r0, #178	; 0xb2
    2688:	f000 80a0 	beq.w	27cc <__gnu_unwind_execute+0x268>
    268c:	28b3      	cmp	r0, #179	; 0xb3
    268e:	d041      	beq.n	2714 <__gnu_unwind_execute+0x1b0>
    2690:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    2694:	2bb4      	cmp	r3, #180	; 0xb4
    2696:	d092      	beq.n	25be <__gnu_unwind_execute+0x5a>
    2698:	f000 0207 	and.w	r2, r0, #7
    269c:	3201      	adds	r2, #1
    269e:	2301      	movs	r3, #1
    26a0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    26a4:	4619      	mov	r1, r3
    26a6:	4628      	mov	r0, r5
    26a8:	f7ff fd1a 	bl	20e0 <_Unwind_VRS_Pop>
    26ac:	2800      	cmp	r0, #0
    26ae:	f43f af60 	beq.w	2572 <__gnu_unwind_execute+0xe>
    26b2:	e784      	b.n	25be <__gnu_unwind_execute+0x5a>
    26b4:	28c6      	cmp	r0, #198	; 0xc6
    26b6:	d051      	beq.n	275c <__gnu_unwind_execute+0x1f8>
    26b8:	28c7      	cmp	r0, #199	; 0xc7
    26ba:	d05a      	beq.n	2772 <__gnu_unwind_execute+0x20e>
    26bc:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    26c0:	2bc0      	cmp	r3, #192	; 0xc0
    26c2:	d069      	beq.n	2798 <__gnu_unwind_execute+0x234>
    26c4:	28c8      	cmp	r0, #200	; 0xc8
    26c6:	d075      	beq.n	27b4 <__gnu_unwind_execute+0x250>
    26c8:	28c9      	cmp	r0, #201	; 0xc9
    26ca:	f47f af78 	bne.w	25be <__gnu_unwind_execute+0x5a>
    26ce:	4630      	mov	r0, r6
    26d0:	f7ff ff1c 	bl	250c <next_unwind_byte>
    26d4:	0302      	lsls	r2, r0, #12
    26d6:	f000 000f 	and.w	r0, r0, #15
    26da:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    26de:	3001      	adds	r0, #1
    26e0:	4302      	orrs	r2, r0
    26e2:	e765      	b.n	25b0 <__gnu_unwind_execute+0x4c>
    26e4:	f1b8 0f00 	cmp.w	r8, #0
    26e8:	d027      	beq.n	273a <__gnu_unwind_execute+0x1d6>
    26ea:	2000      	movs	r0, #0
    26ec:	e768      	b.n	25c0 <__gnu_unwind_execute+0x5c>
    26ee:	4630      	mov	r0, r6
    26f0:	f7ff ff0c 	bl	250c <next_unwind_byte>
    26f4:	2800      	cmp	r0, #0
    26f6:	f43f af62 	beq.w	25be <__gnu_unwind_execute+0x5a>
    26fa:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    26fe:	f47f af5e 	bne.w	25be <__gnu_unwind_execute+0x5a>
    2702:	4602      	mov	r2, r0
    2704:	4619      	mov	r1, r3
    2706:	4628      	mov	r0, r5
    2708:	f7ff fcea 	bl	20e0 <_Unwind_VRS_Pop>
    270c:	2800      	cmp	r0, #0
    270e:	f43f af30 	beq.w	2572 <__gnu_unwind_execute+0xe>
    2712:	e754      	b.n	25be <__gnu_unwind_execute+0x5a>
    2714:	4630      	mov	r0, r6
    2716:	f7ff fef9 	bl	250c <next_unwind_byte>
    271a:	0301      	lsls	r1, r0, #12
    271c:	f000 000f 	and.w	r0, r0, #15
    2720:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    2724:	1c42      	adds	r2, r0, #1
    2726:	2301      	movs	r3, #1
    2728:	430a      	orrs	r2, r1
    272a:	4628      	mov	r0, r5
    272c:	4619      	mov	r1, r3
    272e:	f7ff fcd7 	bl	20e0 <_Unwind_VRS_Pop>
    2732:	2800      	cmp	r0, #0
    2734:	f43f af1d 	beq.w	2572 <__gnu_unwind_execute+0xe>
    2738:	e741      	b.n	25be <__gnu_unwind_execute+0x5a>
    273a:	ac03      	add	r4, sp, #12
    273c:	4643      	mov	r3, r8
    273e:	220e      	movs	r2, #14
    2740:	4641      	mov	r1, r8
    2742:	9400      	str	r4, [sp, #0]
    2744:	4628      	mov	r0, r5
    2746:	f7ff fae5 	bl	1d14 <_Unwind_VRS_Get>
    274a:	9400      	str	r4, [sp, #0]
    274c:	4628      	mov	r0, r5
    274e:	4643      	mov	r3, r8
    2750:	220f      	movs	r2, #15
    2752:	4641      	mov	r1, r8
    2754:	f7ff fb00 	bl	1d58 <_Unwind_VRS_Set>
    2758:	4640      	mov	r0, r8
    275a:	e731      	b.n	25c0 <__gnu_unwind_execute+0x5c>
    275c:	4630      	mov	r0, r6
    275e:	f7ff fed5 	bl	250c <next_unwind_byte>
    2762:	0301      	lsls	r1, r0, #12
    2764:	f000 000f 	and.w	r0, r0, #15
    2768:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    276c:	1c42      	adds	r2, r0, #1
    276e:	2303      	movs	r3, #3
    2770:	e7da      	b.n	2728 <__gnu_unwind_execute+0x1c4>
    2772:	4630      	mov	r0, r6
    2774:	f7ff feca 	bl	250c <next_unwind_byte>
    2778:	2800      	cmp	r0, #0
    277a:	f43f af20 	beq.w	25be <__gnu_unwind_execute+0x5a>
    277e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    2782:	f47f af1c 	bne.w	25be <__gnu_unwind_execute+0x5a>
    2786:	4602      	mov	r2, r0
    2788:	2104      	movs	r1, #4
    278a:	4628      	mov	r0, r5
    278c:	f7ff fca8 	bl	20e0 <_Unwind_VRS_Pop>
    2790:	2800      	cmp	r0, #0
    2792:	f43f aeee 	beq.w	2572 <__gnu_unwind_execute+0xe>
    2796:	e712      	b.n	25be <__gnu_unwind_execute+0x5a>
    2798:	f000 020f 	and.w	r2, r0, #15
    279c:	3201      	adds	r2, #1
    279e:	2303      	movs	r3, #3
    27a0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    27a4:	4619      	mov	r1, r3
    27a6:	4628      	mov	r0, r5
    27a8:	f7ff fc9a 	bl	20e0 <_Unwind_VRS_Pop>
    27ac:	2800      	cmp	r0, #0
    27ae:	f43f aee0 	beq.w	2572 <__gnu_unwind_execute+0xe>
    27b2:	e704      	b.n	25be <__gnu_unwind_execute+0x5a>
    27b4:	4630      	mov	r0, r6
    27b6:	f7ff fea9 	bl	250c <next_unwind_byte>
    27ba:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    27be:	f000 030f 	and.w	r3, r0, #15
    27c2:	3210      	adds	r2, #16
    27c4:	3301      	adds	r3, #1
    27c6:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    27ca:	e6f1      	b.n	25b0 <__gnu_unwind_execute+0x4c>
    27cc:	2300      	movs	r3, #0
    27ce:	f10d 090c 	add.w	r9, sp, #12
    27d2:	220d      	movs	r2, #13
    27d4:	4619      	mov	r1, r3
    27d6:	f8cd 9000 	str.w	r9, [sp]
    27da:	4628      	mov	r0, r5
    27dc:	f7ff fa9a 	bl	1d14 <_Unwind_VRS_Get>
    27e0:	4630      	mov	r0, r6
    27e2:	f7ff fe93 	bl	250c <next_unwind_byte>
    27e6:	0602      	lsls	r2, r0, #24
    27e8:	f04f 0702 	mov.w	r7, #2
    27ec:	d50c      	bpl.n	2808 <__gnu_unwind_execute+0x2a4>
    27ee:	9b03      	ldr	r3, [sp, #12]
    27f0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    27f4:	40b8      	lsls	r0, r7
    27f6:	4403      	add	r3, r0
    27f8:	4630      	mov	r0, r6
    27fa:	9303      	str	r3, [sp, #12]
    27fc:	f7ff fe86 	bl	250c <next_unwind_byte>
    2800:	0603      	lsls	r3, r0, #24
    2802:	f107 0707 	add.w	r7, r7, #7
    2806:	d4f2      	bmi.n	27ee <__gnu_unwind_execute+0x28a>
    2808:	9b03      	ldr	r3, [sp, #12]
    280a:	f8cd 9000 	str.w	r9, [sp]
    280e:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    2812:	f503 7201 	add.w	r2, r3, #516	; 0x204
    2816:	40bc      	lsls	r4, r7
    2818:	2300      	movs	r3, #0
    281a:	4414      	add	r4, r2
    281c:	4619      	mov	r1, r3
    281e:	220d      	movs	r2, #13
    2820:	4628      	mov	r0, r5
    2822:	9403      	str	r4, [sp, #12]
    2824:	f7ff fa98 	bl	1d58 <_Unwind_VRS_Set>
    2828:	e6a3      	b.n	2572 <__gnu_unwind_execute+0xe>
    282a:	bf00      	nop

0000282c <__gnu_unwind_frame>:
    282c:	b510      	push	{r4, lr}
    282e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    2830:	b084      	sub	sp, #16
    2832:	685a      	ldr	r2, [r3, #4]
    2834:	2003      	movs	r0, #3
    2836:	f88d 000c 	strb.w	r0, [sp, #12]
    283a:	79dc      	ldrb	r4, [r3, #7]
    283c:	f88d 400d 	strb.w	r4, [sp, #13]
    2840:	0212      	lsls	r2, r2, #8
    2842:	3308      	adds	r3, #8
    2844:	4608      	mov	r0, r1
    2846:	a901      	add	r1, sp, #4
    2848:	9201      	str	r2, [sp, #4]
    284a:	9302      	str	r3, [sp, #8]
    284c:	f7ff fe8a 	bl	2564 <__gnu_unwind_execute>
    2850:	b004      	add	sp, #16
    2852:	bd10      	pop	{r4, pc}

00002854 <_Unwind_GetRegionStart>:
    2854:	b508      	push	{r3, lr}
    2856:	f7ff fe83 	bl	2560 <unwind_UCB_from_context>
    285a:	6c80      	ldr	r0, [r0, #72]	; 0x48
    285c:	bd08      	pop	{r3, pc}
    285e:	bf00      	nop

00002860 <_Unwind_GetLanguageSpecificData>:
    2860:	b508      	push	{r3, lr}
    2862:	f7ff fe7d 	bl	2560 <unwind_UCB_from_context>
    2866:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    2868:	79c3      	ldrb	r3, [r0, #7]
    286a:	3302      	adds	r3, #2
    286c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    2870:	bd08      	pop	{r3, pc}
    2872:	bf00      	nop

00002874 <abort>:
    2874:	b508      	push	{r3, lr}
    2876:	2006      	movs	r0, #6
    2878:	f000 f918 	bl	2aac <raise>
    287c:	2001      	movs	r0, #1
    287e:	f000 fb83 	bl	2f88 <_exit>
	...

00002884 <__cxa_atexit>:
    2884:	b510      	push	{r4, lr}
    2886:	4c05      	ldr	r4, [pc, #20]	; (289c <__cxa_atexit+0x18>)
    2888:	4613      	mov	r3, r2
    288a:	b12c      	cbz	r4, 2898 <__cxa_atexit+0x14>
    288c:	460a      	mov	r2, r1
    288e:	4601      	mov	r1, r0
    2890:	2002      	movs	r0, #2
    2892:	f3af 8000 	nop.w
    2896:	bd10      	pop	{r4, pc}
    2898:	4620      	mov	r0, r4
    289a:	e7fc      	b.n	2896 <__cxa_atexit+0x12>
    289c:	00000000 	.word	0x00000000

000028a0 <malloc>:
    28a0:	4b02      	ldr	r3, [pc, #8]	; (28ac <malloc+0xc>)
    28a2:	4601      	mov	r1, r0
    28a4:	6818      	ldr	r0, [r3, #0]
    28a6:	f000 b86f 	b.w	2988 <_malloc_r>
    28aa:	bf00      	nop
    28ac:	20000010 	.word	0x20000010

000028b0 <free>:
    28b0:	4b02      	ldr	r3, [pc, #8]	; (28bc <free+0xc>)
    28b2:	4601      	mov	r1, r0
    28b4:	6818      	ldr	r0, [r3, #0]
    28b6:	f000 b819 	b.w	28ec <_free_r>
    28ba:	bf00      	nop
    28bc:	20000010 	.word	0x20000010

000028c0 <memcpy>:
    28c0:	440a      	add	r2, r1
    28c2:	4291      	cmp	r1, r2
    28c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    28c8:	d100      	bne.n	28cc <memcpy+0xc>
    28ca:	4770      	bx	lr
    28cc:	b510      	push	{r4, lr}
    28ce:	f811 4b01 	ldrb.w	r4, [r1], #1
    28d2:	f803 4f01 	strb.w	r4, [r3, #1]!
    28d6:	4291      	cmp	r1, r2
    28d8:	d1f9      	bne.n	28ce <memcpy+0xe>
    28da:	bd10      	pop	{r4, pc}

000028dc <memset>:
    28dc:	4402      	add	r2, r0
    28de:	4603      	mov	r3, r0
    28e0:	4293      	cmp	r3, r2
    28e2:	d100      	bne.n	28e6 <memset+0xa>
    28e4:	4770      	bx	lr
    28e6:	f803 1b01 	strb.w	r1, [r3], #1
    28ea:	e7f9      	b.n	28e0 <memset+0x4>

000028ec <_free_r>:
    28ec:	b538      	push	{r3, r4, r5, lr}
    28ee:	4605      	mov	r5, r0
    28f0:	2900      	cmp	r1, #0
    28f2:	d045      	beq.n	2980 <_free_r+0x94>
    28f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
    28f8:	1f0c      	subs	r4, r1, #4
    28fa:	2b00      	cmp	r3, #0
    28fc:	bfb8      	it	lt
    28fe:	18e4      	addlt	r4, r4, r3
    2900:	f000 f8f0 	bl	2ae4 <__malloc_lock>
    2904:	4a1f      	ldr	r2, [pc, #124]	; (2984 <_free_r+0x98>)
    2906:	6813      	ldr	r3, [r2, #0]
    2908:	4610      	mov	r0, r2
    290a:	b933      	cbnz	r3, 291a <_free_r+0x2e>
    290c:	6063      	str	r3, [r4, #4]
    290e:	6014      	str	r4, [r2, #0]
    2910:	4628      	mov	r0, r5
    2912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2916:	f000 b8eb 	b.w	2af0 <__malloc_unlock>
    291a:	42a3      	cmp	r3, r4
    291c:	d90c      	bls.n	2938 <_free_r+0x4c>
    291e:	6821      	ldr	r1, [r4, #0]
    2920:	1862      	adds	r2, r4, r1
    2922:	4293      	cmp	r3, r2
    2924:	bf04      	itt	eq
    2926:	681a      	ldreq	r2, [r3, #0]
    2928:	685b      	ldreq	r3, [r3, #4]
    292a:	6063      	str	r3, [r4, #4]
    292c:	bf04      	itt	eq
    292e:	1852      	addeq	r2, r2, r1
    2930:	6022      	streq	r2, [r4, #0]
    2932:	6004      	str	r4, [r0, #0]
    2934:	e7ec      	b.n	2910 <_free_r+0x24>
    2936:	4613      	mov	r3, r2
    2938:	685a      	ldr	r2, [r3, #4]
    293a:	b10a      	cbz	r2, 2940 <_free_r+0x54>
    293c:	42a2      	cmp	r2, r4
    293e:	d9fa      	bls.n	2936 <_free_r+0x4a>
    2940:	6819      	ldr	r1, [r3, #0]
    2942:	1858      	adds	r0, r3, r1
    2944:	42a0      	cmp	r0, r4
    2946:	d10b      	bne.n	2960 <_free_r+0x74>
    2948:	6820      	ldr	r0, [r4, #0]
    294a:	4401      	add	r1, r0
    294c:	1858      	adds	r0, r3, r1
    294e:	4282      	cmp	r2, r0
    2950:	6019      	str	r1, [r3, #0]
    2952:	d1dd      	bne.n	2910 <_free_r+0x24>
    2954:	6810      	ldr	r0, [r2, #0]
    2956:	6852      	ldr	r2, [r2, #4]
    2958:	605a      	str	r2, [r3, #4]
    295a:	4401      	add	r1, r0
    295c:	6019      	str	r1, [r3, #0]
    295e:	e7d7      	b.n	2910 <_free_r+0x24>
    2960:	d902      	bls.n	2968 <_free_r+0x7c>
    2962:	230c      	movs	r3, #12
    2964:	602b      	str	r3, [r5, #0]
    2966:	e7d3      	b.n	2910 <_free_r+0x24>
    2968:	6820      	ldr	r0, [r4, #0]
    296a:	1821      	adds	r1, r4, r0
    296c:	428a      	cmp	r2, r1
    296e:	bf04      	itt	eq
    2970:	6811      	ldreq	r1, [r2, #0]
    2972:	6852      	ldreq	r2, [r2, #4]
    2974:	6062      	str	r2, [r4, #4]
    2976:	bf04      	itt	eq
    2978:	1809      	addeq	r1, r1, r0
    297a:	6021      	streq	r1, [r4, #0]
    297c:	605c      	str	r4, [r3, #4]
    297e:	e7c7      	b.n	2910 <_free_r+0x24>
    2980:	bd38      	pop	{r3, r4, r5, pc}
    2982:	bf00      	nop
    2984:	2000016c 	.word	0x2000016c

00002988 <_malloc_r>:
    2988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    298a:	1ccd      	adds	r5, r1, #3
    298c:	f025 0503 	bic.w	r5, r5, #3
    2990:	3508      	adds	r5, #8
    2992:	2d0c      	cmp	r5, #12
    2994:	bf38      	it	cc
    2996:	250c      	movcc	r5, #12
    2998:	2d00      	cmp	r5, #0
    299a:	4606      	mov	r6, r0
    299c:	db01      	blt.n	29a2 <_malloc_r+0x1a>
    299e:	42a9      	cmp	r1, r5
    29a0:	d903      	bls.n	29aa <_malloc_r+0x22>
    29a2:	230c      	movs	r3, #12
    29a4:	6033      	str	r3, [r6, #0]
    29a6:	2000      	movs	r0, #0
    29a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29aa:	f000 f89b 	bl	2ae4 <__malloc_lock>
    29ae:	4921      	ldr	r1, [pc, #132]	; (2a34 <_malloc_r+0xac>)
    29b0:	680a      	ldr	r2, [r1, #0]
    29b2:	4614      	mov	r4, r2
    29b4:	b99c      	cbnz	r4, 29de <_malloc_r+0x56>
    29b6:	4f20      	ldr	r7, [pc, #128]	; (2a38 <_malloc_r+0xb0>)
    29b8:	683b      	ldr	r3, [r7, #0]
    29ba:	b923      	cbnz	r3, 29c6 <_malloc_r+0x3e>
    29bc:	4621      	mov	r1, r4
    29be:	4630      	mov	r0, r6
    29c0:	f000 f83c 	bl	2a3c <_sbrk_r>
    29c4:	6038      	str	r0, [r7, #0]
    29c6:	4629      	mov	r1, r5
    29c8:	4630      	mov	r0, r6
    29ca:	f000 f837 	bl	2a3c <_sbrk_r>
    29ce:	1c43      	adds	r3, r0, #1
    29d0:	d123      	bne.n	2a1a <_malloc_r+0x92>
    29d2:	230c      	movs	r3, #12
    29d4:	6033      	str	r3, [r6, #0]
    29d6:	4630      	mov	r0, r6
    29d8:	f000 f88a 	bl	2af0 <__malloc_unlock>
    29dc:	e7e3      	b.n	29a6 <_malloc_r+0x1e>
    29de:	6823      	ldr	r3, [r4, #0]
    29e0:	1b5b      	subs	r3, r3, r5
    29e2:	d417      	bmi.n	2a14 <_malloc_r+0x8c>
    29e4:	2b0b      	cmp	r3, #11
    29e6:	d903      	bls.n	29f0 <_malloc_r+0x68>
    29e8:	6023      	str	r3, [r4, #0]
    29ea:	441c      	add	r4, r3
    29ec:	6025      	str	r5, [r4, #0]
    29ee:	e004      	b.n	29fa <_malloc_r+0x72>
    29f0:	6863      	ldr	r3, [r4, #4]
    29f2:	42a2      	cmp	r2, r4
    29f4:	bf0c      	ite	eq
    29f6:	600b      	streq	r3, [r1, #0]
    29f8:	6053      	strne	r3, [r2, #4]
    29fa:	4630      	mov	r0, r6
    29fc:	f000 f878 	bl	2af0 <__malloc_unlock>
    2a00:	f104 000b 	add.w	r0, r4, #11
    2a04:	1d23      	adds	r3, r4, #4
    2a06:	f020 0007 	bic.w	r0, r0, #7
    2a0a:	1ac2      	subs	r2, r0, r3
    2a0c:	d0cc      	beq.n	29a8 <_malloc_r+0x20>
    2a0e:	1a1b      	subs	r3, r3, r0
    2a10:	50a3      	str	r3, [r4, r2]
    2a12:	e7c9      	b.n	29a8 <_malloc_r+0x20>
    2a14:	4622      	mov	r2, r4
    2a16:	6864      	ldr	r4, [r4, #4]
    2a18:	e7cc      	b.n	29b4 <_malloc_r+0x2c>
    2a1a:	1cc4      	adds	r4, r0, #3
    2a1c:	f024 0403 	bic.w	r4, r4, #3
    2a20:	42a0      	cmp	r0, r4
    2a22:	d0e3      	beq.n	29ec <_malloc_r+0x64>
    2a24:	1a21      	subs	r1, r4, r0
    2a26:	4630      	mov	r0, r6
    2a28:	f000 f808 	bl	2a3c <_sbrk_r>
    2a2c:	3001      	adds	r0, #1
    2a2e:	d1dd      	bne.n	29ec <_malloc_r+0x64>
    2a30:	e7cf      	b.n	29d2 <_malloc_r+0x4a>
    2a32:	bf00      	nop
    2a34:	2000016c 	.word	0x2000016c
    2a38:	20000170 	.word	0x20000170

00002a3c <_sbrk_r>:
    2a3c:	b538      	push	{r3, r4, r5, lr}
    2a3e:	4c06      	ldr	r4, [pc, #24]	; (2a58 <_sbrk_r+0x1c>)
    2a40:	2300      	movs	r3, #0
    2a42:	4605      	mov	r5, r0
    2a44:	4608      	mov	r0, r1
    2a46:	6023      	str	r3, [r4, #0]
    2a48:	f000 f962 	bl	2d10 <_sbrk>
    2a4c:	1c43      	adds	r3, r0, #1
    2a4e:	d102      	bne.n	2a56 <_sbrk_r+0x1a>
    2a50:	6823      	ldr	r3, [r4, #0]
    2a52:	b103      	cbz	r3, 2a56 <_sbrk_r+0x1a>
    2a54:	602b      	str	r3, [r5, #0]
    2a56:	bd38      	pop	{r3, r4, r5, pc}
    2a58:	20000218 	.word	0x20000218

00002a5c <_raise_r>:
    2a5c:	291f      	cmp	r1, #31
    2a5e:	b538      	push	{r3, r4, r5, lr}
    2a60:	4604      	mov	r4, r0
    2a62:	460d      	mov	r5, r1
    2a64:	d904      	bls.n	2a70 <_raise_r+0x14>
    2a66:	2316      	movs	r3, #22
    2a68:	6003      	str	r3, [r0, #0]
    2a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2a6e:	bd38      	pop	{r3, r4, r5, pc}
    2a70:	6c42      	ldr	r2, [r0, #68]	; 0x44
    2a72:	b112      	cbz	r2, 2a7a <_raise_r+0x1e>
    2a74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    2a78:	b94b      	cbnz	r3, 2a8e <_raise_r+0x32>
    2a7a:	4620      	mov	r0, r4
    2a7c:	f000 f830 	bl	2ae0 <_getpid_r>
    2a80:	462a      	mov	r2, r5
    2a82:	4601      	mov	r1, r0
    2a84:	4620      	mov	r0, r4
    2a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2a8a:	f000 b817 	b.w	2abc <_kill_r>
    2a8e:	2b01      	cmp	r3, #1
    2a90:	d00a      	beq.n	2aa8 <_raise_r+0x4c>
    2a92:	1c59      	adds	r1, r3, #1
    2a94:	d103      	bne.n	2a9e <_raise_r+0x42>
    2a96:	2316      	movs	r3, #22
    2a98:	6003      	str	r3, [r0, #0]
    2a9a:	2001      	movs	r0, #1
    2a9c:	e7e7      	b.n	2a6e <_raise_r+0x12>
    2a9e:	2400      	movs	r4, #0
    2aa0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    2aa4:	4628      	mov	r0, r5
    2aa6:	4798      	blx	r3
    2aa8:	2000      	movs	r0, #0
    2aaa:	e7e0      	b.n	2a6e <_raise_r+0x12>

00002aac <raise>:
    2aac:	4b02      	ldr	r3, [pc, #8]	; (2ab8 <raise+0xc>)
    2aae:	4601      	mov	r1, r0
    2ab0:	6818      	ldr	r0, [r3, #0]
    2ab2:	f7ff bfd3 	b.w	2a5c <_raise_r>
    2ab6:	bf00      	nop
    2ab8:	20000010 	.word	0x20000010

00002abc <_kill_r>:
    2abc:	b538      	push	{r3, r4, r5, lr}
    2abe:	4c07      	ldr	r4, [pc, #28]	; (2adc <_kill_r+0x20>)
    2ac0:	2300      	movs	r3, #0
    2ac2:	4605      	mov	r5, r0
    2ac4:	4608      	mov	r0, r1
    2ac6:	4611      	mov	r1, r2
    2ac8:	6023      	str	r3, [r4, #0]
    2aca:	f000 fa7b 	bl	2fc4 <_kill>
    2ace:	1c43      	adds	r3, r0, #1
    2ad0:	d102      	bne.n	2ad8 <_kill_r+0x1c>
    2ad2:	6823      	ldr	r3, [r4, #0]
    2ad4:	b103      	cbz	r3, 2ad8 <_kill_r+0x1c>
    2ad6:	602b      	str	r3, [r5, #0]
    2ad8:	bd38      	pop	{r3, r4, r5, pc}
    2ada:	bf00      	nop
    2adc:	20000218 	.word	0x20000218

00002ae0 <_getpid_r>:
    2ae0:	f000 b914 	b.w	2d0c <_getpid>

00002ae4 <__malloc_lock>:
    2ae4:	4801      	ldr	r0, [pc, #4]	; (2aec <__malloc_lock+0x8>)
    2ae6:	f000 b80a 	b.w	2afe <__retarget_lock_acquire_recursive>
    2aea:	bf00      	nop
    2aec:	20000220 	.word	0x20000220

00002af0 <__malloc_unlock>:
    2af0:	4801      	ldr	r0, [pc, #4]	; (2af8 <__malloc_unlock+0x8>)
    2af2:	f000 b805 	b.w	2b00 <__retarget_lock_release_recursive>
    2af6:	bf00      	nop
    2af8:	20000220 	.word	0x20000220

00002afc <__retarget_lock_init_recursive>:
    2afc:	4770      	bx	lr

00002afe <__retarget_lock_acquire_recursive>:
    2afe:	4770      	bx	lr

00002b00 <__retarget_lock_release_recursive>:
    2b00:	4770      	bx	lr
	...

00002b04 <findslot>:
    2b04:	4b0a      	ldr	r3, [pc, #40]	; (2b30 <findslot+0x2c>)
    2b06:	b510      	push	{r4, lr}
    2b08:	4604      	mov	r4, r0
    2b0a:	6818      	ldr	r0, [r3, #0]
    2b0c:	b118      	cbz	r0, 2b16 <findslot+0x12>
    2b0e:	6983      	ldr	r3, [r0, #24]
    2b10:	b90b      	cbnz	r3, 2b16 <findslot+0x12>
    2b12:	f000 fac1 	bl	3098 <__sinit>
    2b16:	2c13      	cmp	r4, #19
    2b18:	d807      	bhi.n	2b2a <findslot+0x26>
    2b1a:	4806      	ldr	r0, [pc, #24]	; (2b34 <findslot+0x30>)
    2b1c:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
    2b20:	3301      	adds	r3, #1
    2b22:	d002      	beq.n	2b2a <findslot+0x26>
    2b24:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    2b28:	bd10      	pop	{r4, pc}
    2b2a:	2000      	movs	r0, #0
    2b2c:	e7fc      	b.n	2b28 <findslot+0x24>
    2b2e:	bf00      	nop
    2b30:	20000010 	.word	0x20000010
    2b34:	20000178 	.word	0x20000178

00002b38 <checkerror>:
    2b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b3a:	1c43      	adds	r3, r0, #1
    2b3c:	4605      	mov	r5, r0
    2b3e:	d109      	bne.n	2b54 <checkerror+0x1c>
    2b40:	f000 fa4c 	bl	2fdc <__errno>
    2b44:	2413      	movs	r4, #19
    2b46:	4606      	mov	r6, r0
    2b48:	2700      	movs	r7, #0
    2b4a:	4620      	mov	r0, r4
    2b4c:	4639      	mov	r1, r7
    2b4e:	beab      	bkpt	0x00ab
    2b50:	4604      	mov	r4, r0
    2b52:	6034      	str	r4, [r6, #0]
    2b54:	4628      	mov	r0, r5
    2b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002b58 <error>:
    2b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b5a:	4605      	mov	r5, r0
    2b5c:	f000 fa3e 	bl	2fdc <__errno>
    2b60:	2413      	movs	r4, #19
    2b62:	4606      	mov	r6, r0
    2b64:	2700      	movs	r7, #0
    2b66:	4620      	mov	r0, r4
    2b68:	4639      	mov	r1, r7
    2b6a:	beab      	bkpt	0x00ab
    2b6c:	4604      	mov	r4, r0
    2b6e:	6034      	str	r4, [r6, #0]
    2b70:	4628      	mov	r0, r5
    2b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002b74 <_swiread>:
    2b74:	b530      	push	{r4, r5, lr}
    2b76:	b085      	sub	sp, #20
    2b78:	e9cd 0101 	strd	r0, r1, [sp, #4]
    2b7c:	9203      	str	r2, [sp, #12]
    2b7e:	2406      	movs	r4, #6
    2b80:	ad01      	add	r5, sp, #4
    2b82:	4620      	mov	r0, r4
    2b84:	4629      	mov	r1, r5
    2b86:	beab      	bkpt	0x00ab
    2b88:	4604      	mov	r4, r0
    2b8a:	4620      	mov	r0, r4
    2b8c:	f7ff ffd4 	bl	2b38 <checkerror>
    2b90:	b005      	add	sp, #20
    2b92:	bd30      	pop	{r4, r5, pc}

00002b94 <_read>:
    2b94:	b570      	push	{r4, r5, r6, lr}
    2b96:	460e      	mov	r6, r1
    2b98:	4615      	mov	r5, r2
    2b9a:	f7ff ffb3 	bl	2b04 <findslot>
    2b9e:	4604      	mov	r4, r0
    2ba0:	b930      	cbnz	r0, 2bb0 <_read+0x1c>
    2ba2:	f000 fa1b 	bl	2fdc <__errno>
    2ba6:	2309      	movs	r3, #9
    2ba8:	6003      	str	r3, [r0, #0]
    2baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2bae:	bd70      	pop	{r4, r5, r6, pc}
    2bb0:	462a      	mov	r2, r5
    2bb2:	4631      	mov	r1, r6
    2bb4:	6800      	ldr	r0, [r0, #0]
    2bb6:	f7ff ffdd 	bl	2b74 <_swiread>
    2bba:	1c43      	adds	r3, r0, #1
    2bbc:	bf1f      	itttt	ne
    2bbe:	6863      	ldrne	r3, [r4, #4]
    2bc0:	1a28      	subne	r0, r5, r0
    2bc2:	181b      	addne	r3, r3, r0
    2bc4:	6063      	strne	r3, [r4, #4]
    2bc6:	e7f2      	b.n	2bae <_read+0x1a>

00002bc8 <_swilseek>:
    2bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2bca:	460c      	mov	r4, r1
    2bcc:	4616      	mov	r6, r2
    2bce:	f7ff ff99 	bl	2b04 <findslot>
    2bd2:	4605      	mov	r5, r0
    2bd4:	b940      	cbnz	r0, 2be8 <_swilseek+0x20>
    2bd6:	f000 fa01 	bl	2fdc <__errno>
    2bda:	2309      	movs	r3, #9
    2bdc:	6003      	str	r3, [r0, #0]
    2bde:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2be2:	4620      	mov	r0, r4
    2be4:	b003      	add	sp, #12
    2be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2be8:	2e02      	cmp	r6, #2
    2bea:	d903      	bls.n	2bf4 <_swilseek+0x2c>
    2bec:	f000 f9f6 	bl	2fdc <__errno>
    2bf0:	2316      	movs	r3, #22
    2bf2:	e7f3      	b.n	2bdc <_swilseek+0x14>
    2bf4:	2e01      	cmp	r6, #1
    2bf6:	d112      	bne.n	2c1e <_swilseek+0x56>
    2bf8:	6843      	ldr	r3, [r0, #4]
    2bfa:	18e4      	adds	r4, r4, r3
    2bfc:	d4f6      	bmi.n	2bec <_swilseek+0x24>
    2bfe:	682b      	ldr	r3, [r5, #0]
    2c00:	260a      	movs	r6, #10
    2c02:	e9cd 3400 	strd	r3, r4, [sp]
    2c06:	466f      	mov	r7, sp
    2c08:	4630      	mov	r0, r6
    2c0a:	4639      	mov	r1, r7
    2c0c:	beab      	bkpt	0x00ab
    2c0e:	4606      	mov	r6, r0
    2c10:	4630      	mov	r0, r6
    2c12:	f7ff ff91 	bl	2b38 <checkerror>
    2c16:	2800      	cmp	r0, #0
    2c18:	dbe1      	blt.n	2bde <_swilseek+0x16>
    2c1a:	606c      	str	r4, [r5, #4]
    2c1c:	e7e1      	b.n	2be2 <_swilseek+0x1a>
    2c1e:	2e02      	cmp	r6, #2
    2c20:	d1ed      	bne.n	2bfe <_swilseek+0x36>
    2c22:	6803      	ldr	r3, [r0, #0]
    2c24:	9300      	str	r3, [sp, #0]
    2c26:	260c      	movs	r6, #12
    2c28:	466f      	mov	r7, sp
    2c2a:	4630      	mov	r0, r6
    2c2c:	4639      	mov	r1, r7
    2c2e:	beab      	bkpt	0x00ab
    2c30:	4606      	mov	r6, r0
    2c32:	4630      	mov	r0, r6
    2c34:	f7ff ff80 	bl	2b38 <checkerror>
    2c38:	1c43      	adds	r3, r0, #1
    2c3a:	d0d0      	beq.n	2bde <_swilseek+0x16>
    2c3c:	4404      	add	r4, r0
    2c3e:	e7de      	b.n	2bfe <_swilseek+0x36>

00002c40 <_lseek>:
    2c40:	f7ff bfc2 	b.w	2bc8 <_swilseek>

00002c44 <_swiwrite>:
    2c44:	b530      	push	{r4, r5, lr}
    2c46:	b085      	sub	sp, #20
    2c48:	e9cd 0101 	strd	r0, r1, [sp, #4]
    2c4c:	9203      	str	r2, [sp, #12]
    2c4e:	2405      	movs	r4, #5
    2c50:	ad01      	add	r5, sp, #4
    2c52:	4620      	mov	r0, r4
    2c54:	4629      	mov	r1, r5
    2c56:	beab      	bkpt	0x00ab
    2c58:	4604      	mov	r4, r0
    2c5a:	4620      	mov	r0, r4
    2c5c:	f7ff ff6c 	bl	2b38 <checkerror>
    2c60:	b005      	add	sp, #20
    2c62:	bd30      	pop	{r4, r5, pc}

00002c64 <_write>:
    2c64:	b570      	push	{r4, r5, r6, lr}
    2c66:	460e      	mov	r6, r1
    2c68:	4615      	mov	r5, r2
    2c6a:	f7ff ff4b 	bl	2b04 <findslot>
    2c6e:	4604      	mov	r4, r0
    2c70:	b930      	cbnz	r0, 2c80 <_write+0x1c>
    2c72:	f000 f9b3 	bl	2fdc <__errno>
    2c76:	2309      	movs	r3, #9
    2c78:	6003      	str	r3, [r0, #0]
    2c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2c7e:	bd70      	pop	{r4, r5, r6, pc}
    2c80:	462a      	mov	r2, r5
    2c82:	4631      	mov	r1, r6
    2c84:	6800      	ldr	r0, [r0, #0]
    2c86:	f7ff ffdd 	bl	2c44 <_swiwrite>
    2c8a:	1e02      	subs	r2, r0, #0
    2c8c:	dbf5      	blt.n	2c7a <_write+0x16>
    2c8e:	6863      	ldr	r3, [r4, #4]
    2c90:	1aa8      	subs	r0, r5, r2
    2c92:	4403      	add	r3, r0
    2c94:	42aa      	cmp	r2, r5
    2c96:	6063      	str	r3, [r4, #4]
    2c98:	d1f1      	bne.n	2c7e <_write+0x1a>
    2c9a:	2000      	movs	r0, #0
    2c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2ca0:	f7ff bf5a 	b.w	2b58 <error>

00002ca4 <_swiclose>:
    2ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2ca6:	2402      	movs	r4, #2
    2ca8:	9001      	str	r0, [sp, #4]
    2caa:	ad01      	add	r5, sp, #4
    2cac:	4620      	mov	r0, r4
    2cae:	4629      	mov	r1, r5
    2cb0:	beab      	bkpt	0x00ab
    2cb2:	4604      	mov	r4, r0
    2cb4:	4620      	mov	r0, r4
    2cb6:	f7ff ff3f 	bl	2b38 <checkerror>
    2cba:	b003      	add	sp, #12
    2cbc:	bd30      	pop	{r4, r5, pc}
	...

00002cc0 <_close>:
    2cc0:	b538      	push	{r3, r4, r5, lr}
    2cc2:	4605      	mov	r5, r0
    2cc4:	f7ff ff1e 	bl	2b04 <findslot>
    2cc8:	4604      	mov	r4, r0
    2cca:	b930      	cbnz	r0, 2cda <_close+0x1a>
    2ccc:	f000 f986 	bl	2fdc <__errno>
    2cd0:	2309      	movs	r3, #9
    2cd2:	6003      	str	r3, [r0, #0]
    2cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2cd8:	bd38      	pop	{r3, r4, r5, pc}
    2cda:	3d01      	subs	r5, #1
    2cdc:	2d01      	cmp	r5, #1
    2cde:	d809      	bhi.n	2cf4 <_close+0x34>
    2ce0:	4b09      	ldr	r3, [pc, #36]	; (2d08 <_close+0x48>)
    2ce2:	689a      	ldr	r2, [r3, #8]
    2ce4:	691b      	ldr	r3, [r3, #16]
    2ce6:	429a      	cmp	r2, r3
    2ce8:	d104      	bne.n	2cf4 <_close+0x34>
    2cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2cee:	6003      	str	r3, [r0, #0]
    2cf0:	2000      	movs	r0, #0
    2cf2:	e7f1      	b.n	2cd8 <_close+0x18>
    2cf4:	6820      	ldr	r0, [r4, #0]
    2cf6:	f7ff ffd5 	bl	2ca4 <_swiclose>
    2cfa:	2800      	cmp	r0, #0
    2cfc:	d1ec      	bne.n	2cd8 <_close+0x18>
    2cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d02:	6023      	str	r3, [r4, #0]
    2d04:	e7e8      	b.n	2cd8 <_close+0x18>
    2d06:	bf00      	nop
    2d08:	20000178 	.word	0x20000178

00002d0c <_getpid>:
    2d0c:	2001      	movs	r0, #1
    2d0e:	4770      	bx	lr

00002d10 <_sbrk>:
    2d10:	4b0d      	ldr	r3, [pc, #52]	; (2d48 <_sbrk+0x38>)
    2d12:	6819      	ldr	r1, [r3, #0]
    2d14:	b510      	push	{r4, lr}
    2d16:	4602      	mov	r2, r0
    2d18:	b909      	cbnz	r1, 2d1e <_sbrk+0xe>
    2d1a:	490c      	ldr	r1, [pc, #48]	; (2d4c <_sbrk+0x3c>)
    2d1c:	6019      	str	r1, [r3, #0]
    2d1e:	6818      	ldr	r0, [r3, #0]
    2d20:	4669      	mov	r1, sp
    2d22:	4402      	add	r2, r0
    2d24:	428a      	cmp	r2, r1
    2d26:	d806      	bhi.n	2d36 <_sbrk+0x26>
    2d28:	4909      	ldr	r1, [pc, #36]	; (2d50 <_sbrk+0x40>)
    2d2a:	4c0a      	ldr	r4, [pc, #40]	; (2d54 <_sbrk+0x44>)
    2d2c:	6809      	ldr	r1, [r1, #0]
    2d2e:	42a1      	cmp	r1, r4
    2d30:	d008      	beq.n	2d44 <_sbrk+0x34>
    2d32:	428a      	cmp	r2, r1
    2d34:	d906      	bls.n	2d44 <_sbrk+0x34>
    2d36:	f000 f951 	bl	2fdc <__errno>
    2d3a:	230c      	movs	r3, #12
    2d3c:	6003      	str	r3, [r0, #0]
    2d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2d42:	bd10      	pop	{r4, pc}
    2d44:	601a      	str	r2, [r3, #0]
    2d46:	e7fc      	b.n	2d42 <_sbrk+0x32>
    2d48:	20000174 	.word	0x20000174
    2d4c:	20000228 	.word	0x20000228
    2d50:	20000074 	.word	0x20000074
    2d54:	cafedead 	.word	0xcafedead

00002d58 <_swistat>:
    2d58:	b570      	push	{r4, r5, r6, lr}
    2d5a:	460c      	mov	r4, r1
    2d5c:	f7ff fed2 	bl	2b04 <findslot>
    2d60:	4606      	mov	r6, r0
    2d62:	b930      	cbnz	r0, 2d72 <_swistat+0x1a>
    2d64:	f000 f93a 	bl	2fdc <__errno>
    2d68:	2309      	movs	r3, #9
    2d6a:	6003      	str	r3, [r0, #0]
    2d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2d70:	bd70      	pop	{r4, r5, r6, pc}
    2d72:	6863      	ldr	r3, [r4, #4]
    2d74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2d78:	6063      	str	r3, [r4, #4]
    2d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2d7e:	6463      	str	r3, [r4, #68]	; 0x44
    2d80:	250c      	movs	r5, #12
    2d82:	4628      	mov	r0, r5
    2d84:	4631      	mov	r1, r6
    2d86:	beab      	bkpt	0x00ab
    2d88:	4605      	mov	r5, r0
    2d8a:	4628      	mov	r0, r5
    2d8c:	f7ff fed4 	bl	2b38 <checkerror>
    2d90:	1c43      	adds	r3, r0, #1
    2d92:	bf1c      	itt	ne
    2d94:	6120      	strne	r0, [r4, #16]
    2d96:	2000      	movne	r0, #0
    2d98:	e7ea      	b.n	2d70 <_swistat+0x18>

00002d9a <_stat>:
    2d9a:	b538      	push	{r3, r4, r5, lr}
    2d9c:	460d      	mov	r5, r1
    2d9e:	4604      	mov	r4, r0
    2da0:	2258      	movs	r2, #88	; 0x58
    2da2:	2100      	movs	r1, #0
    2da4:	4628      	mov	r0, r5
    2da6:	f7ff fd99 	bl	28dc <memset>
    2daa:	4620      	mov	r0, r4
    2dac:	2100      	movs	r1, #0
    2dae:	f000 f811 	bl	2dd4 <_swiopen>
    2db2:	1c43      	adds	r3, r0, #1
    2db4:	4604      	mov	r4, r0
    2db6:	d00b      	beq.n	2dd0 <_stat+0x36>
    2db8:	686b      	ldr	r3, [r5, #4]
    2dba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
    2dbe:	606b      	str	r3, [r5, #4]
    2dc0:	4629      	mov	r1, r5
    2dc2:	f7ff ffc9 	bl	2d58 <_swistat>
    2dc6:	4605      	mov	r5, r0
    2dc8:	4620      	mov	r0, r4
    2dca:	f7ff ff79 	bl	2cc0 <_close>
    2dce:	462c      	mov	r4, r5
    2dd0:	4620      	mov	r0, r4
    2dd2:	bd38      	pop	{r3, r4, r5, pc}

00002dd4 <_swiopen>:
    2dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2dd8:	4b2a      	ldr	r3, [pc, #168]	; (2e84 <_swiopen+0xb0>)
    2dda:	b097      	sub	sp, #92	; 0x5c
    2ddc:	4681      	mov	r9, r0
    2dde:	460e      	mov	r6, r1
    2de0:	2500      	movs	r5, #0
    2de2:	461f      	mov	r7, r3
    2de4:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
    2de8:	1c61      	adds	r1, r4, #1
    2dea:	d037      	beq.n	2e5c <_swiopen+0x88>
    2dec:	3501      	adds	r5, #1
    2dee:	2d14      	cmp	r5, #20
    2df0:	d1f8      	bne.n	2de4 <_swiopen+0x10>
    2df2:	f000 f8f3 	bl	2fdc <__errno>
    2df6:	2318      	movs	r3, #24
    2df8:	6003      	str	r3, [r0, #0]
    2dfa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2dfe:	e03d      	b.n	2e7c <_swiopen+0xa8>
    2e00:	f3c6 4400 	ubfx	r4, r6, #16, #1
    2e04:	f240 6301 	movw	r3, #1537	; 0x601
    2e08:	07b2      	lsls	r2, r6, #30
    2e0a:	bf48      	it	mi
    2e0c:	f044 0402 	orrmi.w	r4, r4, #2
    2e10:	421e      	tst	r6, r3
    2e12:	bf18      	it	ne
    2e14:	f044 0404 	orrne.w	r4, r4, #4
    2e18:	0733      	lsls	r3, r6, #28
    2e1a:	bf48      	it	mi
    2e1c:	f024 0404 	bicmi.w	r4, r4, #4
    2e20:	4648      	mov	r0, r9
    2e22:	bf48      	it	mi
    2e24:	f044 0408 	orrmi.w	r4, r4, #8
    2e28:	f8cd 9000 	str.w	r9, [sp]
    2e2c:	f000 fa13 	bl	3256 <strlen>
    2e30:	e9cd 4001 	strd	r4, r0, [sp, #4]
    2e34:	2401      	movs	r4, #1
    2e36:	4620      	mov	r0, r4
    2e38:	4641      	mov	r1, r8
    2e3a:	beab      	bkpt	0x00ab
    2e3c:	4604      	mov	r4, r0
    2e3e:	2c00      	cmp	r4, #0
    2e40:	db07      	blt.n	2e52 <_swiopen+0x7e>
    2e42:	f847 4035 	str.w	r4, [r7, r5, lsl #3]
    2e46:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
    2e4a:	2300      	movs	r3, #0
    2e4c:	607b      	str	r3, [r7, #4]
    2e4e:	462c      	mov	r4, r5
    2e50:	e014      	b.n	2e7c <_swiopen+0xa8>
    2e52:	4620      	mov	r0, r4
    2e54:	f7ff fe80 	bl	2b58 <error>
    2e58:	4604      	mov	r4, r0
    2e5a:	e00f      	b.n	2e7c <_swiopen+0xa8>
    2e5c:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
    2e60:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
    2e64:	46e8      	mov	r8, sp
    2e66:	d1cb      	bne.n	2e00 <_swiopen+0x2c>
    2e68:	4641      	mov	r1, r8
    2e6a:	4648      	mov	r0, r9
    2e6c:	f7ff ff95 	bl	2d9a <_stat>
    2e70:	3001      	adds	r0, #1
    2e72:	d0c5      	beq.n	2e00 <_swiopen+0x2c>
    2e74:	f000 f8b2 	bl	2fdc <__errno>
    2e78:	2311      	movs	r3, #17
    2e7a:	6003      	str	r3, [r0, #0]
    2e7c:	4620      	mov	r0, r4
    2e7e:	b017      	add	sp, #92	; 0x5c
    2e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2e84:	20000178 	.word	0x20000178

00002e88 <_get_semihosting_exts>:
    2e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2e8c:	4607      	mov	r7, r0
    2e8e:	4688      	mov	r8, r1
    2e90:	4829      	ldr	r0, [pc, #164]	; (2f38 <_get_semihosting_exts+0xb0>)
    2e92:	2100      	movs	r1, #0
    2e94:	4615      	mov	r5, r2
    2e96:	f7ff ff9d 	bl	2dd4 <_swiopen>
    2e9a:	462a      	mov	r2, r5
    2e9c:	4604      	mov	r4, r0
    2e9e:	2100      	movs	r1, #0
    2ea0:	4638      	mov	r0, r7
    2ea2:	f7ff fd1b 	bl	28dc <memset>
    2ea6:	1c63      	adds	r3, r4, #1
    2ea8:	d015      	beq.n	2ed6 <_get_semihosting_exts+0x4e>
    2eaa:	4620      	mov	r0, r4
    2eac:	f7ff fe2a 	bl	2b04 <findslot>
    2eb0:	260c      	movs	r6, #12
    2eb2:	4681      	mov	r9, r0
    2eb4:	4630      	mov	r0, r6
    2eb6:	4649      	mov	r1, r9
    2eb8:	beab      	bkpt	0x00ab
    2eba:	4606      	mov	r6, r0
    2ebc:	4630      	mov	r0, r6
    2ebe:	f7ff fe3b 	bl	2b38 <checkerror>
    2ec2:	2803      	cmp	r0, #3
    2ec4:	dd02      	ble.n	2ecc <_get_semihosting_exts+0x44>
    2ec6:	3803      	subs	r0, #3
    2ec8:	42a8      	cmp	r0, r5
    2eca:	dc08      	bgt.n	2ede <_get_semihosting_exts+0x56>
    2ecc:	4620      	mov	r0, r4
    2ece:	f7ff fef7 	bl	2cc0 <_close>
    2ed2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2ed6:	4620      	mov	r0, r4
    2ed8:	b003      	add	sp, #12
    2eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2ede:	2204      	movs	r2, #4
    2ee0:	eb0d 0102 	add.w	r1, sp, r2
    2ee4:	4620      	mov	r0, r4
    2ee6:	f7ff fe55 	bl	2b94 <_read>
    2eea:	2803      	cmp	r0, #3
    2eec:	ddee      	ble.n	2ecc <_get_semihosting_exts+0x44>
    2eee:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2ef2:	2b53      	cmp	r3, #83	; 0x53
    2ef4:	d1ea      	bne.n	2ecc <_get_semihosting_exts+0x44>
    2ef6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2efa:	2b48      	cmp	r3, #72	; 0x48
    2efc:	d1e6      	bne.n	2ecc <_get_semihosting_exts+0x44>
    2efe:	f89d 3006 	ldrb.w	r3, [sp, #6]
    2f02:	2b46      	cmp	r3, #70	; 0x46
    2f04:	d1e2      	bne.n	2ecc <_get_semihosting_exts+0x44>
    2f06:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2f0a:	2b42      	cmp	r3, #66	; 0x42
    2f0c:	d1de      	bne.n	2ecc <_get_semihosting_exts+0x44>
    2f0e:	2201      	movs	r2, #1
    2f10:	4641      	mov	r1, r8
    2f12:	4620      	mov	r0, r4
    2f14:	f7ff fe58 	bl	2bc8 <_swilseek>
    2f18:	2800      	cmp	r0, #0
    2f1a:	dbd7      	blt.n	2ecc <_get_semihosting_exts+0x44>
    2f1c:	462a      	mov	r2, r5
    2f1e:	4639      	mov	r1, r7
    2f20:	4620      	mov	r0, r4
    2f22:	f7ff fe37 	bl	2b94 <_read>
    2f26:	4605      	mov	r5, r0
    2f28:	4620      	mov	r0, r4
    2f2a:	f7ff fec9 	bl	2cc0 <_close>
    2f2e:	4628      	mov	r0, r5
    2f30:	f7ff fe02 	bl	2b38 <checkerror>
    2f34:	4604      	mov	r4, r0
    2f36:	e7ce      	b.n	2ed6 <_get_semihosting_exts+0x4e>
    2f38:	00003588 	.word	0x00003588

00002f3c <initialise_semihosting_exts>:
    2f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2f3e:	4d0a      	ldr	r5, [pc, #40]	; (2f68 <initialise_semihosting_exts+0x2c>)
    2f40:	4c0a      	ldr	r4, [pc, #40]	; (2f6c <initialise_semihosting_exts+0x30>)
    2f42:	2100      	movs	r1, #0
    2f44:	2201      	movs	r2, #1
    2f46:	a801      	add	r0, sp, #4
    2f48:	6029      	str	r1, [r5, #0]
    2f4a:	6022      	str	r2, [r4, #0]
    2f4c:	f7ff ff9c 	bl	2e88 <_get_semihosting_exts>
    2f50:	2800      	cmp	r0, #0
    2f52:	dd07      	ble.n	2f64 <initialise_semihosting_exts+0x28>
    2f54:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2f58:	f003 0201 	and.w	r2, r3, #1
    2f5c:	f003 0302 	and.w	r3, r3, #2
    2f60:	602a      	str	r2, [r5, #0]
    2f62:	6023      	str	r3, [r4, #0]
    2f64:	b003      	add	sp, #12
    2f66:	bd30      	pop	{r4, r5, pc}
    2f68:	20000078 	.word	0x20000078
    2f6c:	2000007c 	.word	0x2000007c

00002f70 <_has_ext_exit_extended>:
    2f70:	b510      	push	{r4, lr}
    2f72:	4c04      	ldr	r4, [pc, #16]	; (2f84 <_has_ext_exit_extended+0x14>)
    2f74:	6822      	ldr	r2, [r4, #0]
    2f76:	2a00      	cmp	r2, #0
    2f78:	da01      	bge.n	2f7e <_has_ext_exit_extended+0xe>
    2f7a:	f7ff ffdf 	bl	2f3c <initialise_semihosting_exts>
    2f7e:	6820      	ldr	r0, [r4, #0]
    2f80:	bd10      	pop	{r4, pc}
    2f82:	bf00      	nop
    2f84:	20000078 	.word	0x20000078

00002f88 <_exit>:
    2f88:	4601      	mov	r1, r0
    2f8a:	b508      	push	{r3, lr}
    2f8c:	4a02      	ldr	r2, [pc, #8]	; (2f98 <_exit+0x10>)
    2f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2f92:	f000 f803 	bl	2f9c <_kill_shared>
    2f96:	bf00      	nop
    2f98:	00020026 	.word	0x00020026

00002f9c <_kill_shared>:
    2f9c:	b507      	push	{r0, r1, r2, lr}
    2f9e:	e9cd 2100 	strd	r2, r1, [sp]
    2fa2:	f7ff ffe5 	bl	2f70 <_has_ext_exit_extended>
    2fa6:	2800      	cmp	r0, #0
    2fa8:	bf14      	ite	ne
    2faa:	2420      	movne	r4, #32
    2fac:	2418      	moveq	r4, #24
    2fae:	f7ff ffdf 	bl	2f70 <_has_ext_exit_extended>
    2fb2:	b120      	cbz	r0, 2fbe <_kill_shared+0x22>
    2fb4:	466d      	mov	r5, sp
    2fb6:	4620      	mov	r0, r4
    2fb8:	4629      	mov	r1, r5
    2fba:	beab      	bkpt	0x00ab
    2fbc:	4604      	mov	r4, r0
    2fbe:	9d00      	ldr	r5, [sp, #0]
    2fc0:	e7f9      	b.n	2fb6 <_kill_shared+0x1a>
	...

00002fc4 <_kill>:
    2fc4:	2906      	cmp	r1, #6
    2fc6:	b508      	push	{r3, lr}
    2fc8:	bf0c      	ite	eq
    2fca:	4a02      	ldreq	r2, [pc, #8]	; (2fd4 <_kill+0x10>)
    2fcc:	4a02      	ldrne	r2, [pc, #8]	; (2fd8 <_kill+0x14>)
    2fce:	f7ff ffe5 	bl	2f9c <_kill_shared>
    2fd2:	bf00      	nop
    2fd4:	00020023 	.word	0x00020023
    2fd8:	00020026 	.word	0x00020026

00002fdc <__errno>:
    2fdc:	4b01      	ldr	r3, [pc, #4]	; (2fe4 <__errno+0x8>)
    2fde:	6818      	ldr	r0, [r3, #0]
    2fe0:	4770      	bx	lr
    2fe2:	bf00      	nop
    2fe4:	20000010 	.word	0x20000010

00002fe8 <std>:
    2fe8:	2300      	movs	r3, #0
    2fea:	b510      	push	{r4, lr}
    2fec:	4604      	mov	r4, r0
    2fee:	e9c0 3300 	strd	r3, r3, [r0]
    2ff2:	6083      	str	r3, [r0, #8]
    2ff4:	8181      	strh	r1, [r0, #12]
    2ff6:	6643      	str	r3, [r0, #100]	; 0x64
    2ff8:	81c2      	strh	r2, [r0, #14]
    2ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
    2ffe:	6183      	str	r3, [r0, #24]
    3000:	4619      	mov	r1, r3
    3002:	2208      	movs	r2, #8
    3004:	305c      	adds	r0, #92	; 0x5c
    3006:	f7ff fc69 	bl	28dc <memset>
    300a:	4b05      	ldr	r3, [pc, #20]	; (3020 <std+0x38>)
    300c:	6263      	str	r3, [r4, #36]	; 0x24
    300e:	4b05      	ldr	r3, [pc, #20]	; (3024 <std+0x3c>)
    3010:	62a3      	str	r3, [r4, #40]	; 0x28
    3012:	4b05      	ldr	r3, [pc, #20]	; (3028 <std+0x40>)
    3014:	62e3      	str	r3, [r4, #44]	; 0x2c
    3016:	4b05      	ldr	r3, [pc, #20]	; (302c <std+0x44>)
    3018:	6224      	str	r4, [r4, #32]
    301a:	6323      	str	r3, [r4, #48]	; 0x30
    301c:	bd10      	pop	{r4, pc}
    301e:	bf00      	nop
    3020:	000031d1 	.word	0x000031d1
    3024:	000031f3 	.word	0x000031f3
    3028:	0000322b 	.word	0x0000322b
    302c:	0000324f 	.word	0x0000324f

00003030 <_cleanup_r>:
    3030:	4901      	ldr	r1, [pc, #4]	; (3038 <_cleanup_r+0x8>)
    3032:	f000 b8af 	b.w	3194 <_fwalk_reent>
    3036:	bf00      	nop
    3038:	000033b9 	.word	0x000033b9

0000303c <__sfmoreglue>:
    303c:	b570      	push	{r4, r5, r6, lr}
    303e:	1e4a      	subs	r2, r1, #1
    3040:	2568      	movs	r5, #104	; 0x68
    3042:	4355      	muls	r5, r2
    3044:	460e      	mov	r6, r1
    3046:	f105 0174 	add.w	r1, r5, #116	; 0x74
    304a:	f7ff fc9d 	bl	2988 <_malloc_r>
    304e:	4604      	mov	r4, r0
    3050:	b140      	cbz	r0, 3064 <__sfmoreglue+0x28>
    3052:	2100      	movs	r1, #0
    3054:	e9c0 1600 	strd	r1, r6, [r0]
    3058:	300c      	adds	r0, #12
    305a:	60a0      	str	r0, [r4, #8]
    305c:	f105 0268 	add.w	r2, r5, #104	; 0x68
    3060:	f7ff fc3c 	bl	28dc <memset>
    3064:	4620      	mov	r0, r4
    3066:	bd70      	pop	{r4, r5, r6, pc}

00003068 <__sfp_lock_acquire>:
    3068:	4801      	ldr	r0, [pc, #4]	; (3070 <__sfp_lock_acquire+0x8>)
    306a:	f7ff bd48 	b.w	2afe <__retarget_lock_acquire_recursive>
    306e:	bf00      	nop
    3070:	20000224 	.word	0x20000224

00003074 <__sfp_lock_release>:
    3074:	4801      	ldr	r0, [pc, #4]	; (307c <__sfp_lock_release+0x8>)
    3076:	f7ff bd43 	b.w	2b00 <__retarget_lock_release_recursive>
    307a:	bf00      	nop
    307c:	20000224 	.word	0x20000224

00003080 <__sinit_lock_acquire>:
    3080:	4801      	ldr	r0, [pc, #4]	; (3088 <__sinit_lock_acquire+0x8>)
    3082:	f7ff bd3c 	b.w	2afe <__retarget_lock_acquire_recursive>
    3086:	bf00      	nop
    3088:	2000021f 	.word	0x2000021f

0000308c <__sinit_lock_release>:
    308c:	4801      	ldr	r0, [pc, #4]	; (3094 <__sinit_lock_release+0x8>)
    308e:	f7ff bd37 	b.w	2b00 <__retarget_lock_release_recursive>
    3092:	bf00      	nop
    3094:	2000021f 	.word	0x2000021f

00003098 <__sinit>:
    3098:	b510      	push	{r4, lr}
    309a:	4604      	mov	r4, r0
    309c:	f7ff fff0 	bl	3080 <__sinit_lock_acquire>
    30a0:	69a3      	ldr	r3, [r4, #24]
    30a2:	b11b      	cbz	r3, 30ac <__sinit+0x14>
    30a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    30a8:	f7ff bff0 	b.w	308c <__sinit_lock_release>
    30ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    30b0:	6523      	str	r3, [r4, #80]	; 0x50
    30b2:	4b13      	ldr	r3, [pc, #76]	; (3100 <__sinit+0x68>)
    30b4:	4a13      	ldr	r2, [pc, #76]	; (3104 <__sinit+0x6c>)
    30b6:	681b      	ldr	r3, [r3, #0]
    30b8:	62a2      	str	r2, [r4, #40]	; 0x28
    30ba:	42a3      	cmp	r3, r4
    30bc:	bf04      	itt	eq
    30be:	2301      	moveq	r3, #1
    30c0:	61a3      	streq	r3, [r4, #24]
    30c2:	4620      	mov	r0, r4
    30c4:	f000 f820 	bl	3108 <__sfp>
    30c8:	6060      	str	r0, [r4, #4]
    30ca:	4620      	mov	r0, r4
    30cc:	f000 f81c 	bl	3108 <__sfp>
    30d0:	60a0      	str	r0, [r4, #8]
    30d2:	4620      	mov	r0, r4
    30d4:	f000 f818 	bl	3108 <__sfp>
    30d8:	2200      	movs	r2, #0
    30da:	60e0      	str	r0, [r4, #12]
    30dc:	2104      	movs	r1, #4
    30de:	6860      	ldr	r0, [r4, #4]
    30e0:	f7ff ff82 	bl	2fe8 <std>
    30e4:	2201      	movs	r2, #1
    30e6:	2109      	movs	r1, #9
    30e8:	68a0      	ldr	r0, [r4, #8]
    30ea:	f7ff ff7d 	bl	2fe8 <std>
    30ee:	2202      	movs	r2, #2
    30f0:	2112      	movs	r1, #18
    30f2:	68e0      	ldr	r0, [r4, #12]
    30f4:	f7ff ff78 	bl	2fe8 <std>
    30f8:	2301      	movs	r3, #1
    30fa:	61a3      	str	r3, [r4, #24]
    30fc:	e7d2      	b.n	30a4 <__sinit+0xc>
    30fe:	bf00      	nop
    3100:	00003584 	.word	0x00003584
    3104:	00003031 	.word	0x00003031

00003108 <__sfp>:
    3108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    310a:	4607      	mov	r7, r0
    310c:	f7ff ffac 	bl	3068 <__sfp_lock_acquire>
    3110:	4b1e      	ldr	r3, [pc, #120]	; (318c <__sfp+0x84>)
    3112:	681e      	ldr	r6, [r3, #0]
    3114:	69b3      	ldr	r3, [r6, #24]
    3116:	b913      	cbnz	r3, 311e <__sfp+0x16>
    3118:	4630      	mov	r0, r6
    311a:	f7ff ffbd 	bl	3098 <__sinit>
    311e:	3648      	adds	r6, #72	; 0x48
    3120:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    3124:	3b01      	subs	r3, #1
    3126:	d503      	bpl.n	3130 <__sfp+0x28>
    3128:	6833      	ldr	r3, [r6, #0]
    312a:	b30b      	cbz	r3, 3170 <__sfp+0x68>
    312c:	6836      	ldr	r6, [r6, #0]
    312e:	e7f7      	b.n	3120 <__sfp+0x18>
    3130:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    3134:	b9d5      	cbnz	r5, 316c <__sfp+0x64>
    3136:	4b16      	ldr	r3, [pc, #88]	; (3190 <__sfp+0x88>)
    3138:	60e3      	str	r3, [r4, #12]
    313a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    313e:	6665      	str	r5, [r4, #100]	; 0x64
    3140:	f7ff fcdc 	bl	2afc <__retarget_lock_init_recursive>
    3144:	f7ff ff96 	bl	3074 <__sfp_lock_release>
    3148:	6025      	str	r5, [r4, #0]
    314a:	e9c4 5501 	strd	r5, r5, [r4, #4]
    314e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    3152:	61a5      	str	r5, [r4, #24]
    3154:	2208      	movs	r2, #8
    3156:	4629      	mov	r1, r5
    3158:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    315c:	f7ff fbbe 	bl	28dc <memset>
    3160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    3164:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    3168:	4620      	mov	r0, r4
    316a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    316c:	3468      	adds	r4, #104	; 0x68
    316e:	e7d9      	b.n	3124 <__sfp+0x1c>
    3170:	2104      	movs	r1, #4
    3172:	4638      	mov	r0, r7
    3174:	f7ff ff62 	bl	303c <__sfmoreglue>
    3178:	4604      	mov	r4, r0
    317a:	6030      	str	r0, [r6, #0]
    317c:	2800      	cmp	r0, #0
    317e:	d1d5      	bne.n	312c <__sfp+0x24>
    3180:	f7ff ff78 	bl	3074 <__sfp_lock_release>
    3184:	230c      	movs	r3, #12
    3186:	603b      	str	r3, [r7, #0]
    3188:	e7ee      	b.n	3168 <__sfp+0x60>
    318a:	bf00      	nop
    318c:	00003584 	.word	0x00003584
    3190:	ffff0001 	.word	0xffff0001

00003194 <_fwalk_reent>:
    3194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3198:	4680      	mov	r8, r0
    319a:	4689      	mov	r9, r1
    319c:	f100 0448 	add.w	r4, r0, #72	; 0x48
    31a0:	2600      	movs	r6, #0
    31a2:	b914      	cbnz	r4, 31aa <_fwalk_reent+0x16>
    31a4:	4630      	mov	r0, r6
    31a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    31aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    31ae:	3f01      	subs	r7, #1
    31b0:	d501      	bpl.n	31b6 <_fwalk_reent+0x22>
    31b2:	6824      	ldr	r4, [r4, #0]
    31b4:	e7f5      	b.n	31a2 <_fwalk_reent+0xe>
    31b6:	89ab      	ldrh	r3, [r5, #12]
    31b8:	2b01      	cmp	r3, #1
    31ba:	d907      	bls.n	31cc <_fwalk_reent+0x38>
    31bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    31c0:	3301      	adds	r3, #1
    31c2:	d003      	beq.n	31cc <_fwalk_reent+0x38>
    31c4:	4629      	mov	r1, r5
    31c6:	4640      	mov	r0, r8
    31c8:	47c8      	blx	r9
    31ca:	4306      	orrs	r6, r0
    31cc:	3568      	adds	r5, #104	; 0x68
    31ce:	e7ee      	b.n	31ae <_fwalk_reent+0x1a>

000031d0 <__sread>:
    31d0:	b510      	push	{r4, lr}
    31d2:	460c      	mov	r4, r1
    31d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    31d8:	f000 f93c 	bl	3454 <_read_r>
    31dc:	2800      	cmp	r0, #0
    31de:	bfab      	itete	ge
    31e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    31e2:	89a3      	ldrhlt	r3, [r4, #12]
    31e4:	181b      	addge	r3, r3, r0
    31e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    31ea:	bfac      	ite	ge
    31ec:	6563      	strge	r3, [r4, #84]	; 0x54
    31ee:	81a3      	strhlt	r3, [r4, #12]
    31f0:	bd10      	pop	{r4, pc}

000031f2 <__swrite>:
    31f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    31f6:	461f      	mov	r7, r3
    31f8:	898b      	ldrh	r3, [r1, #12]
    31fa:	05db      	lsls	r3, r3, #23
    31fc:	4605      	mov	r5, r0
    31fe:	460c      	mov	r4, r1
    3200:	4616      	mov	r6, r2
    3202:	d505      	bpl.n	3210 <__swrite+0x1e>
    3204:	2302      	movs	r3, #2
    3206:	2200      	movs	r2, #0
    3208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    320c:	f000 f910 	bl	3430 <_lseek_r>
    3210:	89a3      	ldrh	r3, [r4, #12]
    3212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    3216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    321a:	81a3      	strh	r3, [r4, #12]
    321c:	4632      	mov	r2, r6
    321e:	463b      	mov	r3, r7
    3220:	4628      	mov	r0, r5
    3222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3226:	f000 b81f 	b.w	3268 <_write_r>

0000322a <__sseek>:
    322a:	b510      	push	{r4, lr}
    322c:	460c      	mov	r4, r1
    322e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3232:	f000 f8fd 	bl	3430 <_lseek_r>
    3236:	1c43      	adds	r3, r0, #1
    3238:	89a3      	ldrh	r3, [r4, #12]
    323a:	bf15      	itete	ne
    323c:	6560      	strne	r0, [r4, #84]	; 0x54
    323e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    3242:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    3246:	81a3      	strheq	r3, [r4, #12]
    3248:	bf18      	it	ne
    324a:	81a3      	strhne	r3, [r4, #12]
    324c:	bd10      	pop	{r4, pc}

0000324e <__sclose>:
    324e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3252:	f000 b81b 	b.w	328c <_close_r>

00003256 <strlen>:
    3256:	4603      	mov	r3, r0
    3258:	f813 2b01 	ldrb.w	r2, [r3], #1
    325c:	2a00      	cmp	r2, #0
    325e:	d1fb      	bne.n	3258 <strlen+0x2>
    3260:	1a18      	subs	r0, r3, r0
    3262:	3801      	subs	r0, #1
    3264:	4770      	bx	lr
	...

00003268 <_write_r>:
    3268:	b538      	push	{r3, r4, r5, lr}
    326a:	4c07      	ldr	r4, [pc, #28]	; (3288 <_write_r+0x20>)
    326c:	4605      	mov	r5, r0
    326e:	4608      	mov	r0, r1
    3270:	4611      	mov	r1, r2
    3272:	2200      	movs	r2, #0
    3274:	6022      	str	r2, [r4, #0]
    3276:	461a      	mov	r2, r3
    3278:	f7ff fcf4 	bl	2c64 <_write>
    327c:	1c43      	adds	r3, r0, #1
    327e:	d102      	bne.n	3286 <_write_r+0x1e>
    3280:	6823      	ldr	r3, [r4, #0]
    3282:	b103      	cbz	r3, 3286 <_write_r+0x1e>
    3284:	602b      	str	r3, [r5, #0]
    3286:	bd38      	pop	{r3, r4, r5, pc}
    3288:	20000218 	.word	0x20000218

0000328c <_close_r>:
    328c:	b538      	push	{r3, r4, r5, lr}
    328e:	4c06      	ldr	r4, [pc, #24]	; (32a8 <_close_r+0x1c>)
    3290:	2300      	movs	r3, #0
    3292:	4605      	mov	r5, r0
    3294:	4608      	mov	r0, r1
    3296:	6023      	str	r3, [r4, #0]
    3298:	f7ff fd12 	bl	2cc0 <_close>
    329c:	1c43      	adds	r3, r0, #1
    329e:	d102      	bne.n	32a6 <_close_r+0x1a>
    32a0:	6823      	ldr	r3, [r4, #0]
    32a2:	b103      	cbz	r3, 32a6 <_close_r+0x1a>
    32a4:	602b      	str	r3, [r5, #0]
    32a6:	bd38      	pop	{r3, r4, r5, pc}
    32a8:	20000218 	.word	0x20000218

000032ac <__sflush_r>:
    32ac:	898a      	ldrh	r2, [r1, #12]
    32ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    32b2:	4605      	mov	r5, r0
    32b4:	0710      	lsls	r0, r2, #28
    32b6:	460c      	mov	r4, r1
    32b8:	d458      	bmi.n	336c <__sflush_r+0xc0>
    32ba:	684b      	ldr	r3, [r1, #4]
    32bc:	2b00      	cmp	r3, #0
    32be:	dc05      	bgt.n	32cc <__sflush_r+0x20>
    32c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    32c2:	2b00      	cmp	r3, #0
    32c4:	dc02      	bgt.n	32cc <__sflush_r+0x20>
    32c6:	2000      	movs	r0, #0
    32c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    32ce:	2e00      	cmp	r6, #0
    32d0:	d0f9      	beq.n	32c6 <__sflush_r+0x1a>
    32d2:	2300      	movs	r3, #0
    32d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    32d8:	682f      	ldr	r7, [r5, #0]
    32da:	602b      	str	r3, [r5, #0]
    32dc:	d032      	beq.n	3344 <__sflush_r+0x98>
    32de:	6d60      	ldr	r0, [r4, #84]	; 0x54
    32e0:	89a3      	ldrh	r3, [r4, #12]
    32e2:	075a      	lsls	r2, r3, #29
    32e4:	d505      	bpl.n	32f2 <__sflush_r+0x46>
    32e6:	6863      	ldr	r3, [r4, #4]
    32e8:	1ac0      	subs	r0, r0, r3
    32ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    32ec:	b10b      	cbz	r3, 32f2 <__sflush_r+0x46>
    32ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
    32f0:	1ac0      	subs	r0, r0, r3
    32f2:	2300      	movs	r3, #0
    32f4:	4602      	mov	r2, r0
    32f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    32f8:	6a21      	ldr	r1, [r4, #32]
    32fa:	4628      	mov	r0, r5
    32fc:	47b0      	blx	r6
    32fe:	1c43      	adds	r3, r0, #1
    3300:	89a3      	ldrh	r3, [r4, #12]
    3302:	d106      	bne.n	3312 <__sflush_r+0x66>
    3304:	6829      	ldr	r1, [r5, #0]
    3306:	291d      	cmp	r1, #29
    3308:	d82c      	bhi.n	3364 <__sflush_r+0xb8>
    330a:	4a2a      	ldr	r2, [pc, #168]	; (33b4 <__sflush_r+0x108>)
    330c:	40ca      	lsrs	r2, r1
    330e:	07d6      	lsls	r6, r2, #31
    3310:	d528      	bpl.n	3364 <__sflush_r+0xb8>
    3312:	2200      	movs	r2, #0
    3314:	6062      	str	r2, [r4, #4]
    3316:	04d9      	lsls	r1, r3, #19
    3318:	6922      	ldr	r2, [r4, #16]
    331a:	6022      	str	r2, [r4, #0]
    331c:	d504      	bpl.n	3328 <__sflush_r+0x7c>
    331e:	1c42      	adds	r2, r0, #1
    3320:	d101      	bne.n	3326 <__sflush_r+0x7a>
    3322:	682b      	ldr	r3, [r5, #0]
    3324:	b903      	cbnz	r3, 3328 <__sflush_r+0x7c>
    3326:	6560      	str	r0, [r4, #84]	; 0x54
    3328:	6b61      	ldr	r1, [r4, #52]	; 0x34
    332a:	602f      	str	r7, [r5, #0]
    332c:	2900      	cmp	r1, #0
    332e:	d0ca      	beq.n	32c6 <__sflush_r+0x1a>
    3330:	f104 0344 	add.w	r3, r4, #68	; 0x44
    3334:	4299      	cmp	r1, r3
    3336:	d002      	beq.n	333e <__sflush_r+0x92>
    3338:	4628      	mov	r0, r5
    333a:	f7ff fad7 	bl	28ec <_free_r>
    333e:	2000      	movs	r0, #0
    3340:	6360      	str	r0, [r4, #52]	; 0x34
    3342:	e7c1      	b.n	32c8 <__sflush_r+0x1c>
    3344:	6a21      	ldr	r1, [r4, #32]
    3346:	2301      	movs	r3, #1
    3348:	4628      	mov	r0, r5
    334a:	47b0      	blx	r6
    334c:	1c41      	adds	r1, r0, #1
    334e:	d1c7      	bne.n	32e0 <__sflush_r+0x34>
    3350:	682b      	ldr	r3, [r5, #0]
    3352:	2b00      	cmp	r3, #0
    3354:	d0c4      	beq.n	32e0 <__sflush_r+0x34>
    3356:	2b1d      	cmp	r3, #29
    3358:	d001      	beq.n	335e <__sflush_r+0xb2>
    335a:	2b16      	cmp	r3, #22
    335c:	d101      	bne.n	3362 <__sflush_r+0xb6>
    335e:	602f      	str	r7, [r5, #0]
    3360:	e7b1      	b.n	32c6 <__sflush_r+0x1a>
    3362:	89a3      	ldrh	r3, [r4, #12]
    3364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3368:	81a3      	strh	r3, [r4, #12]
    336a:	e7ad      	b.n	32c8 <__sflush_r+0x1c>
    336c:	690f      	ldr	r7, [r1, #16]
    336e:	2f00      	cmp	r7, #0
    3370:	d0a9      	beq.n	32c6 <__sflush_r+0x1a>
    3372:	0793      	lsls	r3, r2, #30
    3374:	680e      	ldr	r6, [r1, #0]
    3376:	bf08      	it	eq
    3378:	694b      	ldreq	r3, [r1, #20]
    337a:	600f      	str	r7, [r1, #0]
    337c:	bf18      	it	ne
    337e:	2300      	movne	r3, #0
    3380:	eba6 0807 	sub.w	r8, r6, r7
    3384:	608b      	str	r3, [r1, #8]
    3386:	f1b8 0f00 	cmp.w	r8, #0
    338a:	dd9c      	ble.n	32c6 <__sflush_r+0x1a>
    338c:	4643      	mov	r3, r8
    338e:	463a      	mov	r2, r7
    3390:	6a21      	ldr	r1, [r4, #32]
    3392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3394:	4628      	mov	r0, r5
    3396:	47b0      	blx	r6
    3398:	2800      	cmp	r0, #0
    339a:	dc06      	bgt.n	33aa <__sflush_r+0xfe>
    339c:	89a3      	ldrh	r3, [r4, #12]
    339e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    33a2:	81a3      	strh	r3, [r4, #12]
    33a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    33a8:	e78e      	b.n	32c8 <__sflush_r+0x1c>
    33aa:	4407      	add	r7, r0
    33ac:	eba8 0800 	sub.w	r8, r8, r0
    33b0:	e7e9      	b.n	3386 <__sflush_r+0xda>
    33b2:	bf00      	nop
    33b4:	20400001 	.word	0x20400001

000033b8 <_fflush_r>:
    33b8:	b538      	push	{r3, r4, r5, lr}
    33ba:	690b      	ldr	r3, [r1, #16]
    33bc:	4605      	mov	r5, r0
    33be:	460c      	mov	r4, r1
    33c0:	b913      	cbnz	r3, 33c8 <_fflush_r+0x10>
    33c2:	2500      	movs	r5, #0
    33c4:	4628      	mov	r0, r5
    33c6:	bd38      	pop	{r3, r4, r5, pc}
    33c8:	b118      	cbz	r0, 33d2 <_fflush_r+0x1a>
    33ca:	6983      	ldr	r3, [r0, #24]
    33cc:	b90b      	cbnz	r3, 33d2 <_fflush_r+0x1a>
    33ce:	f7ff fe63 	bl	3098 <__sinit>
    33d2:	4b14      	ldr	r3, [pc, #80]	; (3424 <_fflush_r+0x6c>)
    33d4:	429c      	cmp	r4, r3
    33d6:	d11b      	bne.n	3410 <_fflush_r+0x58>
    33d8:	686c      	ldr	r4, [r5, #4]
    33da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    33de:	2b00      	cmp	r3, #0
    33e0:	d0ef      	beq.n	33c2 <_fflush_r+0xa>
    33e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
    33e4:	07d0      	lsls	r0, r2, #31
    33e6:	d404      	bmi.n	33f2 <_fflush_r+0x3a>
    33e8:	0599      	lsls	r1, r3, #22
    33ea:	d402      	bmi.n	33f2 <_fflush_r+0x3a>
    33ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
    33ee:	f7ff fb86 	bl	2afe <__retarget_lock_acquire_recursive>
    33f2:	4628      	mov	r0, r5
    33f4:	4621      	mov	r1, r4
    33f6:	f7ff ff59 	bl	32ac <__sflush_r>
    33fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
    33fc:	07da      	lsls	r2, r3, #31
    33fe:	4605      	mov	r5, r0
    3400:	d4e0      	bmi.n	33c4 <_fflush_r+0xc>
    3402:	89a3      	ldrh	r3, [r4, #12]
    3404:	059b      	lsls	r3, r3, #22
    3406:	d4dd      	bmi.n	33c4 <_fflush_r+0xc>
    3408:	6da0      	ldr	r0, [r4, #88]	; 0x58
    340a:	f7ff fb79 	bl	2b00 <__retarget_lock_release_recursive>
    340e:	e7d9      	b.n	33c4 <_fflush_r+0xc>
    3410:	4b05      	ldr	r3, [pc, #20]	; (3428 <_fflush_r+0x70>)
    3412:	429c      	cmp	r4, r3
    3414:	d101      	bne.n	341a <_fflush_r+0x62>
    3416:	68ac      	ldr	r4, [r5, #8]
    3418:	e7df      	b.n	33da <_fflush_r+0x22>
    341a:	4b04      	ldr	r3, [pc, #16]	; (342c <_fflush_r+0x74>)
    341c:	429c      	cmp	r4, r3
    341e:	bf08      	it	eq
    3420:	68ec      	ldreq	r4, [r5, #12]
    3422:	e7da      	b.n	33da <_fflush_r+0x22>
    3424:	000035c0 	.word	0x000035c0
    3428:	000035e0 	.word	0x000035e0
    342c:	000035a0 	.word	0x000035a0

00003430 <_lseek_r>:
    3430:	b538      	push	{r3, r4, r5, lr}
    3432:	4c07      	ldr	r4, [pc, #28]	; (3450 <_lseek_r+0x20>)
    3434:	4605      	mov	r5, r0
    3436:	4608      	mov	r0, r1
    3438:	4611      	mov	r1, r2
    343a:	2200      	movs	r2, #0
    343c:	6022      	str	r2, [r4, #0]
    343e:	461a      	mov	r2, r3
    3440:	f7ff fbfe 	bl	2c40 <_lseek>
    3444:	1c43      	adds	r3, r0, #1
    3446:	d102      	bne.n	344e <_lseek_r+0x1e>
    3448:	6823      	ldr	r3, [r4, #0]
    344a:	b103      	cbz	r3, 344e <_lseek_r+0x1e>
    344c:	602b      	str	r3, [r5, #0]
    344e:	bd38      	pop	{r3, r4, r5, pc}
    3450:	20000218 	.word	0x20000218

00003454 <_read_r>:
    3454:	b538      	push	{r3, r4, r5, lr}
    3456:	4c07      	ldr	r4, [pc, #28]	; (3474 <_read_r+0x20>)
    3458:	4605      	mov	r5, r0
    345a:	4608      	mov	r0, r1
    345c:	4611      	mov	r1, r2
    345e:	2200      	movs	r2, #0
    3460:	6022      	str	r2, [r4, #0]
    3462:	461a      	mov	r2, r3
    3464:	f7ff fb96 	bl	2b94 <_read>
    3468:	1c43      	adds	r3, r0, #1
    346a:	d102      	bne.n	3472 <_read_r+0x1e>
    346c:	6823      	ldr	r3, [r4, #0]
    346e:	b103      	cbz	r3, 3472 <_read_r+0x1e>
    3470:	602b      	str	r3, [r5, #0]
    3472:	bd38      	pop	{r3, r4, r5, pc}
    3474:	20000218 	.word	0x20000218

00003478 <_init>:
    3478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    347a:	bf00      	nop
    347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    347e:	bc08      	pop	{r3}
    3480:	469e      	mov	lr, r3
    3482:	4770      	bx	lr

00003484 <_fini>:
    3484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3486:	bf00      	nop
    3488:	bcf8      	pop	{r3, r4, r5, r6, r7}
    348a:	bc08      	pop	{r3}
    348c:	469e      	mov	lr, r3
    348e:	4770      	bx	lr

00003490 <_ZL18corePeripheralBase>:
    3490:	e000 e000                                   ....

00003494 <_ZN4Nvic10ENn_OFFSETE>:
    3494:	0100 0000 0104 0000 0108 0000 010c 0000     ................
    34a4:	0110 0000                                   ....

000034a8 <_ZN4Nvic11DISn_OFFSETE>:
    34a8:	0180 0000 0184 0000 0188 0000 018c 0000     ................
    34b8:	0190 0000                                   ....

000034bc <_ZN4Nvic12PENDn_OFFSETE>:
    34bc:	0200 0000 0204 0000 0208 0000 020c 0000     ................
    34cc:	0210 0000                                   ....

000034d0 <_ZN4Nvic14UNPENDn_OFFSETE>:
    34d0:	0280 0000 0284 0000 0288 0000 028c 0000     ................
    34e0:	0290 0000                                   ....

000034e4 <_ZN4Nvic14ACTIVEn_OFFSETE>:
    34e4:	0300 0000 0304 0000 0308 0000 030c 0000     ................
    34f4:	0310 0000                                   ....

000034f8 <_ZN4Nvic11PRIn_OFFSETE>:
    34f8:	0400 0000 0404 0000 0408 0000 040c 0000     ................
    3508:	040c 0000 0414 0000 0418 0000 041c 0000     ................
    3518:	0420 0000 0424 0000 0428 0000 042c 0000      ...$...(...,...
    3528:	0430 0000 0434 0000 0438 0000 043c 0000     0...4...8...<...
    3538:	0440 0000 0444 0000 0448 0000 044c 0000     @...D...H...L...
    3548:	0450 0000 0454 0000 0458 0000 045c 0000     P...T...X...\...
    3558:	0460 0000 0464 0000 0468 0000 046c 0000     `...d...h...l...
    3568:	0470 0000 0474 0000 0478 0000 047c 0000     p...t...x...|...
    3578:	0480 0000 0484 0000 0488 0000               ............

00003584 <_global_impure_ptr>:
    3584:	0014 2000 733a 6d65 6869 736f 6974 676e     ... :semihosting
    3594:	662d 6165 7574 6572 0073 0000               -features...

000035a0 <__sf_fake_stderr>:
	...

000035c0 <__sf_fake_stdin>:
	...

000035e0 <__sf_fake_stdout>:
	...

00003600 <__EH_FRAME_BEGIN__>:
    3600:	0000 0000                                   ....
