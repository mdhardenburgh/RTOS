
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	00 80 00 20 ad 02 00 00 ed 02 00 00 ed 02 00 00     ... ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	00 00 00 00 ed 02 00 00 ed 02 00 00 fd 02 00 00     ................
	...
      c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	...
      ec:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      fc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     10c:	ed 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
     150:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	...
     1b0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
     258:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     268:	ed 02 00 00                                         ....

0000026c <__do_global_dtors_aux>:
     26c:	b510      	push	{r4, lr}
     26e:	4c05      	ldr	r4, [pc, #20]	; (284 <__do_global_dtors_aux+0x18>)
     270:	7823      	ldrb	r3, [r4, #0]
     272:	b933      	cbnz	r3, 282 <__do_global_dtors_aux+0x16>
     274:	4b04      	ldr	r3, [pc, #16]	; (288 <__do_global_dtors_aux+0x1c>)
     276:	b113      	cbz	r3, 27e <__do_global_dtors_aux+0x12>
     278:	4804      	ldr	r0, [pc, #16]	; (28c <__do_global_dtors_aux+0x20>)
     27a:	f3af 8000 	nop.w
     27e:	2301      	movs	r3, #1
     280:	7023      	strb	r3, [r4, #0]
     282:	bd10      	pop	{r4, pc}
     284:	2000008c 	.word	0x2000008c
     288:	00000000 	.word	0x00000000
     28c:	00003e78 	.word	0x00003e78

00000290 <frame_dummy>:
     290:	b508      	push	{r3, lr}
     292:	4b03      	ldr	r3, [pc, #12]	; (2a0 <frame_dummy+0x10>)
     294:	b11b      	cbz	r3, 29e <frame_dummy+0xe>
     296:	4903      	ldr	r1, [pc, #12]	; (2a4 <frame_dummy+0x14>)
     298:	4803      	ldr	r0, [pc, #12]	; (2a8 <frame_dummy+0x18>)
     29a:	f3af 8000 	nop.w
     29e:	bd08      	pop	{r3, pc}
     2a0:	00000000 	.word	0x00000000
     2a4:	20000090 	.word	0x20000090
     2a8:	00003e78 	.word	0x00003e78

000002ac <Reset_Handler>:
 *    __data_start__: VMA of start of the section to copy to
 *    __data_end__: VMA of end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r1, =__etext
     2ac:	490a      	ldr	r1, [pc, #40]	; (2d8 <Reset_Handler+0x2c>)
	ldr	r2, =__data_start__
     2ae:	4a0b      	ldr	r2, [pc, #44]	; (2dc <Reset_Handler+0x30>)
	ldr	r3, =__data_end__
     2b0:	4b0b      	ldr	r3, [pc, #44]	; (2e0 <Reset_Handler+0x34>)

.L_loop1:
	cmp	r2, r3
     2b2:	429a      	cmp	r2, r3
	ittt	lt
     2b4:	bfbe      	ittt	lt
	ldrlt	r0, [r1], #4
     2b6:	f851 0b04 	ldrlt.w	r0, [r1], #4
	strlt	r0, [r2], #4
     2ba:	f842 0b04 	strlt.w	r0, [r2], #4
	blt	.L_loop1
     2be:	e7f8      	blt.n	2b2 <Reset_Handler+0x6>
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
	ldr	r1, =__bss_start__
     2c0:	4908      	ldr	r1, [pc, #32]	; (2e4 <Reset_Handler+0x38>)
	ldr	r2, =__bss_end__
     2c2:	4a09      	ldr	r2, [pc, #36]	; (2e8 <Reset_Handler+0x3c>)

	movs	r0, 0
     2c4:	2000      	movs	r0, #0
.L_loop3:
	cmp	r1, r2
     2c6:	4291      	cmp	r1, r2
	itt	lt
     2c8:	bfbc      	itt	lt
	strlt	r0, [r1], #4
     2ca:	f841 0b04 	strlt.w	r0, [r1], #4
	blt	.L_loop3
     2ce:	e7fa      	blt.n	2c6 <Reset_Handler+0x1a>
#endif /* __STARTUP_CLEAR_BSS_MULTIPLE || __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
	bl	SystemInit
     2d0:	f000 f87e 	bl	3d0 <SystemInit>
#endif

#ifndef __START
#define __START _start
#endif
	bl	__START
     2d4:	f000 f8d2 	bl	47c <main>
	ldr	r1, =__etext
     2d8:	0000417c 	.word	0x0000417c
	ldr	r2, =__data_start__
     2dc:	20000000 	.word	0x20000000
	ldr	r3, =__data_end__
     2e0:	2000008c 	.word	0x2000008c
	ldr	r1, =__bss_start__
     2e4:	2000008c 	.word	0x2000008c
	ldr	r2, =__bss_end__
     2e8:	20000220 	.word	0x20000220

000002ec <ADC_0_Sequence_0_Handler>:
	.align	1
	.thumb_func
	.weak	Default_Handler
	.type	Default_Handler, %function
Default_Handler:
	b	.
     2ec:	e7fe      	b.n	2ec <ADC_0_Sequence_0_Handler>
     2ee:	bf00      	nop

000002f0 <__cxa_pure_virtual>:
/**
 * These functions further help eliminate unwanted exceptions
 */

extern "C" void __cxa_pure_virtual() 
{ 
     2f0:	b480      	push	{r7}
     2f2:	af00      	add	r7, sp, #0
    while(1); 
     2f4:	e7fe      	b.n	2f4 <__cxa_pure_virtual+0x4>

000002f6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
}

void __gnu_cxx::__verbose_terminate_handler()
{
     2f6:	b480      	push	{r7}
     2f8:	af00      	add	r7, sp, #0
    while(1);
     2fa:	e7fe      	b.n	2fa <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x4>

000002fc <GPIO_Port_F_Handler>:
}

extern "C" void GPIO_Port_F_Handler(void)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	af00      	add	r7, sp, #0
    
    if(swtich1.read() == 1)
     300:	4824      	ldr	r0, [pc, #144]	; (394 <GPIO_Port_F_Handler+0x98>)
     302:	f001 f9a3 	bl	164c <_ZN4Gpio4readEv>
     306:	4603      	mov	r3, r0
     308:	2b01      	cmp	r3, #1
     30a:	bf0c      	ite	eq
     30c:	2301      	moveq	r3, #1
     30e:	2300      	movne	r3, #0
     310:	b2db      	uxtb	r3, r3
     312:	2b00      	cmp	r3, #0
     314:	d006      	beq.n	324 <GPIO_Port_F_Handler+0x28>
    {
        redLed.write((uint32_t)setORClear::clear);
     316:	2100      	movs	r1, #0
     318:	481f      	ldr	r0, [pc, #124]	; (398 <GPIO_Port_F_Handler+0x9c>)
     31a:	f001 f97b 	bl	1614 <_ZN4Gpio5writeEm>
        swtich1.interruptClear();
     31e:	481d      	ldr	r0, [pc, #116]	; (394 <GPIO_Port_F_Handler+0x98>)
     320:	f001 f963 	bl	15ea <_ZN4Gpio14interruptClearEv>
    }

    if(swtich1.read() == 0)
     324:	481b      	ldr	r0, [pc, #108]	; (394 <GPIO_Port_F_Handler+0x98>)
     326:	f001 f991 	bl	164c <_ZN4Gpio4readEv>
     32a:	4603      	mov	r3, r0
     32c:	2b00      	cmp	r3, #0
     32e:	bf0c      	ite	eq
     330:	2301      	moveq	r3, #1
     332:	2300      	movne	r3, #0
     334:	b2db      	uxtb	r3, r3
     336:	2b00      	cmp	r3, #0
     338:	d006      	beq.n	348 <GPIO_Port_F_Handler+0x4c>
    {
        redLed.write((uint32_t)setORClear::set);
     33a:	2101      	movs	r1, #1
     33c:	4816      	ldr	r0, [pc, #88]	; (398 <GPIO_Port_F_Handler+0x9c>)
     33e:	f001 f969 	bl	1614 <_ZN4Gpio5writeEm>
        swtich1.interruptClear();
     342:	4814      	ldr	r0, [pc, #80]	; (394 <GPIO_Port_F_Handler+0x98>)
     344:	f001 f951 	bl	15ea <_ZN4Gpio14interruptClearEv>
    }

    if(swtich2.read() == 1)
     348:	4814      	ldr	r0, [pc, #80]	; (39c <GPIO_Port_F_Handler+0xa0>)
     34a:	f001 f97f 	bl	164c <_ZN4Gpio4readEv>
     34e:	4603      	mov	r3, r0
     350:	2b01      	cmp	r3, #1
     352:	bf0c      	ite	eq
     354:	2301      	moveq	r3, #1
     356:	2300      	movne	r3, #0
     358:	b2db      	uxtb	r3, r3
     35a:	2b00      	cmp	r3, #0
     35c:	d006      	beq.n	36c <GPIO_Port_F_Handler+0x70>
    {
        blueLed.write((uint32_t)setORClear::clear);
     35e:	2100      	movs	r1, #0
     360:	480f      	ldr	r0, [pc, #60]	; (3a0 <GPIO_Port_F_Handler+0xa4>)
     362:	f001 f957 	bl	1614 <_ZN4Gpio5writeEm>
        swtich2.interruptClear();
     366:	480d      	ldr	r0, [pc, #52]	; (39c <GPIO_Port_F_Handler+0xa0>)
     368:	f001 f93f 	bl	15ea <_ZN4Gpio14interruptClearEv>
    }

    if(swtich2.read() == 0)
     36c:	480b      	ldr	r0, [pc, #44]	; (39c <GPIO_Port_F_Handler+0xa0>)
     36e:	f001 f96d 	bl	164c <_ZN4Gpio4readEv>
     372:	4603      	mov	r3, r0
     374:	2b00      	cmp	r3, #0
     376:	bf0c      	ite	eq
     378:	2301      	moveq	r3, #1
     37a:	2300      	movne	r3, #0
     37c:	b2db      	uxtb	r3, r3
     37e:	2b00      	cmp	r3, #0
     380:	d006      	beq.n	390 <GPIO_Port_F_Handler+0x94>
    {
        blueLed.write((uint32_t)setORClear::set);
     382:	2101      	movs	r1, #1
     384:	4806      	ldr	r0, [pc, #24]	; (3a0 <GPIO_Port_F_Handler+0xa4>)
     386:	f001 f945 	bl	1614 <_ZN4Gpio5writeEm>
        swtich2.interruptClear();
     38a:	4804      	ldr	r0, [pc, #16]	; (39c <GPIO_Port_F_Handler+0xa0>)
     38c:	f001 f92d 	bl	15ea <_ZN4Gpio14interruptClearEv>
    }

}
     390:	bf00      	nop
     392:	bd80      	pop	{r7, pc}
     394:	200000f4 	.word	0x200000f4
     398:	200000dc 	.word	0x200000dc
     39c:	2000010c 	.word	0x2000010c
     3a0:	200000c4 	.word	0x200000c4

000003a4 <_Z8pollTestv>:
//         myTimer.clearInterrupt();
//     } 
// }

void pollTest(void)
{
     3a4:	b580      	push	{r7, lr}
     3a6:	af00      	add	r7, sp, #0
    (void)testAdc.getAdcSample();
     3a8:	4807      	ldr	r0, [pc, #28]	; (3c8 <_Z8pollTestv+0x24>)
     3aa:	f000 fd38 	bl	e1e <_ZN3Adc12getAdcSampleEv>
    readme = testAdc.getAdcSample();
     3ae:	4806      	ldr	r0, [pc, #24]	; (3c8 <_Z8pollTestv+0x24>)
     3b0:	f000 fd35 	bl	e1e <_ZN3Adc12getAdcSampleEv>
     3b4:	4603      	mov	r3, r0
     3b6:	461a      	mov	r2, r3
     3b8:	4b04      	ldr	r3, [pc, #16]	; (3cc <_Z8pollTestv+0x28>)
     3ba:	601a      	str	r2, [r3, #0]
    testAdc.clearInterrupt();
     3bc:	4802      	ldr	r0, [pc, #8]	; (3c8 <_Z8pollTestv+0x24>)
     3be:	f000 fd44 	bl	e4a <_ZN3Adc14clearInterruptEv>
}
     3c2:	bf00      	nop
     3c4:	bd80      	pop	{r7, pc}
     3c6:	bf00      	nop
     3c8:	20000144 	.word	0x20000144
     3cc:	20000004 	.word	0x20000004

000003d0 <SystemInit>:

extern "C" void SystemInit(void)
{
     3d0:	b580      	push	{r7, lr}
     3d2:	b086      	sub	sp, #24
     3d4:	af06      	add	r7, sp, #24
    SystemControl::initializeGPIOHB();
     3d6:	f000 fecb 	bl	1170 <_ZN13SystemControl16initializeGPIOHBEv>
    SystemControl::initializeClock(_80MHz);
     3da:	2005      	movs	r0, #5
     3dc:	f000 ff00 	bl	11e0 <_ZN13SystemControl15initializeClockE7SYSDIV2>

    greenLed.initialize((uint32_t)PF3::M1PWM7, output);
     3e0:	2201      	movs	r2, #1
     3e2:	f241 01d2 	movw	r1, #4306	; 0x10d2
     3e6:	481d      	ldr	r0, [pc, #116]	; (45c <Stack_Size+0x5c>)
     3e8:	f000 ff80 	bl	12ec <_ZN4Gpio10initializeEm9direction>
    blueLed.initialize((uint32_t)PF2::GPIO, output); 
     3ec:	2201      	movs	r2, #1
     3ee:	f241 0168 	movw	r1, #4200	; 0x1068
     3f2:	481b      	ldr	r0, [pc, #108]	; (460 <Stack_Size+0x60>)
     3f4:	f000 ff7a 	bl	12ec <_ZN4Gpio10initializeEm9direction>
    redLed.initialize((uint32_t)PF1::GPIO, output);
     3f8:	2201      	movs	r2, #1
     3fa:	f241 0104 	movw	r1, #4100	; 0x1004
     3fe:	4819      	ldr	r0, [pc, #100]	; (464 <Stack_Size+0x64>)
     400:	f000 ff74 	bl	12ec <_ZN4Gpio10initializeEm9direction>
    adcPin.initialize((uint32_t)PE3::AIN0, input);
     404:	2200      	movs	r2, #0
     406:	f640 51ad 	movw	r1, #3501	; 0xdad
     40a:	4817      	ldr	r0, [pc, #92]	; (468 <Stack_Size+0x68>)
     40c:	f000 ff6e 	bl	12ec <_ZN4Gpio10initializeEm9direction>

    greenPwm.initializeSingle(7, module1, 0xFFFF, 0xFFFF/2, 0x1, countDirectionPwm::down, (uint32_t)ACTZERO::invertPwm, true, (uint32_t)pwmUnitClockDivisor::_64);
     410:	2305      	movs	r3, #5
     412:	9305      	str	r3, [sp, #20]
     414:	2301      	movs	r3, #1
     416:	9304      	str	r3, [sp, #16]
     418:	2301      	movs	r3, #1
     41a:	9303      	str	r3, [sp, #12]
     41c:	2300      	movs	r3, #0
     41e:	9302      	str	r3, [sp, #8]
     420:	2301      	movs	r3, #1
     422:	9301      	str	r3, [sp, #4]
     424:	f647 73ff 	movw	r3, #32767	; 0x7fff
     428:	9300      	str	r3, [sp, #0]
     42a:	f64f 73ff 	movw	r3, #65535	; 0xffff
     42e:	2201      	movs	r2, #1
     430:	2107      	movs	r1, #7
     432:	480e      	ldr	r0, [pc, #56]	; (46c <Stack_Size+0x6c>)
     434:	f001 f934 	bl	16a0 <_ZN3Pwm16initializeSingleEm9pwmModulemmm17countDirectionPwmmbm>

    testAdc.initializeModule((uint32_t)adcModule::module0, sequencerPriority, false, false);
     438:	4b0d      	ldr	r3, [pc, #52]	; (470 <Stack_Size+0x70>)
     43a:	681a      	ldr	r2, [r3, #0]
     43c:	2300      	movs	r3, #0
     43e:	9300      	str	r3, [sp, #0]
     440:	2300      	movs	r3, #0
     442:	2100      	movs	r1, #0
     444:	480b      	ldr	r0, [pc, #44]	; (474 <Stack_Size+0x74>)
     446:	f000 fa79 	bl	93c <_ZN3Adc16initializeModuleEmmmm>

    adcResolution = Adc::getAdcResolution();
     44a:	f000 fd3f 	bl	ecc <_ZN3Adc16getAdcResolutionEv>
     44e:	4602      	mov	r2, r0
     450:	4b09      	ldr	r3, [pc, #36]	; (478 <Stack_Size+0x78>)
     452:	601a      	str	r2, [r3, #0]
}
     454:	bf00      	nop
     456:	46bd      	mov	sp, r7
     458:	bd80      	pop	{r7, pc}
     45a:	bf00      	nop
     45c:	200000ac 	.word	0x200000ac
     460:	200000c4 	.word	0x200000c4
     464:	200000dc 	.word	0x200000dc
     468:	20000124 	.word	0x20000124
     46c:	2000013c 	.word	0x2000013c
     470:	2000000c 	.word	0x2000000c
     474:	20000144 	.word	0x20000144
     478:	200000a8 	.word	0x200000a8

0000047c <main>:
 
int main(void)
{
     47c:	b5b0      	push	{r4, r5, r7, lr}
     47e:	b082      	sub	sp, #8
     480:	af02      	add	r7, sp, #8
    
    Nvic::disableInterrupts();
     482:	f000 fa1d 	bl	8c0 <_ZN4Nvic17disableInterruptsEv>

    swtich1.initialize((uint32_t)PF4::GPIO, input, 3);
     486:	2303      	movs	r3, #3
     488:	2200      	movs	r2, #0
     48a:	f241 1130 	movw	r1, #4400	; 0x1130
     48e:	482c      	ldr	r0, [pc, #176]	; (540 <main+0xc4>)
     490:	f001 f846 	bl	1520 <_ZN4Gpio10initializeEm9directionm>
    swtich2.initialize((uint32_t)PF0::GPIO, input, 3);
     494:	2303      	movs	r3, #3
     496:	2200      	movs	r2, #0
     498:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
     49c:	4829      	ldr	r0, [pc, #164]	; (544 <main+0xc8>)
     49e:	f001 f83f 	bl	1520 <_ZN4Gpio10initializeEm9directionm>

    // myTimer.initializeForInterupt(periodic, shortTimer0, 80000000, down, concatenated, 3);
    // myTimer.enableTimer();

    Nvic::enableInterrupts();
     4a2:	f000 fa1c 	bl	8de <_ZN4Nvic16enableInterruptsEv>

    testAdc.initializeForPolling((uint32_t)sampleSequencer::SS3, (uint32_t)ssTriggerSource::processor, (uint32_t)ssInputSrc0::AIN0, (uint32_t)ssControl0::END0|(uint32_t)ssControl0::IE0, pollTest);
     4a6:	4b28      	ldr	r3, [pc, #160]	; (548 <main+0xcc>)
     4a8:	9301      	str	r3, [sp, #4]
     4aa:	2306      	movs	r3, #6
     4ac:	9300      	str	r3, [sp, #0]
     4ae:	2300      	movs	r3, #0
     4b0:	2200      	movs	r2, #0
     4b2:	2103      	movs	r1, #3
     4b4:	4825      	ldr	r0, [pc, #148]	; (54c <main+0xd0>)
     4b6:	f000 fab3 	bl	a20 <_ZN3Adc20initializeForPollingEmmmmPFvvE>
    testAdc.enableSampleSequencer();
     4ba:	4824      	ldr	r0, [pc, #144]	; (54c <main+0xd0>)
     4bc:	f000 fb3d 	bl	b3a <_ZN3Adc21enableSampleSequencerEv>
    testAdc.initiateSampling();
     4c0:	4822      	ldr	r0, [pc, #136]	; (54c <main+0xd0>)
     4c2:	f000 fc98 	bl	df6 <_ZN3Adc16initiateSamplingEv>

    blueLed.write((uint32_t)setORClear::set);
     4c6:	2101      	movs	r1, #1
     4c8:	4821      	ldr	r0, [pc, #132]	; (550 <main+0xd4>)
     4ca:	f001 f8a3 	bl	1614 <_ZN4Gpio5writeEm>
    redLed.write((uint32_t)setORClear::set);
     4ce:	2101      	movs	r1, #1
     4d0:	4820      	ldr	r0, [pc, #128]	; (554 <main+0xd8>)
     4d2:	f001 f89f 	bl	1614 <_ZN4Gpio5writeEm>
        
    while(1)
    {
        // Nvic::wfi();
        testAdc.pollStatus();
     4d6:	481d      	ldr	r0, [pc, #116]	; (54c <main+0xd0>)
     4d8:	f000 fc54 	bl	d84 <_ZN3Adc10pollStatusEv>
        voltageValue = (3.3/(1<<adcResolution))*readme;
     4dc:	4b1e      	ldr	r3, [pc, #120]	; (558 <main+0xdc>)
     4de:	681b      	ldr	r3, [r3, #0]
     4e0:	2201      	movs	r2, #1
     4e2:	fa02 f303 	lsl.w	r3, r2, r3
     4e6:	4618      	mov	r0, r3
     4e8:	f001 fbba 	bl	1c60 <__aeabi_i2d>
     4ec:	4603      	mov	r3, r0
     4ee:	460c      	mov	r4, r1
     4f0:	461a      	mov	r2, r3
     4f2:	4623      	mov	r3, r4
     4f4:	a110      	add	r1, pc, #64	; (adr r1, 538 <main+0xbc>)
     4f6:	e9d1 0100 	ldrd	r0, r1, [r1]
     4fa:	f001 fd45 	bl	1f88 <__aeabi_ddiv>
     4fe:	4603      	mov	r3, r0
     500:	460c      	mov	r4, r1
     502:	4625      	mov	r5, r4
     504:	461c      	mov	r4, r3
     506:	4b15      	ldr	r3, [pc, #84]	; (55c <main+0xe0>)
     508:	681b      	ldr	r3, [r3, #0]
     50a:	4618      	mov	r0, r3
     50c:	f001 fba8 	bl	1c60 <__aeabi_i2d>
     510:	4602      	mov	r2, r0
     512:	460b      	mov	r3, r1
     514:	4620      	mov	r0, r4
     516:	4629      	mov	r1, r5
     518:	f001 fc0c 	bl	1d34 <__aeabi_dmul>
     51c:	4603      	mov	r3, r0
     51e:	460c      	mov	r4, r1
     520:	4618      	mov	r0, r3
     522:	4621      	mov	r1, r4
     524:	f001 fe18 	bl	2158 <__aeabi_d2f>
     528:	4602      	mov	r2, r0
     52a:	4b0d      	ldr	r3, [pc, #52]	; (560 <main+0xe4>)
     52c:	601a      	str	r2, [r3, #0]
        voltageValue = voltageValue;
     52e:	4b0c      	ldr	r3, [pc, #48]	; (560 <main+0xe4>)
     530:	681b      	ldr	r3, [r3, #0]
     532:	4a0b      	ldr	r2, [pc, #44]	; (560 <main+0xe4>)
     534:	6013      	str	r3, [r2, #0]
        testAdc.pollStatus();
     536:	e7ce      	b.n	4d6 <main+0x5a>
     538:	66666666 	.word	0x66666666
     53c:	400a6666 	.word	0x400a6666
     540:	200000f4 	.word	0x200000f4
     544:	2000010c 	.word	0x2000010c
     548:	000003a5 	.word	0x000003a5
     54c:	20000144 	.word	0x20000144
     550:	200000c4 	.word	0x200000c4
     554:	200000dc 	.word	0x200000dc
     558:	200000a8 	.word	0x200000a8
     55c:	20000004 	.word	0x20000004
     560:	20000008 	.word	0x20000008

00000564 <_Z41__static_initialization_and_destruction_0ii>:
    }

}
     564:	b580      	push	{r7, lr}
     566:	b082      	sub	sp, #8
     568:	af00      	add	r7, sp, #0
     56a:	6078      	str	r0, [r7, #4]
     56c:	6039      	str	r1, [r7, #0]
     56e:	687b      	ldr	r3, [r7, #4]
     570:	2b01      	cmp	r3, #1
     572:	d144      	bne.n	5fe <_Z41__static_initialization_and_destruction_0ii+0x9a>
     574:	683b      	ldr	r3, [r7, #0]
     576:	f64f 72ff 	movw	r2, #65535	; 0xffff
     57a:	4293      	cmp	r3, r2
     57c:	d13f      	bne.n	5fe <_Z41__static_initialization_and_destruction_0ii+0x9a>
Gpio greenLed;
     57e:	4822      	ldr	r0, [pc, #136]	; (608 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
     580:	f000 fe9a 	bl	12b8 <_ZN4GpioC1Ev>
     584:	4a21      	ldr	r2, [pc, #132]	; (60c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     586:	4922      	ldr	r1, [pc, #136]	; (610 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     588:	481f      	ldr	r0, [pc, #124]	; (608 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
     58a:	f001 fa11 	bl	19b0 <__aeabi_atexit>
Gpio blueLed;
     58e:	4821      	ldr	r0, [pc, #132]	; (614 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     590:	f000 fe92 	bl	12b8 <_ZN4GpioC1Ev>
     594:	4a1d      	ldr	r2, [pc, #116]	; (60c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     596:	491e      	ldr	r1, [pc, #120]	; (610 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     598:	481e      	ldr	r0, [pc, #120]	; (614 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     59a:	f001 fa09 	bl	19b0 <__aeabi_atexit>
Gpio redLed;
     59e:	481e      	ldr	r0, [pc, #120]	; (618 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     5a0:	f000 fe8a 	bl	12b8 <_ZN4GpioC1Ev>
     5a4:	4a19      	ldr	r2, [pc, #100]	; (60c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     5a6:	491a      	ldr	r1, [pc, #104]	; (610 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     5a8:	481b      	ldr	r0, [pc, #108]	; (618 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     5aa:	f001 fa01 	bl	19b0 <__aeabi_atexit>
Gpio swtich1;
     5ae:	481b      	ldr	r0, [pc, #108]	; (61c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     5b0:	f000 fe82 	bl	12b8 <_ZN4GpioC1Ev>
     5b4:	4a15      	ldr	r2, [pc, #84]	; (60c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     5b6:	4916      	ldr	r1, [pc, #88]	; (610 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     5b8:	4818      	ldr	r0, [pc, #96]	; (61c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     5ba:	f001 f9f9 	bl	19b0 <__aeabi_atexit>
Gpio swtich2;
     5be:	4818      	ldr	r0, [pc, #96]	; (620 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     5c0:	f000 fe7a 	bl	12b8 <_ZN4GpioC1Ev>
     5c4:	4a11      	ldr	r2, [pc, #68]	; (60c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     5c6:	4912      	ldr	r1, [pc, #72]	; (610 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     5c8:	4815      	ldr	r0, [pc, #84]	; (620 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     5ca:	f001 f9f1 	bl	19b0 <__aeabi_atexit>
Gpio adcPin;
     5ce:	4815      	ldr	r0, [pc, #84]	; (624 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     5d0:	f000 fe72 	bl	12b8 <_ZN4GpioC1Ev>
     5d4:	4a0d      	ldr	r2, [pc, #52]	; (60c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     5d6:	490e      	ldr	r1, [pc, #56]	; (610 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     5d8:	4812      	ldr	r0, [pc, #72]	; (624 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     5da:	f001 f9e9 	bl	19b0 <__aeabi_atexit>
Pwm greenPwm;
     5de:	4812      	ldr	r0, [pc, #72]	; (628 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     5e0:	f001 f848 	bl	1674 <_ZN3PwmC1Ev>
     5e4:	4a09      	ldr	r2, [pc, #36]	; (60c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     5e6:	4911      	ldr	r1, [pc, #68]	; (62c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     5e8:	480f      	ldr	r0, [pc, #60]	; (628 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     5ea:	f001 f9e1 	bl	19b0 <__aeabi_atexit>
Adc testAdc;
     5ee:	4810      	ldr	r0, [pc, #64]	; (630 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     5f0:	f000 f98e 	bl	910 <_ZN3AdcC1Ev>
     5f4:	4a05      	ldr	r2, [pc, #20]	; (60c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     5f6:	490f      	ldr	r1, [pc, #60]	; (634 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     5f8:	480d      	ldr	r0, [pc, #52]	; (630 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     5fa:	f001 f9d9 	bl	19b0 <__aeabi_atexit>
}
     5fe:	bf00      	nop
     600:	3708      	adds	r7, #8
     602:	46bd      	mov	sp, r7
     604:	bd80      	pop	{r7, pc}
     606:	bf00      	nop
     608:	200000ac 	.word	0x200000ac
     60c:	20000000 	.word	0x20000000
     610:	000012d7 	.word	0x000012d7
     614:	200000c4 	.word	0x200000c4
     618:	200000dc 	.word	0x200000dc
     61c:	200000f4 	.word	0x200000f4
     620:	2000010c 	.word	0x2000010c
     624:	20000124 	.word	0x20000124
     628:	2000013c 	.word	0x2000013c
     62c:	0000168b 	.word	0x0000168b
     630:	20000144 	.word	0x20000144
     634:	00000927 	.word	0x00000927

00000638 <_GLOBAL__sub_I_readme>:
     638:	b580      	push	{r7, lr}
     63a:	af00      	add	r7, sp, #0
     63c:	f64f 71ff 	movw	r1, #65535	; 0xffff
     640:	2001      	movs	r0, #1
     642:	f7ff ff8f 	bl	564 <_Z41__static_initialization_and_destruction_0ii>
     646:	bd80      	pop	{r7, pc}

00000648 <_ZN8RegisterC1Ev>:
#include "register.h"

/**
 * @brief empty constructor placeholder
 */
Register::Register()
     648:	b480      	push	{r7}
     64a:	b083      	sub	sp, #12
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
{
    
}
     650:	687b      	ldr	r3, [r7, #4]
     652:	4618      	mov	r0, r3
     654:	370c      	adds	r7, #12
     656:	46bd      	mov	sp, r7
     658:	f85d 7b04 	ldr.w	r7, [sp], #4
     65c:	4770      	bx	lr

0000065e <_ZN8RegisterD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Register::~Register()
     65e:	b480      	push	{r7}
     660:	b083      	sub	sp, #12
     662:	af00      	add	r7, sp, #0
     664:	6078      	str	r0, [r7, #4]
{

}
     666:	687b      	ldr	r3, [r7, #4]
     668:	4618      	mov	r0, r3
     66a:	370c      	adds	r7, #12
     66c:	46bd      	mov	sp, r7
     66e:	f85d 7b04 	ldr.w	r7, [sp], #4
     672:	4770      	bx	lr

00000674 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>:
 * @param permission of the bitfield, read-only, write-only, etc...
 * 
 * @return retrieved information in the bitfield
 */
uint32_t Register::getRegisterBitFieldStatus(volatile uint32_t* address, uint32_t bit, uint32_t bitWidth, bitFieldPermission permission)
{
     674:	b480      	push	{r7}
     676:	b087      	sub	sp, #28
     678:	af00      	add	r7, sp, #0
     67a:	60f8      	str	r0, [r7, #12]
     67c:	60b9      	str	r1, [r7, #8]
     67e:	607a      	str	r2, [r7, #4]
     680:	70fb      	strb	r3, [r7, #3]
    if((permission == RW) || (permission == RO) || (permission == RW1C))
     682:	78fb      	ldrb	r3, [r7, #3]
     684:	2b00      	cmp	r3, #0
     686:	d005      	beq.n	694 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x20>
     688:	78fb      	ldrb	r3, [r7, #3]
     68a:	2b01      	cmp	r3, #1
     68c:	d002      	beq.n	694 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x20>
     68e:	78fb      	ldrb	r3, [r7, #3]
     690:	2b03      	cmp	r3, #3
     692:	d111      	bne.n	6b8 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x44>
    {
        uint32_t select = ((((0xFFFFFFFF >> (32 - bitWidth)))) << bit);
     694:	687b      	ldr	r3, [r7, #4]
     696:	f1c3 0320 	rsb	r3, r3, #32
     69a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     69e:	40da      	lsrs	r2, r3
     6a0:	68bb      	ldr	r3, [r7, #8]
     6a2:	fa02 f303 	lsl.w	r3, r2, r3
     6a6:	617b      	str	r3, [r7, #20]
        return(((*address) & select) >> bit);
     6a8:	68fb      	ldr	r3, [r7, #12]
     6aa:	681a      	ldr	r2, [r3, #0]
     6ac:	697b      	ldr	r3, [r7, #20]
     6ae:	401a      	ands	r2, r3
     6b0:	68bb      	ldr	r3, [r7, #8]
     6b2:	fa22 f303 	lsr.w	r3, r2, r3
     6b6:	e001      	b.n	6bc <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x48>
    }

    else
    {
        return(UINT32_MAX);
     6b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
     6bc:	4618      	mov	r0, r3
     6be:	371c      	adds	r7, #28
     6c0:	46bd      	mov	sp, r7
     6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
     6c6:	4770      	bx	lr

000006c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>:
 * @param bit to be set or the first bit of the bitfield to be set
 * @param width of the bitfield
 * @param permission of the bitfield, read-only, write-only, etc...
 */
void Register::setRegisterBitFieldStatus(volatile uint32_t* address, uint32_t value, uint32_t bit, uint32_t bitWidth, bitFieldPermission permission)
{
     6c8:	b480      	push	{r7}
     6ca:	b087      	sub	sp, #28
     6cc:	af00      	add	r7, sp, #0
     6ce:	60f8      	str	r0, [r7, #12]
     6d0:	60b9      	str	r1, [r7, #8]
     6d2:	607a      	str	r2, [r7, #4]
     6d4:	603b      	str	r3, [r7, #0]
    if((permission == RW1C) && (value != 1))
     6d6:	f897 3020 	ldrb.w	r3, [r7, #32]
     6da:	2b03      	cmp	r3, #3
     6dc:	d102      	bne.n	6e4 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x1c>
     6de:	68bb      	ldr	r3, [r7, #8]
     6e0:	2b01      	cmp	r3, #1
     6e2:	d12f      	bne.n	744 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x7c>
    {
        return;
    }
    
    else if((permission == RW) || (permission == WO) || (permission == RW1C))
     6e4:	f897 3020 	ldrb.w	r3, [r7, #32]
     6e8:	2b00      	cmp	r3, #0
     6ea:	d007      	beq.n	6fc <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x34>
     6ec:	f897 3020 	ldrb.w	r3, [r7, #32]
     6f0:	2b02      	cmp	r3, #2
     6f2:	d003      	beq.n	6fc <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x34>
     6f4:	f897 3020 	ldrb.w	r3, [r7, #32]
     6f8:	2b03      	cmp	r3, #3
     6fa:	d125      	bne.n	748 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x80>
    {
        uint32_t maxValue = (0xFFFFFFFF >> (32 - bitWidth));
     6fc:	683b      	ldr	r3, [r7, #0]
     6fe:	f1c3 0320 	rsb	r3, r3, #32
     702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     706:	fa22 f303 	lsr.w	r3, r2, r3
     70a:	617b      	str	r3, [r7, #20]

        if((value <= maxValue))
     70c:	68ba      	ldr	r2, [r7, #8]
     70e:	697b      	ldr	r3, [r7, #20]
     710:	429a      	cmp	r2, r3
     712:	d81b      	bhi.n	74c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x84>
        {
            uint32_t clear = (~(maxValue << bit));
     714:	697a      	ldr	r2, [r7, #20]
     716:	687b      	ldr	r3, [r7, #4]
     718:	fa02 f303 	lsl.w	r3, r2, r3
     71c:	43db      	mvns	r3, r3
     71e:	613b      	str	r3, [r7, #16]
            value = value << bit;
     720:	68ba      	ldr	r2, [r7, #8]
     722:	687b      	ldr	r3, [r7, #4]
     724:	fa02 f303 	lsl.w	r3, r2, r3
     728:	60bb      	str	r3, [r7, #8]
    
            (*address) &= clear;
     72a:	68fb      	ldr	r3, [r7, #12]
     72c:	681a      	ldr	r2, [r3, #0]
     72e:	693b      	ldr	r3, [r7, #16]
     730:	401a      	ands	r2, r3
     732:	68fb      	ldr	r3, [r7, #12]
     734:	601a      	str	r2, [r3, #0]
            (*address) |= value;
     736:	68fb      	ldr	r3, [r7, #12]
     738:	681a      	ldr	r2, [r3, #0]
     73a:	68bb      	ldr	r3, [r7, #8]
     73c:	431a      	orrs	r2, r3
     73e:	68fb      	ldr	r3, [r7, #12]
     740:	601a      	str	r2, [r3, #0]
        }

        else
        {
            return;
        }
     742:	e004      	b.n	74e <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
        return;
     744:	bf00      	nop
     746:	e002      	b.n	74e <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
        
    }

    else
    {
        return;
     748:	bf00      	nop
     74a:	e000      	b.n	74e <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
            return;
     74c:	bf00      	nop
    }
}
     74e:	371c      	adds	r7, #28
     750:	46bd      	mov	sp, r7
     752:	f85d 7b04 	ldr.w	r7, [sp], #4
     756:	4770      	bx	lr

00000758 <_Znwj>:


void* operator new(size_t size) noexcept 
{ 
     758:	b580      	push	{r7, lr}
     75a:	b082      	sub	sp, #8
     75c:	af00      	add	r7, sp, #0
     75e:	6078      	str	r0, [r7, #4]
    return malloc(size); 
     760:	6878      	ldr	r0, [r7, #4]
     762:	f002 fcd9 	bl	3118 <malloc>
     766:	4603      	mov	r3, r0
} 
     768:	4618      	mov	r0, r3
     76a:	3708      	adds	r7, #8
     76c:	46bd      	mov	sp, r7
     76e:	bd80      	pop	{r7, pc}

00000770 <_ZdlPv>:

void operator delete(void *p) noexcept 
{ 
     770:	b580      	push	{r7, lr}
     772:	b082      	sub	sp, #8
     774:	af00      	add	r7, sp, #0
     776:	6078      	str	r0, [r7, #4]
    free(p); 
     778:	6878      	ldr	r0, [r7, #4]
     77a:	f002 fcd5 	bl	3128 <free>
} 
     77e:	bf00      	nop
     780:	3708      	adds	r7, #8
     782:	46bd      	mov	sp, r7
     784:	bd80      	pop	{r7, pc}

00000786 <_Znaj>:

void* operator new[](size_t size) noexcept 
{ 
     786:	b580      	push	{r7, lr}
     788:	b082      	sub	sp, #8
     78a:	af00      	add	r7, sp, #0
     78c:	6078      	str	r0, [r7, #4]
    return operator new(size); // Same as regular new
     78e:	6878      	ldr	r0, [r7, #4]
     790:	f7ff ffe2 	bl	758 <_Znwj>
     794:	4603      	mov	r3, r0
} 
     796:	4618      	mov	r0, r3
     798:	3708      	adds	r7, #8
     79a:	46bd      	mov	sp, r7
     79c:	bd80      	pop	{r7, pc}

0000079e <_ZdaPv>:

void operator delete[](void *p) noexcept 
{ 
     79e:	b580      	push	{r7, lr}
     7a0:	b082      	sub	sp, #8
     7a2:	af00      	add	r7, sp, #0
     7a4:	6078      	str	r0, [r7, #4]
    operator delete(p); // Same as regular delete
     7a6:	6878      	ldr	r0, [r7, #4]
     7a8:	f7ff ffe2 	bl	770 <_ZdlPv>
} 
     7ac:	bf00      	nop
     7ae:	3708      	adds	r7, #8
     7b0:	46bd      	mov	sp, r7
     7b2:	bd80      	pop	{r7, pc}

000007b4 <_ZnwjSt9nothrow_t>:

void* operator new(size_t size, std::nothrow_t) noexcept 
{ 
     7b4:	b580      	push	{r7, lr}
     7b6:	b082      	sub	sp, #8
     7b8:	af00      	add	r7, sp, #0
     7ba:	6078      	str	r0, [r7, #4]
     7bc:	7039      	strb	r1, [r7, #0]
    return operator new(size); // Same as regular new 
     7be:	6878      	ldr	r0, [r7, #4]
     7c0:	f7ff ffca 	bl	758 <_Znwj>
     7c4:	4603      	mov	r3, r0
} 
     7c6:	4618      	mov	r0, r3
     7c8:	3708      	adds	r7, #8
     7ca:	46bd      	mov	sp, r7
     7cc:	bd80      	pop	{r7, pc}

000007ce <_ZdlPvSt9nothrow_t>:

void operator delete(void *p,  std::nothrow_t) noexcept 
{ 
     7ce:	b580      	push	{r7, lr}
     7d0:	b082      	sub	sp, #8
     7d2:	af00      	add	r7, sp, #0
     7d4:	6078      	str	r0, [r7, #4]
     7d6:	7039      	strb	r1, [r7, #0]
    operator delete(p); // Same as regular delete
     7d8:	6878      	ldr	r0, [r7, #4]
     7da:	f7ff ffc9 	bl	770 <_ZdlPv>
} 
     7de:	bf00      	nop
     7e0:	3708      	adds	r7, #8
     7e2:	46bd      	mov	sp, r7
     7e4:	bd80      	pop	{r7, pc}

000007e6 <_ZnajSt9nothrow_t>:

void* operator new[](size_t size, std::nothrow_t) noexcept 
{ 
     7e6:	b580      	push	{r7, lr}
     7e8:	b082      	sub	sp, #8
     7ea:	af00      	add	r7, sp, #0
     7ec:	6078      	str	r0, [r7, #4]
     7ee:	7039      	strb	r1, [r7, #0]
    return operator new(size); // Same as regular new
     7f0:	6878      	ldr	r0, [r7, #4]
     7f2:	f7ff ffb1 	bl	758 <_Znwj>
     7f6:	4603      	mov	r3, r0
} 
     7f8:	4618      	mov	r0, r3
     7fa:	3708      	adds	r7, #8
     7fc:	46bd      	mov	sp, r7
     7fe:	bd80      	pop	{r7, pc}

00000800 <_ZdaPvSt9nothrow_t>:

void operator delete[](void *p,  std::nothrow_t) noexcept 
{ 
     800:	b580      	push	{r7, lr}
     802:	b082      	sub	sp, #8
     804:	af00      	add	r7, sp, #0
     806:	6078      	str	r0, [r7, #4]
     808:	7039      	strb	r1, [r7, #0]
    operator delete(p); // Same as regular delete
     80a:	6878      	ldr	r0, [r7, #4]
     80c:	f7ff ffb0 	bl	770 <_ZdlPv>
}
     810:	bf00      	nop
     812:	3708      	adds	r7, #8
     814:	46bd      	mov	sp, r7
     816:	bd80      	pop	{r7, pc}

00000818 <_ZN4NvicC1Ev>:


/**
 * @brief empty constructor placeholder
 */
Nvic::Nvic()
     818:	b480      	push	{r7}
     81a:	b083      	sub	sp, #12
     81c:	af00      	add	r7, sp, #0
     81e:	6078      	str	r0, [r7, #4]
{

}
     820:	687b      	ldr	r3, [r7, #4]
     822:	4618      	mov	r0, r3
     824:	370c      	adds	r7, #12
     826:	46bd      	mov	sp, r7
     828:	f85d 7b04 	ldr.w	r7, [sp], #4
     82c:	4770      	bx	lr

0000082e <_ZN4NvicD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Nvic::~Nvic()
     82e:	b480      	push	{r7}
     830:	b083      	sub	sp, #12
     832:	af00      	add	r7, sp, #0
     834:	6078      	str	r0, [r7, #4]
{

}
     836:	687b      	ldr	r3, [r7, #4]
     838:	4618      	mov	r0, r3
     83a:	370c      	adds	r7, #12
     83c:	46bd      	mov	sp, r7
     83e:	f85d 7b04 	ldr.w	r7, [sp], #4
     842:	4770      	bx	lr

00000844 <_ZN4Nvic17activateInterruptE9interruptm>:
 * @param myInterrupt coresponds to the interrupt number of the interrupt that 
 *        you want to activate.
 * @param priority of the interrput that you want to activate
 */
void Nvic::activateInterrupt(interrupt myInterrupt, uint32_t priority)
{
     844:	b580      	push	{r7, lr}
     846:	b084      	sub	sp, #16
     848:	af02      	add	r7, sp, #8
     84a:	4603      	mov	r3, r0
     84c:	6039      	str	r1, [r7, #0]
     84e:	71fb      	strb	r3, [r7, #7]
    
    if((myInterrupt < 139) && (priority < 8))
     850:	79fb      	ldrb	r3, [r7, #7]
     852:	2b8a      	cmp	r3, #138	; 0x8a
     854:	d82b      	bhi.n	8ae <_ZN4Nvic17activateInterruptE9interruptm+0x6a>
     856:	683b      	ldr	r3, [r7, #0]
     858:	2b07      	cmp	r3, #7
     85a:	d828      	bhi.n	8ae <_ZN4Nvic17activateInterruptE9interruptm+0x6a>
    {   
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(corePeripheralBase + PRIn_OFFSET[myInterrupt/4])), priority, ((myInterrupt % nvicRegisterOffset) * 8) + 5, 3, RW);
     85c:	79fb      	ldrb	r3, [r7, #7]
     85e:	089b      	lsrs	r3, r3, #2
     860:	b2db      	uxtb	r3, r3
     862:	461a      	mov	r2, r3
     864:	4b14      	ldr	r3, [pc, #80]	; (8b8 <_ZN4Nvic17activateInterruptE9interruptm+0x74>)
     866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     86a:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
     86e:	4618      	mov	r0, r3
     870:	79fb      	ldrb	r3, [r7, #7]
     872:	f003 0303 	and.w	r3, r3, #3
     876:	00db      	lsls	r3, r3, #3
     878:	1d5a      	adds	r2, r3, #5
     87a:	2300      	movs	r3, #0
     87c:	9300      	str	r3, [sp, #0]
     87e:	2303      	movs	r3, #3
     880:	6839      	ldr	r1, [r7, #0]
     882:	f7ff ff21 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(corePeripheralBase + ENn_OFFSET[myInterrupt/32])), (uint32_t)setORClear::set, (uint32_t)(myInterrupt % 32), 1, RW);
     886:	79fb      	ldrb	r3, [r7, #7]
     888:	095b      	lsrs	r3, r3, #5
     88a:	b2db      	uxtb	r3, r3
     88c:	461a      	mov	r2, r3
     88e:	4b0b      	ldr	r3, [pc, #44]	; (8bc <_ZN4Nvic17activateInterruptE9interruptm+0x78>)
     890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     894:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
     898:	4618      	mov	r0, r3
     89a:	79fb      	ldrb	r3, [r7, #7]
     89c:	f003 021f 	and.w	r2, r3, #31
     8a0:	2300      	movs	r3, #0
     8a2:	9300      	str	r3, [sp, #0]
     8a4:	2301      	movs	r3, #1
     8a6:	2101      	movs	r1, #1
     8a8:	f7ff ff0e 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
     8ac:	e000      	b.n	8b0 <_ZN4Nvic17activateInterruptE9interruptm+0x6c>

    }
    
    else
    {
        return;
     8ae:	bf00      	nop
    }
}
     8b0:	3708      	adds	r7, #8
     8b2:	46bd      	mov	sp, r7
     8b4:	bd80      	pop	{r7, pc}
     8b6:	bf00      	nop
     8b8:	00003d70 	.word	0x00003d70
     8bc:	00003d0c 	.word	0x00003d0c

000008c0 <_ZN4Nvic17disableInterruptsEv>:
 *         value to void.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
uint32_t Nvic::disableInterrupts(void)
{
     8c0:	b480      	push	{r7}
     8c2:	b083      	sub	sp, #12
     8c4:	af00      	add	r7, sp, #0

        "mrs     r0, PRIMASK\n"
        "cpsid   i\n"
        "bx      lr\n"
        : "=r" (ui32Ret)
    );
     8c6:	f3ef 8010 	mrs	r0, PRIMASK
     8ca:	b672      	cpsid	i
     8cc:	4770      	bx	lr
     8ce:	607b      	str	r3, [r7, #4]

    return(ui32Ret);
     8d0:	687b      	ldr	r3, [r7, #4]
}
     8d2:	4618      	mov	r0, r3
     8d4:	370c      	adds	r7, #12
     8d6:	46bd      	mov	sp, r7
     8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     8dc:	4770      	bx	lr

000008de <_ZN4Nvic16enableInterruptsEv>:
 *         value to void.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
uint32_t Nvic::enableInterrupts(void)
{
     8de:	b480      	push	{r7}
     8e0:	b083      	sub	sp, #12
     8e2:	af00      	add	r7, sp, #0

        "mrs     r0, PRIMASK\n"
        "cpsie   i\n"
        "bx      lr\n"
        : "=r" (ui32Ret)
    );
     8e4:	f3ef 8010 	mrs	r0, PRIMASK
     8e8:	b662      	cpsie	i
     8ea:	4770      	bx	lr
     8ec:	607b      	str	r3, [r7, #4]

    return(ui32Ret);
     8ee:	687b      	ldr	r3, [r7, #4]
}
     8f0:	4618      	mov	r0, r3
     8f2:	370c      	adds	r7, #12
     8f4:	46bd      	mov	sp, r7
     8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
     8fa:	4770      	bx	lr

000008fc <_ZN4Nvic3wfiEv>:
 *        module and waits for another interrupt.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
void Nvic::wfi(void)
{
     8fc:	b480      	push	{r7}
     8fe:	af00      	add	r7, sp, #0
    //
    asm volatile(

        "wfi     \n"
        "bx    lr\n"
    );
     900:	bf30      	wfi
     902:	4770      	bx	lr
    
}
     904:	bf00      	nop
     906:	46bd      	mov	sp, r7
     908:	f85d 7b04 	ldr.w	r7, [sp], #4
     90c:	4770      	bx	lr
     90e:	bf00      	nop

00000910 <_ZN3AdcC1Ev>:
#include "adc.h"

/**
 * @brief empty constructor placeholder
 */
Adc::Adc()
     910:	b480      	push	{r7}
     912:	b083      	sub	sp, #12
     914:	af00      	add	r7, sp, #0
     916:	6078      	str	r0, [r7, #4]
{

}
     918:	687b      	ldr	r3, [r7, #4]
     91a:	4618      	mov	r0, r3
     91c:	370c      	adds	r7, #12
     91e:	46bd      	mov	sp, r7
     920:	f85d 7b04 	ldr.w	r7, [sp], #4
     924:	4770      	bx	lr

00000926 <_ZN3AdcD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Adc::~Adc()
     926:	b480      	push	{r7}
     928:	b083      	sub	sp, #12
     92a:	af00      	add	r7, sp, #0
     92c:	6078      	str	r0, [r7, #4]
{

}
     92e:	687b      	ldr	r3, [r7, #4]
     930:	4618      	mov	r0, r3
     932:	370c      	adds	r7, #12
     934:	46bd      	mov	sp, r7
     936:	f85d 7b04 	ldr.w	r7, [sp], #4
     93a:	4770      	bx	lr

0000093c <_ZN3Adc16initializeModuleEmmmm>:

void Adc::initializeModule(uint32_t adcModule, uint32_t sequencerPriority, uint32_t hardwareAveraging, uint32_t phaseDelay)
{
     93c:	b580      	push	{r7, lr}
     93e:	b088      	sub	sp, #32
     940:	af02      	add	r7, sp, #8
     942:	60f8      	str	r0, [r7, #12]
     944:	60b9      	str	r1, [r7, #8]
     946:	607a      	str	r2, [r7, #4]
     948:	603b      	str	r3, [r7, #0]
    (*this).adcModule = adcModule;
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	68ba      	ldr	r2, [r7, #8]
     94e:	609a      	str	r2, [r3, #8]
    baseAddress = adc0BaseAddress + (adcModule * 0x1000);
     950:	68bb      	ldr	r3, [r7, #8]
     952:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     956:	3338      	adds	r3, #56	; 0x38
     958:	031a      	lsls	r2, r3, #12
     95a:	68fb      	ldr	r3, [r7, #12]
     95c:	605a      	str	r2, [r3, #4]

    //0. Enable ADC module clock
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCADC_OFFSET)), (uint32_t)setORClear::set, adcModule, 1, RW);
     95e:	2300      	movs	r3, #0
     960:	9300      	str	r3, [sp, #0]
     962:	2301      	movs	r3, #1
     964:	68ba      	ldr	r2, [r7, #8]
     966:	2101      	movs	r1, #1
     968:	482b      	ldr	r0, [pc, #172]	; (a18 <_ZN3Adc16initializeModuleEmmmm+0xdc>)
     96a:	f7ff fead 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRADC_OFFSET), adcModule, 1, RO) == 0)
     96e:	2301      	movs	r3, #1
     970:	2201      	movs	r2, #1
     972:	68b9      	ldr	r1, [r7, #8]
     974:	4829      	ldr	r0, [pc, #164]	; (a1c <_ZN3Adc16initializeModuleEmmmm+0xe0>)
     976:	f7ff fe7d 	bl	674 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     97a:	4603      	mov	r3, r0
     97c:	2b00      	cmp	r3, #0
     97e:	bf0c      	ite	eq
     980:	2301      	moveq	r3, #1
     982:	2300      	movne	r3, #0
     984:	b2db      	uxtb	r3, r3
     986:	2b00      	cmp	r3, #0
     988:	d000      	beq.n	98c <_ZN3Adc16initializeModuleEmmmm+0x50>
     98a:	e7f0      	b.n	96e <_ZN3Adc16initializeModuleEmmmm+0x32>
     * 0.A If required by the application, reconfigure the sample sequencer 
     * priorities in the ADCSSPRI register. The default configuration has 
     * Sample Sequencer 0 with the highest priority and Sample Sequencer 3 as 
     * the lowest priority.
     */
    for(int i = 0; i < 4; i++)
     98c:	2300      	movs	r3, #0
     98e:	617b      	str	r3, [r7, #20]
     990:	697b      	ldr	r3, [r7, #20]
     992:	2b03      	cmp	r3, #3
     994:	dc14      	bgt.n	9c0 <_ZN3Adc16initializeModuleEmmmm+0x84>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSPRI_OFFSET)), sequencerPriority >> (4 * i), i * 4, 1 + 1, RW);
     996:	68fb      	ldr	r3, [r7, #12]
     998:	685b      	ldr	r3, [r3, #4]
     99a:	3320      	adds	r3, #32
     99c:	4618      	mov	r0, r3
     99e:	697b      	ldr	r3, [r7, #20]
     9a0:	009b      	lsls	r3, r3, #2
     9a2:	687a      	ldr	r2, [r7, #4]
     9a4:	fa22 f103 	lsr.w	r1, r2, r3
     9a8:	697b      	ldr	r3, [r7, #20]
     9aa:	009b      	lsls	r3, r3, #2
     9ac:	461a      	mov	r2, r3
     9ae:	2300      	movs	r3, #0
     9b0:	9300      	str	r3, [sp, #0]
     9b2:	2302      	movs	r3, #2
     9b4:	f7ff fe88 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    for(int i = 0; i < 4; i++)
     9b8:	697b      	ldr	r3, [r7, #20]
     9ba:	3301      	adds	r3, #1
     9bc:	617b      	str	r3, [r7, #20]
     9be:	e7e7      	b.n	990 <_ZN3Adc16initializeModuleEmmmm+0x54>
    }

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSAC_OFFSET)), hardwareAveraging, 0, 2 + 1, RW);
     9c0:	68fb      	ldr	r3, [r7, #12]
     9c2:	685b      	ldr	r3, [r3, #4]
     9c4:	3330      	adds	r3, #48	; 0x30
     9c6:	4618      	mov	r0, r3
     9c8:	2300      	movs	r3, #0
     9ca:	9300      	str	r3, [sp, #0]
     9cc:	2303      	movs	r3, #3
     9ce:	2200      	movs	r2, #0
     9d0:	6839      	ldr	r1, [r7, #0]
     9d2:	f7ff fe79 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCCTL_OFFSET)), hardwareAveraging == 0 ? 0x0 : 0x1, 6, 1, RW);
     9d6:	68fb      	ldr	r3, [r7, #12]
     9d8:	685b      	ldr	r3, [r3, #4]
     9da:	3338      	adds	r3, #56	; 0x38
     9dc:	4618      	mov	r0, r3
     9de:	683b      	ldr	r3, [r7, #0]
     9e0:	2b00      	cmp	r3, #0
     9e2:	bf14      	ite	ne
     9e4:	2301      	movne	r3, #1
     9e6:	2300      	moveq	r3, #0
     9e8:	b2db      	uxtb	r3, r3
     9ea:	4619      	mov	r1, r3
     9ec:	2300      	movs	r3, #0
     9ee:	9300      	str	r3, [sp, #0]
     9f0:	2301      	movs	r3, #1
     9f2:	2206      	movs	r2, #6
     9f4:	f7ff fe68 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSPC_OFFSET)), phaseDelay, 0, 3 + 1, RW);
     9f8:	68fb      	ldr	r3, [r7, #12]
     9fa:	685b      	ldr	r3, [r3, #4]
     9fc:	3324      	adds	r3, #36	; 0x24
     9fe:	4618      	mov	r0, r3
     a00:	2300      	movs	r3, #0
     a02:	9300      	str	r3, [sp, #0]
     a04:	2304      	movs	r3, #4
     a06:	2200      	movs	r2, #0
     a08:	6a39      	ldr	r1, [r7, #32]
     a0a:	f7ff fe5d 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    
}
     a0e:	bf00      	nop
     a10:	3718      	adds	r7, #24
     a12:	46bd      	mov	sp, r7
     a14:	bd80      	pop	{r7, pc}
     a16:	bf00      	nop
     a18:	400fe638 	.word	0x400fe638
     a1c:	400fea38 	.word	0x400fea38

00000a20 <_ZN3Adc20initializeForPollingEmmmmPFvvE>:
 * 
 * @param adcModule Clock to be intialized for the ADC module
 * @param action when polling the adc, the action to be taken when RIS is activate
 */
void Adc::initializeForPolling(uint32_t sampleSequencer, uint32_t sequencerTrigSrc, uint32_t inputSource, uint32_t sequencerControl, void (*action)(void))
{
     a20:	b580      	push	{r7, lr}
     a22:	b084      	sub	sp, #16
     a24:	af00      	add	r7, sp, #0
     a26:	60f8      	str	r0, [r7, #12]
     a28:	60b9      	str	r1, [r7, #8]
     a2a:	607a      	str	r2, [r7, #4]
     a2c:	603b      	str	r3, [r7, #0]
    (*this).sampleSequencer = sampleSequencer;
     a2e:	68fb      	ldr	r3, [r7, #12]
     a30:	68ba      	ldr	r2, [r7, #8]
     a32:	60da      	str	r2, [r3, #12]
    (*this).sequencerTrigSrc = sequencerTrigSrc;
     a34:	68fb      	ldr	r3, [r7, #12]
     a36:	687a      	ldr	r2, [r7, #4]
     a38:	615a      	str	r2, [r3, #20]
    (*this).inputSource = inputSource;
     a3a:	68fb      	ldr	r3, [r7, #12]
     a3c:	683a      	ldr	r2, [r7, #0]
     a3e:	619a      	str	r2, [r3, #24]
    (*this).sequencerControl = sequencerControl;
     a40:	68fb      	ldr	r3, [r7, #12]
     a42:	69ba      	ldr	r2, [r7, #24]
     a44:	61da      	str	r2, [r3, #28]
    initialization();
     a46:	68f8      	ldr	r0, [r7, #12]
     a48:	f000 fa4e 	bl	ee8 <_ZN3Adc14initializationEv>
    (*this).action = action;
     a4c:	68fb      	ldr	r3, [r7, #12]
     a4e:	69fa      	ldr	r2, [r7, #28]
     a50:	601a      	str	r2, [r3, #0]

}
     a52:	bf00      	nop
     a54:	3710      	adds	r7, #16
     a56:	46bd      	mov	sp, r7
     a58:	bd80      	pop	{r7, pc}

00000a5a <_ZN3Adc22initializeForInterruptEmmmmm>:

void Adc::initializeForInterrupt(uint32_t sampleSequencer, uint32_t sequencerTrigSrc, uint32_t inputSource, uint32_t sequencerControl, uint32_t interruptPriority)
{
     a5a:	b580      	push	{r7, lr}
     a5c:	b086      	sub	sp, #24
     a5e:	af02      	add	r7, sp, #8
     a60:	60f8      	str	r0, [r7, #12]
     a62:	60b9      	str	r1, [r7, #8]
     a64:	607a      	str	r2, [r7, #4]
     a66:	603b      	str	r3, [r7, #0]
    (*this).sampleSequencer = sampleSequencer;
     a68:	68fb      	ldr	r3, [r7, #12]
     a6a:	68ba      	ldr	r2, [r7, #8]
     a6c:	60da      	str	r2, [r3, #12]
    (*this).sequencerTrigSrc = sequencerTrigSrc;
     a6e:	68fb      	ldr	r3, [r7, #12]
     a70:	687a      	ldr	r2, [r7, #4]
     a72:	615a      	str	r2, [r3, #20]
    (*this).inputSource = inputSource;
     a74:	68fb      	ldr	r3, [r7, #12]
     a76:	683a      	ldr	r2, [r7, #0]
     a78:	619a      	str	r2, [r3, #24]
    (*this).sequencerControl = sequencerControl;
     a7a:	68fb      	ldr	r3, [r7, #12]
     a7c:	69ba      	ldr	r2, [r7, #24]
     a7e:	61da      	str	r2, [r3, #28]
    initialization();
     a80:	68f8      	ldr	r0, [r7, #12]
     a82:	f000 fa31 	bl	ee8 <_ZN3Adc14initializationEv>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCIM_OFFSET)), (uint32_t)setORClear::set, sampleSequencer, 1, RW);
     a86:	68fb      	ldr	r3, [r7, #12]
     a88:	685b      	ldr	r3, [r3, #4]
     a8a:	3308      	adds	r3, #8
     a8c:	4618      	mov	r0, r3
     a8e:	2300      	movs	r3, #0
     a90:	9300      	str	r3, [sp, #0]
     a92:	2301      	movs	r3, #1
     a94:	68ba      	ldr	r2, [r7, #8]
     a96:	2101      	movs	r1, #1
     a98:	f7ff fe16 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    if(adcModule == (uint32_t)adcModule::module0)
     a9c:	68fb      	ldr	r3, [r7, #12]
     a9e:	689b      	ldr	r3, [r3, #8]
     aa0:	2b00      	cmp	r3, #0
     aa2:	d121      	bne.n	ae8 <_ZN3Adc22initializeForInterruptEmmmmm+0x8e>
    {
        switch (sampleSequencer)
     aa4:	68bb      	ldr	r3, [r7, #8]
     aa6:	2b03      	cmp	r3, #3
     aa8:	d840      	bhi.n	b2c <_ZN3Adc22initializeForInterruptEmmmmm+0xd2>
     aaa:	a201      	add	r2, pc, #4	; (adr r2, ab0 <_ZN3Adc22initializeForInterruptEmmmmm+0x56>)
     aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     ab0:	00000ac1 	.word	0x00000ac1
     ab4:	00000acb 	.word	0x00000acb
     ab8:	00000ad5 	.word	0x00000ad5
     abc:	00000adf 	.word	0x00000adf
        {
            case (uint32_t)sampleSequencer::SS0:
                Nvic::activateInterrupt(ADC_0_Sequence_0_Interrupt, interruptPriority);
     ac0:	69f9      	ldr	r1, [r7, #28]
     ac2:	200e      	movs	r0, #14
     ac4:	f7ff febe 	bl	844 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     ac8:	e033      	b.n	b32 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS1:
                Nvic::activateInterrupt(ADC_0_Sequence_1_Interrupt, interruptPriority);
     aca:	69f9      	ldr	r1, [r7, #28]
     acc:	200f      	movs	r0, #15
     ace:	f7ff feb9 	bl	844 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     ad2:	e02e      	b.n	b32 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS2:
                Nvic::activateInterrupt(ADC_0_Sequence_2_Interrupt, interruptPriority);
     ad4:	69f9      	ldr	r1, [r7, #28]
     ad6:	2010      	movs	r0, #16
     ad8:	f7ff feb4 	bl	844 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     adc:	e029      	b.n	b32 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS3:
                Nvic::activateInterrupt(ADC_0_Sequence_3_Interrupt, interruptPriority);
     ade:	69f9      	ldr	r1, [r7, #28]
     ae0:	2011      	movs	r0, #17
     ae2:	f7ff feaf 	bl	844 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     ae6:	e024      	b.n	b32 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>
        }
    }

    else
    {
        switch (sampleSequencer)
     ae8:	68bb      	ldr	r3, [r7, #8]
     aea:	2b03      	cmp	r3, #3
     aec:	d820      	bhi.n	b30 <_ZN3Adc22initializeForInterruptEmmmmm+0xd6>
     aee:	a201      	add	r2, pc, #4	; (adr r2, af4 <_ZN3Adc22initializeForInterruptEmmmmm+0x9a>)
     af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     af4:	00000b05 	.word	0x00000b05
     af8:	00000b0f 	.word	0x00000b0f
     afc:	00000b19 	.word	0x00000b19
     b00:	00000b23 	.word	0x00000b23
        {
            case (uint32_t)sampleSequencer::SS0:
                Nvic::activateInterrupt(ADC_1_Sequence_0_Interrupt, interruptPriority);
     b04:	69f9      	ldr	r1, [r7, #28]
     b06:	2030      	movs	r0, #48	; 0x30
     b08:	f7ff fe9c 	bl	844 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     b0c:	e011      	b.n	b32 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS1:
                Nvic::activateInterrupt(ADC_1_Sequence_1_Interrupt, interruptPriority);
     b0e:	69f9      	ldr	r1, [r7, #28]
     b10:	2031      	movs	r0, #49	; 0x31
     b12:	f7ff fe97 	bl	844 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     b16:	e00c      	b.n	b32 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS2:
                Nvic::activateInterrupt(ADC_1_Sequence_2_Interrupt, interruptPriority);
     b18:	69f9      	ldr	r1, [r7, #28]
     b1a:	2032      	movs	r0, #50	; 0x32
     b1c:	f7ff fe92 	bl	844 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     b20:	e007      	b.n	b32 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS3:
                Nvic::activateInterrupt(ADC_1_Sequence_3_Interrupt, interruptPriority);
     b22:	69f9      	ldr	r1, [r7, #28]
     b24:	2033      	movs	r0, #51	; 0x33
     b26:	f7ff fe8d 	bl	844 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     b2a:	e002      	b.n	b32 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>
                break;
     b2c:	bf00      	nop
     b2e:	e000      	b.n	b32 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>
            
            default:
                break;
     b30:	bf00      	nop
        }
    }
    
}
     b32:	bf00      	nop
     b34:	3710      	adds	r7, #16
     b36:	46bd      	mov	sp, r7
     b38:	bd80      	pop	{r7, pc}

00000b3a <_ZN3Adc21enableSampleSequencerEv>:


void Adc::enableSampleSequencer(void)
{
     b3a:	b580      	push	{r7, lr}
     b3c:	b084      	sub	sp, #16
     b3e:	af02      	add	r7, sp, #8
     b40:	6078      	str	r0, [r7, #4]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCACTSS_OFFSET)), (uint32_t)setORClear::set, sampleSequencer, 1, RW);
     b42:	687b      	ldr	r3, [r7, #4]
     b44:	685b      	ldr	r3, [r3, #4]
     b46:	4618      	mov	r0, r3
     b48:	687b      	ldr	r3, [r7, #4]
     b4a:	68da      	ldr	r2, [r3, #12]
     b4c:	2300      	movs	r3, #0
     b4e:	9300      	str	r3, [sp, #0]
     b50:	2301      	movs	r3, #1
     b52:	2101      	movs	r1, #1
     b54:	f7ff fdb8 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     b58:	bf00      	nop
     b5a:	3708      	adds	r7, #8
     b5c:	46bd      	mov	sp, r7
     b5e:	bd80      	pop	{r7, pc}

00000b60 <_ZN3Adc23enableSampleSequencerDcEmm>:

void Adc::enableSampleSequencerDc(uint32_t dcOperation, uint32_t dcSelect)
{
     b60:	b580      	push	{r7, lr}
     b62:	b08a      	sub	sp, #40	; 0x28
     b64:	af02      	add	r7, sp, #8
     b66:	60f8      	str	r0, [r7, #12]
     b68:	60b9      	str	r1, [r7, #8]
     b6a:	607a      	str	r2, [r7, #4]
    if(sampleSequencer == (uint32_t)sampleSequencer::SS0)
     b6c:	68fb      	ldr	r3, [r7, #12]
     b6e:	68db      	ldr	r3, [r3, #12]
     b70:	2b00      	cmp	r3, #0
     b72:	d129      	bne.n	bc8 <_ZN3Adc23enableSampleSequencerDcEmm+0x68>
    {
        for(uint32_t i = 0; i < 8; i++)
     b74:	2300      	movs	r3, #0
     b76:	61fb      	str	r3, [r7, #28]
     b78:	69fb      	ldr	r3, [r7, #28]
     b7a:	2b07      	cmp	r3, #7
     b7c:	f200 8098 	bhi.w	cb0 <_ZN3Adc23enableSampleSequencerDcEmm+0x150>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSOP0_OFFSET)), dcOperation >> (4*i), 4*i, 1, RW);
     b80:	68fb      	ldr	r3, [r7, #12]
     b82:	685b      	ldr	r3, [r3, #4]
     b84:	3350      	adds	r3, #80	; 0x50
     b86:	4618      	mov	r0, r3
     b88:	69fb      	ldr	r3, [r7, #28]
     b8a:	009b      	lsls	r3, r3, #2
     b8c:	68ba      	ldr	r2, [r7, #8]
     b8e:	fa22 f103 	lsr.w	r1, r2, r3
     b92:	69fb      	ldr	r3, [r7, #28]
     b94:	009a      	lsls	r2, r3, #2
     b96:	2300      	movs	r3, #0
     b98:	9300      	str	r3, [sp, #0]
     b9a:	2301      	movs	r3, #1
     b9c:	f7ff fd94 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSDC0_OFFSET)), dcSelect >> (4*i), 4*i, 4, RW);
     ba0:	68fb      	ldr	r3, [r7, #12]
     ba2:	685b      	ldr	r3, [r3, #4]
     ba4:	3354      	adds	r3, #84	; 0x54
     ba6:	4618      	mov	r0, r3
     ba8:	69fb      	ldr	r3, [r7, #28]
     baa:	009b      	lsls	r3, r3, #2
     bac:	687a      	ldr	r2, [r7, #4]
     bae:	fa22 f103 	lsr.w	r1, r2, r3
     bb2:	69fb      	ldr	r3, [r7, #28]
     bb4:	009a      	lsls	r2, r3, #2
     bb6:	2300      	movs	r3, #0
     bb8:	9300      	str	r3, [sp, #0]
     bba:	2304      	movs	r3, #4
     bbc:	f7ff fd84 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(uint32_t i = 0; i < 8; i++)
     bc0:	69fb      	ldr	r3, [r7, #28]
     bc2:	3301      	adds	r3, #1
     bc4:	61fb      	str	r3, [r7, #28]
     bc6:	e7d7      	b.n	b78 <_ZN3Adc23enableSampleSequencerDcEmm+0x18>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS1)
     bc8:	68fb      	ldr	r3, [r7, #12]
     bca:	68db      	ldr	r3, [r3, #12]
     bcc:	2b01      	cmp	r3, #1
     bce:	d128      	bne.n	c22 <_ZN3Adc23enableSampleSequencerDcEmm+0xc2>
    {
        for(uint32_t i = 0; i < 4; i++)
     bd0:	2300      	movs	r3, #0
     bd2:	61bb      	str	r3, [r7, #24]
     bd4:	69bb      	ldr	r3, [r7, #24]
     bd6:	2b03      	cmp	r3, #3
     bd8:	d86a      	bhi.n	cb0 <_ZN3Adc23enableSampleSequencerDcEmm+0x150>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSOP1_OFFSET)), dcOperation >> (4*i), 4*i, 1, RW);
     bda:	68fb      	ldr	r3, [r7, #12]
     bdc:	685b      	ldr	r3, [r3, #4]
     bde:	3370      	adds	r3, #112	; 0x70
     be0:	4618      	mov	r0, r3
     be2:	69bb      	ldr	r3, [r7, #24]
     be4:	009b      	lsls	r3, r3, #2
     be6:	68ba      	ldr	r2, [r7, #8]
     be8:	fa22 f103 	lsr.w	r1, r2, r3
     bec:	69bb      	ldr	r3, [r7, #24]
     bee:	009a      	lsls	r2, r3, #2
     bf0:	2300      	movs	r3, #0
     bf2:	9300      	str	r3, [sp, #0]
     bf4:	2301      	movs	r3, #1
     bf6:	f7ff fd67 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSDC1_OFFSET)), dcSelect >> (4*i), 4*i, 4, RW);
     bfa:	68fb      	ldr	r3, [r7, #12]
     bfc:	685b      	ldr	r3, [r3, #4]
     bfe:	3374      	adds	r3, #116	; 0x74
     c00:	4618      	mov	r0, r3
     c02:	69bb      	ldr	r3, [r7, #24]
     c04:	009b      	lsls	r3, r3, #2
     c06:	687a      	ldr	r2, [r7, #4]
     c08:	fa22 f103 	lsr.w	r1, r2, r3
     c0c:	69bb      	ldr	r3, [r7, #24]
     c0e:	009a      	lsls	r2, r3, #2
     c10:	2300      	movs	r3, #0
     c12:	9300      	str	r3, [sp, #0]
     c14:	2304      	movs	r3, #4
     c16:	f7ff fd57 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(uint32_t i = 0; i < 4; i++)
     c1a:	69bb      	ldr	r3, [r7, #24]
     c1c:	3301      	adds	r3, #1
     c1e:	61bb      	str	r3, [r7, #24]
     c20:	e7d8      	b.n	bd4 <_ZN3Adc23enableSampleSequencerDcEmm+0x74>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS2)
     c22:	68fb      	ldr	r3, [r7, #12]
     c24:	68db      	ldr	r3, [r3, #12]
     c26:	2b02      	cmp	r3, #2
     c28:	d128      	bne.n	c7c <_ZN3Adc23enableSampleSequencerDcEmm+0x11c>
    {
        for(uint32_t i = 0; i < 4; i++)
     c2a:	2300      	movs	r3, #0
     c2c:	617b      	str	r3, [r7, #20]
     c2e:	697b      	ldr	r3, [r7, #20]
     c30:	2b03      	cmp	r3, #3
     c32:	d83d      	bhi.n	cb0 <_ZN3Adc23enableSampleSequencerDcEmm+0x150>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSOP2_OFFSET)), dcOperation >> (4*i), 4*i, 1, RW);
     c34:	68fb      	ldr	r3, [r7, #12]
     c36:	685b      	ldr	r3, [r3, #4]
     c38:	3390      	adds	r3, #144	; 0x90
     c3a:	4618      	mov	r0, r3
     c3c:	697b      	ldr	r3, [r7, #20]
     c3e:	009b      	lsls	r3, r3, #2
     c40:	68ba      	ldr	r2, [r7, #8]
     c42:	fa22 f103 	lsr.w	r1, r2, r3
     c46:	697b      	ldr	r3, [r7, #20]
     c48:	009a      	lsls	r2, r3, #2
     c4a:	2300      	movs	r3, #0
     c4c:	9300      	str	r3, [sp, #0]
     c4e:	2301      	movs	r3, #1
     c50:	f7ff fd3a 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSDC2_OFFSET)), dcSelect >> (4*i), 4*i, 4, RW);
     c54:	68fb      	ldr	r3, [r7, #12]
     c56:	685b      	ldr	r3, [r3, #4]
     c58:	3394      	adds	r3, #148	; 0x94
     c5a:	4618      	mov	r0, r3
     c5c:	697b      	ldr	r3, [r7, #20]
     c5e:	009b      	lsls	r3, r3, #2
     c60:	687a      	ldr	r2, [r7, #4]
     c62:	fa22 f103 	lsr.w	r1, r2, r3
     c66:	697b      	ldr	r3, [r7, #20]
     c68:	009a      	lsls	r2, r3, #2
     c6a:	2300      	movs	r3, #0
     c6c:	9300      	str	r3, [sp, #0]
     c6e:	2304      	movs	r3, #4
     c70:	f7ff fd2a 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(uint32_t i = 0; i < 4; i++)
     c74:	697b      	ldr	r3, [r7, #20]
     c76:	3301      	adds	r3, #1
     c78:	617b      	str	r3, [r7, #20]
     c7a:	e7d8      	b.n	c2e <_ZN3Adc23enableSampleSequencerDcEmm+0xce>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS3)
     c7c:	68fb      	ldr	r3, [r7, #12]
     c7e:	68db      	ldr	r3, [r3, #12]
     c80:	2b03      	cmp	r3, #3
     c82:	d115      	bne.n	cb0 <_ZN3Adc23enableSampleSequencerDcEmm+0x150>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSOP3_OFFSET)), dcOperation, 0, 1, RW);
     c84:	68fb      	ldr	r3, [r7, #12]
     c86:	685b      	ldr	r3, [r3, #4]
     c88:	33b0      	adds	r3, #176	; 0xb0
     c8a:	4618      	mov	r0, r3
     c8c:	2300      	movs	r3, #0
     c8e:	9300      	str	r3, [sp, #0]
     c90:	2301      	movs	r3, #1
     c92:	2200      	movs	r2, #0
     c94:	68b9      	ldr	r1, [r7, #8]
     c96:	f7ff fd17 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSDC3_OFFSET)), dcSelect, 0, 4, RW);
     c9a:	68fb      	ldr	r3, [r7, #12]
     c9c:	685b      	ldr	r3, [r3, #4]
     c9e:	33b4      	adds	r3, #180	; 0xb4
     ca0:	4618      	mov	r0, r3
     ca2:	2300      	movs	r3, #0
     ca4:	9300      	str	r3, [sp, #0]
     ca6:	2304      	movs	r3, #4
     ca8:	2200      	movs	r2, #0
     caa:	6879      	ldr	r1, [r7, #4]
     cac:	f7ff fd0c 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    }
}
     cb0:	bf00      	nop
     cb2:	3720      	adds	r7, #32
     cb4:	46bd      	mov	sp, r7
     cb6:	bd80      	pop	{r7, pc}

00000cb8 <_ZN3Adc12initializeDcEmmmmm>:

void Adc::initializeDc(uint32_t adcModule, uint32_t dc, uint32_t bitField, uint32_t highBand, uint32_t lowBand)
{
     cb8:	b580      	push	{r7, lr}
     cba:	b088      	sub	sp, #32
     cbc:	af02      	add	r7, sp, #8
     cbe:	60f8      	str	r0, [r7, #12]
     cc0:	60b9      	str	r1, [r7, #8]
     cc2:	607a      	str	r2, [r7, #4]
     cc4:	603b      	str	r3, [r7, #0]
    uint32_t dcCtlAddress = (adc0BaseAddress + (adcModule * 0x1000) + (ADCDCCTL0_OFFSET + dc*0x4));
     cc6:	68fb      	ldr	r3, [r7, #12]
     cc8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     ccc:	3338      	adds	r3, #56	; 0x38
     cce:	029a      	lsls	r2, r3, #10
     cd0:	68bb      	ldr	r3, [r7, #8]
     cd2:	4413      	add	r3, r2
     cd4:	f503 7360 	add.w	r3, r3, #896	; 0x380
     cd8:	009b      	lsls	r3, r3, #2
     cda:	617b      	str	r3, [r7, #20]
    uint32_t dcCmpAddress = (adc0BaseAddress + (adcModule * 0x1000) + (ADCDCCMP0_OFFSET + dc*0x4));
     cdc:	68fb      	ldr	r3, [r7, #12]
     cde:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     ce2:	3338      	adds	r3, #56	; 0x38
     ce4:	029a      	lsls	r2, r3, #10
     ce6:	68bb      	ldr	r3, [r7, #8]
     ce8:	4413      	add	r3, r2
     cea:	f503 7364 	add.w	r3, r3, #912	; 0x390
     cee:	009b      	lsls	r3, r3, #2
     cf0:	613b      	str	r3, [r7, #16]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), bitField, 0, 2, RW);
     cf2:	6978      	ldr	r0, [r7, #20]
     cf4:	2300      	movs	r3, #0
     cf6:	9300      	str	r3, [sp, #0]
     cf8:	2302      	movs	r3, #2
     cfa:	2200      	movs	r2, #0
     cfc:	6879      	ldr	r1, [r7, #4]
     cfe:	f7ff fce3 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), bitField >> 2, 2, 2, RW);
     d02:	6978      	ldr	r0, [r7, #20]
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	0899      	lsrs	r1, r3, #2
     d08:	2300      	movs	r3, #0
     d0a:	9300      	str	r3, [sp, #0]
     d0c:	2302      	movs	r3, #2
     d0e:	2202      	movs	r2, #2
     d10:	f7ff fcda 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), bitField >> 4, 4, 1, RW);
     d14:	6978      	ldr	r0, [r7, #20]
     d16:	687b      	ldr	r3, [r7, #4]
     d18:	0919      	lsrs	r1, r3, #4
     d1a:	2300      	movs	r3, #0
     d1c:	9300      	str	r3, [sp, #0]
     d1e:	2301      	movs	r3, #1
     d20:	2204      	movs	r2, #4
     d22:	f7ff fcd1 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), bitField >> 8, 8, 2, RW);
     d26:	6978      	ldr	r0, [r7, #20]
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	0a19      	lsrs	r1, r3, #8
     d2c:	2300      	movs	r3, #0
     d2e:	9300      	str	r3, [sp, #0]
     d30:	2302      	movs	r3, #2
     d32:	2208      	movs	r2, #8
     d34:	f7ff fcc8 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), bitField >> 10, 10, 2, RW);
     d38:	6978      	ldr	r0, [r7, #20]
     d3a:	687b      	ldr	r3, [r7, #4]
     d3c:	0a99      	lsrs	r1, r3, #10
     d3e:	2300      	movs	r3, #0
     d40:	9300      	str	r3, [sp, #0]
     d42:	2302      	movs	r3, #2
     d44:	220a      	movs	r2, #10
     d46:	f7ff fcbf 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), bitField >> 12, 12, 1, RW);
     d4a:	6978      	ldr	r0, [r7, #20]
     d4c:	687b      	ldr	r3, [r7, #4]
     d4e:	0b19      	lsrs	r1, r3, #12
     d50:	2300      	movs	r3, #0
     d52:	9300      	str	r3, [sp, #0]
     d54:	2301      	movs	r3, #1
     d56:	220c      	movs	r2, #12
     d58:	f7ff fcb6 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCmpAddress), lowBand, 0, 11 + 1, RW);
     d5c:	6938      	ldr	r0, [r7, #16]
     d5e:	2300      	movs	r3, #0
     d60:	9300      	str	r3, [sp, #0]
     d62:	230c      	movs	r3, #12
     d64:	2200      	movs	r2, #0
     d66:	6a39      	ldr	r1, [r7, #32]
     d68:	f7ff fcae 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCmpAddress), highBand, 16, 27 - 16 + 1, RW);
     d6c:	6938      	ldr	r0, [r7, #16]
     d6e:	2300      	movs	r3, #0
     d70:	9300      	str	r3, [sp, #0]
     d72:	230c      	movs	r3, #12
     d74:	2210      	movs	r2, #16
     d76:	6839      	ldr	r1, [r7, #0]
     d78:	f7ff fca6 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

}
     d7c:	bf00      	nop
     d7e:	3718      	adds	r7, #24
     d80:	46bd      	mov	sp, r7
     d82:	bd80      	pop	{r7, pc}

00000d84 <_ZN3Adc10pollStatusEv>:

void Adc::pollStatus(void)
{
     d84:	b580      	push	{r7, lr}
     d86:	b082      	sub	sp, #8
     d88:	af00      	add	r7, sp, #0
     d8a:	6078      	str	r0, [r7, #4]
    if(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCRIS_OFFSET)), sampleSequencer, 1, RO) == (uint32_t)setORClear::set)
     d8c:	687b      	ldr	r3, [r7, #4]
     d8e:	685b      	ldr	r3, [r3, #4]
     d90:	3304      	adds	r3, #4
     d92:	4618      	mov	r0, r3
     d94:	687b      	ldr	r3, [r7, #4]
     d96:	68d9      	ldr	r1, [r3, #12]
     d98:	2301      	movs	r3, #1
     d9a:	2201      	movs	r2, #1
     d9c:	f7ff fc6a 	bl	674 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     da0:	4603      	mov	r3, r0
     da2:	2b01      	cmp	r3, #1
     da4:	bf0c      	ite	eq
     da6:	2301      	moveq	r3, #1
     da8:	2300      	movne	r3, #0
     daa:	b2db      	uxtb	r3, r3
     dac:	2b00      	cmp	r3, #0
     dae:	d002      	beq.n	db6 <_ZN3Adc10pollStatusEv+0x32>
    {
        action();
     db0:	687b      	ldr	r3, [r7, #4]
     db2:	681b      	ldr	r3, [r3, #0]
     db4:	4798      	blx	r3
    }
}
     db6:	bf00      	nop
     db8:	3708      	adds	r7, #8
     dba:	46bd      	mov	sp, r7
     dbc:	bd80      	pop	{r7, pc}

00000dbe <_ZN3Adc21pollDigitalComparatorEv>:

void Adc::pollDigitalComparator(void)
{
     dbe:	b580      	push	{r7, lr}
     dc0:	b082      	sub	sp, #8
     dc2:	af00      	add	r7, sp, #0
     dc4:	6078      	str	r0, [r7, #4]
    if(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCRIS_OFFSET)), 16, 1, RO) == (uint32_t)setORClear::set)
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	685b      	ldr	r3, [r3, #4]
     dca:	3304      	adds	r3, #4
     dcc:	4618      	mov	r0, r3
     dce:	2301      	movs	r3, #1
     dd0:	2201      	movs	r2, #1
     dd2:	2110      	movs	r1, #16
     dd4:	f7ff fc4e 	bl	674 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     dd8:	4603      	mov	r3, r0
     dda:	2b01      	cmp	r3, #1
     ddc:	bf0c      	ite	eq
     dde:	2301      	moveq	r3, #1
     de0:	2300      	movne	r3, #0
     de2:	b2db      	uxtb	r3, r3
     de4:	2b00      	cmp	r3, #0
     de6:	d002      	beq.n	dee <_ZN3Adc21pollDigitalComparatorEv+0x30>
    {
        action();
     de8:	687b      	ldr	r3, [r7, #4]
     dea:	681b      	ldr	r3, [r3, #0]
     dec:	4798      	blx	r3
    }
}
     dee:	bf00      	nop
     df0:	3708      	adds	r7, #8
     df2:	46bd      	mov	sp, r7
     df4:	bd80      	pop	{r7, pc}

00000df6 <_ZN3Adc16initiateSamplingEv>:


void Adc::initiateSampling(void)
{
     df6:	b580      	push	{r7, lr}
     df8:	b084      	sub	sp, #16
     dfa:	af02      	add	r7, sp, #8
     dfc:	6078      	str	r0, [r7, #4]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCPSSI_OFFSET)), (uint32_t)setORClear::set, sampleSequencer, 1, RW);
     dfe:	687b      	ldr	r3, [r7, #4]
     e00:	685b      	ldr	r3, [r3, #4]
     e02:	3328      	adds	r3, #40	; 0x28
     e04:	4618      	mov	r0, r3
     e06:	687b      	ldr	r3, [r7, #4]
     e08:	68da      	ldr	r2, [r3, #12]
     e0a:	2300      	movs	r3, #0
     e0c:	9300      	str	r3, [sp, #0]
     e0e:	2301      	movs	r3, #1
     e10:	2101      	movs	r1, #1
     e12:	f7ff fc59 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     e16:	bf00      	nop
     e18:	3708      	adds	r7, #8
     e1a:	46bd      	mov	sp, r7
     e1c:	bd80      	pop	{r7, pc}

00000e1e <_ZN3Adc12getAdcSampleEv>:

uint32_t Adc::getAdcSample(void)
{
     e1e:	b580      	push	{r7, lr}
     e20:	b082      	sub	sp, #8
     e22:	af00      	add	r7, sp, #0
     e24:	6078      	str	r0, [r7, #4]
    return(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSFIFO0_OFFSET + (ssOffset * sampleSequencer)))), 0, 11 + 1, RO));
     e26:	687b      	ldr	r3, [r7, #4]
     e28:	685a      	ldr	r2, [r3, #4]
     e2a:	687b      	ldr	r3, [r7, #4]
     e2c:	68db      	ldr	r3, [r3, #12]
     e2e:	015b      	lsls	r3, r3, #5
     e30:	4413      	add	r3, r2
     e32:	3348      	adds	r3, #72	; 0x48
     e34:	4618      	mov	r0, r3
     e36:	2301      	movs	r3, #1
     e38:	220c      	movs	r2, #12
     e3a:	2100      	movs	r1, #0
     e3c:	f7ff fc1a 	bl	674 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     e40:	4603      	mov	r3, r0
}
     e42:	4618      	mov	r0, r3
     e44:	3708      	adds	r7, #8
     e46:	46bd      	mov	sp, r7
     e48:	bd80      	pop	{r7, pc}

00000e4a <_ZN3Adc14clearInterruptEv>:

void Adc::clearInterrupt(void)
{
     e4a:	b580      	push	{r7, lr}
     e4c:	b084      	sub	sp, #16
     e4e:	af02      	add	r7, sp, #8
     e50:	6078      	str	r0, [r7, #4]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCISC_OFFSET)), (uint32_t)setORClear::set, sampleSequencer, 1, RW1C);
     e52:	687b      	ldr	r3, [r7, #4]
     e54:	685b      	ldr	r3, [r3, #4]
     e56:	330c      	adds	r3, #12
     e58:	4618      	mov	r0, r3
     e5a:	687b      	ldr	r3, [r7, #4]
     e5c:	68da      	ldr	r2, [r3, #12]
     e5e:	2303      	movs	r3, #3
     e60:	9300      	str	r3, [sp, #0]
     e62:	2301      	movs	r3, #1
     e64:	2101      	movs	r1, #1
     e66:	f7ff fc2f 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     e6a:	bf00      	nop
     e6c:	3708      	adds	r7, #8
     e6e:	46bd      	mov	sp, r7
     e70:	bd80      	pop	{r7, pc}

00000e72 <_ZN3Adc20getDcInterruptStatusEmm>:

uint32_t Adc::getDcInterruptStatus(uint32_t adcModule, uint32_t digitalComparator)
{
     e72:	b580      	push	{r7, lr}
     e74:	b082      	sub	sp, #8
     e76:	af00      	add	r7, sp, #0
     e78:	6078      	str	r0, [r7, #4]
     e7a:	6039      	str	r1, [r7, #0]
    return(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(adc0BaseAddress + (adcModule * 0x1000) + ADCDCISC_OFFSET)), digitalComparator, 1, RW1C));
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     e82:	3338      	adds	r3, #56	; 0x38
     e84:	031b      	lsls	r3, r3, #12
     e86:	3334      	adds	r3, #52	; 0x34
     e88:	4618      	mov	r0, r3
     e8a:	2303      	movs	r3, #3
     e8c:	2201      	movs	r2, #1
     e8e:	6839      	ldr	r1, [r7, #0]
     e90:	f7ff fbf0 	bl	674 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     e94:	4603      	mov	r3, r0
}
     e96:	4618      	mov	r0, r3
     e98:	3708      	adds	r7, #8
     e9a:	46bd      	mov	sp, r7
     e9c:	bd80      	pop	{r7, pc}

00000e9e <_ZN3Adc16clearDcInterruptEmm>:

void Adc::clearDcInterrupt(uint32_t adcModule, uint32_t digitalComparator)
{
     e9e:	b580      	push	{r7, lr}
     ea0:	b084      	sub	sp, #16
     ea2:	af02      	add	r7, sp, #8
     ea4:	6078      	str	r0, [r7, #4]
     ea6:	6039      	str	r1, [r7, #0]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(adc0BaseAddress + (adcModule * 0x1000) + ADCDCISC_OFFSET)), (uint32_t)setORClear::set , digitalComparator, 1, RW1C);
     ea8:	687b      	ldr	r3, [r7, #4]
     eaa:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     eae:	3338      	adds	r3, #56	; 0x38
     eb0:	031b      	lsls	r3, r3, #12
     eb2:	3334      	adds	r3, #52	; 0x34
     eb4:	4618      	mov	r0, r3
     eb6:	2303      	movs	r3, #3
     eb8:	9300      	str	r3, [sp, #0]
     eba:	2301      	movs	r3, #1
     ebc:	683a      	ldr	r2, [r7, #0]
     ebe:	2101      	movs	r1, #1
     ec0:	f7ff fc02 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     ec4:	bf00      	nop
     ec6:	3708      	adds	r7, #8
     ec8:	46bd      	mov	sp, r7
     eca:	bd80      	pop	{r7, pc}

00000ecc <_ZN3Adc16getAdcResolutionEv>:

uint32_t Adc::getAdcResolution()
{
     ecc:	b580      	push	{r7, lr}
     ece:	af00      	add	r7, sp, #0
    return(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(adc0BaseAddress + ADCPP_OFFSET)), 18, 22 - 18 + 1, RO));
     ed0:	2301      	movs	r3, #1
     ed2:	2205      	movs	r2, #5
     ed4:	2112      	movs	r1, #18
     ed6:	4803      	ldr	r0, [pc, #12]	; (ee4 <_ZN3Adc16getAdcResolutionEv+0x18>)
     ed8:	f7ff fbcc 	bl	674 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     edc:	4603      	mov	r3, r0
}
     ede:	4618      	mov	r0, r3
     ee0:	bd80      	pop	{r7, pc}
     ee2:	bf00      	nop
     ee4:	40038fc0 	.word	0x40038fc0

00000ee8 <_ZN3Adc14initializationEv>:
 *          Configuration of the sample sequencers is slightly more complex 
 *          than the module initialization because each sample sequencer is 
 *          completely programmable.
 */
void Adc::initialization(void)
{    
     ee8:	b580      	push	{r7, lr}
     eea:	b08c      	sub	sp, #48	; 0x30
     eec:	af02      	add	r7, sp, #8
     eee:	6078      	str	r0, [r7, #4]
     * corresponding ASENn bit in the ADCACTSS register. Programming of the 
     * sample sequencers is allowed without having them enabled. Disabling the 
     * sequencer during programming prevents erroneous execution if a trigger
     * event were to occur during the configuration process.
     */
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCACTSS_OFFSET)), (uint32_t)setORClear::clear, sampleSequencer, 1, RW);
     ef0:	687b      	ldr	r3, [r7, #4]
     ef2:	685b      	ldr	r3, [r3, #4]
     ef4:	4618      	mov	r0, r3
     ef6:	687b      	ldr	r3, [r7, #4]
     ef8:	68da      	ldr	r2, [r3, #12]
     efa:	2300      	movs	r3, #0
     efc:	9300      	str	r3, [sp, #0]
     efe:	2301      	movs	r3, #1
     f00:	2100      	movs	r1, #0
     f02:	f7ff fbe1 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
     * 0 for all generators.
     */


    //2. Configure the trigger event for the sample sequencer in the ADCEMUX register.
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCEMUX_OFFSET)), sequencerTrigSrc, sampleSequencer * 4, 3 + 1, RW);
     f06:	687b      	ldr	r3, [r7, #4]
     f08:	685b      	ldr	r3, [r3, #4]
     f0a:	3314      	adds	r3, #20
     f0c:	4618      	mov	r0, r3
     f0e:	687b      	ldr	r3, [r7, #4]
     f10:	6959      	ldr	r1, [r3, #20]
     f12:	687b      	ldr	r3, [r7, #4]
     f14:	68db      	ldr	r3, [r3, #12]
     f16:	009a      	lsls	r2, r3, #2
     f18:	2300      	movs	r3, #0
     f1a:	9300      	str	r3, [sp, #0]
     f1c:	2304      	movs	r3, #4
     f1e:	f7ff fbd3 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //3. For each sample in the sample sequence, configure the corresponding input source in the ADCSSMUXn register.
    if(sampleSequencer == (uint32_t)sampleSequencer::SS0)
     f22:	687b      	ldr	r3, [r7, #4]
     f24:	68db      	ldr	r3, [r3, #12]
     f26:	2b00      	cmp	r3, #0
     f28:	d11f      	bne.n	f6a <_ZN3Adc14initializationEv+0x82>
    {
        for(int i = 0; i < 8; i++)
     f2a:	2300      	movs	r3, #0
     f2c:	627b      	str	r3, [r7, #36]	; 0x24
     f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f30:	2b07      	cmp	r3, #7
     f32:	f300 8083 	bgt.w	103c <_ZN3Adc14initializationEv+0x154>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
     f36:	687b      	ldr	r3, [r7, #4]
     f38:	685a      	ldr	r2, [r3, #4]
     f3a:	687b      	ldr	r3, [r7, #4]
     f3c:	68db      	ldr	r3, [r3, #12]
     f3e:	3302      	adds	r3, #2
     f40:	015b      	lsls	r3, r3, #5
     f42:	4413      	add	r3, r2
     f44:	4618      	mov	r0, r3
     f46:	687b      	ldr	r3, [r7, #4]
     f48:	699a      	ldr	r2, [r3, #24]
     f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f4c:	009b      	lsls	r3, r3, #2
     f4e:	fa22 f103 	lsr.w	r1, r2, r3
     f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f54:	009b      	lsls	r3, r3, #2
     f56:	461a      	mov	r2, r3
     f58:	2300      	movs	r3, #0
     f5a:	9300      	str	r3, [sp, #0]
     f5c:	2304      	movs	r3, #4
     f5e:	f7ff fbb3 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 8; i++)
     f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f64:	3301      	adds	r3, #1
     f66:	627b      	str	r3, [r7, #36]	; 0x24
     f68:	e7e1      	b.n	f2e <_ZN3Adc14initializationEv+0x46>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS1)
     f6a:	687b      	ldr	r3, [r7, #4]
     f6c:	68db      	ldr	r3, [r3, #12]
     f6e:	2b01      	cmp	r3, #1
     f70:	d11e      	bne.n	fb0 <_ZN3Adc14initializationEv+0xc8>
    {
        for(int i = 0; i < 4; i++)
     f72:	2300      	movs	r3, #0
     f74:	623b      	str	r3, [r7, #32]
     f76:	6a3b      	ldr	r3, [r7, #32]
     f78:	2b03      	cmp	r3, #3
     f7a:	dc5f      	bgt.n	103c <_ZN3Adc14initializationEv+0x154>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
     f7c:	687b      	ldr	r3, [r7, #4]
     f7e:	685a      	ldr	r2, [r3, #4]
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	68db      	ldr	r3, [r3, #12]
     f84:	3302      	adds	r3, #2
     f86:	015b      	lsls	r3, r3, #5
     f88:	4413      	add	r3, r2
     f8a:	4618      	mov	r0, r3
     f8c:	687b      	ldr	r3, [r7, #4]
     f8e:	699a      	ldr	r2, [r3, #24]
     f90:	6a3b      	ldr	r3, [r7, #32]
     f92:	009b      	lsls	r3, r3, #2
     f94:	fa22 f103 	lsr.w	r1, r2, r3
     f98:	6a3b      	ldr	r3, [r7, #32]
     f9a:	009b      	lsls	r3, r3, #2
     f9c:	461a      	mov	r2, r3
     f9e:	2300      	movs	r3, #0
     fa0:	9300      	str	r3, [sp, #0]
     fa2:	2304      	movs	r3, #4
     fa4:	f7ff fb90 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 4; i++)
     fa8:	6a3b      	ldr	r3, [r7, #32]
     faa:	3301      	adds	r3, #1
     fac:	623b      	str	r3, [r7, #32]
     fae:	e7e2      	b.n	f76 <_ZN3Adc14initializationEv+0x8e>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS2)
     fb0:	687b      	ldr	r3, [r7, #4]
     fb2:	68db      	ldr	r3, [r3, #12]
     fb4:	2b02      	cmp	r3, #2
     fb6:	d11e      	bne.n	ff6 <_ZN3Adc14initializationEv+0x10e>
    {
        for(int i = 0; i < 4; i++)
     fb8:	2300      	movs	r3, #0
     fba:	61fb      	str	r3, [r7, #28]
     fbc:	69fb      	ldr	r3, [r7, #28]
     fbe:	2b03      	cmp	r3, #3
     fc0:	dc3c      	bgt.n	103c <_ZN3Adc14initializationEv+0x154>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
     fc2:	687b      	ldr	r3, [r7, #4]
     fc4:	685a      	ldr	r2, [r3, #4]
     fc6:	687b      	ldr	r3, [r7, #4]
     fc8:	68db      	ldr	r3, [r3, #12]
     fca:	3302      	adds	r3, #2
     fcc:	015b      	lsls	r3, r3, #5
     fce:	4413      	add	r3, r2
     fd0:	4618      	mov	r0, r3
     fd2:	687b      	ldr	r3, [r7, #4]
     fd4:	699a      	ldr	r2, [r3, #24]
     fd6:	69fb      	ldr	r3, [r7, #28]
     fd8:	009b      	lsls	r3, r3, #2
     fda:	fa22 f103 	lsr.w	r1, r2, r3
     fde:	69fb      	ldr	r3, [r7, #28]
     fe0:	009b      	lsls	r3, r3, #2
     fe2:	461a      	mov	r2, r3
     fe4:	2300      	movs	r3, #0
     fe6:	9300      	str	r3, [sp, #0]
     fe8:	2304      	movs	r3, #4
     fea:	f7ff fb6d 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 4; i++)
     fee:	69fb      	ldr	r3, [r7, #28]
     ff0:	3301      	adds	r3, #1
     ff2:	61fb      	str	r3, [r7, #28]
     ff4:	e7e2      	b.n	fbc <_ZN3Adc14initializationEv+0xd4>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS3)
     ff6:	687b      	ldr	r3, [r7, #4]
     ff8:	68db      	ldr	r3, [r3, #12]
     ffa:	2b03      	cmp	r3, #3
     ffc:	d11e      	bne.n	103c <_ZN3Adc14initializationEv+0x154>
    {
        for(int i = 0; i < 1; i++)
     ffe:	2300      	movs	r3, #0
    1000:	61bb      	str	r3, [r7, #24]
    1002:	69bb      	ldr	r3, [r7, #24]
    1004:	2b00      	cmp	r3, #0
    1006:	dc19      	bgt.n	103c <_ZN3Adc14initializationEv+0x154>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
    1008:	687b      	ldr	r3, [r7, #4]
    100a:	685a      	ldr	r2, [r3, #4]
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	68db      	ldr	r3, [r3, #12]
    1010:	3302      	adds	r3, #2
    1012:	015b      	lsls	r3, r3, #5
    1014:	4413      	add	r3, r2
    1016:	4618      	mov	r0, r3
    1018:	687b      	ldr	r3, [r7, #4]
    101a:	699a      	ldr	r2, [r3, #24]
    101c:	69bb      	ldr	r3, [r7, #24]
    101e:	009b      	lsls	r3, r3, #2
    1020:	fa22 f103 	lsr.w	r1, r2, r3
    1024:	69bb      	ldr	r3, [r7, #24]
    1026:	009b      	lsls	r3, r3, #2
    1028:	461a      	mov	r2, r3
    102a:	2300      	movs	r3, #0
    102c:	9300      	str	r3, [sp, #0]
    102e:	2304      	movs	r3, #4
    1030:	f7ff fb4a 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 1; i++)
    1034:	69bb      	ldr	r3, [r7, #24]
    1036:	3301      	adds	r3, #1
    1038:	61bb      	str	r3, [r7, #24]
    103a:	e7e2      	b.n	1002 <_ZN3Adc14initializationEv+0x11a>
     * 4. For each sample in the sample sequence, configure the sample control 
     * bits in the corresponding nibble in the ADCSSCTLn register. When 
     * programming the last nibble, ensure that the END bit is set. Failure to 
     * set the END bit causes unpredictable behavior.
     */
    if(sampleSequencer == (uint32_t)sampleSequencer::SS0)
    103c:	687b      	ldr	r3, [r7, #4]
    103e:	68db      	ldr	r3, [r3, #12]
    1040:	2b00      	cmp	r3, #0
    1042:	d11b      	bne.n	107c <_ZN3Adc14initializationEv+0x194>
    {
        for(int i = 0; i < 32; i++)
    1044:	2300      	movs	r3, #0
    1046:	617b      	str	r3, [r7, #20]
    1048:	697b      	ldr	r3, [r7, #20]
    104a:	2b1f      	cmp	r3, #31
    104c:	dc76      	bgt.n	113c <_ZN3Adc14initializationEv+0x254>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> i, i, 1, RW);
    104e:	687b      	ldr	r3, [r7, #4]
    1050:	685a      	ldr	r2, [r3, #4]
    1052:	687b      	ldr	r3, [r7, #4]
    1054:	68db      	ldr	r3, [r3, #12]
    1056:	015b      	lsls	r3, r3, #5
    1058:	4413      	add	r3, r2
    105a:	3344      	adds	r3, #68	; 0x44
    105c:	4618      	mov	r0, r3
    105e:	687b      	ldr	r3, [r7, #4]
    1060:	69da      	ldr	r2, [r3, #28]
    1062:	697b      	ldr	r3, [r7, #20]
    1064:	fa22 f103 	lsr.w	r1, r2, r3
    1068:	697a      	ldr	r2, [r7, #20]
    106a:	2300      	movs	r3, #0
    106c:	9300      	str	r3, [sp, #0]
    106e:	2301      	movs	r3, #1
    1070:	f7ff fb2a 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 32; i++)
    1074:	697b      	ldr	r3, [r7, #20]
    1076:	3301      	adds	r3, #1
    1078:	617b      	str	r3, [r7, #20]
    107a:	e7e5      	b.n	1048 <_ZN3Adc14initializationEv+0x160>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS1)
    107c:	687b      	ldr	r3, [r7, #4]
    107e:	68db      	ldr	r3, [r3, #12]
    1080:	2b01      	cmp	r3, #1
    1082:	d11b      	bne.n	10bc <_ZN3Adc14initializationEv+0x1d4>
    {
        for(int i = 0; i < 16; i++)
    1084:	2300      	movs	r3, #0
    1086:	613b      	str	r3, [r7, #16]
    1088:	693b      	ldr	r3, [r7, #16]
    108a:	2b0f      	cmp	r3, #15
    108c:	dc56      	bgt.n	113c <_ZN3Adc14initializationEv+0x254>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> i, i, 1, RW);
    108e:	687b      	ldr	r3, [r7, #4]
    1090:	685a      	ldr	r2, [r3, #4]
    1092:	687b      	ldr	r3, [r7, #4]
    1094:	68db      	ldr	r3, [r3, #12]
    1096:	015b      	lsls	r3, r3, #5
    1098:	4413      	add	r3, r2
    109a:	3344      	adds	r3, #68	; 0x44
    109c:	4618      	mov	r0, r3
    109e:	687b      	ldr	r3, [r7, #4]
    10a0:	69da      	ldr	r2, [r3, #28]
    10a2:	693b      	ldr	r3, [r7, #16]
    10a4:	fa22 f103 	lsr.w	r1, r2, r3
    10a8:	693a      	ldr	r2, [r7, #16]
    10aa:	2300      	movs	r3, #0
    10ac:	9300      	str	r3, [sp, #0]
    10ae:	2301      	movs	r3, #1
    10b0:	f7ff fb0a 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 16; i++)
    10b4:	693b      	ldr	r3, [r7, #16]
    10b6:	3301      	adds	r3, #1
    10b8:	613b      	str	r3, [r7, #16]
    10ba:	e7e5      	b.n	1088 <_ZN3Adc14initializationEv+0x1a0>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS2)
    10bc:	687b      	ldr	r3, [r7, #4]
    10be:	68db      	ldr	r3, [r3, #12]
    10c0:	2b02      	cmp	r3, #2
    10c2:	d11b      	bne.n	10fc <_ZN3Adc14initializationEv+0x214>
    {
        for(int i = 0; i < 16; i++)
    10c4:	2300      	movs	r3, #0
    10c6:	60fb      	str	r3, [r7, #12]
    10c8:	68fb      	ldr	r3, [r7, #12]
    10ca:	2b0f      	cmp	r3, #15
    10cc:	dc36      	bgt.n	113c <_ZN3Adc14initializationEv+0x254>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> i, i, 1, RW);
    10ce:	687b      	ldr	r3, [r7, #4]
    10d0:	685a      	ldr	r2, [r3, #4]
    10d2:	687b      	ldr	r3, [r7, #4]
    10d4:	68db      	ldr	r3, [r3, #12]
    10d6:	015b      	lsls	r3, r3, #5
    10d8:	4413      	add	r3, r2
    10da:	3344      	adds	r3, #68	; 0x44
    10dc:	4618      	mov	r0, r3
    10de:	687b      	ldr	r3, [r7, #4]
    10e0:	69da      	ldr	r2, [r3, #28]
    10e2:	68fb      	ldr	r3, [r7, #12]
    10e4:	fa22 f103 	lsr.w	r1, r2, r3
    10e8:	68fa      	ldr	r2, [r7, #12]
    10ea:	2300      	movs	r3, #0
    10ec:	9300      	str	r3, [sp, #0]
    10ee:	2301      	movs	r3, #1
    10f0:	f7ff faea 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 16; i++)
    10f4:	68fb      	ldr	r3, [r7, #12]
    10f6:	3301      	adds	r3, #1
    10f8:	60fb      	str	r3, [r7, #12]
    10fa:	e7e5      	b.n	10c8 <_ZN3Adc14initializationEv+0x1e0>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS3)
    10fc:	687b      	ldr	r3, [r7, #4]
    10fe:	68db      	ldr	r3, [r3, #12]
    1100:	2b03      	cmp	r3, #3
    1102:	d11b      	bne.n	113c <_ZN3Adc14initializationEv+0x254>
    {
        for(int i = 0; i < 4; i++)
    1104:	2300      	movs	r3, #0
    1106:	60bb      	str	r3, [r7, #8]
    1108:	68bb      	ldr	r3, [r7, #8]
    110a:	2b03      	cmp	r3, #3
    110c:	dc16      	bgt.n	113c <_ZN3Adc14initializationEv+0x254>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> i, i, 1, RW);
    110e:	687b      	ldr	r3, [r7, #4]
    1110:	685a      	ldr	r2, [r3, #4]
    1112:	687b      	ldr	r3, [r7, #4]
    1114:	68db      	ldr	r3, [r3, #12]
    1116:	015b      	lsls	r3, r3, #5
    1118:	4413      	add	r3, r2
    111a:	3344      	adds	r3, #68	; 0x44
    111c:	4618      	mov	r0, r3
    111e:	687b      	ldr	r3, [r7, #4]
    1120:	69da      	ldr	r2, [r3, #28]
    1122:	68bb      	ldr	r3, [r7, #8]
    1124:	fa22 f103 	lsr.w	r1, r2, r3
    1128:	68ba      	ldr	r2, [r7, #8]
    112a:	2300      	movs	r3, #0
    112c:	9300      	str	r3, [sp, #0]
    112e:	2301      	movs	r3, #1
    1130:	f7ff faca 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 4; i++)
    1134:	68bb      	ldr	r3, [r7, #8]
    1136:	3301      	adds	r3, #1
    1138:	60bb      	str	r3, [r7, #8]
    113a:	e7e5      	b.n	1108 <_ZN3Adc14initializationEv+0x220>
        }
    }

    113c:	bf00      	nop
    113e:	3728      	adds	r7, #40	; 0x28
    1140:	46bd      	mov	sp, r7
    1142:	bd80      	pop	{r7, pc}

00001144 <_ZN13SystemControlC1Ev>:
#include "systemControl.h"

/**
 * @brief empty constructor placeholder
 */
SystemControl::SystemControl()
    1144:	b480      	push	{r7}
    1146:	b083      	sub	sp, #12
    1148:	af00      	add	r7, sp, #0
    114a:	6078      	str	r0, [r7, #4]
{
    
}
    114c:	687b      	ldr	r3, [r7, #4]
    114e:	4618      	mov	r0, r3
    1150:	370c      	adds	r7, #12
    1152:	46bd      	mov	sp, r7
    1154:	f85d 7b04 	ldr.w	r7, [sp], #4
    1158:	4770      	bx	lr

0000115a <_ZN13SystemControlD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
SystemControl::~SystemControl()
    115a:	b480      	push	{r7}
    115c:	b083      	sub	sp, #12
    115e:	af00      	add	r7, sp, #0
    1160:	6078      	str	r0, [r7, #4]
{
	
}
    1162:	687b      	ldr	r3, [r7, #4]
    1164:	4618      	mov	r0, r3
    1166:	370c      	adds	r7, #12
    1168:	46bd      	mov	sp, r7
    116a:	f85d 7b04 	ldr.w	r7, [sp], #4
    116e:	4770      	bx	lr

00001170 <_ZN13SystemControl16initializeGPIOHBEv>:

/**
 * @brief Initializes the system to use GPIO AHB for use instead of the APB
 */
void SystemControl::initializeGPIOHB(void)
{
    1170:	b580      	push	{r7, lr}
    1172:	b082      	sub	sp, #8
    1174:	af02      	add	r7, sp, #8

	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 0, 1, RW);
    1176:	2300      	movs	r3, #0
    1178:	9300      	str	r3, [sp, #0]
    117a:	2301      	movs	r3, #1
    117c:	2200      	movs	r2, #0
    117e:	2101      	movs	r1, #1
    1180:	4816      	ldr	r0, [pc, #88]	; (11dc <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    1182:	f7ff faa1 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 1, 1, RW);
    1186:	2300      	movs	r3, #0
    1188:	9300      	str	r3, [sp, #0]
    118a:	2301      	movs	r3, #1
    118c:	2201      	movs	r2, #1
    118e:	2101      	movs	r1, #1
    1190:	4812      	ldr	r0, [pc, #72]	; (11dc <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    1192:	f7ff fa99 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 2, 1, RW);
    1196:	2300      	movs	r3, #0
    1198:	9300      	str	r3, [sp, #0]
    119a:	2301      	movs	r3, #1
    119c:	2202      	movs	r2, #2
    119e:	2101      	movs	r1, #1
    11a0:	480e      	ldr	r0, [pc, #56]	; (11dc <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    11a2:	f7ff fa91 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 3, 1, RW);
    11a6:	2300      	movs	r3, #0
    11a8:	9300      	str	r3, [sp, #0]
    11aa:	2301      	movs	r3, #1
    11ac:	2203      	movs	r2, #3
    11ae:	2101      	movs	r1, #1
    11b0:	480a      	ldr	r0, [pc, #40]	; (11dc <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    11b2:	f7ff fa89 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 4, 1, RW);
    11b6:	2300      	movs	r3, #0
    11b8:	9300      	str	r3, [sp, #0]
    11ba:	2301      	movs	r3, #1
    11bc:	2204      	movs	r2, #4
    11be:	2101      	movs	r1, #1
    11c0:	4806      	ldr	r0, [pc, #24]	; (11dc <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    11c2:	f7ff fa81 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 5, 1, RW);
    11c6:	2300      	movs	r3, #0
    11c8:	9300      	str	r3, [sp, #0]
    11ca:	2301      	movs	r3, #1
    11cc:	2205      	movs	r2, #5
    11ce:	2101      	movs	r1, #1
    11d0:	4802      	ldr	r0, [pc, #8]	; (11dc <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    11d2:	f7ff fa79 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    11d6:	bf00      	nop
    11d8:	46bd      	mov	sp, r7
    11da:	bd80      	pop	{r7, pc}
    11dc:	400fe06c 	.word	0x400fe06c

000011e0 <_ZN13SystemControl15initializeClockE7SYSDIV2>:
 * @brief Initializes the PLL for system clock use
 *
 * @param frequency of the new system clock.
 */ 
void SystemControl::initializeClock(SYSDIV2 frequency)
{
    11e0:	b580      	push	{r7, lr}
    11e2:	b084      	sub	sp, #16
    11e4:	af02      	add	r7, sp, #8
    11e6:	4603      	mov	r3, r0
    11e8:	71fb      	strb	r3, [r7, #7]
	
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::set, 31, 1, RW); //0. Use RCC2.
    11ea:	2300      	movs	r3, #0
    11ec:	9300      	str	r3, [sp, #0]
    11ee:	2301      	movs	r3, #1
    11f0:	221f      	movs	r2, #31
    11f2:	2101      	movs	r1, #1
    11f4:	482d      	ldr	r0, [pc, #180]	; (12ac <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    11f6:	f7ff fa67 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::set, 11, 1, RW); //1. Bypass PLL while initiializing
    11fa:	2300      	movs	r3, #0
    11fc:	9300      	str	r3, [sp, #0]
    11fe:	2301      	movs	r3, #1
    1200:	220b      	movs	r2, #11
    1202:	2101      	movs	r1, #1
    1204:	4829      	ldr	r0, [pc, #164]	; (12ac <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    1206:	f7ff fa5f 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC_OFFSET)), _16MHz_XTAL, 6, 5, RW); // 2. Select the crystal value and the oscillator source, configure for 16MHz crystal.
    120a:	2300      	movs	r3, #0
    120c:	9300      	str	r3, [sp, #0]
    120e:	2305      	movs	r3, #5
    1210:	2206      	movs	r2, #6
    1212:	2115      	movs	r1, #21
    1214:	4826      	ldr	r0, [pc, #152]	; (12b0 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xd0>)
    1216:	f7ff fa57 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), MOSC, 4, 3, RW);  //Confgure for main oscillator source.
    121a:	2300      	movs	r3, #0
    121c:	9300      	str	r3, [sp, #0]
    121e:	2303      	movs	r3, #3
    1220:	2204      	movs	r2, #4
    1222:	2100      	movs	r1, #0
    1224:	4821      	ldr	r0, [pc, #132]	; (12ac <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    1226:	f7ff fa4f 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::clear, 13, 1, RW); // 3. Activate PLL by clearing PWRDN.
    122a:	2300      	movs	r3, #0
    122c:	9300      	str	r3, [sp, #0]
    122e:	2301      	movs	r3, #1
    1230:	220d      	movs	r2, #13
    1232:	2100      	movs	r1, #0
    1234:	481d      	ldr	r0, [pc, #116]	; (12ac <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    1236:	f7ff fa47 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

	/*
	 * Append the SYSDIV2LSB bit to the SYSDIV2 field to create a 7 bit divisor 
	 * using the 400 MHz PLL output.
	 */
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::set, 30, 1, RW);
    123a:	2300      	movs	r3, #0
    123c:	9300      	str	r3, [sp, #0]
    123e:	2301      	movs	r3, #1
    1240:	221e      	movs	r2, #30
    1242:	2101      	movs	r1, #1
    1244:	4819      	ldr	r0, [pc, #100]	; (12ac <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    1246:	f7ff fa3f 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), ((frequency - 1) & 0x01), 22, 1, RW);
    124a:	79fb      	ldrb	r3, [r7, #7]
    124c:	3b01      	subs	r3, #1
    124e:	f003 0101 	and.w	r1, r3, #1
    1252:	2300      	movs	r3, #0
    1254:	9300      	str	r3, [sp, #0]
    1256:	2301      	movs	r3, #1
    1258:	2216      	movs	r2, #22
    125a:	4814      	ldr	r0, [pc, #80]	; (12ac <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    125c:	f7ff fa34 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), ((frequency - 1) >> 1), 23, 6, RW);
    1260:	79fb      	ldrb	r3, [r7, #7]
    1262:	3b01      	subs	r3, #1
    1264:	105b      	asrs	r3, r3, #1
    1266:	4619      	mov	r1, r3
    1268:	2300      	movs	r3, #0
    126a:	9300      	str	r3, [sp, #0]
    126c:	2306      	movs	r3, #6
    126e:	2217      	movs	r2, #23
    1270:	480e      	ldr	r0, [pc, #56]	; (12ac <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    1272:	f7ff fa29 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

	while((Register::getRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RIS_OFFSET)), 6, 1, RO)) == 0)  // 5. Wait for the PLL to lock by polling PLLRIS.
    1276:	2301      	movs	r3, #1
    1278:	2201      	movs	r2, #1
    127a:	2106      	movs	r1, #6
    127c:	480d      	ldr	r0, [pc, #52]	; (12b4 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xd4>)
    127e:	f7ff f9f9 	bl	674 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    1282:	4603      	mov	r3, r0
    1284:	2b00      	cmp	r3, #0
    1286:	bf0c      	ite	eq
    1288:	2301      	moveq	r3, #1
    128a:	2300      	movne	r3, #0
    128c:	b2db      	uxtb	r3, r3
    128e:	2b00      	cmp	r3, #0
    1290:	d000      	beq.n	1294 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xb4>
    1292:	e7f0      	b.n	1276 <_ZN13SystemControl15initializeClockE7SYSDIV2+0x96>
	{

	}
	
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::clear, 11, 1, RW); // 6. Enable use of the PLL by clearing BYPASS.
    1294:	2300      	movs	r3, #0
    1296:	9300      	str	r3, [sp, #0]
    1298:	2301      	movs	r3, #1
    129a:	220b      	movs	r2, #11
    129c:	2100      	movs	r1, #0
    129e:	4803      	ldr	r0, [pc, #12]	; (12ac <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    12a0:	f7ff fa12 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    12a4:	bf00      	nop
    12a6:	3708      	adds	r7, #8
    12a8:	46bd      	mov	sp, r7
    12aa:	bd80      	pop	{r7, pc}
    12ac:	400fe070 	.word	0x400fe070
    12b0:	400fe060 	.word	0x400fe060
    12b4:	400fe050 	.word	0x400fe050

000012b8 <_ZN4GpioC1Ev>:
#include "gpio.h"

/**
 * @brief empty constructor placeholder
 */
Gpio::Gpio()
    12b8:	b480      	push	{r7}
    12ba:	b083      	sub	sp, #12
    12bc:	af00      	add	r7, sp, #0
    12be:	6078      	str	r0, [r7, #4]
    12c0:	687b      	ldr	r3, [r7, #4]
    12c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    12c6:	60da      	str	r2, [r3, #12]
{

}
    12c8:	687b      	ldr	r3, [r7, #4]
    12ca:	4618      	mov	r0, r3
    12cc:	370c      	adds	r7, #12
    12ce:	46bd      	mov	sp, r7
    12d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    12d4:	4770      	bx	lr

000012d6 <_ZN4GpioD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Gpio::~Gpio()
    12d6:	b480      	push	{r7}
    12d8:	b083      	sub	sp, #12
    12da:	af00      	add	r7, sp, #0
    12dc:	6078      	str	r0, [r7, #4]
{   

}
    12de:	687b      	ldr	r3, [r7, #4]
    12e0:	4618      	mov	r0, r3
    12e2:	370c      	adds	r7, #12
    12e4:	46bd      	mov	sp, r7
    12e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    12ea:	4770      	bx	lr

000012ec <_ZN4Gpio10initializeEm9direction>:
 * @brief Simple gpio initializer constructor.
 * @param gpio pin to be initialized.
 * @param dir of the gpio, to be an output or input.
 */
void Gpio::initialize(uint32_t gpio, direction dir)
{  
    12ec:	b580      	push	{r7, lr}
    12ee:	b086      	sub	sp, #24
    12f0:	af02      	add	r7, sp, #8
    12f2:	60f8      	str	r0, [r7, #12]
    12f4:	60b9      	str	r1, [r7, #8]
    12f6:	4613      	mov	r3, r2
    12f8:	71fb      	strb	r3, [r7, #7]
    alternateFunction = gpio%100; //get encoding for alternate function
    12fa:	68ba      	ldr	r2, [r7, #8]
    12fc:	4b84      	ldr	r3, [pc, #528]	; (1510 <_ZN4Gpio10initializeEm9direction+0x224>)
    12fe:	fba3 1302 	umull	r1, r3, r3, r2
    1302:	095b      	lsrs	r3, r3, #5
    1304:	2164      	movs	r1, #100	; 0x64
    1306:	fb01 f303 	mul.w	r3, r1, r3
    130a:	1ad3      	subs	r3, r2, r3
    130c:	461a      	mov	r2, r3
    130e:	68fb      	ldr	r3, [r7, #12]
    1310:	60da      	str	r2, [r3, #12]
    gpio = gpio/100; //get rid of gpio encoding
    1312:	68bb      	ldr	r3, [r7, #8]
    1314:	4a7e      	ldr	r2, [pc, #504]	; (1510 <_ZN4Gpio10initializeEm9direction+0x224>)
    1316:	fba2 2303 	umull	r2, r3, r2, r3
    131a:	095b      	lsrs	r3, r3, #5
    131c:	60bb      	str	r3, [r7, #8]

    gpioPort = (gpio/8);
    131e:	68bb      	ldr	r3, [r7, #8]
    1320:	08da      	lsrs	r2, r3, #3
    1322:	68fb      	ldr	r3, [r7, #12]
    1324:	615a      	str	r2, [r3, #20]
    (*this).gpio = (gpio%8);
    1326:	68bb      	ldr	r3, [r7, #8]
    1328:	f003 0207 	and.w	r2, r3, #7
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	601a      	str	r2, [r3, #0]
    (*this).dir = dir;
    1330:	68fb      	ldr	r3, [r7, #12]
    1332:	79fa      	ldrb	r2, [r7, #7]
    1334:	711a      	strb	r2, [r3, #4]
    baseAddress = GPIO_Port_AHB_BASE + (gpioPort) * 0x1000;
    1336:	68fb      	ldr	r3, [r7, #12]
    1338:	695b      	ldr	r3, [r3, #20]
    133a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    133e:	3358      	adds	r3, #88	; 0x58
    1340:	031a      	lsls	r2, r3, #12
    1342:	68fb      	ldr	r3, [r7, #12]
    1344:	611a      	str	r2, [r3, #16]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCGPIO_OFFSET)), (uint32_t)setORClear::set, (uint32_t)(gpioPort), 1, RW);
    1346:	68fb      	ldr	r3, [r7, #12]
    1348:	695a      	ldr	r2, [r3, #20]
    134a:	2300      	movs	r3, #0
    134c:	9300      	str	r3, [sp, #0]
    134e:	2301      	movs	r3, #1
    1350:	2101      	movs	r1, #1
    1352:	4870      	ldr	r0, [pc, #448]	; (1514 <_ZN4Gpio10initializeEm9direction+0x228>)
    1354:	f7ff f9b8 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + PRGPIO_OFFSET)), (uint32_t)(gpioPort), 1, RO) == 0)
    1358:	68fb      	ldr	r3, [r7, #12]
    135a:	6959      	ldr	r1, [r3, #20]
    135c:	2301      	movs	r3, #1
    135e:	2201      	movs	r2, #1
    1360:	486d      	ldr	r0, [pc, #436]	; (1518 <_ZN4Gpio10initializeEm9direction+0x22c>)
    1362:	f7ff f987 	bl	674 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    1366:	4603      	mov	r3, r0
    1368:	2b00      	cmp	r3, #0
    136a:	bf0c      	ite	eq
    136c:	2301      	moveq	r3, #1
    136e:	2300      	movne	r3, #0
    1370:	b2db      	uxtb	r3, r3
    1372:	2b00      	cmp	r3, #0
    1374:	d000      	beq.n	1378 <_ZN4Gpio10initializeEm9direction+0x8c>
    1376:	e7ef      	b.n	1358 <_ZN4Gpio10initializeEm9direction+0x6c>
    {
        //Ready?
    }

    //Unlock NMI for use.
    if(gpio == ((uint32_t)PF0::GPIO)/100)
    1378:	68bb      	ldr	r3, [r7, #8]
    137a:	2b28      	cmp	r3, #40	; 0x28
    137c:	d11c      	bne.n	13b8 <_ZN4Gpio10initializeEm9direction+0xcc>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOLOCK_OFFSET)), gpioKey, 0, 32, RW);
    137e:	68fb      	ldr	r3, [r7, #12]
    1380:	691b      	ldr	r3, [r3, #16]
    1382:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
    1386:	4618      	mov	r0, r3
    1388:	2300      	movs	r3, #0
    138a:	9300      	str	r3, [sp, #0]
    138c:	2320      	movs	r3, #32
    138e:	2200      	movs	r2, #0
    1390:	4962      	ldr	r1, [pc, #392]	; (151c <_ZN4Gpio10initializeEm9direction+0x230>)
    1392:	f7ff f999 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        *(((volatile uint32_t*)(baseAddress + GPIOCR_OFFSET))) |= (0x1 << (*this).gpio);
    1396:	68fb      	ldr	r3, [r7, #12]
    1398:	691b      	ldr	r3, [r3, #16]
    139a:	f203 5324 	addw	r3, r3, #1316	; 0x524
    139e:	681b      	ldr	r3, [r3, #0]
    13a0:	68fa      	ldr	r2, [r7, #12]
    13a2:	6812      	ldr	r2, [r2, #0]
    13a4:	2101      	movs	r1, #1
    13a6:	fa01 f202 	lsl.w	r2, r1, r2
    13aa:	4611      	mov	r1, r2
    13ac:	68fa      	ldr	r2, [r7, #12]
    13ae:	6912      	ldr	r2, [r2, #16]
    13b0:	f202 5224 	addw	r2, r2, #1316	; 0x524
    13b4:	430b      	orrs	r3, r1
    13b6:	6013      	str	r3, [r2, #0]
    }

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODIR_OFFSET)), (*this).dir, (*this).gpio, 1, RW);
    13b8:	68fb      	ldr	r3, [r7, #12]
    13ba:	691b      	ldr	r3, [r3, #16]
    13bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    13c0:	4618      	mov	r0, r3
    13c2:	68fb      	ldr	r3, [r7, #12]
    13c4:	791b      	ldrb	r3, [r3, #4]
    13c6:	4619      	mov	r1, r3
    13c8:	68fb      	ldr	r3, [r7, #12]
    13ca:	681a      	ldr	r2, [r3, #0]
    13cc:	2300      	movs	r3, #0
    13ce:	9300      	str	r3, [sp, #0]
    13d0:	2301      	movs	r3, #1
    13d2:	f7ff f979 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    
    //If no alternate function encoding
    if(alternateFunction == 0)
    13d6:	68fb      	ldr	r3, [r7, #12]
    13d8:	68db      	ldr	r3, [r3, #12]
    13da:	2b00      	cmp	r3, #0
    13dc:	d138      	bne.n	1450 <_ZN4Gpio10initializeEm9direction+0x164>
    {
        if((*this).dir == input)
    13de:	68fb      	ldr	r3, [r7, #12]
    13e0:	791b      	ldrb	r3, [r3, #4]
    13e2:	2b00      	cmp	r3, #0
    13e4:	d10c      	bne.n	1400 <_ZN4Gpio10initializeEm9direction+0x114>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOPUR_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    13e6:	68fb      	ldr	r3, [r7, #12]
    13e8:	691b      	ldr	r3, [r3, #16]
    13ea:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
    13ee:	4618      	mov	r0, r3
    13f0:	68fb      	ldr	r3, [r7, #12]
    13f2:	681a      	ldr	r2, [r3, #0]
    13f4:	2300      	movs	r3, #0
    13f6:	9300      	str	r3, [sp, #0]
    13f8:	2301      	movs	r3, #1
    13fa:	2101      	movs	r1, #1
    13fc:	f7ff f964 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        }


        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAFSEl_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    1400:	68fb      	ldr	r3, [r7, #12]
    1402:	691b      	ldr	r3, [r3, #16]
    1404:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    1408:	4618      	mov	r0, r3
    140a:	68fb      	ldr	r3, [r7, #12]
    140c:	681a      	ldr	r2, [r3, #0]
    140e:	2300      	movs	r3, #0
    1410:	9300      	str	r3, [sp, #0]
    1412:	2301      	movs	r3, #1
    1414:	2100      	movs	r1, #0
    1416:	f7ff f957 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    141a:	68fb      	ldr	r3, [r7, #12]
    141c:	691b      	ldr	r3, [r3, #16]
    141e:	f203 531c 	addw	r3, r3, #1308	; 0x51c
    1422:	4618      	mov	r0, r3
    1424:	68fb      	ldr	r3, [r7, #12]
    1426:	681a      	ldr	r2, [r3, #0]
    1428:	2300      	movs	r3, #0
    142a:	9300      	str	r3, [sp, #0]
    142c:	2301      	movs	r3, #1
    142e:	2101      	movs	r1, #1
    1430:	f7ff f94a 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    1434:	68fb      	ldr	r3, [r7, #12]
    1436:	691b      	ldr	r3, [r3, #16]
    1438:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    143c:	4618      	mov	r0, r3
    143e:	68fb      	ldr	r3, [r7, #12]
    1440:	681a      	ldr	r2, [r3, #0]
    1442:	2300      	movs	r3, #0
    1444:	9300      	str	r3, [sp, #0]
    1446:	2301      	movs	r3, #1
    1448:	2100      	movs	r1, #0
    144a:	f7ff f93d 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
        }


    }
}
    144e:	e05a      	b.n	1506 <_ZN4Gpio10initializeEm9direction+0x21a>
        alternateFunction = alternateFunction - 1; //Get rid of encoding offset
    1450:	68fb      	ldr	r3, [r7, #12]
    1452:	68db      	ldr	r3, [r3, #12]
    1454:	1e5a      	subs	r2, r3, #1
    1456:	68fb      	ldr	r3, [r7, #12]
    1458:	60da      	str	r2, [r3, #12]
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAFSEl_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW); //Enable alternate function for GPIO pin
    145a:	68fb      	ldr	r3, [r7, #12]
    145c:	691b      	ldr	r3, [r3, #16]
    145e:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    1462:	4618      	mov	r0, r3
    1464:	68fb      	ldr	r3, [r7, #12]
    1466:	681a      	ldr	r2, [r3, #0]
    1468:	2300      	movs	r3, #0
    146a:	9300      	str	r3, [sp, #0]
    146c:	2301      	movs	r3, #1
    146e:	2101      	movs	r1, #1
    1470:	f7ff f92a 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        if(alternateFunction == 0)
    1474:	68fb      	ldr	r3, [r7, #12]
    1476:	68db      	ldr	r3, [r3, #12]
    1478:	2b00      	cmp	r3, #0
    147a:	d11a      	bne.n	14b2 <_ZN4Gpio10initializeEm9direction+0x1c6>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    147c:	68fb      	ldr	r3, [r7, #12]
    147e:	691b      	ldr	r3, [r3, #16]
    1480:	f203 531c 	addw	r3, r3, #1308	; 0x51c
    1484:	4618      	mov	r0, r3
    1486:	68fb      	ldr	r3, [r7, #12]
    1488:	681a      	ldr	r2, [r3, #0]
    148a:	2300      	movs	r3, #0
    148c:	9300      	str	r3, [sp, #0]
    148e:	2301      	movs	r3, #1
    1490:	2100      	movs	r1, #0
    1492:	f7ff f919 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    1496:	68fb      	ldr	r3, [r7, #12]
    1498:	691b      	ldr	r3, [r3, #16]
    149a:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    149e:	4618      	mov	r0, r3
    14a0:	68fb      	ldr	r3, [r7, #12]
    14a2:	681a      	ldr	r2, [r3, #0]
    14a4:	2300      	movs	r3, #0
    14a6:	9300      	str	r3, [sp, #0]
    14a8:	2301      	movs	r3, #1
    14aa:	2101      	movs	r1, #1
    14ac:	f7ff f90c 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    14b0:	e029      	b.n	1506 <_ZN4Gpio10initializeEm9direction+0x21a>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOPCTL_OFFSET)), alternateFunction, ((*this).gpio) * 4, 4, RW);
    14b2:	68fb      	ldr	r3, [r7, #12]
    14b4:	691b      	ldr	r3, [r3, #16]
    14b6:	f203 532c 	addw	r3, r3, #1324	; 0x52c
    14ba:	4618      	mov	r0, r3
    14bc:	68fb      	ldr	r3, [r7, #12]
    14be:	68db      	ldr	r3, [r3, #12]
    14c0:	4619      	mov	r1, r3
    14c2:	68fb      	ldr	r3, [r7, #12]
    14c4:	681b      	ldr	r3, [r3, #0]
    14c6:	009a      	lsls	r2, r3, #2
    14c8:	2300      	movs	r3, #0
    14ca:	9300      	str	r3, [sp, #0]
    14cc:	2304      	movs	r3, #4
    14ce:	f7ff f8fb 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    14d2:	68fb      	ldr	r3, [r7, #12]
    14d4:	691b      	ldr	r3, [r3, #16]
    14d6:	f203 531c 	addw	r3, r3, #1308	; 0x51c
    14da:	4618      	mov	r0, r3
    14dc:	68fb      	ldr	r3, [r7, #12]
    14de:	681a      	ldr	r2, [r3, #0]
    14e0:	2300      	movs	r3, #0
    14e2:	9300      	str	r3, [sp, #0]
    14e4:	2301      	movs	r3, #1
    14e6:	2101      	movs	r1, #1
    14e8:	f7ff f8ee 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    14ec:	68fb      	ldr	r3, [r7, #12]
    14ee:	691b      	ldr	r3, [r3, #16]
    14f0:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    14f4:	4618      	mov	r0, r3
    14f6:	68fb      	ldr	r3, [r7, #12]
    14f8:	681a      	ldr	r2, [r3, #0]
    14fa:	2300      	movs	r3, #0
    14fc:	9300      	str	r3, [sp, #0]
    14fe:	2301      	movs	r3, #1
    1500:	2100      	movs	r1, #0
    1502:	f7ff f8e1 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    1506:	bf00      	nop
    1508:	3710      	adds	r7, #16
    150a:	46bd      	mov	sp, r7
    150c:	bd80      	pop	{r7, pc}
    150e:	bf00      	nop
    1510:	51eb851f 	.word	0x51eb851f
    1514:	400fe608 	.word	0x400fe608
    1518:	400fea08 	.word	0x400fea08
    151c:	4c4f434b 	.word	0x4c4f434b

00001520 <_ZN4Gpio10initializeEm9directionm>:
 * @param dir of the gpio, to be an output or input.
 * @param interruptPriority of the gpio, 0 being the highest priority and 7
 *        being the lowest.
 */
void Gpio::initialize(uint32_t gpio, direction dir, uint32_t interruptPriority)
{
    1520:	b580      	push	{r7, lr}
    1522:	b086      	sub	sp, #24
    1524:	af02      	add	r7, sp, #8
    1526:	60f8      	str	r0, [r7, #12]
    1528:	60b9      	str	r1, [r7, #8]
    152a:	603b      	str	r3, [r7, #0]
    152c:	4613      	mov	r3, r2
    152e:	71fb      	strb	r3, [r7, #7]
    (*this).interruptPriority = interruptPriority;
    1530:	68fb      	ldr	r3, [r7, #12]
    1532:	683a      	ldr	r2, [r7, #0]
    1534:	609a      	str	r2, [r3, #8]
    
    initialize(gpio, dir);
    1536:	79fb      	ldrb	r3, [r7, #7]
    1538:	461a      	mov	r2, r3
    153a:	68b9      	ldr	r1, [r7, #8]
    153c:	68f8      	ldr	r0, [r7, #12]
    153e:	f7ff fed5 	bl	12ec <_ZN4Gpio10initializeEm9direction>
    
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIM_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    1542:	68fb      	ldr	r3, [r7, #12]
    1544:	691b      	ldr	r3, [r3, #16]
    1546:	f503 6382 	add.w	r3, r3, #1040	; 0x410
    154a:	4618      	mov	r0, r3
    154c:	68fb      	ldr	r3, [r7, #12]
    154e:	681a      	ldr	r2, [r3, #0]
    1550:	2300      	movs	r3, #0
    1552:	9300      	str	r3, [sp, #0]
    1554:	2301      	movs	r3, #1
    1556:	2100      	movs	r1, #0
    1558:	f7ff f8b6 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIS_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    155c:	68fb      	ldr	r3, [r7, #12]
    155e:	691b      	ldr	r3, [r3, #16]
    1560:	f203 4304 	addw	r3, r3, #1028	; 0x404
    1564:	4618      	mov	r0, r3
    1566:	68fb      	ldr	r3, [r7, #12]
    1568:	681a      	ldr	r2, [r3, #0]
    156a:	2300      	movs	r3, #0
    156c:	9300      	str	r3, [sp, #0]
    156e:	2301      	movs	r3, #1
    1570:	2100      	movs	r1, #0
    1572:	f7ff f8a9 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIBE_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    1576:	68fb      	ldr	r3, [r7, #12]
    1578:	691b      	ldr	r3, [r3, #16]
    157a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
    157e:	4618      	mov	r0, r3
    1580:	68fb      	ldr	r3, [r7, #12]
    1582:	681a      	ldr	r2, [r3, #0]
    1584:	2300      	movs	r3, #0
    1586:	9300      	str	r3, [sp, #0]
    1588:	2301      	movs	r3, #1
    158a:	2101      	movs	r1, #1
    158c:	f7ff f89c 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOICR_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    1590:	68fb      	ldr	r3, [r7, #12]
    1592:	691b      	ldr	r3, [r3, #16]
    1594:	f203 431c 	addw	r3, r3, #1052	; 0x41c
    1598:	4618      	mov	r0, r3
    159a:	68fb      	ldr	r3, [r7, #12]
    159c:	681a      	ldr	r2, [r3, #0]
    159e:	2300      	movs	r3, #0
    15a0:	9300      	str	r3, [sp, #0]
    15a2:	2301      	movs	r3, #1
    15a4:	2101      	movs	r1, #1
    15a6:	f7ff f88f 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIM_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    15aa:	68fb      	ldr	r3, [r7, #12]
    15ac:	691b      	ldr	r3, [r3, #16]
    15ae:	f503 6382 	add.w	r3, r3, #1040	; 0x410
    15b2:	4618      	mov	r0, r3
    15b4:	68fb      	ldr	r3, [r7, #12]
    15b6:	681a      	ldr	r2, [r3, #0]
    15b8:	2300      	movs	r3, #0
    15ba:	9300      	str	r3, [sp, #0]
    15bc:	2301      	movs	r3, #1
    15be:	2101      	movs	r1, #1
    15c0:	f7ff f882 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    /*
    * If gpio is == to Port F (Port number 5) use interrupt number 30 
    * (according to interrupt table), else use interrupt number 0 -> 4 
    * (corresponding to interrupt Port A through Port E)
    */
    Nvic::activateInterrupt((interrupt)((((gpioPort) == 5) ? 30 : (gpioPort))), (*this).interruptPriority);
    15c4:	68fb      	ldr	r3, [r7, #12]
    15c6:	695b      	ldr	r3, [r3, #20]
    15c8:	2b05      	cmp	r3, #5
    15ca:	d003      	beq.n	15d4 <_ZN4Gpio10initializeEm9directionm+0xb4>
    15cc:	68fb      	ldr	r3, [r7, #12]
    15ce:	695b      	ldr	r3, [r3, #20]
    15d0:	b2da      	uxtb	r2, r3
    15d2:	e000      	b.n	15d6 <_ZN4Gpio10initializeEm9directionm+0xb6>
    15d4:	221e      	movs	r2, #30
    15d6:	68fb      	ldr	r3, [r7, #12]
    15d8:	689b      	ldr	r3, [r3, #8]
    15da:	4619      	mov	r1, r3
    15dc:	4610      	mov	r0, r2
    15de:	f7ff f931 	bl	844 <_ZN4Nvic17activateInterruptE9interruptm>
}
    15e2:	bf00      	nop
    15e4:	3710      	adds	r7, #16
    15e6:	46bd      	mov	sp, r7
    15e8:	bd80      	pop	{r7, pc}

000015ea <_ZN4Gpio14interruptClearEv>:

/**
 * @brief Clears the interrupt. Generally used in an ISR.
 */
void Gpio::interruptClear()
{
    15ea:	b580      	push	{r7, lr}
    15ec:	b084      	sub	sp, #16
    15ee:	af02      	add	r7, sp, #8
    15f0:	6078      	str	r0, [r7, #4]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOICR_OFFSET)), (uint32_t)setORClear::set, gpio, 1, RW);
    15f2:	687b      	ldr	r3, [r7, #4]
    15f4:	691b      	ldr	r3, [r3, #16]
    15f6:	f203 431c 	addw	r3, r3, #1052	; 0x41c
    15fa:	4618      	mov	r0, r3
    15fc:	687b      	ldr	r3, [r7, #4]
    15fe:	681a      	ldr	r2, [r3, #0]
    1600:	2300      	movs	r3, #0
    1602:	9300      	str	r3, [sp, #0]
    1604:	2301      	movs	r3, #1
    1606:	2101      	movs	r1, #1
    1608:	f7ff f85e 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    160c:	bf00      	nop
    160e:	3708      	adds	r7, #8
    1610:	46bd      	mov	sp, r7
    1612:	bd80      	pop	{r7, pc}

00001614 <_ZN4Gpio5writeEm>:
/**
 * @brief Writes to the gpio pin.
 * @param value to write to pin. Accepted values are 1 or 0.
 */
void Gpio::write(uint32_t value)
{
    1614:	b580      	push	{r7, lr}
    1616:	b084      	sub	sp, #16
    1618:	af02      	add	r7, sp, #8
    161a:	6078      	str	r0, [r7, #4]
    161c:	6039      	str	r1, [r7, #0]
    if((value == 0x0) || (value == 0x1))
    161e:	683b      	ldr	r3, [r7, #0]
    1620:	2b00      	cmp	r3, #0
    1622:	d002      	beq.n	162a <_ZN4Gpio5writeEm+0x16>
    1624:	683b      	ldr	r3, [r7, #0]
    1626:	2b01      	cmp	r3, #1
    1628:	d10c      	bne.n	1644 <_ZN4Gpio5writeEm+0x30>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODATA_OFFSET)), value, gpio, 1, RW);
    162a:	687b      	ldr	r3, [r7, #4]
    162c:	691b      	ldr	r3, [r3, #16]
    162e:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
    1632:	4618      	mov	r0, r3
    1634:	687b      	ldr	r3, [r7, #4]
    1636:	681a      	ldr	r2, [r3, #0]
    1638:	2300      	movs	r3, #0
    163a:	9300      	str	r3, [sp, #0]
    163c:	2301      	movs	r3, #1
    163e:	6839      	ldr	r1, [r7, #0]
    1640:	f7ff f842 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    }
}
    1644:	bf00      	nop
    1646:	3708      	adds	r7, #8
    1648:	46bd      	mov	sp, r7
    164a:	bd80      	pop	{r7, pc}

0000164c <_ZN4Gpio4readEv>:
/**
 * @brief Reads from a gpio pin.
 * @return Value of the gpio pin, either a 1 or 0.
 */
uint32_t Gpio::read()
{
    164c:	b580      	push	{r7, lr}
    164e:	b082      	sub	sp, #8
    1650:	af00      	add	r7, sp, #0
    1652:	6078      	str	r0, [r7, #4]
    return((Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODATA_OFFSET)), gpio, 1, RW)));
    1654:	687b      	ldr	r3, [r7, #4]
    1656:	691b      	ldr	r3, [r3, #16]
    1658:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
    165c:	4618      	mov	r0, r3
    165e:	687b      	ldr	r3, [r7, #4]
    1660:	6819      	ldr	r1, [r3, #0]
    1662:	2300      	movs	r3, #0
    1664:	2201      	movs	r2, #1
    1666:	f7ff f805 	bl	674 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    166a:	4603      	mov	r3, r0
    166c:	4618      	mov	r0, r3
    166e:	3708      	adds	r7, #8
    1670:	46bd      	mov	sp, r7
    1672:	bd80      	pop	{r7, pc}

00001674 <_ZN3PwmC1Ev>:
#include "pwm.h"

/**
 * @brief empty constructor placeholder
 */
Pwm::Pwm()
    1674:	b480      	push	{r7}
    1676:	b083      	sub	sp, #12
    1678:	af00      	add	r7, sp, #0
    167a:	6078      	str	r0, [r7, #4]
{

}
    167c:	687b      	ldr	r3, [r7, #4]
    167e:	4618      	mov	r0, r3
    1680:	370c      	adds	r7, #12
    1682:	46bd      	mov	sp, r7
    1684:	f85d 7b04 	ldr.w	r7, [sp], #4
    1688:	4770      	bx	lr

0000168a <_ZN3PwmD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Pwm::~Pwm()
    168a:	b480      	push	{r7}
    168c:	b083      	sub	sp, #12
    168e:	af00      	add	r7, sp, #0
    1690:	6078      	str	r0, [r7, #4]
{

}
    1692:	687b      	ldr	r3, [r7, #4]
    1694:	4618      	mov	r0, r3
    1696:	370c      	adds	r7, #12
    1698:	46bd      	mov	sp, r7
    169a:	f85d 7b04 	ldr.w	r7, [sp], #4
    169e:	4770      	bx	lr

000016a0 <_ZN3Pwm16initializeSingleEm9pwmModulemmm17countDirectionPwmmbm>:
 *                     peripheral
 * @param divisor Binary divisor used to pre-divide the system clock. Must be
 *                enabled with the \c enablePwmDiv first.
 */
void Pwm::initializeSingle(uint32_t pwmPin, pwmModule module, uint32_t period, uint32_t compA, uint32_t compB, countDirectionPwm countDir, uint32_t genOptions, bool enablePwmDiv, uint32_t divisor)
{
    16a0:	b580      	push	{r7, lr}
    16a2:	b086      	sub	sp, #24
    16a4:	af02      	add	r7, sp, #8
    16a6:	60f8      	str	r0, [r7, #12]
    16a8:	60b9      	str	r1, [r7, #8]
    16aa:	603b      	str	r3, [r7, #0]
    16ac:	4613      	mov	r3, r2
    16ae:	71fb      	strb	r3, [r7, #7]
    myPwmGen = pwmPin/2;
    16b0:	68bb      	ldr	r3, [r7, #8]
    16b2:	085a      	lsrs	r2, r3, #1
    16b4:	68fb      	ldr	r3, [r7, #12]
    16b6:	605a      	str	r2, [r3, #4]
    
    initialize(module, period, countDir, enablePwmDiv, divisor);
    16b8:	79f9      	ldrb	r1, [r7, #7]
    16ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    16bc:	9301      	str	r3, [sp, #4]
    16be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    16c2:	9300      	str	r3, [sp, #0]
    16c4:	6a3b      	ldr	r3, [r7, #32]
    16c6:	683a      	ldr	r2, [r7, #0]
    16c8:	68f8      	ldr	r0, [r7, #12]
    16ca:	f000 f8c5 	bl	1858 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>
    
    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.
    
    //2b. Write the PWMnGENn register. 
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENA_OFFSET + (0x40 * myPwmGen) + ((pwmPin%2) * 4))), genOptions, 0, 11+1, RW);
    16ce:	68fb      	ldr	r3, [r7, #12]
    16d0:	681a      	ldr	r2, [r3, #0]
    16d2:	68fb      	ldr	r3, [r7, #12]
    16d4:	685b      	ldr	r3, [r3, #4]
    16d6:	0119      	lsls	r1, r3, #4
    16d8:	68bb      	ldr	r3, [r7, #8]
    16da:	f003 0301 	and.w	r3, r3, #1
    16de:	440b      	add	r3, r1
    16e0:	3318      	adds	r3, #24
    16e2:	009b      	lsls	r3, r3, #2
    16e4:	4413      	add	r3, r2
    16e6:	4618      	mov	r0, r3
    16e8:	2300      	movs	r3, #0
    16ea:	9300      	str	r3, [sp, #0]
    16ec:	230c      	movs	r3, #12
    16ee:	2200      	movs	r2, #0
    16f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
    16f2:	f7fe ffe9 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //4. Set counter comparators
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPA_OFFSET + (0x40 * myPwmGen))), compA, 0, 15+1, RW);
    16f6:	68fb      	ldr	r3, [r7, #12]
    16f8:	681a      	ldr	r2, [r3, #0]
    16fa:	68fb      	ldr	r3, [r7, #12]
    16fc:	685b      	ldr	r3, [r3, #4]
    16fe:	019b      	lsls	r3, r3, #6
    1700:	4413      	add	r3, r2
    1702:	3358      	adds	r3, #88	; 0x58
    1704:	4618      	mov	r0, r3
    1706:	2300      	movs	r3, #0
    1708:	9300      	str	r3, [sp, #0]
    170a:	2310      	movs	r3, #16
    170c:	2200      	movs	r2, #0
    170e:	69b9      	ldr	r1, [r7, #24]
    1710:	f7fe ffda 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPB_OFFSET + (0x40 * myPwmGen))), compB, 0, 15+1, RW);
    1714:	68fb      	ldr	r3, [r7, #12]
    1716:	681a      	ldr	r2, [r3, #0]
    1718:	68fb      	ldr	r3, [r7, #12]
    171a:	685b      	ldr	r3, [r3, #4]
    171c:	019b      	lsls	r3, r3, #6
    171e:	4413      	add	r3, r2
    1720:	335c      	adds	r3, #92	; 0x5c
    1722:	4618      	mov	r0, r3
    1724:	2300      	movs	r3, #0
    1726:	9300      	str	r3, [sp, #0]
    1728:	2310      	movs	r3, #16
    172a:	2200      	movs	r2, #0
    172c:	69f9      	ldr	r1, [r7, #28]
    172e:	f7fe ffcb 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //6. Enable PWM
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)setORClear::set, 0, 1, RW);
    1732:	68fb      	ldr	r3, [r7, #12]
    1734:	681a      	ldr	r2, [r3, #0]
    1736:	68fb      	ldr	r3, [r7, #12]
    1738:	685b      	ldr	r3, [r3, #4]
    173a:	3301      	adds	r3, #1
    173c:	019b      	lsls	r3, r3, #6
    173e:	4413      	add	r3, r2
    1740:	4618      	mov	r0, r3
    1742:	2300      	movs	r3, #0
    1744:	9300      	str	r3, [sp, #0]
    1746:	2301      	movs	r3, #1
    1748:	2200      	movs	r2, #0
    174a:	2101      	movs	r1, #1
    174c:	f7fe ffbc 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //7. Enable PWM output.
    // Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + PWMENABLE_OFFSET), set, 0 + ((myPwmGen*2)+(((pwmPin%2) * 4)/4)), 1, RW); //(uint32_t)output >> 2
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + PWMENABLE_OFFSET), (uint32_t)setORClear::set, pwmPin, 1, RW); //(uint32_t)output >> 2
    1750:	68fb      	ldr	r3, [r7, #12]
    1752:	681b      	ldr	r3, [r3, #0]
    1754:	3308      	adds	r3, #8
    1756:	4618      	mov	r0, r3
    1758:	2300      	movs	r3, #0
    175a:	9300      	str	r3, [sp, #0]
    175c:	2301      	movs	r3, #1
    175e:	68ba      	ldr	r2, [r7, #8]
    1760:	2101      	movs	r1, #1
    1762:	f7fe ffb1 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

}
    1766:	bf00      	nop
    1768:	3710      	adds	r7, #16
    176a:	46bd      	mov	sp, r7
    176c:	bd80      	pop	{r7, pc}

0000176e <_ZN3Pwm14initializePairEm9pwmModulemmm17countDirectionPwmmmbm>:
 * @param divisor Binary divisor used to pre-divide the system clock. Must be
 *                enabled with the \c enablePwmDiv first.
 */

void Pwm::initializePair(uint32_t pwmPin, pwmModule module, uint32_t period, uint32_t compA, uint32_t compB, countDirectionPwm countDir, uint32_t genOptionsA, uint32_t genOptionsB, bool enablePwmDiv, uint32_t divisor)
{
    176e:	b580      	push	{r7, lr}
    1770:	b086      	sub	sp, #24
    1772:	af02      	add	r7, sp, #8
    1774:	60f8      	str	r0, [r7, #12]
    1776:	60b9      	str	r1, [r7, #8]
    1778:	603b      	str	r3, [r7, #0]
    177a:	4613      	mov	r3, r2
    177c:	71fb      	strb	r3, [r7, #7]
    myPwmGen = pwmPin/2;
    177e:	68bb      	ldr	r3, [r7, #8]
    1780:	085a      	lsrs	r2, r3, #1
    1782:	68fb      	ldr	r3, [r7, #12]
    1784:	605a      	str	r2, [r3, #4]

    initialize(module, period, countDir, enablePwmDiv, divisor);
    1786:	79f9      	ldrb	r1, [r7, #7]
    1788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    178a:	9301      	str	r3, [sp, #4]
    178c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    1790:	9300      	str	r3, [sp, #0]
    1792:	6a3b      	ldr	r3, [r7, #32]
    1794:	683a      	ldr	r2, [r7, #0]
    1796:	68f8      	ldr	r0, [r7, #12]
    1798:	f000 f85e 	bl	1858 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>
    
    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.
    
    //2b. Write the PWMnGENA register.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENA_OFFSET + (0x40 * myPwmGen))), genOptionsA, 0, 11+1, RW);
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	681a      	ldr	r2, [r3, #0]
    17a0:	68fb      	ldr	r3, [r7, #12]
    17a2:	685b      	ldr	r3, [r3, #4]
    17a4:	019b      	lsls	r3, r3, #6
    17a6:	4413      	add	r3, r2
    17a8:	3360      	adds	r3, #96	; 0x60
    17aa:	4618      	mov	r0, r3
    17ac:	2300      	movs	r3, #0
    17ae:	9300      	str	r3, [sp, #0]
    17b0:	230c      	movs	r3, #12
    17b2:	2200      	movs	r2, #0
    17b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    17b6:	f7fe ff87 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //2c. Write the PWMnGENB register.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENB_OFFSET + (0x40 * myPwmGen))), genOptionsB, 0, 11+1, RW);
    17ba:	68fb      	ldr	r3, [r7, #12]
    17bc:	681a      	ldr	r2, [r3, #0]
    17be:	68fb      	ldr	r3, [r7, #12]
    17c0:	685b      	ldr	r3, [r3, #4]
    17c2:	019b      	lsls	r3, r3, #6
    17c4:	4413      	add	r3, r2
    17c6:	3364      	adds	r3, #100	; 0x64
    17c8:	4618      	mov	r0, r3
    17ca:	2300      	movs	r3, #0
    17cc:	9300      	str	r3, [sp, #0]
    17ce:	230c      	movs	r3, #12
    17d0:	2200      	movs	r2, #0
    17d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    17d4:	f7fe ff78 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //4. Set counter comparator for pwmA
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPA_OFFSET + (0x40 * myPwmGen))), compA, 0, 15+1, RW);
    17d8:	68fb      	ldr	r3, [r7, #12]
    17da:	681a      	ldr	r2, [r3, #0]
    17dc:	68fb      	ldr	r3, [r7, #12]
    17de:	685b      	ldr	r3, [r3, #4]
    17e0:	019b      	lsls	r3, r3, #6
    17e2:	4413      	add	r3, r2
    17e4:	3358      	adds	r3, #88	; 0x58
    17e6:	4618      	mov	r0, r3
    17e8:	2300      	movs	r3, #0
    17ea:	9300      	str	r3, [sp, #0]
    17ec:	2310      	movs	r3, #16
    17ee:	2200      	movs	r2, #0
    17f0:	69b9      	ldr	r1, [r7, #24]
    17f2:	f7fe ff69 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //5. Set counter comparator for pwmB
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPB_OFFSET + (0x40 * myPwmGen))), compB, 0, 15+1, RW);
    17f6:	68fb      	ldr	r3, [r7, #12]
    17f8:	681a      	ldr	r2, [r3, #0]
    17fa:	68fb      	ldr	r3, [r7, #12]
    17fc:	685b      	ldr	r3, [r3, #4]
    17fe:	019b      	lsls	r3, r3, #6
    1800:	4413      	add	r3, r2
    1802:	335c      	adds	r3, #92	; 0x5c
    1804:	4618      	mov	r0, r3
    1806:	2300      	movs	r3, #0
    1808:	9300      	str	r3, [sp, #0]
    180a:	2310      	movs	r3, #16
    180c:	2200      	movs	r2, #0
    180e:	69f9      	ldr	r1, [r7, #28]
    1810:	f7fe ff5a 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //6. Enable PWM
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)setORClear::set, 0, 1, RW);
    1814:	68fb      	ldr	r3, [r7, #12]
    1816:	681a      	ldr	r2, [r3, #0]
    1818:	68fb      	ldr	r3, [r7, #12]
    181a:	685b      	ldr	r3, [r3, #4]
    181c:	3301      	adds	r3, #1
    181e:	019b      	lsls	r3, r3, #6
    1820:	4413      	add	r3, r2
    1822:	4618      	mov	r0, r3
    1824:	2300      	movs	r3, #0
    1826:	9300      	str	r3, [sp, #0]
    1828:	2301      	movs	r3, #1
    182a:	2200      	movs	r2, #0
    182c:	2101      	movs	r1, #1
    182e:	f7fe ff4b 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //7. Enable PWM output.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWMENABLE_OFFSET + (0x40 * myPwmGen))), 0x3, pwmPin, 2, RW); 
    1832:	68fb      	ldr	r3, [r7, #12]
    1834:	681a      	ldr	r2, [r3, #0]
    1836:	68fb      	ldr	r3, [r7, #12]
    1838:	685b      	ldr	r3, [r3, #4]
    183a:	019b      	lsls	r3, r3, #6
    183c:	4413      	add	r3, r2
    183e:	3308      	adds	r3, #8
    1840:	4618      	mov	r0, r3
    1842:	2300      	movs	r3, #0
    1844:	9300      	str	r3, [sp, #0]
    1846:	2302      	movs	r3, #2
    1848:	68ba      	ldr	r2, [r7, #8]
    184a:	2103      	movs	r1, #3
    184c:	f7fe ff3c 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    1850:	bf00      	nop
    1852:	3710      	adds	r7, #16
    1854:	46bd      	mov	sp, r7
    1856:	bd80      	pop	{r7, pc}

00001858 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>:
 * @param enablePwmDiv Enables the PWM peripheral clock pre-divider
 * @param divisor The value of the PWM clock pre-divider chosen by enum
 *                pwmUnitClockDivisor.       
 */
void Pwm::initialize(pwmModule module, uint32_t period, countDirectionPwm countDir, bool enablePwmDiv, uint32_t divisor)
{    
    1858:	b580      	push	{r7, lr}
    185a:	b088      	sub	sp, #32
    185c:	af02      	add	r7, sp, #8
    185e:	60f8      	str	r0, [r7, #12]
    1860:	607a      	str	r2, [r7, #4]
    1862:	603b      	str	r3, [r7, #0]
    1864:	460b      	mov	r3, r1
    1866:	72fb      	strb	r3, [r7, #11]
    baseAddress = pwm0BaseAddress + (module * 0x1000);
    1868:	7afb      	ldrb	r3, [r7, #11]
    186a:	031b      	lsls	r3, r3, #12
    186c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1870:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
    1874:	68fa      	ldr	r2, [r7, #12]
    1876:	6013      	str	r3, [r2, #0]
    
    //0. Enable the clock for PWM
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCPWM_OFFSET)), (uint32_t)setORClear::set, module, 1, RW);
    1878:	7afa      	ldrb	r2, [r7, #11]
    187a:	2300      	movs	r3, #0
    187c:	9300      	str	r3, [sp, #0]
    187e:	2301      	movs	r3, #1
    1880:	2101      	movs	r1, #1
    1882:	4847      	ldr	r0, [pc, #284]	; (19a0 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x148>)
    1884:	f7fe ff20 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRPWM_OFFSET), module, 1, RO) == 0)
    1888:	7af9      	ldrb	r1, [r7, #11]
    188a:	2301      	movs	r3, #1
    188c:	2201      	movs	r2, #1
    188e:	4845      	ldr	r0, [pc, #276]	; (19a4 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x14c>)
    1890:	f7fe fef0 	bl	674 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    1894:	4603      	mov	r3, r0
    1896:	2b00      	cmp	r3, #0
    1898:	bf0c      	ite	eq
    189a:	2301      	moveq	r3, #1
    189c:	2300      	movne	r3, #0
    189e:	b2db      	uxtb	r3, r3
    18a0:	2b00      	cmp	r3, #0
    18a2:	d000      	beq.n	18a6 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x4e>
    18a4:	e7f0      	b.n	1888 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x30>
        //Ready??
    }

    // Clear count register by reseting PWM

    Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + SRPWM_OFFSET), (uint32_t)setORClear::set, module, 1, RW);
    18a6:	7afa      	ldrb	r2, [r7, #11]
    18a8:	2300      	movs	r3, #0
    18aa:	9300      	str	r3, [sp, #0]
    18ac:	2301      	movs	r3, #1
    18ae:	2101      	movs	r1, #1
    18b0:	483d      	ldr	r0, [pc, #244]	; (19a8 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x150>)
    18b2:	f7fe ff09 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    for(uint32_t i = 0; i < 100; i++)
    18b6:	2300      	movs	r3, #0
    18b8:	617b      	str	r3, [r7, #20]
    18ba:	697b      	ldr	r3, [r7, #20]
    18bc:	2b63      	cmp	r3, #99	; 0x63
    18be:	d803      	bhi.n	18c8 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x70>
    18c0:	697b      	ldr	r3, [r7, #20]
    18c2:	3301      	adds	r3, #1
    18c4:	617b      	str	r3, [r7, #20]
    18c6:	e7f8      	b.n	18ba <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x62>
    {
        //wait
    }

    Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + SRPWM_OFFSET), (uint32_t)setORClear::clear, module, 1, RW);
    18c8:	7afa      	ldrb	r2, [r7, #11]
    18ca:	2300      	movs	r3, #0
    18cc:	9300      	str	r3, [sp, #0]
    18ce:	2301      	movs	r3, #1
    18d0:	2100      	movs	r1, #0
    18d2:	4835      	ldr	r0, [pc, #212]	; (19a8 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x150>)
    18d4:	f7fe fef8 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRPWM_OFFSET), module, 1, RO) == 0)
    18d8:	7af9      	ldrb	r1, [r7, #11]
    18da:	2301      	movs	r3, #1
    18dc:	2201      	movs	r2, #1
    18de:	4831      	ldr	r0, [pc, #196]	; (19a4 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x14c>)
    18e0:	f7fe fec8 	bl	674 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    18e4:	4603      	mov	r3, r0
    18e6:	2b00      	cmp	r3, #0
    18e8:	bf0c      	ite	eq
    18ea:	2301      	moveq	r3, #1
    18ec:	2300      	movne	r3, #0
    18ee:	b2db      	uxtb	r3, r3
    18f0:	2b00      	cmp	r3, #0
    18f2:	d000      	beq.n	18f6 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x9e>
    18f4:	e7f0      	b.n	18d8 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x80>
    {
        //Ready??
    }

    if(enablePwmDiv == true)
    18f6:	f897 3020 	ldrb.w	r3, [r7, #32]
    18fa:	2b00      	cmp	r3, #0
    18fc:	d00f      	beq.n	191e <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0xc6>
    {
        //1a. Configure the Run-Mode Clock Configuration (RCC) register in the System Control module to use the PWM divide (USEPWMDIV).
        Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + RCC_OFFSET), (uint32_t)setORClear::set, 20, 1, RW);
    18fe:	2300      	movs	r3, #0
    1900:	9300      	str	r3, [sp, #0]
    1902:	2301      	movs	r3, #1
    1904:	2214      	movs	r2, #20
    1906:	2101      	movs	r1, #1
    1908:	4828      	ldr	r0, [pc, #160]	; (19ac <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x154>)
    190a:	f7fe fedd 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        //1b. Set the divider (PWMDIV).
        Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + RCC_OFFSET), divisor, 17, (19-17)+1, RW);
    190e:	2300      	movs	r3, #0
    1910:	9300      	str	r3, [sp, #0]
    1912:	2303      	movs	r3, #3
    1914:	2211      	movs	r2, #17
    1916:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1918:	4824      	ldr	r0, [pc, #144]	; (19ac <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x154>)
    191a:	f7fe fed5 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    }

    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.

    //2a. Write the PWMnCTL register with a value of 0x0000.0000 to clear it.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)setORClear::clear, 0, 1, RW);
    191e:	68fb      	ldr	r3, [r7, #12]
    1920:	681a      	ldr	r2, [r3, #0]
    1922:	68fb      	ldr	r3, [r7, #12]
    1924:	685b      	ldr	r3, [r3, #4]
    1926:	3301      	adds	r3, #1
    1928:	019b      	lsls	r3, r3, #6
    192a:	4413      	add	r3, r2
    192c:	4618      	mov	r0, r3
    192e:	2300      	movs	r3, #0
    1930:	9300      	str	r3, [sp, #0]
    1932:	2301      	movs	r3, #1
    1934:	2200      	movs	r2, #0
    1936:	2100      	movs	r1, #0
    1938:	f7fe fec6 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)setORClear::set, 2, 1, RW);
    193c:	68fb      	ldr	r3, [r7, #12]
    193e:	681a      	ldr	r2, [r3, #0]
    1940:	68fb      	ldr	r3, [r7, #12]
    1942:	685b      	ldr	r3, [r3, #4]
    1944:	3301      	adds	r3, #1
    1946:	019b      	lsls	r3, r3, #6
    1948:	4413      	add	r3, r2
    194a:	4618      	mov	r0, r3
    194c:	2300      	movs	r3, #0
    194e:	9300      	str	r3, [sp, #0]
    1950:	2301      	movs	r3, #1
    1952:	2202      	movs	r2, #2
    1954:	2101      	movs	r1, #1
    1956:	f7fe feb7 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //Set count direction
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)countDir, 3, 1, RW);
    195a:	68fb      	ldr	r3, [r7, #12]
    195c:	681a      	ldr	r2, [r3, #0]
    195e:	68fb      	ldr	r3, [r7, #12]
    1960:	685b      	ldr	r3, [r3, #4]
    1962:	3301      	adds	r3, #1
    1964:	019b      	lsls	r3, r3, #6
    1966:	4413      	add	r3, r2
    1968:	4618      	mov	r0, r3
    196a:	6839      	ldr	r1, [r7, #0]
    196c:	2300      	movs	r3, #0
    196e:	9300      	str	r3, [sp, #0]
    1970:	2301      	movs	r3, #1
    1972:	2203      	movs	r2, #3
    1974:	f7fe fea8 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //3. Set the period
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0LOAD_OFFSET + (0x40 * myPwmGen))), period, 0, 15+1, RW);
    1978:	68fb      	ldr	r3, [r7, #12]
    197a:	681a      	ldr	r2, [r3, #0]
    197c:	68fb      	ldr	r3, [r7, #12]
    197e:	685b      	ldr	r3, [r3, #4]
    1980:	019b      	lsls	r3, r3, #6
    1982:	4413      	add	r3, r2
    1984:	3350      	adds	r3, #80	; 0x50
    1986:	4618      	mov	r0, r3
    1988:	2300      	movs	r3, #0
    198a:	9300      	str	r3, [sp, #0]
    198c:	2310      	movs	r3, #16
    198e:	2200      	movs	r2, #0
    1990:	6879      	ldr	r1, [r7, #4]
    1992:	f7fe fe99 	bl	6c8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    1996:	bf00      	nop
    1998:	3718      	adds	r7, #24
    199a:	46bd      	mov	sp, r7
    199c:	bd80      	pop	{r7, pc}
    199e:	bf00      	nop
    19a0:	400fe640 	.word	0x400fe640
    19a4:	400fea40 	.word	0x400fea40
    19a8:	400fe540 	.word	0x400fe540
    19ac:	400fe060 	.word	0x400fe060

000019b0 <__aeabi_atexit>:
    19b0:	460b      	mov	r3, r1
    19b2:	4601      	mov	r1, r0
    19b4:	4618      	mov	r0, r3
    19b6:	f001 bba1 	b.w	30fc <__cxa_atexit>
	...

000019bc <__aeabi_drsub>:
    19bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    19c0:	e002      	b.n	19c8 <__adddf3>
    19c2:	bf00      	nop

000019c4 <__aeabi_dsub>:
    19c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000019c8 <__adddf3>:
    19c8:	b530      	push	{r4, r5, lr}
    19ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
    19ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
    19d2:	ea94 0f05 	teq	r4, r5
    19d6:	bf08      	it	eq
    19d8:	ea90 0f02 	teqeq	r0, r2
    19dc:	bf1f      	itttt	ne
    19de:	ea54 0c00 	orrsne.w	ip, r4, r0
    19e2:	ea55 0c02 	orrsne.w	ip, r5, r2
    19e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    19ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    19ee:	f000 80e2 	beq.w	1bb6 <__adddf3+0x1ee>
    19f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    19f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    19fa:	bfb8      	it	lt
    19fc:	426d      	neglt	r5, r5
    19fe:	dd0c      	ble.n	1a1a <__adddf3+0x52>
    1a00:	442c      	add	r4, r5
    1a02:	ea80 0202 	eor.w	r2, r0, r2
    1a06:	ea81 0303 	eor.w	r3, r1, r3
    1a0a:	ea82 0000 	eor.w	r0, r2, r0
    1a0e:	ea83 0101 	eor.w	r1, r3, r1
    1a12:	ea80 0202 	eor.w	r2, r0, r2
    1a16:	ea81 0303 	eor.w	r3, r1, r3
    1a1a:	2d36      	cmp	r5, #54	; 0x36
    1a1c:	bf88      	it	hi
    1a1e:	bd30      	pophi	{r4, r5, pc}
    1a20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1a24:	ea4f 3101 	mov.w	r1, r1, lsl #12
    1a28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    1a2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    1a30:	d002      	beq.n	1a38 <__adddf3+0x70>
    1a32:	4240      	negs	r0, r0
    1a34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1a38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    1a3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1a40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    1a44:	d002      	beq.n	1a4c <__adddf3+0x84>
    1a46:	4252      	negs	r2, r2
    1a48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1a4c:	ea94 0f05 	teq	r4, r5
    1a50:	f000 80a7 	beq.w	1ba2 <__adddf3+0x1da>
    1a54:	f1a4 0401 	sub.w	r4, r4, #1
    1a58:	f1d5 0e20 	rsbs	lr, r5, #32
    1a5c:	db0d      	blt.n	1a7a <__adddf3+0xb2>
    1a5e:	fa02 fc0e 	lsl.w	ip, r2, lr
    1a62:	fa22 f205 	lsr.w	r2, r2, r5
    1a66:	1880      	adds	r0, r0, r2
    1a68:	f141 0100 	adc.w	r1, r1, #0
    1a6c:	fa03 f20e 	lsl.w	r2, r3, lr
    1a70:	1880      	adds	r0, r0, r2
    1a72:	fa43 f305 	asr.w	r3, r3, r5
    1a76:	4159      	adcs	r1, r3
    1a78:	e00e      	b.n	1a98 <__adddf3+0xd0>
    1a7a:	f1a5 0520 	sub.w	r5, r5, #32
    1a7e:	f10e 0e20 	add.w	lr, lr, #32
    1a82:	2a01      	cmp	r2, #1
    1a84:	fa03 fc0e 	lsl.w	ip, r3, lr
    1a88:	bf28      	it	cs
    1a8a:	f04c 0c02 	orrcs.w	ip, ip, #2
    1a8e:	fa43 f305 	asr.w	r3, r3, r5
    1a92:	18c0      	adds	r0, r0, r3
    1a94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    1a98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1a9c:	d507      	bpl.n	1aae <__adddf3+0xe6>
    1a9e:	f04f 0e00 	mov.w	lr, #0
    1aa2:	f1dc 0c00 	rsbs	ip, ip, #0
    1aa6:	eb7e 0000 	sbcs.w	r0, lr, r0
    1aaa:	eb6e 0101 	sbc.w	r1, lr, r1
    1aae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    1ab2:	d31b      	bcc.n	1aec <__adddf3+0x124>
    1ab4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    1ab8:	d30c      	bcc.n	1ad4 <__adddf3+0x10c>
    1aba:	0849      	lsrs	r1, r1, #1
    1abc:	ea5f 0030 	movs.w	r0, r0, rrx
    1ac0:	ea4f 0c3c 	mov.w	ip, ip, rrx
    1ac4:	f104 0401 	add.w	r4, r4, #1
    1ac8:	ea4f 5244 	mov.w	r2, r4, lsl #21
    1acc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    1ad0:	f080 809a 	bcs.w	1c08 <__adddf3+0x240>
    1ad4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    1ad8:	bf08      	it	eq
    1ada:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1ade:	f150 0000 	adcs.w	r0, r0, #0
    1ae2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    1ae6:	ea41 0105 	orr.w	r1, r1, r5
    1aea:	bd30      	pop	{r4, r5, pc}
    1aec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    1af0:	4140      	adcs	r0, r0
    1af2:	eb41 0101 	adc.w	r1, r1, r1
    1af6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1afa:	f1a4 0401 	sub.w	r4, r4, #1
    1afe:	d1e9      	bne.n	1ad4 <__adddf3+0x10c>
    1b00:	f091 0f00 	teq	r1, #0
    1b04:	bf04      	itt	eq
    1b06:	4601      	moveq	r1, r0
    1b08:	2000      	moveq	r0, #0
    1b0a:	fab1 f381 	clz	r3, r1
    1b0e:	bf08      	it	eq
    1b10:	3320      	addeq	r3, #32
    1b12:	f1a3 030b 	sub.w	r3, r3, #11
    1b16:	f1b3 0220 	subs.w	r2, r3, #32
    1b1a:	da0c      	bge.n	1b36 <__adddf3+0x16e>
    1b1c:	320c      	adds	r2, #12
    1b1e:	dd08      	ble.n	1b32 <__adddf3+0x16a>
    1b20:	f102 0c14 	add.w	ip, r2, #20
    1b24:	f1c2 020c 	rsb	r2, r2, #12
    1b28:	fa01 f00c 	lsl.w	r0, r1, ip
    1b2c:	fa21 f102 	lsr.w	r1, r1, r2
    1b30:	e00c      	b.n	1b4c <__adddf3+0x184>
    1b32:	f102 0214 	add.w	r2, r2, #20
    1b36:	bfd8      	it	le
    1b38:	f1c2 0c20 	rsble	ip, r2, #32
    1b3c:	fa01 f102 	lsl.w	r1, r1, r2
    1b40:	fa20 fc0c 	lsr.w	ip, r0, ip
    1b44:	bfdc      	itt	le
    1b46:	ea41 010c 	orrle.w	r1, r1, ip
    1b4a:	4090      	lslle	r0, r2
    1b4c:	1ae4      	subs	r4, r4, r3
    1b4e:	bfa2      	ittt	ge
    1b50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    1b54:	4329      	orrge	r1, r5
    1b56:	bd30      	popge	{r4, r5, pc}
    1b58:	ea6f 0404 	mvn.w	r4, r4
    1b5c:	3c1f      	subs	r4, #31
    1b5e:	da1c      	bge.n	1b9a <__adddf3+0x1d2>
    1b60:	340c      	adds	r4, #12
    1b62:	dc0e      	bgt.n	1b82 <__adddf3+0x1ba>
    1b64:	f104 0414 	add.w	r4, r4, #20
    1b68:	f1c4 0220 	rsb	r2, r4, #32
    1b6c:	fa20 f004 	lsr.w	r0, r0, r4
    1b70:	fa01 f302 	lsl.w	r3, r1, r2
    1b74:	ea40 0003 	orr.w	r0, r0, r3
    1b78:	fa21 f304 	lsr.w	r3, r1, r4
    1b7c:	ea45 0103 	orr.w	r1, r5, r3
    1b80:	bd30      	pop	{r4, r5, pc}
    1b82:	f1c4 040c 	rsb	r4, r4, #12
    1b86:	f1c4 0220 	rsb	r2, r4, #32
    1b8a:	fa20 f002 	lsr.w	r0, r0, r2
    1b8e:	fa01 f304 	lsl.w	r3, r1, r4
    1b92:	ea40 0003 	orr.w	r0, r0, r3
    1b96:	4629      	mov	r1, r5
    1b98:	bd30      	pop	{r4, r5, pc}
    1b9a:	fa21 f004 	lsr.w	r0, r1, r4
    1b9e:	4629      	mov	r1, r5
    1ba0:	bd30      	pop	{r4, r5, pc}
    1ba2:	f094 0f00 	teq	r4, #0
    1ba6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    1baa:	bf06      	itte	eq
    1bac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    1bb0:	3401      	addeq	r4, #1
    1bb2:	3d01      	subne	r5, #1
    1bb4:	e74e      	b.n	1a54 <__adddf3+0x8c>
    1bb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    1bba:	bf18      	it	ne
    1bbc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1bc0:	d029      	beq.n	1c16 <__adddf3+0x24e>
    1bc2:	ea94 0f05 	teq	r4, r5
    1bc6:	bf08      	it	eq
    1bc8:	ea90 0f02 	teqeq	r0, r2
    1bcc:	d005      	beq.n	1bda <__adddf3+0x212>
    1bce:	ea54 0c00 	orrs.w	ip, r4, r0
    1bd2:	bf04      	itt	eq
    1bd4:	4619      	moveq	r1, r3
    1bd6:	4610      	moveq	r0, r2
    1bd8:	bd30      	pop	{r4, r5, pc}
    1bda:	ea91 0f03 	teq	r1, r3
    1bde:	bf1e      	ittt	ne
    1be0:	2100      	movne	r1, #0
    1be2:	2000      	movne	r0, #0
    1be4:	bd30      	popne	{r4, r5, pc}
    1be6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    1bea:	d105      	bne.n	1bf8 <__adddf3+0x230>
    1bec:	0040      	lsls	r0, r0, #1
    1bee:	4149      	adcs	r1, r1
    1bf0:	bf28      	it	cs
    1bf2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    1bf6:	bd30      	pop	{r4, r5, pc}
    1bf8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    1bfc:	bf3c      	itt	cc
    1bfe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    1c02:	bd30      	popcc	{r4, r5, pc}
    1c04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1c08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    1c0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1c10:	f04f 0000 	mov.w	r0, #0
    1c14:	bd30      	pop	{r4, r5, pc}
    1c16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    1c1a:	bf1a      	itte	ne
    1c1c:	4619      	movne	r1, r3
    1c1e:	4610      	movne	r0, r2
    1c20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    1c24:	bf1c      	itt	ne
    1c26:	460b      	movne	r3, r1
    1c28:	4602      	movne	r2, r0
    1c2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1c2e:	bf06      	itte	eq
    1c30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    1c34:	ea91 0f03 	teqeq	r1, r3
    1c38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    1c3c:	bd30      	pop	{r4, r5, pc}
    1c3e:	bf00      	nop

00001c40 <__aeabi_ui2d>:
    1c40:	f090 0f00 	teq	r0, #0
    1c44:	bf04      	itt	eq
    1c46:	2100      	moveq	r1, #0
    1c48:	4770      	bxeq	lr
    1c4a:	b530      	push	{r4, r5, lr}
    1c4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1c50:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1c54:	f04f 0500 	mov.w	r5, #0
    1c58:	f04f 0100 	mov.w	r1, #0
    1c5c:	e750      	b.n	1b00 <__adddf3+0x138>
    1c5e:	bf00      	nop

00001c60 <__aeabi_i2d>:
    1c60:	f090 0f00 	teq	r0, #0
    1c64:	bf04      	itt	eq
    1c66:	2100      	moveq	r1, #0
    1c68:	4770      	bxeq	lr
    1c6a:	b530      	push	{r4, r5, lr}
    1c6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1c70:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1c74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    1c78:	bf48      	it	mi
    1c7a:	4240      	negmi	r0, r0
    1c7c:	f04f 0100 	mov.w	r1, #0
    1c80:	e73e      	b.n	1b00 <__adddf3+0x138>
    1c82:	bf00      	nop

00001c84 <__aeabi_f2d>:
    1c84:	0042      	lsls	r2, r0, #1
    1c86:	ea4f 01e2 	mov.w	r1, r2, asr #3
    1c8a:	ea4f 0131 	mov.w	r1, r1, rrx
    1c8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    1c92:	bf1f      	itttt	ne
    1c94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    1c98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    1c9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    1ca0:	4770      	bxne	lr
    1ca2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    1ca6:	bf08      	it	eq
    1ca8:	4770      	bxeq	lr
    1caa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    1cae:	bf04      	itt	eq
    1cb0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    1cb4:	4770      	bxeq	lr
    1cb6:	b530      	push	{r4, r5, lr}
    1cb8:	f44f 7460 	mov.w	r4, #896	; 0x380
    1cbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1cc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1cc4:	e71c      	b.n	1b00 <__adddf3+0x138>
    1cc6:	bf00      	nop

00001cc8 <__aeabi_ul2d>:
    1cc8:	ea50 0201 	orrs.w	r2, r0, r1
    1ccc:	bf08      	it	eq
    1cce:	4770      	bxeq	lr
    1cd0:	b530      	push	{r4, r5, lr}
    1cd2:	f04f 0500 	mov.w	r5, #0
    1cd6:	e00a      	b.n	1cee <__aeabi_l2d+0x16>

00001cd8 <__aeabi_l2d>:
    1cd8:	ea50 0201 	orrs.w	r2, r0, r1
    1cdc:	bf08      	it	eq
    1cde:	4770      	bxeq	lr
    1ce0:	b530      	push	{r4, r5, lr}
    1ce2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    1ce6:	d502      	bpl.n	1cee <__aeabi_l2d+0x16>
    1ce8:	4240      	negs	r0, r0
    1cea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1cee:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1cf2:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1cf6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    1cfa:	f43f aed8 	beq.w	1aae <__adddf3+0xe6>
    1cfe:	f04f 0203 	mov.w	r2, #3
    1d02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1d06:	bf18      	it	ne
    1d08:	3203      	addne	r2, #3
    1d0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1d0e:	bf18      	it	ne
    1d10:	3203      	addne	r2, #3
    1d12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    1d16:	f1c2 0320 	rsb	r3, r2, #32
    1d1a:	fa00 fc03 	lsl.w	ip, r0, r3
    1d1e:	fa20 f002 	lsr.w	r0, r0, r2
    1d22:	fa01 fe03 	lsl.w	lr, r1, r3
    1d26:	ea40 000e 	orr.w	r0, r0, lr
    1d2a:	fa21 f102 	lsr.w	r1, r1, r2
    1d2e:	4414      	add	r4, r2
    1d30:	e6bd      	b.n	1aae <__adddf3+0xe6>
    1d32:	bf00      	nop

00001d34 <__aeabi_dmul>:
    1d34:	b570      	push	{r4, r5, r6, lr}
    1d36:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1d3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1d3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    1d42:	bf1d      	ittte	ne
    1d44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    1d48:	ea94 0f0c 	teqne	r4, ip
    1d4c:	ea95 0f0c 	teqne	r5, ip
    1d50:	f000 f8de 	bleq	1f10 <__aeabi_dmul+0x1dc>
    1d54:	442c      	add	r4, r5
    1d56:	ea81 0603 	eor.w	r6, r1, r3
    1d5a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    1d5e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    1d62:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    1d66:	bf18      	it	ne
    1d68:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    1d6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1d70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    1d74:	d038      	beq.n	1de8 <__aeabi_dmul+0xb4>
    1d76:	fba0 ce02 	umull	ip, lr, r0, r2
    1d7a:	f04f 0500 	mov.w	r5, #0
    1d7e:	fbe1 e502 	umlal	lr, r5, r1, r2
    1d82:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    1d86:	fbe0 e503 	umlal	lr, r5, r0, r3
    1d8a:	f04f 0600 	mov.w	r6, #0
    1d8e:	fbe1 5603 	umlal	r5, r6, r1, r3
    1d92:	f09c 0f00 	teq	ip, #0
    1d96:	bf18      	it	ne
    1d98:	f04e 0e01 	orrne.w	lr, lr, #1
    1d9c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    1da0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1da4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    1da8:	d204      	bcs.n	1db4 <__aeabi_dmul+0x80>
    1daa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    1dae:	416d      	adcs	r5, r5
    1db0:	eb46 0606 	adc.w	r6, r6, r6
    1db4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    1db8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    1dbc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    1dc0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    1dc4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    1dc8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    1dcc:	bf88      	it	hi
    1dce:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1dd2:	d81e      	bhi.n	1e12 <__aeabi_dmul+0xde>
    1dd4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    1dd8:	bf08      	it	eq
    1dda:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    1dde:	f150 0000 	adcs.w	r0, r0, #0
    1de2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    1de6:	bd70      	pop	{r4, r5, r6, pc}
    1de8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    1dec:	ea46 0101 	orr.w	r1, r6, r1
    1df0:	ea40 0002 	orr.w	r0, r0, r2
    1df4:	ea81 0103 	eor.w	r1, r1, r3
    1df8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    1dfc:	bfc2      	ittt	gt
    1dfe:	ebd4 050c 	rsbsgt	r5, r4, ip
    1e02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    1e06:	bd70      	popgt	{r4, r5, r6, pc}
    1e08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1e0c:	f04f 0e00 	mov.w	lr, #0
    1e10:	3c01      	subs	r4, #1
    1e12:	f300 80ab 	bgt.w	1f6c <__aeabi_dmul+0x238>
    1e16:	f114 0f36 	cmn.w	r4, #54	; 0x36
    1e1a:	bfde      	ittt	le
    1e1c:	2000      	movle	r0, #0
    1e1e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    1e22:	bd70      	pople	{r4, r5, r6, pc}
    1e24:	f1c4 0400 	rsb	r4, r4, #0
    1e28:	3c20      	subs	r4, #32
    1e2a:	da35      	bge.n	1e98 <__aeabi_dmul+0x164>
    1e2c:	340c      	adds	r4, #12
    1e2e:	dc1b      	bgt.n	1e68 <__aeabi_dmul+0x134>
    1e30:	f104 0414 	add.w	r4, r4, #20
    1e34:	f1c4 0520 	rsb	r5, r4, #32
    1e38:	fa00 f305 	lsl.w	r3, r0, r5
    1e3c:	fa20 f004 	lsr.w	r0, r0, r4
    1e40:	fa01 f205 	lsl.w	r2, r1, r5
    1e44:	ea40 0002 	orr.w	r0, r0, r2
    1e48:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    1e4c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1e50:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    1e54:	fa21 f604 	lsr.w	r6, r1, r4
    1e58:	eb42 0106 	adc.w	r1, r2, r6
    1e5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1e60:	bf08      	it	eq
    1e62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1e66:	bd70      	pop	{r4, r5, r6, pc}
    1e68:	f1c4 040c 	rsb	r4, r4, #12
    1e6c:	f1c4 0520 	rsb	r5, r4, #32
    1e70:	fa00 f304 	lsl.w	r3, r0, r4
    1e74:	fa20 f005 	lsr.w	r0, r0, r5
    1e78:	fa01 f204 	lsl.w	r2, r1, r4
    1e7c:	ea40 0002 	orr.w	r0, r0, r2
    1e80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1e84:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    1e88:	f141 0100 	adc.w	r1, r1, #0
    1e8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1e90:	bf08      	it	eq
    1e92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1e96:	bd70      	pop	{r4, r5, r6, pc}
    1e98:	f1c4 0520 	rsb	r5, r4, #32
    1e9c:	fa00 f205 	lsl.w	r2, r0, r5
    1ea0:	ea4e 0e02 	orr.w	lr, lr, r2
    1ea4:	fa20 f304 	lsr.w	r3, r0, r4
    1ea8:	fa01 f205 	lsl.w	r2, r1, r5
    1eac:	ea43 0302 	orr.w	r3, r3, r2
    1eb0:	fa21 f004 	lsr.w	r0, r1, r4
    1eb4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1eb8:	fa21 f204 	lsr.w	r2, r1, r4
    1ebc:	ea20 0002 	bic.w	r0, r0, r2
    1ec0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    1ec4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1ec8:	bf08      	it	eq
    1eca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1ece:	bd70      	pop	{r4, r5, r6, pc}
    1ed0:	f094 0f00 	teq	r4, #0
    1ed4:	d10f      	bne.n	1ef6 <__aeabi_dmul+0x1c2>
    1ed6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    1eda:	0040      	lsls	r0, r0, #1
    1edc:	eb41 0101 	adc.w	r1, r1, r1
    1ee0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1ee4:	bf08      	it	eq
    1ee6:	3c01      	subeq	r4, #1
    1ee8:	d0f7      	beq.n	1eda <__aeabi_dmul+0x1a6>
    1eea:	ea41 0106 	orr.w	r1, r1, r6
    1eee:	f095 0f00 	teq	r5, #0
    1ef2:	bf18      	it	ne
    1ef4:	4770      	bxne	lr
    1ef6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    1efa:	0052      	lsls	r2, r2, #1
    1efc:	eb43 0303 	adc.w	r3, r3, r3
    1f00:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    1f04:	bf08      	it	eq
    1f06:	3d01      	subeq	r5, #1
    1f08:	d0f7      	beq.n	1efa <__aeabi_dmul+0x1c6>
    1f0a:	ea43 0306 	orr.w	r3, r3, r6
    1f0e:	4770      	bx	lr
    1f10:	ea94 0f0c 	teq	r4, ip
    1f14:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    1f18:	bf18      	it	ne
    1f1a:	ea95 0f0c 	teqne	r5, ip
    1f1e:	d00c      	beq.n	1f3a <__aeabi_dmul+0x206>
    1f20:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1f24:	bf18      	it	ne
    1f26:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1f2a:	d1d1      	bne.n	1ed0 <__aeabi_dmul+0x19c>
    1f2c:	ea81 0103 	eor.w	r1, r1, r3
    1f30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1f34:	f04f 0000 	mov.w	r0, #0
    1f38:	bd70      	pop	{r4, r5, r6, pc}
    1f3a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1f3e:	bf06      	itte	eq
    1f40:	4610      	moveq	r0, r2
    1f42:	4619      	moveq	r1, r3
    1f44:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1f48:	d019      	beq.n	1f7e <__aeabi_dmul+0x24a>
    1f4a:	ea94 0f0c 	teq	r4, ip
    1f4e:	d102      	bne.n	1f56 <__aeabi_dmul+0x222>
    1f50:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    1f54:	d113      	bne.n	1f7e <__aeabi_dmul+0x24a>
    1f56:	ea95 0f0c 	teq	r5, ip
    1f5a:	d105      	bne.n	1f68 <__aeabi_dmul+0x234>
    1f5c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    1f60:	bf1c      	itt	ne
    1f62:	4610      	movne	r0, r2
    1f64:	4619      	movne	r1, r3
    1f66:	d10a      	bne.n	1f7e <__aeabi_dmul+0x24a>
    1f68:	ea81 0103 	eor.w	r1, r1, r3
    1f6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1f70:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    1f74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1f78:	f04f 0000 	mov.w	r0, #0
    1f7c:	bd70      	pop	{r4, r5, r6, pc}
    1f7e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    1f82:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    1f86:	bd70      	pop	{r4, r5, r6, pc}

00001f88 <__aeabi_ddiv>:
    1f88:	b570      	push	{r4, r5, r6, lr}
    1f8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1f8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1f92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    1f96:	bf1d      	ittte	ne
    1f98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    1f9c:	ea94 0f0c 	teqne	r4, ip
    1fa0:	ea95 0f0c 	teqne	r5, ip
    1fa4:	f000 f8a7 	bleq	20f6 <__aeabi_ddiv+0x16e>
    1fa8:	eba4 0405 	sub.w	r4, r4, r5
    1fac:	ea81 0e03 	eor.w	lr, r1, r3
    1fb0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1fb4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    1fb8:	f000 8088 	beq.w	20cc <__aeabi_ddiv+0x144>
    1fbc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1fc0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    1fc4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    1fc8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    1fcc:	ea4f 2202 	mov.w	r2, r2, lsl #8
    1fd0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    1fd4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    1fd8:	ea4f 2600 	mov.w	r6, r0, lsl #8
    1fdc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    1fe0:	429d      	cmp	r5, r3
    1fe2:	bf08      	it	eq
    1fe4:	4296      	cmpeq	r6, r2
    1fe6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    1fea:	f504 7440 	add.w	r4, r4, #768	; 0x300
    1fee:	d202      	bcs.n	1ff6 <__aeabi_ddiv+0x6e>
    1ff0:	085b      	lsrs	r3, r3, #1
    1ff2:	ea4f 0232 	mov.w	r2, r2, rrx
    1ff6:	1ab6      	subs	r6, r6, r2
    1ff8:	eb65 0503 	sbc.w	r5, r5, r3
    1ffc:	085b      	lsrs	r3, r3, #1
    1ffe:	ea4f 0232 	mov.w	r2, r2, rrx
    2002:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    2006:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    200a:	ebb6 0e02 	subs.w	lr, r6, r2
    200e:	eb75 0e03 	sbcs.w	lr, r5, r3
    2012:	bf22      	ittt	cs
    2014:	1ab6      	subcs	r6, r6, r2
    2016:	4675      	movcs	r5, lr
    2018:	ea40 000c 	orrcs.w	r0, r0, ip
    201c:	085b      	lsrs	r3, r3, #1
    201e:	ea4f 0232 	mov.w	r2, r2, rrx
    2022:	ebb6 0e02 	subs.w	lr, r6, r2
    2026:	eb75 0e03 	sbcs.w	lr, r5, r3
    202a:	bf22      	ittt	cs
    202c:	1ab6      	subcs	r6, r6, r2
    202e:	4675      	movcs	r5, lr
    2030:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    2034:	085b      	lsrs	r3, r3, #1
    2036:	ea4f 0232 	mov.w	r2, r2, rrx
    203a:	ebb6 0e02 	subs.w	lr, r6, r2
    203e:	eb75 0e03 	sbcs.w	lr, r5, r3
    2042:	bf22      	ittt	cs
    2044:	1ab6      	subcs	r6, r6, r2
    2046:	4675      	movcs	r5, lr
    2048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    204c:	085b      	lsrs	r3, r3, #1
    204e:	ea4f 0232 	mov.w	r2, r2, rrx
    2052:	ebb6 0e02 	subs.w	lr, r6, r2
    2056:	eb75 0e03 	sbcs.w	lr, r5, r3
    205a:	bf22      	ittt	cs
    205c:	1ab6      	subcs	r6, r6, r2
    205e:	4675      	movcs	r5, lr
    2060:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    2064:	ea55 0e06 	orrs.w	lr, r5, r6
    2068:	d018      	beq.n	209c <__aeabi_ddiv+0x114>
    206a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    206e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    2072:	ea4f 1606 	mov.w	r6, r6, lsl #4
    2076:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    207a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    207e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    2082:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    2086:	d1c0      	bne.n	200a <__aeabi_ddiv+0x82>
    2088:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    208c:	d10b      	bne.n	20a6 <__aeabi_ddiv+0x11e>
    208e:	ea41 0100 	orr.w	r1, r1, r0
    2092:	f04f 0000 	mov.w	r0, #0
    2096:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    209a:	e7b6      	b.n	200a <__aeabi_ddiv+0x82>
    209c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    20a0:	bf04      	itt	eq
    20a2:	4301      	orreq	r1, r0
    20a4:	2000      	moveq	r0, #0
    20a6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    20aa:	bf88      	it	hi
    20ac:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    20b0:	f63f aeaf 	bhi.w	1e12 <__aeabi_dmul+0xde>
    20b4:	ebb5 0c03 	subs.w	ip, r5, r3
    20b8:	bf04      	itt	eq
    20ba:	ebb6 0c02 	subseq.w	ip, r6, r2
    20be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    20c2:	f150 0000 	adcs.w	r0, r0, #0
    20c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    20ca:	bd70      	pop	{r4, r5, r6, pc}
    20cc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    20d0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    20d4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    20d8:	bfc2      	ittt	gt
    20da:	ebd4 050c 	rsbsgt	r5, r4, ip
    20de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    20e2:	bd70      	popgt	{r4, r5, r6, pc}
    20e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    20e8:	f04f 0e00 	mov.w	lr, #0
    20ec:	3c01      	subs	r4, #1
    20ee:	e690      	b.n	1e12 <__aeabi_dmul+0xde>
    20f0:	ea45 0e06 	orr.w	lr, r5, r6
    20f4:	e68d      	b.n	1e12 <__aeabi_dmul+0xde>
    20f6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    20fa:	ea94 0f0c 	teq	r4, ip
    20fe:	bf08      	it	eq
    2100:	ea95 0f0c 	teqeq	r5, ip
    2104:	f43f af3b 	beq.w	1f7e <__aeabi_dmul+0x24a>
    2108:	ea94 0f0c 	teq	r4, ip
    210c:	d10a      	bne.n	2124 <__aeabi_ddiv+0x19c>
    210e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    2112:	f47f af34 	bne.w	1f7e <__aeabi_dmul+0x24a>
    2116:	ea95 0f0c 	teq	r5, ip
    211a:	f47f af25 	bne.w	1f68 <__aeabi_dmul+0x234>
    211e:	4610      	mov	r0, r2
    2120:	4619      	mov	r1, r3
    2122:	e72c      	b.n	1f7e <__aeabi_dmul+0x24a>
    2124:	ea95 0f0c 	teq	r5, ip
    2128:	d106      	bne.n	2138 <__aeabi_ddiv+0x1b0>
    212a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    212e:	f43f aefd 	beq.w	1f2c <__aeabi_dmul+0x1f8>
    2132:	4610      	mov	r0, r2
    2134:	4619      	mov	r1, r3
    2136:	e722      	b.n	1f7e <__aeabi_dmul+0x24a>
    2138:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    213c:	bf18      	it	ne
    213e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    2142:	f47f aec5 	bne.w	1ed0 <__aeabi_dmul+0x19c>
    2146:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    214a:	f47f af0d 	bne.w	1f68 <__aeabi_dmul+0x234>
    214e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    2152:	f47f aeeb 	bne.w	1f2c <__aeabi_dmul+0x1f8>
    2156:	e712      	b.n	1f7e <__aeabi_dmul+0x24a>

00002158 <__aeabi_d2f>:
    2158:	ea4f 0241 	mov.w	r2, r1, lsl #1
    215c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    2160:	bf24      	itt	cs
    2162:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    2166:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    216a:	d90d      	bls.n	2188 <__aeabi_d2f+0x30>
    216c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    2170:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    2174:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    2178:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    217c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    2180:	bf08      	it	eq
    2182:	f020 0001 	biceq.w	r0, r0, #1
    2186:	4770      	bx	lr
    2188:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    218c:	d121      	bne.n	21d2 <__aeabi_d2f+0x7a>
    218e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    2192:	bfbc      	itt	lt
    2194:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    2198:	4770      	bxlt	lr
    219a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    219e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    21a2:	f1c2 0218 	rsb	r2, r2, #24
    21a6:	f1c2 0c20 	rsb	ip, r2, #32
    21aa:	fa10 f30c 	lsls.w	r3, r0, ip
    21ae:	fa20 f002 	lsr.w	r0, r0, r2
    21b2:	bf18      	it	ne
    21b4:	f040 0001 	orrne.w	r0, r0, #1
    21b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    21bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    21c0:	fa03 fc0c 	lsl.w	ip, r3, ip
    21c4:	ea40 000c 	orr.w	r0, r0, ip
    21c8:	fa23 f302 	lsr.w	r3, r3, r2
    21cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    21d0:	e7cc      	b.n	216c <__aeabi_d2f+0x14>
    21d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    21d6:	d107      	bne.n	21e8 <__aeabi_d2f+0x90>
    21d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    21dc:	bf1e      	ittt	ne
    21de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    21e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    21e6:	4770      	bxne	lr
    21e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    21ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    21f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    21f4:	4770      	bx	lr
    21f6:	bf00      	nop

000021f8 <selfrel_offset31>:
    21f8:	6803      	ldr	r3, [r0, #0]
    21fa:	005a      	lsls	r2, r3, #1
    21fc:	bf4c      	ite	mi
    21fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    2202:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    2206:	4418      	add	r0, r3
    2208:	4770      	bx	lr
    220a:	bf00      	nop

0000220c <search_EIT_table>:
    220c:	b369      	cbz	r1, 226a <search_EIT_table+0x5e>
    220e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2212:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
    2216:	4617      	mov	r7, r2
    2218:	4606      	mov	r6, r0
    221a:	46c8      	mov	r8, r9
    221c:	f04f 0a00 	mov.w	sl, #0
    2220:	eb0a 0408 	add.w	r4, sl, r8
    2224:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    2228:	1064      	asrs	r4, r4, #1
    222a:	00e5      	lsls	r5, r4, #3
    222c:	1971      	adds	r1, r6, r5
    222e:	4608      	mov	r0, r1
    2230:	f7ff ffe2 	bl	21f8 <selfrel_offset31>
    2234:	45a1      	cmp	r9, r4
    2236:	4603      	mov	r3, r0
    2238:	f105 0008 	add.w	r0, r5, #8
    223c:	4430      	add	r0, r6
    223e:	d009      	beq.n	2254 <search_EIT_table+0x48>
    2240:	42bb      	cmp	r3, r7
    2242:	d809      	bhi.n	2258 <search_EIT_table+0x4c>
    2244:	f7ff ffd8 	bl	21f8 <selfrel_offset31>
    2248:	3801      	subs	r0, #1
    224a:	42b8      	cmp	r0, r7
    224c:	d20a      	bcs.n	2264 <search_EIT_table+0x58>
    224e:	f104 0a01 	add.w	sl, r4, #1
    2252:	e7e5      	b.n	2220 <search_EIT_table+0x14>
    2254:	42bb      	cmp	r3, r7
    2256:	d905      	bls.n	2264 <search_EIT_table+0x58>
    2258:	45a2      	cmp	sl, r4
    225a:	d002      	beq.n	2262 <search_EIT_table+0x56>
    225c:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    2260:	e7de      	b.n	2220 <search_EIT_table+0x14>
    2262:	2100      	movs	r1, #0
    2264:	4608      	mov	r0, r1
    2266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    226a:	4608      	mov	r0, r1
    226c:	4770      	bx	lr
    226e:	bf00      	nop

00002270 <__gnu_unwind_get_pr_addr>:
    2270:	2801      	cmp	r0, #1
    2272:	d007      	beq.n	2284 <__gnu_unwind_get_pr_addr+0x14>
    2274:	2802      	cmp	r0, #2
    2276:	d007      	beq.n	2288 <__gnu_unwind_get_pr_addr+0x18>
    2278:	4b04      	ldr	r3, [pc, #16]	; (228c <__gnu_unwind_get_pr_addr+0x1c>)
    227a:	2800      	cmp	r0, #0
    227c:	bf0c      	ite	eq
    227e:	4618      	moveq	r0, r3
    2280:	2000      	movne	r0, #0
    2282:	4770      	bx	lr
    2284:	4802      	ldr	r0, [pc, #8]	; (2290 <__gnu_unwind_get_pr_addr+0x20>)
    2286:	4770      	bx	lr
    2288:	4802      	ldr	r0, [pc, #8]	; (2294 <__gnu_unwind_get_pr_addr+0x24>)
    228a:	4770      	bx	lr
    228c:	0000294d 	.word	0x0000294d
    2290:	00002951 	.word	0x00002951
    2294:	00002955 	.word	0x00002955

00002298 <get_eit_entry>:
    2298:	b530      	push	{r4, r5, lr}
    229a:	4b24      	ldr	r3, [pc, #144]	; (232c <get_eit_entry+0x94>)
    229c:	b083      	sub	sp, #12
    229e:	4604      	mov	r4, r0
    22a0:	1e8d      	subs	r5, r1, #2
    22a2:	b34b      	cbz	r3, 22f8 <get_eit_entry+0x60>
    22a4:	a901      	add	r1, sp, #4
    22a6:	4628      	mov	r0, r5
    22a8:	f3af 8000 	nop.w
    22ac:	b1f0      	cbz	r0, 22ec <get_eit_entry+0x54>
    22ae:	9901      	ldr	r1, [sp, #4]
    22b0:	462a      	mov	r2, r5
    22b2:	f7ff ffab 	bl	220c <search_EIT_table>
    22b6:	4601      	mov	r1, r0
    22b8:	b1c0      	cbz	r0, 22ec <get_eit_entry+0x54>
    22ba:	f7ff ff9d 	bl	21f8 <selfrel_offset31>
    22be:	684b      	ldr	r3, [r1, #4]
    22c0:	64a0      	str	r0, [r4, #72]	; 0x48
    22c2:	2b01      	cmp	r3, #1
    22c4:	d02e      	beq.n	2324 <get_eit_entry+0x8c>
    22c6:	2b00      	cmp	r3, #0
    22c8:	f101 0004 	add.w	r0, r1, #4
    22cc:	db26      	blt.n	231c <get_eit_entry+0x84>
    22ce:	f7ff ff93 	bl	21f8 <selfrel_offset31>
    22d2:	2300      	movs	r3, #0
    22d4:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    22d8:	6803      	ldr	r3, [r0, #0]
    22da:	2b00      	cmp	r3, #0
    22dc:	db12      	blt.n	2304 <get_eit_entry+0x6c>
    22de:	f7ff ff8b 	bl	21f8 <selfrel_offset31>
    22e2:	2300      	movs	r3, #0
    22e4:	6120      	str	r0, [r4, #16]
    22e6:	4618      	mov	r0, r3
    22e8:	b003      	add	sp, #12
    22ea:	bd30      	pop	{r4, r5, pc}
    22ec:	2300      	movs	r3, #0
    22ee:	6123      	str	r3, [r4, #16]
    22f0:	2309      	movs	r3, #9
    22f2:	4618      	mov	r0, r3
    22f4:	b003      	add	sp, #12
    22f6:	bd30      	pop	{r4, r5, pc}
    22f8:	490d      	ldr	r1, [pc, #52]	; (2330 <get_eit_entry+0x98>)
    22fa:	480e      	ldr	r0, [pc, #56]	; (2334 <get_eit_entry+0x9c>)
    22fc:	1a09      	subs	r1, r1, r0
    22fe:	10c9      	asrs	r1, r1, #3
    2300:	9101      	str	r1, [sp, #4]
    2302:	e7d5      	b.n	22b0 <get_eit_entry+0x18>
    2304:	f3c3 6003 	ubfx	r0, r3, #24, #4
    2308:	f7ff ffb2 	bl	2270 <__gnu_unwind_get_pr_addr>
    230c:	2800      	cmp	r0, #0
    230e:	bf14      	ite	ne
    2310:	2300      	movne	r3, #0
    2312:	2309      	moveq	r3, #9
    2314:	6120      	str	r0, [r4, #16]
    2316:	4618      	mov	r0, r3
    2318:	b003      	add	sp, #12
    231a:	bd30      	pop	{r4, r5, pc}
    231c:	2301      	movs	r3, #1
    231e:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    2322:	e7d9      	b.n	22d8 <get_eit_entry+0x40>
    2324:	2300      	movs	r3, #0
    2326:	6123      	str	r3, [r4, #16]
    2328:	2305      	movs	r3, #5
    232a:	e7dc      	b.n	22e6 <get_eit_entry+0x4e>
    232c:	00000000 	.word	0x00000000
    2330:	0000417c 	.word	0x0000417c
    2334:	00003fb4 	.word	0x00003fb4

00002338 <restore_non_core_regs>:
    2338:	6803      	ldr	r3, [r0, #0]
    233a:	07da      	lsls	r2, r3, #31
    233c:	b510      	push	{r4, lr}
    233e:	4604      	mov	r4, r0
    2340:	d406      	bmi.n	2350 <restore_non_core_regs+0x18>
    2342:	079b      	lsls	r3, r3, #30
    2344:	f100 0048 	add.w	r0, r0, #72	; 0x48
    2348:	d509      	bpl.n	235e <restore_non_core_regs+0x26>
    234a:	f000 fc59 	bl	2c00 <__gnu_Unwind_Restore_VFP_D>
    234e:	6823      	ldr	r3, [r4, #0]
    2350:	0759      	lsls	r1, r3, #29
    2352:	d509      	bpl.n	2368 <restore_non_core_regs+0x30>
    2354:	071a      	lsls	r2, r3, #28
    2356:	d50e      	bpl.n	2376 <restore_non_core_regs+0x3e>
    2358:	06db      	lsls	r3, r3, #27
    235a:	d513      	bpl.n	2384 <restore_non_core_regs+0x4c>
    235c:	bd10      	pop	{r4, pc}
    235e:	f000 fc47 	bl	2bf0 <__gnu_Unwind_Restore_VFP>
    2362:	6823      	ldr	r3, [r4, #0]
    2364:	0759      	lsls	r1, r3, #29
    2366:	d4f5      	bmi.n	2354 <restore_non_core_regs+0x1c>
    2368:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    236c:	f000 fc50 	bl	2c10 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    2370:	6823      	ldr	r3, [r4, #0]
    2372:	071a      	lsls	r2, r3, #28
    2374:	d4f0      	bmi.n	2358 <restore_non_core_regs+0x20>
    2376:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    237a:	f000 fc51 	bl	2c20 <__gnu_Unwind_Restore_WMMXD>
    237e:	6823      	ldr	r3, [r4, #0]
    2380:	06db      	lsls	r3, r3, #27
    2382:	d4eb      	bmi.n	235c <restore_non_core_regs+0x24>
    2384:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    2388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    238c:	f000 bc8c 	b.w	2ca8 <__gnu_Unwind_Restore_WMMXC>

00002390 <_Unwind_decode_typeinfo_ptr.isra.0>:
    2390:	6803      	ldr	r3, [r0, #0]
    2392:	b103      	cbz	r3, 2396 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    2394:	4403      	add	r3, r0
    2396:	4618      	mov	r0, r3
    2398:	4770      	bx	lr
    239a:	bf00      	nop

0000239c <__gnu_unwind_24bit.isra.1>:
    239c:	2009      	movs	r0, #9
    239e:	4770      	bx	lr

000023a0 <_Unwind_DebugHook>:
    23a0:	4770      	bx	lr
    23a2:	bf00      	nop

000023a4 <unwind_phase2>:
    23a4:	b570      	push	{r4, r5, r6, lr}
    23a6:	4604      	mov	r4, r0
    23a8:	460d      	mov	r5, r1
    23aa:	6c29      	ldr	r1, [r5, #64]	; 0x40
    23ac:	4620      	mov	r0, r4
    23ae:	f7ff ff73 	bl	2298 <get_eit_entry>
    23b2:	4606      	mov	r6, r0
    23b4:	b988      	cbnz	r0, 23da <unwind_phase2+0x36>
    23b6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    23b8:	6163      	str	r3, [r4, #20]
    23ba:	462a      	mov	r2, r5
    23bc:	6923      	ldr	r3, [r4, #16]
    23be:	4621      	mov	r1, r4
    23c0:	2001      	movs	r0, #1
    23c2:	4798      	blx	r3
    23c4:	2808      	cmp	r0, #8
    23c6:	d0f0      	beq.n	23aa <unwind_phase2+0x6>
    23c8:	2807      	cmp	r0, #7
    23ca:	d106      	bne.n	23da <unwind_phase2+0x36>
    23cc:	4630      	mov	r0, r6
    23ce:	6c29      	ldr	r1, [r5, #64]	; 0x40
    23d0:	f7ff ffe6 	bl	23a0 <_Unwind_DebugHook>
    23d4:	1d28      	adds	r0, r5, #4
    23d6:	f000 fbff 	bl	2bd8 <__restore_core_regs>
    23da:	f000 fe87 	bl	30ec <abort>
    23de:	bf00      	nop

000023e0 <unwind_phase2_forced>:
    23e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    23e4:	1d0c      	adds	r4, r1, #4
    23e6:	4605      	mov	r5, r0
    23e8:	4617      	mov	r7, r2
    23ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    23ec:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    23f0:	ae03      	add	r6, sp, #12
    23f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    23f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    23f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    23f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    23fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    23fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    2400:	ac02      	add	r4, sp, #8
    2402:	f8d5 800c 	ldr.w	r8, [r5, #12]
    2406:	f8d5 9018 	ldr.w	r9, [r5, #24]
    240a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    240e:	2300      	movs	r3, #0
    2410:	4628      	mov	r0, r5
    2412:	6c21      	ldr	r1, [r4, #64]	; 0x40
    2414:	6023      	str	r3, [r4, #0]
    2416:	f7ff ff3f 	bl	2298 <get_eit_entry>
    241a:	2f00      	cmp	r7, #0
    241c:	4606      	mov	r6, r0
    241e:	bf14      	ite	ne
    2420:	270a      	movne	r7, #10
    2422:	2709      	moveq	r7, #9
    2424:	bb46      	cbnz	r6, 2478 <unwind_phase2_forced+0x98>
    2426:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2428:	616b      	str	r3, [r5, #20]
    242a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    242e:	4621      	mov	r1, r4
    2430:	a87a      	add	r0, sp, #488	; 0x1e8
    2432:	f000 fe81 	bl	3138 <memcpy>
    2436:	692b      	ldr	r3, [r5, #16]
    2438:	aa7a      	add	r2, sp, #488	; 0x1e8
    243a:	4629      	mov	r1, r5
    243c:	4638      	mov	r0, r7
    243e:	4798      	blx	r3
    2440:	9b88      	ldr	r3, [sp, #544]	; 0x220
    2442:	4682      	mov	sl, r0
    2444:	e9cd 4900 	strd	r4, r9, [sp]
    2448:	4639      	mov	r1, r7
    244a:	6463      	str	r3, [r4, #68]	; 0x44
    244c:	462a      	mov	r2, r5
    244e:	462b      	mov	r3, r5
    2450:	2001      	movs	r0, #1
    2452:	47c0      	blx	r8
    2454:	b9d8      	cbnz	r0, 248e <unwind_phase2_forced+0xae>
    2456:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    245a:	a97a      	add	r1, sp, #488	; 0x1e8
    245c:	4620      	mov	r0, r4
    245e:	f000 fe6b 	bl	3138 <memcpy>
    2462:	f1ba 0f08 	cmp.w	sl, #8
    2466:	d118      	bne.n	249a <unwind_phase2_forced+0xba>
    2468:	6c21      	ldr	r1, [r4, #64]	; 0x40
    246a:	4628      	mov	r0, r5
    246c:	f7ff ff14 	bl	2298 <get_eit_entry>
    2470:	4606      	mov	r6, r0
    2472:	2709      	movs	r7, #9
    2474:	2e00      	cmp	r6, #0
    2476:	d0d6      	beq.n	2426 <unwind_phase2_forced+0x46>
    2478:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    247a:	f047 0110 	orr.w	r1, r7, #16
    247e:	e9cd 4900 	strd	r4, r9, [sp]
    2482:	462a      	mov	r2, r5
    2484:	6463      	str	r3, [r4, #68]	; 0x44
    2486:	2001      	movs	r0, #1
    2488:	462b      	mov	r3, r5
    248a:	47c0      	blx	r8
    248c:	b100      	cbz	r0, 2490 <unwind_phase2_forced+0xb0>
    248e:	2609      	movs	r6, #9
    2490:	4630      	mov	r0, r6
    2492:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    2496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    249a:	f1ba 0f07 	cmp.w	sl, #7
    249e:	d1f6      	bne.n	248e <unwind_phase2_forced+0xae>
    24a0:	4630      	mov	r0, r6
    24a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    24a4:	f7ff ff7c 	bl	23a0 <_Unwind_DebugHook>
    24a8:	a803      	add	r0, sp, #12
    24aa:	f000 fb95 	bl	2bd8 <__restore_core_regs>
    24ae:	bf00      	nop

000024b0 <_Unwind_GetCFA>:
    24b0:	6c40      	ldr	r0, [r0, #68]	; 0x44
    24b2:	4770      	bx	lr

000024b4 <__gnu_Unwind_RaiseException>:
    24b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24b6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    24b8:	640b      	str	r3, [r1, #64]	; 0x40
    24ba:	1d0e      	adds	r6, r1, #4
    24bc:	460f      	mov	r7, r1
    24be:	4604      	mov	r4, r0
    24c0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    24c2:	b0f9      	sub	sp, #484	; 0x1e4
    24c4:	ad01      	add	r5, sp, #4
    24c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    24c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    24ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    24cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    24ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    24d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    24d4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    24d8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    24dc:	9600      	str	r6, [sp, #0]
    24de:	e006      	b.n	24ee <__gnu_Unwind_RaiseException+0x3a>
    24e0:	6923      	ldr	r3, [r4, #16]
    24e2:	466a      	mov	r2, sp
    24e4:	4621      	mov	r1, r4
    24e6:	4798      	blx	r3
    24e8:	2808      	cmp	r0, #8
    24ea:	4605      	mov	r5, r0
    24ec:	d108      	bne.n	2500 <__gnu_Unwind_RaiseException+0x4c>
    24ee:	9910      	ldr	r1, [sp, #64]	; 0x40
    24f0:	4620      	mov	r0, r4
    24f2:	f7ff fed1 	bl	2298 <get_eit_entry>
    24f6:	2800      	cmp	r0, #0
    24f8:	d0f2      	beq.n	24e0 <__gnu_Unwind_RaiseException+0x2c>
    24fa:	2009      	movs	r0, #9
    24fc:	b079      	add	sp, #484	; 0x1e4
    24fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2500:	4668      	mov	r0, sp
    2502:	f7ff ff19 	bl	2338 <restore_non_core_regs>
    2506:	2d06      	cmp	r5, #6
    2508:	d1f7      	bne.n	24fa <__gnu_Unwind_RaiseException+0x46>
    250a:	4639      	mov	r1, r7
    250c:	4620      	mov	r0, r4
    250e:	f7ff ff49 	bl	23a4 <unwind_phase2>
    2512:	bf00      	nop

00002514 <__gnu_Unwind_ForcedUnwind>:
    2514:	b430      	push	{r4, r5}
    2516:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    2518:	60c1      	str	r1, [r0, #12]
    251a:	6182      	str	r2, [r0, #24]
    251c:	4619      	mov	r1, r3
    251e:	641d      	str	r5, [r3, #64]	; 0x40
    2520:	2200      	movs	r2, #0
    2522:	bc30      	pop	{r4, r5}
    2524:	e75c      	b.n	23e0 <unwind_phase2_forced>
    2526:	bf00      	nop

00002528 <__gnu_Unwind_Resume>:
    2528:	b570      	push	{r4, r5, r6, lr}
    252a:	68c6      	ldr	r6, [r0, #12]
    252c:	6943      	ldr	r3, [r0, #20]
    252e:	640b      	str	r3, [r1, #64]	; 0x40
    2530:	b9ae      	cbnz	r6, 255e <__gnu_Unwind_Resume+0x36>
    2532:	6903      	ldr	r3, [r0, #16]
    2534:	460a      	mov	r2, r1
    2536:	4604      	mov	r4, r0
    2538:	460d      	mov	r5, r1
    253a:	4601      	mov	r1, r0
    253c:	2002      	movs	r0, #2
    253e:	4798      	blx	r3
    2540:	2807      	cmp	r0, #7
    2542:	d005      	beq.n	2550 <__gnu_Unwind_Resume+0x28>
    2544:	2808      	cmp	r0, #8
    2546:	d10f      	bne.n	2568 <__gnu_Unwind_Resume+0x40>
    2548:	4629      	mov	r1, r5
    254a:	4620      	mov	r0, r4
    254c:	f7ff ff2a 	bl	23a4 <unwind_phase2>
    2550:	4630      	mov	r0, r6
    2552:	6c29      	ldr	r1, [r5, #64]	; 0x40
    2554:	f7ff ff24 	bl	23a0 <_Unwind_DebugHook>
    2558:	1d28      	adds	r0, r5, #4
    255a:	f000 fb3d 	bl	2bd8 <__restore_core_regs>
    255e:	2201      	movs	r2, #1
    2560:	f7ff ff3e 	bl	23e0 <unwind_phase2_forced>
    2564:	f000 fdc2 	bl	30ec <abort>
    2568:	f000 fdc0 	bl	30ec <abort>

0000256c <__gnu_Unwind_Resume_or_Rethrow>:
    256c:	68c2      	ldr	r2, [r0, #12]
    256e:	b11a      	cbz	r2, 2578 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    2570:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    2572:	640a      	str	r2, [r1, #64]	; 0x40
    2574:	2200      	movs	r2, #0
    2576:	e733      	b.n	23e0 <unwind_phase2_forced>
    2578:	e79c      	b.n	24b4 <__gnu_Unwind_RaiseException>
    257a:	bf00      	nop

0000257c <_Unwind_Complete>:
    257c:	4770      	bx	lr
    257e:	bf00      	nop

00002580 <_Unwind_DeleteException>:
    2580:	6883      	ldr	r3, [r0, #8]
    2582:	b113      	cbz	r3, 258a <_Unwind_DeleteException+0xa>
    2584:	4601      	mov	r1, r0
    2586:	2001      	movs	r0, #1
    2588:	4718      	bx	r3
    258a:	4770      	bx	lr

0000258c <_Unwind_VRS_Get>:
    258c:	2904      	cmp	r1, #4
    258e:	d810      	bhi.n	25b2 <_Unwind_VRS_Get+0x26>
    2590:	e8df f001 	tbb	[pc, r1]
    2594:	030f0305 	.word	0x030f0305
    2598:	03          	.byte	0x03
    2599:	00          	.byte	0x00
    259a:	2001      	movs	r0, #1
    259c:	4770      	bx	lr
    259e:	b943      	cbnz	r3, 25b2 <_Unwind_VRS_Get+0x26>
    25a0:	2a0f      	cmp	r2, #15
    25a2:	d806      	bhi.n	25b2 <_Unwind_VRS_Get+0x26>
    25a4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    25a8:	4618      	mov	r0, r3
    25aa:	6853      	ldr	r3, [r2, #4]
    25ac:	9a00      	ldr	r2, [sp, #0]
    25ae:	6013      	str	r3, [r2, #0]
    25b0:	4770      	bx	lr
    25b2:	2002      	movs	r0, #2
    25b4:	4770      	bx	lr
    25b6:	bf00      	nop

000025b8 <_Unwind_GetGR>:
    25b8:	b510      	push	{r4, lr}
    25ba:	b084      	sub	sp, #16
    25bc:	2300      	movs	r3, #0
    25be:	ac03      	add	r4, sp, #12
    25c0:	460a      	mov	r2, r1
    25c2:	9400      	str	r4, [sp, #0]
    25c4:	4619      	mov	r1, r3
    25c6:	f7ff ffe1 	bl	258c <_Unwind_VRS_Get>
    25ca:	9803      	ldr	r0, [sp, #12]
    25cc:	b004      	add	sp, #16
    25ce:	bd10      	pop	{r4, pc}

000025d0 <_Unwind_VRS_Set>:
    25d0:	2904      	cmp	r1, #4
    25d2:	d810      	bhi.n	25f6 <_Unwind_VRS_Set+0x26>
    25d4:	e8df f001 	tbb	[pc, r1]
    25d8:	030f0305 	.word	0x030f0305
    25dc:	03          	.byte	0x03
    25dd:	00          	.byte	0x00
    25de:	2001      	movs	r0, #1
    25e0:	4770      	bx	lr
    25e2:	b943      	cbnz	r3, 25f6 <_Unwind_VRS_Set+0x26>
    25e4:	2a0f      	cmp	r2, #15
    25e6:	d806      	bhi.n	25f6 <_Unwind_VRS_Set+0x26>
    25e8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    25ec:	9a00      	ldr	r2, [sp, #0]
    25ee:	6812      	ldr	r2, [r2, #0]
    25f0:	6042      	str	r2, [r0, #4]
    25f2:	4618      	mov	r0, r3
    25f4:	4770      	bx	lr
    25f6:	2002      	movs	r0, #2
    25f8:	4770      	bx	lr
    25fa:	bf00      	nop

000025fc <_Unwind_SetGR>:
    25fc:	b510      	push	{r4, lr}
    25fe:	b084      	sub	sp, #16
    2600:	2300      	movs	r3, #0
    2602:	ac03      	add	r4, sp, #12
    2604:	9203      	str	r2, [sp, #12]
    2606:	9400      	str	r4, [sp, #0]
    2608:	460a      	mov	r2, r1
    260a:	4619      	mov	r1, r3
    260c:	f7ff ffe0 	bl	25d0 <_Unwind_VRS_Set>
    2610:	b004      	add	sp, #16
    2612:	bd10      	pop	{r4, pc}

00002614 <__gnu_Unwind_Backtrace>:
    2614:	b5f0      	push	{r4, r5, r6, r7, lr}
    2616:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    2618:	6413      	str	r3, [r2, #64]	; 0x40
    261a:	1d15      	adds	r5, r2, #4
    261c:	4607      	mov	r7, r0
    261e:	460e      	mov	r6, r1
    2620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2622:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    2626:	ac17      	add	r4, sp, #92	; 0x5c
    2628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    262a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    262c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    262e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2632:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2636:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    263a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    263e:	9516      	str	r5, [sp, #88]	; 0x58
    2640:	e010      	b.n	2664 <__gnu_Unwind_Backtrace+0x50>
    2642:	a816      	add	r0, sp, #88	; 0x58
    2644:	f7ff ffda 	bl	25fc <_Unwind_SetGR>
    2648:	4631      	mov	r1, r6
    264a:	a816      	add	r0, sp, #88	; 0x58
    264c:	47b8      	blx	r7
    264e:	aa16      	add	r2, sp, #88	; 0x58
    2650:	4669      	mov	r1, sp
    2652:	b978      	cbnz	r0, 2674 <__gnu_Unwind_Backtrace+0x60>
    2654:	9b04      	ldr	r3, [sp, #16]
    2656:	2008      	movs	r0, #8
    2658:	4798      	blx	r3
    265a:	2805      	cmp	r0, #5
    265c:	4604      	mov	r4, r0
    265e:	d00a      	beq.n	2676 <__gnu_Unwind_Backtrace+0x62>
    2660:	2809      	cmp	r0, #9
    2662:	d007      	beq.n	2674 <__gnu_Unwind_Backtrace+0x60>
    2664:	9926      	ldr	r1, [sp, #152]	; 0x98
    2666:	4668      	mov	r0, sp
    2668:	f7ff fe16 	bl	2298 <get_eit_entry>
    266c:	466a      	mov	r2, sp
    266e:	210c      	movs	r1, #12
    2670:	2800      	cmp	r0, #0
    2672:	d0e6      	beq.n	2642 <__gnu_Unwind_Backtrace+0x2e>
    2674:	2409      	movs	r4, #9
    2676:	a816      	add	r0, sp, #88	; 0x58
    2678:	f7ff fe5e 	bl	2338 <restore_non_core_regs>
    267c:	4620      	mov	r0, r4
    267e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    2682:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002684 <__gnu_unwind_pr_common>:
    2684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2688:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
    268a:	b089      	sub	sp, #36	; 0x24
    268c:	460d      	mov	r5, r1
    268e:	f854 1b04 	ldr.w	r1, [r4], #4
    2692:	9406      	str	r4, [sp, #24]
    2694:	4617      	mov	r7, r2
    2696:	f000 0803 	and.w	r8, r0, #3
    269a:	461e      	mov	r6, r3
    269c:	2b00      	cmp	r3, #0
    269e:	d061      	beq.n	2764 <__gnu_unwind_pr_common+0xe0>
    26a0:	0c0b      	lsrs	r3, r1, #16
    26a2:	b2da      	uxtb	r2, r3
    26a4:	0409      	lsls	r1, r1, #16
    26a6:	f88d 301d 	strb.w	r3, [sp, #29]
    26aa:	2302      	movs	r3, #2
    26ac:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    26b0:	9105      	str	r1, [sp, #20]
    26b2:	f88d 301c 	strb.w	r3, [sp, #28]
    26b6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    26b8:	f1b8 0f02 	cmp.w	r8, #2
    26bc:	bf08      	it	eq
    26be:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    26c0:	f013 0301 	ands.w	r3, r3, #1
    26c4:	d178      	bne.n	27b8 <__gnu_unwind_pr_common+0x134>
    26c6:	9301      	str	r3, [sp, #4]
    26c8:	f000 0308 	and.w	r3, r0, #8
    26cc:	9302      	str	r3, [sp, #8]
    26ce:	f8d4 a000 	ldr.w	sl, [r4]
    26d2:	f1ba 0f00 	cmp.w	sl, #0
    26d6:	f000 811b 	beq.w	2910 <__gnu_unwind_pr_common+0x28c>
    26da:	2e02      	cmp	r6, #2
    26dc:	d03e      	beq.n	275c <__gnu_unwind_pr_common+0xd8>
    26de:	f8b4 a000 	ldrh.w	sl, [r4]
    26e2:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    26e6:	3404      	adds	r4, #4
    26e8:	6caa      	ldr	r2, [r5, #72]	; 0x48
    26ea:	f029 0b01 	bic.w	fp, r9, #1
    26ee:	210f      	movs	r1, #15
    26f0:	4638      	mov	r0, r7
    26f2:	4493      	add	fp, r2
    26f4:	f7ff ff60 	bl	25b8 <_Unwind_GetGR>
    26f8:	4583      	cmp	fp, r0
    26fa:	d82d      	bhi.n	2758 <__gnu_unwind_pr_common+0xd4>
    26fc:	f02a 0201 	bic.w	r2, sl, #1
    2700:	445a      	add	r2, fp
    2702:	4282      	cmp	r2, r0
    2704:	bf94      	ite	ls
    2706:	2000      	movls	r0, #0
    2708:	2001      	movhi	r0, #1
    270a:	ea4f 0349 	mov.w	r3, r9, lsl #1
    270e:	f003 0302 	and.w	r3, r3, #2
    2712:	f00a 0a01 	and.w	sl, sl, #1
    2716:	ea43 030a 	orr.w	r3, r3, sl
    271a:	2b01      	cmp	r3, #1
    271c:	d030      	beq.n	2780 <__gnu_unwind_pr_common+0xfc>
    271e:	b33b      	cbz	r3, 2770 <__gnu_unwind_pr_common+0xec>
    2720:	2b02      	cmp	r3, #2
    2722:	d115      	bne.n	2750 <__gnu_unwind_pr_common+0xcc>
    2724:	6823      	ldr	r3, [r4, #0]
    2726:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
    272a:	f1b8 0f00 	cmp.w	r8, #0
    272e:	d14d      	bne.n	27cc <__gnu_unwind_pr_common+0x148>
    2730:	b130      	cbz	r0, 2740 <__gnu_unwind_pr_common+0xbc>
    2732:	9a02      	ldr	r2, [sp, #8]
    2734:	2a00      	cmp	r2, #0
    2736:	d06d      	beq.n	2814 <__gnu_unwind_pr_common+0x190>
    2738:	f1bb 0f00 	cmp.w	fp, #0
    273c:	f000 80a0 	beq.w	2880 <__gnu_unwind_pr_common+0x1fc>
    2740:	2b00      	cmp	r3, #0
    2742:	da00      	bge.n	2746 <__gnu_unwind_pr_common+0xc2>
    2744:	3404      	adds	r4, #4
    2746:	f10b 0b01 	add.w	fp, fp, #1
    274a:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    274e:	e7be      	b.n	26ce <__gnu_unwind_pr_common+0x4a>
    2750:	2009      	movs	r0, #9
    2752:	b009      	add	sp, #36	; 0x24
    2754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2758:	2000      	movs	r0, #0
    275a:	e7d6      	b.n	270a <__gnu_unwind_pr_common+0x86>
    275c:	f8d4 9004 	ldr.w	r9, [r4, #4]
    2760:	3408      	adds	r4, #8
    2762:	e7c1      	b.n	26e8 <__gnu_unwind_pr_common+0x64>
    2764:	0209      	lsls	r1, r1, #8
    2766:	2303      	movs	r3, #3
    2768:	9105      	str	r1, [sp, #20]
    276a:	f8ad 301c 	strh.w	r3, [sp, #28]
    276e:	e7a2      	b.n	26b6 <__gnu_unwind_pr_common+0x32>
    2770:	f1b8 0f00 	cmp.w	r8, #0
    2774:	d002      	beq.n	277c <__gnu_unwind_pr_common+0xf8>
    2776:	2800      	cmp	r0, #0
    2778:	f040 809d 	bne.w	28b6 <__gnu_unwind_pr_common+0x232>
    277c:	3404      	adds	r4, #4
    277e:	e7a6      	b.n	26ce <__gnu_unwind_pr_common+0x4a>
    2780:	f1b8 0f00 	cmp.w	r8, #0
    2784:	d12c      	bne.n	27e0 <__gnu_unwind_pr_common+0x15c>
    2786:	b1a8      	cbz	r0, 27b4 <__gnu_unwind_pr_common+0x130>
    2788:	e9d4 2300 	ldrd	r2, r3, [r4]
    278c:	1c99      	adds	r1, r3, #2
    278e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    2792:	d0dd      	beq.n	2750 <__gnu_unwind_pr_common+0xcc>
    2794:	f105 0158 	add.w	r1, r5, #88	; 0x58
    2798:	3301      	adds	r3, #1
    279a:	9104      	str	r1, [sp, #16]
    279c:	f000 809e 	beq.w	28dc <__gnu_unwind_pr_common+0x258>
    27a0:	1d20      	adds	r0, r4, #4
    27a2:	f7ff fdf5 	bl	2390 <_Unwind_decode_typeinfo_ptr.isra.0>
    27a6:	ab04      	add	r3, sp, #16
    27a8:	4601      	mov	r1, r0
    27aa:	4628      	mov	r0, r5
    27ac:	f3af 8000 	nop.w
    27b0:	2800      	cmp	r0, #0
    27b2:	d16f      	bne.n	2894 <__gnu_unwind_pr_common+0x210>
    27b4:	3408      	adds	r4, #8
    27b6:	e78a      	b.n	26ce <__gnu_unwind_pr_common+0x4a>
    27b8:	4638      	mov	r0, r7
    27ba:	a905      	add	r1, sp, #20
    27bc:	f000 fb0e 	bl	2ddc <__gnu_unwind_execute>
    27c0:	2800      	cmp	r0, #0
    27c2:	d1c5      	bne.n	2750 <__gnu_unwind_pr_common+0xcc>
    27c4:	2008      	movs	r0, #8
    27c6:	b009      	add	sp, #36	; 0x24
    27c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27cc:	210d      	movs	r1, #13
    27ce:	4638      	mov	r0, r7
    27d0:	f8d5 9020 	ldr.w	r9, [r5, #32]
    27d4:	f7ff fef0 	bl	25b8 <_Unwind_GetGR>
    27d8:	4581      	cmp	r9, r0
    27da:	d040      	beq.n	285e <__gnu_unwind_pr_common+0x1da>
    27dc:	6823      	ldr	r3, [r4, #0]
    27de:	e7af      	b.n	2740 <__gnu_unwind_pr_common+0xbc>
    27e0:	210d      	movs	r1, #13
    27e2:	4638      	mov	r0, r7
    27e4:	f8d5 9020 	ldr.w	r9, [r5, #32]
    27e8:	f7ff fee6 	bl	25b8 <_Unwind_GetGR>
    27ec:	4581      	cmp	r9, r0
    27ee:	d1e1      	bne.n	27b4 <__gnu_unwind_pr_common+0x130>
    27f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    27f2:	429c      	cmp	r4, r3
    27f4:	d1de      	bne.n	27b4 <__gnu_unwind_pr_common+0x130>
    27f6:	4620      	mov	r0, r4
    27f8:	f7ff fcfe 	bl	21f8 <selfrel_offset31>
    27fc:	210f      	movs	r1, #15
    27fe:	4602      	mov	r2, r0
    2800:	4638      	mov	r0, r7
    2802:	f7ff fefb 	bl	25fc <_Unwind_SetGR>
    2806:	4638      	mov	r0, r7
    2808:	462a      	mov	r2, r5
    280a:	2100      	movs	r1, #0
    280c:	f7ff fef6 	bl	25fc <_Unwind_SetGR>
    2810:	2007      	movs	r0, #7
    2812:	e79e      	b.n	2752 <__gnu_unwind_pr_common+0xce>
    2814:	f1bb 0f00 	cmp.w	fp, #0
    2818:	d032      	beq.n	2880 <__gnu_unwind_pr_common+0x1fc>
    281a:	f105 0358 	add.w	r3, r5, #88	; 0x58
    281e:	f8cd 800c 	str.w	r8, [sp, #12]
    2822:	f104 0904 	add.w	r9, r4, #4
    2826:	46b0      	mov	r8, r6
    2828:	f8dd a008 	ldr.w	sl, [sp, #8]
    282c:	461e      	mov	r6, r3
    282e:	e001      	b.n	2834 <__gnu_unwind_pr_common+0x1b0>
    2830:	45da      	cmp	sl, fp
    2832:	d025      	beq.n	2880 <__gnu_unwind_pr_common+0x1fc>
    2834:	4648      	mov	r0, r9
    2836:	9604      	str	r6, [sp, #16]
    2838:	f7ff fdaa 	bl	2390 <_Unwind_decode_typeinfo_ptr.isra.0>
    283c:	ab04      	add	r3, sp, #16
    283e:	4601      	mov	r1, r0
    2840:	2200      	movs	r2, #0
    2842:	4628      	mov	r0, r5
    2844:	f3af 8000 	nop.w
    2848:	f10a 0a01 	add.w	sl, sl, #1
    284c:	f109 0904 	add.w	r9, r9, #4
    2850:	2800      	cmp	r0, #0
    2852:	d0ed      	beq.n	2830 <__gnu_unwind_pr_common+0x1ac>
    2854:	4646      	mov	r6, r8
    2856:	6823      	ldr	r3, [r4, #0]
    2858:	f8dd 800c 	ldr.w	r8, [sp, #12]
    285c:	e770      	b.n	2740 <__gnu_unwind_pr_common+0xbc>
    285e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2860:	429c      	cmp	r4, r3
    2862:	d1bb      	bne.n	27dc <__gnu_unwind_pr_common+0x158>
    2864:	2204      	movs	r2, #4
    2866:	f04f 0900 	mov.w	r9, #0
    286a:	18a3      	adds	r3, r4, r2
    286c:	e9c5 b90a 	strd	fp, r9, [r5, #40]	; 0x28
    2870:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    2874:	6823      	ldr	r3, [r4, #0]
    2876:	454b      	cmp	r3, r9
    2878:	db38      	blt.n	28ec <__gnu_unwind_pr_common+0x268>
    287a:	2301      	movs	r3, #1
    287c:	9301      	str	r3, [sp, #4]
    287e:	e762      	b.n	2746 <__gnu_unwind_pr_common+0xc2>
    2880:	4638      	mov	r0, r7
    2882:	210d      	movs	r1, #13
    2884:	f7ff fe98 	bl	25b8 <_Unwind_GetGR>
    2888:	9b04      	ldr	r3, [sp, #16]
    288a:	6228      	str	r0, [r5, #32]
    288c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    2890:	2006      	movs	r0, #6
    2892:	e75e      	b.n	2752 <__gnu_unwind_pr_common+0xce>
    2894:	4681      	mov	r9, r0
    2896:	210d      	movs	r1, #13
    2898:	4638      	mov	r0, r7
    289a:	f7ff fe8d 	bl	25b8 <_Unwind_GetGR>
    289e:	f1b9 0f02 	cmp.w	r9, #2
    28a2:	6228      	str	r0, [r5, #32]
    28a4:	d11f      	bne.n	28e6 <__gnu_unwind_pr_common+0x262>
    28a6:	462b      	mov	r3, r5
    28a8:	9a04      	ldr	r2, [sp, #16]
    28aa:	f843 2f2c 	str.w	r2, [r3, #44]!
    28ae:	626b      	str	r3, [r5, #36]	; 0x24
    28b0:	62ac      	str	r4, [r5, #40]	; 0x28
    28b2:	2006      	movs	r0, #6
    28b4:	e74d      	b.n	2752 <__gnu_unwind_pr_common+0xce>
    28b6:	4620      	mov	r0, r4
    28b8:	f7ff fc9e 	bl	21f8 <selfrel_offset31>
    28bc:	3404      	adds	r4, #4
    28be:	4606      	mov	r6, r0
    28c0:	63ac      	str	r4, [r5, #56]	; 0x38
    28c2:	4628      	mov	r0, r5
    28c4:	f3af 8000 	nop.w
    28c8:	2800      	cmp	r0, #0
    28ca:	f43f af41 	beq.w	2750 <__gnu_unwind_pr_common+0xcc>
    28ce:	4638      	mov	r0, r7
    28d0:	4632      	mov	r2, r6
    28d2:	210f      	movs	r1, #15
    28d4:	f7ff fe92 	bl	25fc <_Unwind_SetGR>
    28d8:	2007      	movs	r0, #7
    28da:	e73a      	b.n	2752 <__gnu_unwind_pr_common+0xce>
    28dc:	4638      	mov	r0, r7
    28de:	210d      	movs	r1, #13
    28e0:	f7ff fe6a 	bl	25b8 <_Unwind_GetGR>
    28e4:	6228      	str	r0, [r5, #32]
    28e6:	9b04      	ldr	r3, [sp, #16]
    28e8:	626b      	str	r3, [r5, #36]	; 0x24
    28ea:	e7e1      	b.n	28b0 <__gnu_unwind_pr_common+0x22c>
    28ec:	f10b 0001 	add.w	r0, fp, #1
    28f0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    28f4:	f7ff fc80 	bl	21f8 <selfrel_offset31>
    28f8:	210f      	movs	r1, #15
    28fa:	4602      	mov	r2, r0
    28fc:	4638      	mov	r0, r7
    28fe:	f7ff fe7d 	bl	25fc <_Unwind_SetGR>
    2902:	4638      	mov	r0, r7
    2904:	462a      	mov	r2, r5
    2906:	4649      	mov	r1, r9
    2908:	f7ff fe78 	bl	25fc <_Unwind_SetGR>
    290c:	2007      	movs	r0, #7
    290e:	e720      	b.n	2752 <__gnu_unwind_pr_common+0xce>
    2910:	a905      	add	r1, sp, #20
    2912:	4638      	mov	r0, r7
    2914:	f000 fa62 	bl	2ddc <__gnu_unwind_execute>
    2918:	2800      	cmp	r0, #0
    291a:	f47f af19 	bne.w	2750 <__gnu_unwind_pr_common+0xcc>
    291e:	9b01      	ldr	r3, [sp, #4]
    2920:	2b00      	cmp	r3, #0
    2922:	f43f af4f 	beq.w	27c4 <__gnu_unwind_pr_common+0x140>
    2926:	210f      	movs	r1, #15
    2928:	4638      	mov	r0, r7
    292a:	f7ff fe45 	bl	25b8 <_Unwind_GetGR>
    292e:	210e      	movs	r1, #14
    2930:	4602      	mov	r2, r0
    2932:	4638      	mov	r0, r7
    2934:	f7ff fe62 	bl	25fc <_Unwind_SetGR>
    2938:	4638      	mov	r0, r7
    293a:	4a03      	ldr	r2, [pc, #12]	; (2948 <__gnu_unwind_pr_common+0x2c4>)
    293c:	210f      	movs	r1, #15
    293e:	f7ff fe5d 	bl	25fc <_Unwind_SetGR>
    2942:	2007      	movs	r0, #7
    2944:	e705      	b.n	2752 <__gnu_unwind_pr_common+0xce>
    2946:	bf00      	nop
    2948:	00000000 	.word	0x00000000

0000294c <__aeabi_unwind_cpp_pr0>:
    294c:	2300      	movs	r3, #0
    294e:	e699      	b.n	2684 <__gnu_unwind_pr_common>

00002950 <__aeabi_unwind_cpp_pr1>:
    2950:	2301      	movs	r3, #1
    2952:	e697      	b.n	2684 <__gnu_unwind_pr_common>

00002954 <__aeabi_unwind_cpp_pr2>:
    2954:	2302      	movs	r3, #2
    2956:	e695      	b.n	2684 <__gnu_unwind_pr_common>

00002958 <_Unwind_VRS_Pop>:
    2958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    295c:	4605      	mov	r5, r0
    295e:	b0c4      	sub	sp, #272	; 0x110
    2960:	2904      	cmp	r1, #4
    2962:	f200 80b3 	bhi.w	2acc <_Unwind_VRS_Pop+0x174>
    2966:	e8df f001 	tbb	[pc, r1]
    296a:	5195      	.short	0x5195
    296c:	2bb1      	.short	0x2bb1
    296e:	03          	.byte	0x03
    296f:	00          	.byte	0x00
    2970:	2b00      	cmp	r3, #0
    2972:	f040 80ab 	bne.w	2acc <_Unwind_VRS_Pop+0x174>
    2976:	2a10      	cmp	r2, #16
    2978:	f200 80a8 	bhi.w	2acc <_Unwind_VRS_Pop+0x174>
    297c:	682b      	ldr	r3, [r5, #0]
    297e:	06dc      	lsls	r4, r3, #27
    2980:	f100 8100 	bmi.w	2b84 <_Unwind_VRS_Pop+0x22c>
    2984:	ac22      	add	r4, sp, #136	; 0x88
    2986:	4620      	mov	r0, r4
    2988:	9201      	str	r2, [sp, #4]
    298a:	f000 f997 	bl	2cbc <__gnu_Unwind_Save_WMMXC>
    298e:	6bae      	ldr	r6, [r5, #56]	; 0x38
    2990:	9a01      	ldr	r2, [sp, #4]
    2992:	2300      	movs	r3, #0
    2994:	2701      	movs	r7, #1
    2996:	fa07 f103 	lsl.w	r1, r7, r3
    299a:	4211      	tst	r1, r2
    299c:	4630      	mov	r0, r6
    299e:	d004      	beq.n	29aa <_Unwind_VRS_Pop+0x52>
    29a0:	f850 1b04 	ldr.w	r1, [r0], #4
    29a4:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    29a8:	4606      	mov	r6, r0
    29aa:	3301      	adds	r3, #1
    29ac:	2b04      	cmp	r3, #4
    29ae:	d1f2      	bne.n	2996 <_Unwind_VRS_Pop+0x3e>
    29b0:	4620      	mov	r0, r4
    29b2:	63ae      	str	r6, [r5, #56]	; 0x38
    29b4:	f000 f978 	bl	2ca8 <__gnu_Unwind_Restore_WMMXC>
    29b8:	2000      	movs	r0, #0
    29ba:	b044      	add	sp, #272	; 0x110
    29bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29c0:	2b03      	cmp	r3, #3
    29c2:	f040 8083 	bne.w	2acc <_Unwind_VRS_Pop+0x174>
    29c6:	0c16      	lsrs	r6, r2, #16
    29c8:	b297      	uxth	r7, r2
    29ca:	19f3      	adds	r3, r6, r7
    29cc:	2b10      	cmp	r3, #16
    29ce:	d87d      	bhi.n	2acc <_Unwind_VRS_Pop+0x174>
    29d0:	682b      	ldr	r3, [r5, #0]
    29d2:	071a      	lsls	r2, r3, #28
    29d4:	f100 80e0 	bmi.w	2b98 <_Unwind_VRS_Pop+0x240>
    29d8:	ac22      	add	r4, sp, #136	; 0x88
    29da:	4620      	mov	r0, r4
    29dc:	f000 f942 	bl	2c64 <__gnu_Unwind_Save_WMMXD>
    29e0:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
    29e4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    29e6:	b14f      	cbz	r7, 29fc <_Unwind_VRS_Pop+0xa4>
    29e8:	4603      	mov	r3, r0
    29ea:	00fa      	lsls	r2, r7, #3
    29ec:	4410      	add	r0, r2
    29ee:	1ace      	subs	r6, r1, r3
    29f0:	599f      	ldr	r7, [r3, r6]
    29f2:	f843 7b04 	str.w	r7, [r3], #4
    29f6:	4283      	cmp	r3, r0
    29f8:	d1fa      	bne.n	29f0 <_Unwind_VRS_Pop+0x98>
    29fa:	4411      	add	r1, r2
    29fc:	4620      	mov	r0, r4
    29fe:	63a9      	str	r1, [r5, #56]	; 0x38
    2a00:	f000 f90e 	bl	2c20 <__gnu_Unwind_Restore_WMMXD>
    2a04:	2000      	movs	r0, #0
    2a06:	b044      	add	sp, #272	; 0x110
    2a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a0c:	2b01      	cmp	r3, #1
    2a0e:	ea4f 4612 	mov.w	r6, r2, lsr #16
    2a12:	fa1f f882 	uxth.w	r8, r2
    2a16:	d055      	beq.n	2ac4 <_Unwind_VRS_Pop+0x16c>
    2a18:	2b05      	cmp	r3, #5
    2a1a:	d157      	bne.n	2acc <_Unwind_VRS_Pop+0x174>
    2a1c:	eb06 0708 	add.w	r7, r6, r8
    2a20:	2f20      	cmp	r7, #32
    2a22:	d853      	bhi.n	2acc <_Unwind_VRS_Pop+0x174>
    2a24:	2e0f      	cmp	r6, #15
    2a26:	d955      	bls.n	2ad4 <_Unwind_VRS_Pop+0x17c>
    2a28:	4647      	mov	r7, r8
    2a2a:	f1b8 0f00 	cmp.w	r8, #0
    2a2e:	d164      	bne.n	2afa <_Unwind_VRS_Pop+0x1a2>
    2a30:	4640      	mov	r0, r8
    2a32:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    2a34:	f1b8 0f00 	cmp.w	r8, #0
    2a38:	f000 80ba 	beq.w	2bb0 <_Unwind_VRS_Pop+0x258>
    2a3c:	ac22      	add	r4, sp, #136	; 0x88
    2a3e:	2700      	movs	r7, #0
    2a40:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    2a44:	3c04      	subs	r4, #4
    2a46:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
    2a4a:	f851 0b04 	ldr.w	r0, [r1], #4
    2a4e:	f844 0f04 	str.w	r0, [r4, #4]!
    2a52:	4291      	cmp	r1, r2
    2a54:	d1f9      	bne.n	2a4a <_Unwind_VRS_Pop+0xf2>
    2a56:	b17f      	cbz	r7, 2a78 <_Unwind_VRS_Pop+0x120>
    2a58:	ac02      	add	r4, sp, #8
    2a5a:	2e10      	cmp	r6, #16
    2a5c:	4630      	mov	r0, r6
    2a5e:	bf38      	it	cc
    2a60:	2010      	movcc	r0, #16
    2a62:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2a66:	3884      	subs	r0, #132	; 0x84
    2a68:	eb02 01c7 	add.w	r1, r2, r7, lsl #3
    2a6c:	f852 4b04 	ldr.w	r4, [r2], #4
    2a70:	f840 4f04 	str.w	r4, [r0, #4]!
    2a74:	4291      	cmp	r1, r2
    2a76:	d1f9      	bne.n	2a6c <_Unwind_VRS_Pop+0x114>
    2a78:	2b01      	cmp	r3, #1
    2a7a:	f000 8095 	beq.w	2ba8 <_Unwind_VRS_Pop+0x250>
    2a7e:	2e0f      	cmp	r6, #15
    2a80:	63a9      	str	r1, [r5, #56]	; 0x38
    2a82:	d96b      	bls.n	2b5c <_Unwind_VRS_Pop+0x204>
    2a84:	b117      	cbz	r7, 2a8c <_Unwind_VRS_Pop+0x134>
    2a86:	a802      	add	r0, sp, #8
    2a88:	f000 f8c2 	bl	2c10 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    2a8c:	2000      	movs	r0, #0
    2a8e:	b044      	add	sp, #272	; 0x110
    2a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a94:	b9d3      	cbnz	r3, 2acc <_Unwind_VRS_Pop+0x174>
    2a96:	6bac      	ldr	r4, [r5, #56]	; 0x38
    2a98:	b297      	uxth	r7, r2
    2a9a:	2601      	movs	r6, #1
    2a9c:	f105 0c04 	add.w	ip, r5, #4
    2aa0:	fa06 f103 	lsl.w	r1, r6, r3
    2aa4:	4239      	tst	r1, r7
    2aa6:	4620      	mov	r0, r4
    2aa8:	d004      	beq.n	2ab4 <_Unwind_VRS_Pop+0x15c>
    2aaa:	f850 1b04 	ldr.w	r1, [r0], #4
    2aae:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
    2ab2:	4604      	mov	r4, r0
    2ab4:	3301      	adds	r3, #1
    2ab6:	2b10      	cmp	r3, #16
    2ab8:	d1f2      	bne.n	2aa0 <_Unwind_VRS_Pop+0x148>
    2aba:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    2abe:	d1e5      	bne.n	2a8c <_Unwind_VRS_Pop+0x134>
    2ac0:	63ac      	str	r4, [r5, #56]	; 0x38
    2ac2:	e004      	b.n	2ace <_Unwind_VRS_Pop+0x176>
    2ac4:	eb06 0208 	add.w	r2, r6, r8
    2ac8:	2a10      	cmp	r2, #16
    2aca:	d928      	bls.n	2b1e <_Unwind_VRS_Pop+0x1c6>
    2acc:	2002      	movs	r0, #2
    2ace:	b044      	add	sp, #272	; 0x110
    2ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2ad4:	2f10      	cmp	r7, #16
    2ad6:	d97c      	bls.n	2bd2 <_Unwind_VRS_Pop+0x27a>
    2ad8:	3f10      	subs	r7, #16
    2ada:	682a      	ldr	r2, [r5, #0]
    2adc:	07d0      	lsls	r0, r2, #31
    2ade:	d50a      	bpl.n	2af6 <_Unwind_VRS_Pop+0x19e>
    2ae0:	4628      	mov	r0, r5
    2ae2:	f022 0201 	bic.w	r2, r2, #1
    2ae6:	f042 0202 	orr.w	r2, r2, #2
    2aea:	f840 2b48 	str.w	r2, [r0], #72
    2aee:	9301      	str	r3, [sp, #4]
    2af0:	f000 f88a 	bl	2c08 <__gnu_Unwind_Save_VFP_D>
    2af4:	9b01      	ldr	r3, [sp, #4]
    2af6:	2f00      	cmp	r7, #0
    2af8:	d05c      	beq.n	2bb4 <_Unwind_VRS_Pop+0x25c>
    2afa:	682a      	ldr	r2, [r5, #0]
    2afc:	0751      	lsls	r1, r2, #29
    2afe:	d437      	bmi.n	2b70 <_Unwind_VRS_Pop+0x218>
    2b00:	2e0f      	cmp	r6, #15
    2b02:	d92f      	bls.n	2b64 <_Unwind_VRS_Pop+0x20c>
    2b04:	ac02      	add	r4, sp, #8
    2b06:	4620      	mov	r0, r4
    2b08:	9301      	str	r3, [sp, #4]
    2b0a:	f000 f885 	bl	2c18 <__gnu_Unwind_Save_VFP_D_16_to_31>
    2b0e:	f1c6 0010 	rsb	r0, r6, #16
    2b12:	2800      	cmp	r0, #0
    2b14:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    2b16:	9b01      	ldr	r3, [sp, #4]
    2b18:	dd48      	ble.n	2bac <_Unwind_VRS_Pop+0x254>
    2b1a:	ac22      	add	r4, sp, #136	; 0x88
    2b1c:	e790      	b.n	2a40 <_Unwind_VRS_Pop+0xe8>
    2b1e:	2e0f      	cmp	r6, #15
    2b20:	d8d4      	bhi.n	2acc <_Unwind_VRS_Pop+0x174>
    2b22:	682a      	ldr	r2, [r5, #0]
    2b24:	07d1      	lsls	r1, r2, #31
    2b26:	d508      	bpl.n	2b3a <_Unwind_VRS_Pop+0x1e2>
    2b28:	4628      	mov	r0, r5
    2b2a:	f022 0203 	bic.w	r2, r2, #3
    2b2e:	f840 2b48 	str.w	r2, [r0], #72
    2b32:	9301      	str	r3, [sp, #4]
    2b34:	f000 f860 	bl	2bf8 <__gnu_Unwind_Save_VFP>
    2b38:	9b01      	ldr	r3, [sp, #4]
    2b3a:	9301      	str	r3, [sp, #4]
    2b3c:	ac22      	add	r4, sp, #136	; 0x88
    2b3e:	4620      	mov	r0, r4
    2b40:	f000 f85a 	bl	2bf8 <__gnu_Unwind_Save_VFP>
    2b44:	4640      	mov	r0, r8
    2b46:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    2b48:	9b01      	ldr	r3, [sp, #4]
    2b4a:	2800      	cmp	r0, #0
    2b4c:	f47f af77 	bne.w	2a3e <_Unwind_VRS_Pop+0xe6>
    2b50:	3104      	adds	r1, #4
    2b52:	63a9      	str	r1, [r5, #56]	; 0x38
    2b54:	4620      	mov	r0, r4
    2b56:	f000 f84b 	bl	2bf0 <__gnu_Unwind_Restore_VFP>
    2b5a:	e797      	b.n	2a8c <_Unwind_VRS_Pop+0x134>
    2b5c:	a822      	add	r0, sp, #136	; 0x88
    2b5e:	f000 f84f 	bl	2c00 <__gnu_Unwind_Restore_VFP_D>
    2b62:	e78f      	b.n	2a84 <_Unwind_VRS_Pop+0x12c>
    2b64:	a822      	add	r0, sp, #136	; 0x88
    2b66:	9301      	str	r3, [sp, #4]
    2b68:	f000 f84e 	bl	2c08 <__gnu_Unwind_Save_VFP_D>
    2b6c:	9b01      	ldr	r3, [sp, #4]
    2b6e:	e7c9      	b.n	2b04 <_Unwind_VRS_Pop+0x1ac>
    2b70:	4628      	mov	r0, r5
    2b72:	f022 0204 	bic.w	r2, r2, #4
    2b76:	f840 2bd0 	str.w	r2, [r0], #208
    2b7a:	9301      	str	r3, [sp, #4]
    2b7c:	f000 f84c 	bl	2c18 <__gnu_Unwind_Save_VFP_D_16_to_31>
    2b80:	9b01      	ldr	r3, [sp, #4]
    2b82:	e7bd      	b.n	2b00 <_Unwind_VRS_Pop+0x1a8>
    2b84:	f023 0310 	bic.w	r3, r3, #16
    2b88:	602b      	str	r3, [r5, #0]
    2b8a:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    2b8e:	9201      	str	r2, [sp, #4]
    2b90:	f000 f894 	bl	2cbc <__gnu_Unwind_Save_WMMXC>
    2b94:	9a01      	ldr	r2, [sp, #4]
    2b96:	e6f5      	b.n	2984 <_Unwind_VRS_Pop+0x2c>
    2b98:	f023 0308 	bic.w	r3, r3, #8
    2b9c:	602b      	str	r3, [r5, #0]
    2b9e:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    2ba2:	f000 f85f 	bl	2c64 <__gnu_Unwind_Save_WMMXD>
    2ba6:	e717      	b.n	29d8 <_Unwind_VRS_Pop+0x80>
    2ba8:	ac22      	add	r4, sp, #136	; 0x88
    2baa:	e7d1      	b.n	2b50 <_Unwind_VRS_Pop+0x1f8>
    2bac:	460a      	mov	r2, r1
    2bae:	e754      	b.n	2a5a <_Unwind_VRS_Pop+0x102>
    2bb0:	4647      	mov	r7, r8
    2bb2:	e764      	b.n	2a7e <_Unwind_VRS_Pop+0x126>
    2bb4:	2e0f      	cmp	r6, #15
    2bb6:	f63f af3b 	bhi.w	2a30 <_Unwind_VRS_Pop+0xd8>
    2bba:	ac22      	add	r4, sp, #136	; 0x88
    2bbc:	4620      	mov	r0, r4
    2bbe:	9301      	str	r3, [sp, #4]
    2bc0:	f000 f822 	bl	2c08 <__gnu_Unwind_Save_VFP_D>
    2bc4:	4640      	mov	r0, r8
    2bc6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    2bc8:	9b01      	ldr	r3, [sp, #4]
    2bca:	2800      	cmp	r0, #0
    2bcc:	f47f af37 	bne.w	2a3e <_Unwind_VRS_Pop+0xe6>
    2bd0:	e755      	b.n	2a7e <_Unwind_VRS_Pop+0x126>
    2bd2:	2700      	movs	r7, #0
    2bd4:	e781      	b.n	2ada <_Unwind_VRS_Pop+0x182>
    2bd6:	bf00      	nop

00002bd8 <__restore_core_regs>:
    2bd8:	f100 0134 	add.w	r1, r0, #52	; 0x34
    2bdc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    2be0:	469c      	mov	ip, r3
    2be2:	46a6      	mov	lr, r4
    2be4:	f84c 5d04 	str.w	r5, [ip, #-4]!
    2be8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    2bec:	46e5      	mov	sp, ip
    2bee:	bd00      	pop	{pc}

00002bf0 <__gnu_Unwind_Restore_VFP>:
    2bf0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    2bf4:	4770      	bx	lr
    2bf6:	bf00      	nop

00002bf8 <__gnu_Unwind_Save_VFP>:
    2bf8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    2bfc:	4770      	bx	lr
    2bfe:	bf00      	nop

00002c00 <__gnu_Unwind_Restore_VFP_D>:
    2c00:	ec90 0b20 	vldmia	r0, {d0-d15}
    2c04:	4770      	bx	lr
    2c06:	bf00      	nop

00002c08 <__gnu_Unwind_Save_VFP_D>:
    2c08:	ec80 0b20 	vstmia	r0, {d0-d15}
    2c0c:	4770      	bx	lr
    2c0e:	bf00      	nop

00002c10 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    2c10:	ecd0 0b20 	vldmia	r0, {d16-d31}
    2c14:	4770      	bx	lr
    2c16:	bf00      	nop

00002c18 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    2c18:	ecc0 0b20 	vstmia	r0, {d16-d31}
    2c1c:	4770      	bx	lr
    2c1e:	bf00      	nop

00002c20 <__gnu_Unwind_Restore_WMMXD>:
    2c20:	ecf0 0102 	ldfe	f0, [r0], #8
    2c24:	ecf0 1102 	ldfe	f1, [r0], #8
    2c28:	ecf0 2102 	ldfe	f2, [r0], #8
    2c2c:	ecf0 3102 	ldfe	f3, [r0], #8
    2c30:	ecf0 4102 	ldfe	f4, [r0], #8
    2c34:	ecf0 5102 	ldfe	f5, [r0], #8
    2c38:	ecf0 6102 	ldfe	f6, [r0], #8
    2c3c:	ecf0 7102 	ldfe	f7, [r0], #8
    2c40:	ecf0 8102 	ldfp	f0, [r0], #8
    2c44:	ecf0 9102 	ldfp	f1, [r0], #8
    2c48:	ecf0 a102 	ldfp	f2, [r0], #8
    2c4c:	ecf0 b102 	ldfp	f3, [r0], #8
    2c50:	ecf0 c102 	ldfp	f4, [r0], #8
    2c54:	ecf0 d102 	ldfp	f5, [r0], #8
    2c58:	ecf0 e102 	ldfp	f6, [r0], #8
    2c5c:	ecf0 f102 	ldfp	f7, [r0], #8
    2c60:	4770      	bx	lr
    2c62:	bf00      	nop

00002c64 <__gnu_Unwind_Save_WMMXD>:
    2c64:	ece0 0102 	stfe	f0, [r0], #8
    2c68:	ece0 1102 	stfe	f1, [r0], #8
    2c6c:	ece0 2102 	stfe	f2, [r0], #8
    2c70:	ece0 3102 	stfe	f3, [r0], #8
    2c74:	ece0 4102 	stfe	f4, [r0], #8
    2c78:	ece0 5102 	stfe	f5, [r0], #8
    2c7c:	ece0 6102 	stfe	f6, [r0], #8
    2c80:	ece0 7102 	stfe	f7, [r0], #8
    2c84:	ece0 8102 	stfp	f0, [r0], #8
    2c88:	ece0 9102 	stfp	f1, [r0], #8
    2c8c:	ece0 a102 	stfp	f2, [r0], #8
    2c90:	ece0 b102 	stfp	f3, [r0], #8
    2c94:	ece0 c102 	stfp	f4, [r0], #8
    2c98:	ece0 d102 	stfp	f5, [r0], #8
    2c9c:	ece0 e102 	stfp	f6, [r0], #8
    2ca0:	ece0 f102 	stfp	f7, [r0], #8
    2ca4:	4770      	bx	lr
    2ca6:	bf00      	nop

00002ca8 <__gnu_Unwind_Restore_WMMXC>:
    2ca8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    2cac:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    2cb0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    2cb4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    2cb8:	4770      	bx	lr
    2cba:	bf00      	nop

00002cbc <__gnu_Unwind_Save_WMMXC>:
    2cbc:	fca0 8101 	stc2	1, cr8, [r0], #4
    2cc0:	fca0 9101 	stc2	1, cr9, [r0], #4
    2cc4:	fca0 a101 	stc2	1, cr10, [r0], #4
    2cc8:	fca0 b101 	stc2	1, cr11, [r0], #4
    2ccc:	4770      	bx	lr
    2cce:	bf00      	nop

00002cd0 <_Unwind_RaiseException>:
    2cd0:	46ec      	mov	ip, sp
    2cd2:	b500      	push	{lr}
    2cd4:	e92d 5000 	stmdb	sp!, {ip, lr}
    2cd8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2cdc:	f04f 0300 	mov.w	r3, #0
    2ce0:	e92d 000c 	stmdb	sp!, {r2, r3}
    2ce4:	a901      	add	r1, sp, #4
    2ce6:	f7ff fbe5 	bl	24b4 <__gnu_Unwind_RaiseException>
    2cea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    2cee:	b012      	add	sp, #72	; 0x48
    2cf0:	4770      	bx	lr
    2cf2:	bf00      	nop

00002cf4 <_Unwind_Resume>:
    2cf4:	46ec      	mov	ip, sp
    2cf6:	b500      	push	{lr}
    2cf8:	e92d 5000 	stmdb	sp!, {ip, lr}
    2cfc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2d00:	f04f 0300 	mov.w	r3, #0
    2d04:	e92d 000c 	stmdb	sp!, {r2, r3}
    2d08:	a901      	add	r1, sp, #4
    2d0a:	f7ff fc0d 	bl	2528 <__gnu_Unwind_Resume>
    2d0e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    2d12:	b012      	add	sp, #72	; 0x48
    2d14:	4770      	bx	lr
    2d16:	bf00      	nop

00002d18 <_Unwind_Resume_or_Rethrow>:
    2d18:	46ec      	mov	ip, sp
    2d1a:	b500      	push	{lr}
    2d1c:	e92d 5000 	stmdb	sp!, {ip, lr}
    2d20:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2d24:	f04f 0300 	mov.w	r3, #0
    2d28:	e92d 000c 	stmdb	sp!, {r2, r3}
    2d2c:	a901      	add	r1, sp, #4
    2d2e:	f7ff fc1d 	bl	256c <__gnu_Unwind_Resume_or_Rethrow>
    2d32:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    2d36:	b012      	add	sp, #72	; 0x48
    2d38:	4770      	bx	lr
    2d3a:	bf00      	nop

00002d3c <_Unwind_ForcedUnwind>:
    2d3c:	46ec      	mov	ip, sp
    2d3e:	b500      	push	{lr}
    2d40:	e92d 5000 	stmdb	sp!, {ip, lr}
    2d44:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2d48:	f04f 0300 	mov.w	r3, #0
    2d4c:	e92d 000c 	stmdb	sp!, {r2, r3}
    2d50:	ab01      	add	r3, sp, #4
    2d52:	f7ff fbdf 	bl	2514 <__gnu_Unwind_ForcedUnwind>
    2d56:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    2d5a:	b012      	add	sp, #72	; 0x48
    2d5c:	4770      	bx	lr
    2d5e:	bf00      	nop

00002d60 <_Unwind_Backtrace>:
    2d60:	46ec      	mov	ip, sp
    2d62:	b500      	push	{lr}
    2d64:	e92d 5000 	stmdb	sp!, {ip, lr}
    2d68:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2d6c:	f04f 0300 	mov.w	r3, #0
    2d70:	e92d 000c 	stmdb	sp!, {r2, r3}
    2d74:	aa01      	add	r2, sp, #4
    2d76:	f7ff fc4d 	bl	2614 <__gnu_Unwind_Backtrace>
    2d7a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    2d7e:	b012      	add	sp, #72	; 0x48
    2d80:	4770      	bx	lr
    2d82:	bf00      	nop

00002d84 <next_unwind_byte>:
    2d84:	7a02      	ldrb	r2, [r0, #8]
    2d86:	b982      	cbnz	r2, 2daa <next_unwind_byte+0x26>
    2d88:	7a43      	ldrb	r3, [r0, #9]
    2d8a:	b1ab      	cbz	r3, 2db8 <next_unwind_byte+0x34>
    2d8c:	6842      	ldr	r2, [r0, #4]
    2d8e:	3b01      	subs	r3, #1
    2d90:	b410      	push	{r4}
    2d92:	7243      	strb	r3, [r0, #9]
    2d94:	6813      	ldr	r3, [r2, #0]
    2d96:	2103      	movs	r1, #3
    2d98:	1d14      	adds	r4, r2, #4
    2d9a:	7201      	strb	r1, [r0, #8]
    2d9c:	021a      	lsls	r2, r3, #8
    2d9e:	6044      	str	r4, [r0, #4]
    2da0:	6002      	str	r2, [r0, #0]
    2da2:	f85d 4b04 	ldr.w	r4, [sp], #4
    2da6:	0e18      	lsrs	r0, r3, #24
    2da8:	4770      	bx	lr
    2daa:	6803      	ldr	r3, [r0, #0]
    2dac:	3a01      	subs	r2, #1
    2dae:	7202      	strb	r2, [r0, #8]
    2db0:	021a      	lsls	r2, r3, #8
    2db2:	6002      	str	r2, [r0, #0]
    2db4:	0e18      	lsrs	r0, r3, #24
    2db6:	4770      	bx	lr
    2db8:	20b0      	movs	r0, #176	; 0xb0
    2dba:	4770      	bx	lr

00002dbc <_Unwind_GetGR.constprop.0>:
    2dbc:	b500      	push	{lr}
    2dbe:	b085      	sub	sp, #20
    2dc0:	aa03      	add	r2, sp, #12
    2dc2:	2300      	movs	r3, #0
    2dc4:	9200      	str	r2, [sp, #0]
    2dc6:	4619      	mov	r1, r3
    2dc8:	220c      	movs	r2, #12
    2dca:	f7ff fbdf 	bl	258c <_Unwind_VRS_Get>
    2dce:	9803      	ldr	r0, [sp, #12]
    2dd0:	b005      	add	sp, #20
    2dd2:	f85d fb04 	ldr.w	pc, [sp], #4
    2dd6:	bf00      	nop

00002dd8 <unwind_UCB_from_context>:
    2dd8:	e7f0      	b.n	2dbc <_Unwind_GetGR.constprop.0>
    2dda:	bf00      	nop

00002ddc <__gnu_unwind_execute>:
    2ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2de0:	4605      	mov	r5, r0
    2de2:	b085      	sub	sp, #20
    2de4:	460e      	mov	r6, r1
    2de6:	f04f 0800 	mov.w	r8, #0
    2dea:	4630      	mov	r0, r6
    2dec:	f7ff ffca 	bl	2d84 <next_unwind_byte>
    2df0:	28b0      	cmp	r0, #176	; 0xb0
    2df2:	4604      	mov	r4, r0
    2df4:	f000 80b2 	beq.w	2f5c <__gnu_unwind_execute+0x180>
    2df8:	0607      	lsls	r7, r0, #24
    2dfa:	d520      	bpl.n	2e3e <__gnu_unwind_execute+0x62>
    2dfc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    2e00:	2b80      	cmp	r3, #128	; 0x80
    2e02:	d04d      	beq.n	2ea0 <__gnu_unwind_execute+0xc4>
    2e04:	2b90      	cmp	r3, #144	; 0x90
    2e06:	d036      	beq.n	2e76 <__gnu_unwind_execute+0x9a>
    2e08:	2ba0      	cmp	r3, #160	; 0xa0
    2e0a:	d060      	beq.n	2ece <__gnu_unwind_execute+0xf2>
    2e0c:	2bb0      	cmp	r3, #176	; 0xb0
    2e0e:	d074      	beq.n	2efa <__gnu_unwind_execute+0x11e>
    2e10:	2bc0      	cmp	r3, #192	; 0xc0
    2e12:	f000 808b 	beq.w	2f2c <__gnu_unwind_execute+0x150>
    2e16:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    2e1a:	2bd0      	cmp	r3, #208	; 0xd0
    2e1c:	d10b      	bne.n	2e36 <__gnu_unwind_execute+0x5a>
    2e1e:	f000 0207 	and.w	r2, r0, #7
    2e22:	3201      	adds	r2, #1
    2e24:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    2e28:	2305      	movs	r3, #5
    2e2a:	2101      	movs	r1, #1
    2e2c:	4628      	mov	r0, r5
    2e2e:	f7ff fd93 	bl	2958 <_Unwind_VRS_Pop>
    2e32:	2800      	cmp	r0, #0
    2e34:	d0d9      	beq.n	2dea <__gnu_unwind_execute+0xe>
    2e36:	2009      	movs	r0, #9
    2e38:	b005      	add	sp, #20
    2e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2e3e:	f10d 090c 	add.w	r9, sp, #12
    2e42:	2300      	movs	r3, #0
    2e44:	4619      	mov	r1, r3
    2e46:	0087      	lsls	r7, r0, #2
    2e48:	f8cd 9000 	str.w	r9, [sp]
    2e4c:	220d      	movs	r2, #13
    2e4e:	4628      	mov	r0, r5
    2e50:	f7ff fb9c 	bl	258c <_Unwind_VRS_Get>
    2e54:	b2ff      	uxtb	r7, r7
    2e56:	9b03      	ldr	r3, [sp, #12]
    2e58:	f8cd 9000 	str.w	r9, [sp]
    2e5c:	3704      	adds	r7, #4
    2e5e:	0660      	lsls	r0, r4, #25
    2e60:	bf4c      	ite	mi
    2e62:	1bdf      	submi	r7, r3, r7
    2e64:	18ff      	addpl	r7, r7, r3
    2e66:	2300      	movs	r3, #0
    2e68:	4619      	mov	r1, r3
    2e6a:	220d      	movs	r2, #13
    2e6c:	4628      	mov	r0, r5
    2e6e:	9703      	str	r7, [sp, #12]
    2e70:	f7ff fbae 	bl	25d0 <_Unwind_VRS_Set>
    2e74:	e7b9      	b.n	2dea <__gnu_unwind_execute+0xe>
    2e76:	f000 030d 	and.w	r3, r0, #13
    2e7a:	2b0d      	cmp	r3, #13
    2e7c:	d0db      	beq.n	2e36 <__gnu_unwind_execute+0x5a>
    2e7e:	af03      	add	r7, sp, #12
    2e80:	2300      	movs	r3, #0
    2e82:	f000 020f 	and.w	r2, r0, #15
    2e86:	4619      	mov	r1, r3
    2e88:	9700      	str	r7, [sp, #0]
    2e8a:	4628      	mov	r0, r5
    2e8c:	f7ff fb7e 	bl	258c <_Unwind_VRS_Get>
    2e90:	2300      	movs	r3, #0
    2e92:	9700      	str	r7, [sp, #0]
    2e94:	4619      	mov	r1, r3
    2e96:	220d      	movs	r2, #13
    2e98:	4628      	mov	r0, r5
    2e9a:	f7ff fb99 	bl	25d0 <_Unwind_VRS_Set>
    2e9e:	e7a4      	b.n	2dea <__gnu_unwind_execute+0xe>
    2ea0:	4630      	mov	r0, r6
    2ea2:	f7ff ff6f 	bl	2d84 <next_unwind_byte>
    2ea6:	0224      	lsls	r4, r4, #8
    2ea8:	4304      	orrs	r4, r0
    2eaa:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    2eae:	d0c2      	beq.n	2e36 <__gnu_unwind_execute+0x5a>
    2eb0:	0124      	lsls	r4, r4, #4
    2eb2:	2300      	movs	r3, #0
    2eb4:	b2a2      	uxth	r2, r4
    2eb6:	4619      	mov	r1, r3
    2eb8:	4628      	mov	r0, r5
    2eba:	f7ff fd4d 	bl	2958 <_Unwind_VRS_Pop>
    2ebe:	2800      	cmp	r0, #0
    2ec0:	d1b9      	bne.n	2e36 <__gnu_unwind_execute+0x5a>
    2ec2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    2ec6:	bf18      	it	ne
    2ec8:	f04f 0801 	movne.w	r8, #1
    2ecc:	e78d      	b.n	2dea <__gnu_unwind_execute+0xe>
    2ece:	43c2      	mvns	r2, r0
    2ed0:	f002 0307 	and.w	r3, r2, #7
    2ed4:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    2ed8:	411a      	asrs	r2, r3
    2eda:	0701      	lsls	r1, r0, #28
    2edc:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    2ee0:	f04f 0300 	mov.w	r3, #0
    2ee4:	bf48      	it	mi
    2ee6:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    2eea:	4619      	mov	r1, r3
    2eec:	4628      	mov	r0, r5
    2eee:	f7ff fd33 	bl	2958 <_Unwind_VRS_Pop>
    2ef2:	2800      	cmp	r0, #0
    2ef4:	f43f af79 	beq.w	2dea <__gnu_unwind_execute+0xe>
    2ef8:	e79d      	b.n	2e36 <__gnu_unwind_execute+0x5a>
    2efa:	28b1      	cmp	r0, #177	; 0xb1
    2efc:	d033      	beq.n	2f66 <__gnu_unwind_execute+0x18a>
    2efe:	28b2      	cmp	r0, #178	; 0xb2
    2f00:	f000 80a0 	beq.w	3044 <__gnu_unwind_execute+0x268>
    2f04:	28b3      	cmp	r0, #179	; 0xb3
    2f06:	d041      	beq.n	2f8c <__gnu_unwind_execute+0x1b0>
    2f08:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    2f0c:	2bb4      	cmp	r3, #180	; 0xb4
    2f0e:	d092      	beq.n	2e36 <__gnu_unwind_execute+0x5a>
    2f10:	f000 0207 	and.w	r2, r0, #7
    2f14:	3201      	adds	r2, #1
    2f16:	2301      	movs	r3, #1
    2f18:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    2f1c:	4619      	mov	r1, r3
    2f1e:	4628      	mov	r0, r5
    2f20:	f7ff fd1a 	bl	2958 <_Unwind_VRS_Pop>
    2f24:	2800      	cmp	r0, #0
    2f26:	f43f af60 	beq.w	2dea <__gnu_unwind_execute+0xe>
    2f2a:	e784      	b.n	2e36 <__gnu_unwind_execute+0x5a>
    2f2c:	28c6      	cmp	r0, #198	; 0xc6
    2f2e:	d051      	beq.n	2fd4 <__gnu_unwind_execute+0x1f8>
    2f30:	28c7      	cmp	r0, #199	; 0xc7
    2f32:	d05a      	beq.n	2fea <__gnu_unwind_execute+0x20e>
    2f34:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    2f38:	2bc0      	cmp	r3, #192	; 0xc0
    2f3a:	d069      	beq.n	3010 <__gnu_unwind_execute+0x234>
    2f3c:	28c8      	cmp	r0, #200	; 0xc8
    2f3e:	d075      	beq.n	302c <__gnu_unwind_execute+0x250>
    2f40:	28c9      	cmp	r0, #201	; 0xc9
    2f42:	f47f af78 	bne.w	2e36 <__gnu_unwind_execute+0x5a>
    2f46:	4630      	mov	r0, r6
    2f48:	f7ff ff1c 	bl	2d84 <next_unwind_byte>
    2f4c:	0302      	lsls	r2, r0, #12
    2f4e:	f000 000f 	and.w	r0, r0, #15
    2f52:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    2f56:	3001      	adds	r0, #1
    2f58:	4302      	orrs	r2, r0
    2f5a:	e765      	b.n	2e28 <__gnu_unwind_execute+0x4c>
    2f5c:	f1b8 0f00 	cmp.w	r8, #0
    2f60:	d027      	beq.n	2fb2 <__gnu_unwind_execute+0x1d6>
    2f62:	2000      	movs	r0, #0
    2f64:	e768      	b.n	2e38 <__gnu_unwind_execute+0x5c>
    2f66:	4630      	mov	r0, r6
    2f68:	f7ff ff0c 	bl	2d84 <next_unwind_byte>
    2f6c:	2800      	cmp	r0, #0
    2f6e:	f43f af62 	beq.w	2e36 <__gnu_unwind_execute+0x5a>
    2f72:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    2f76:	f47f af5e 	bne.w	2e36 <__gnu_unwind_execute+0x5a>
    2f7a:	4602      	mov	r2, r0
    2f7c:	4619      	mov	r1, r3
    2f7e:	4628      	mov	r0, r5
    2f80:	f7ff fcea 	bl	2958 <_Unwind_VRS_Pop>
    2f84:	2800      	cmp	r0, #0
    2f86:	f43f af30 	beq.w	2dea <__gnu_unwind_execute+0xe>
    2f8a:	e754      	b.n	2e36 <__gnu_unwind_execute+0x5a>
    2f8c:	4630      	mov	r0, r6
    2f8e:	f7ff fef9 	bl	2d84 <next_unwind_byte>
    2f92:	0301      	lsls	r1, r0, #12
    2f94:	f000 000f 	and.w	r0, r0, #15
    2f98:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    2f9c:	1c42      	adds	r2, r0, #1
    2f9e:	2301      	movs	r3, #1
    2fa0:	430a      	orrs	r2, r1
    2fa2:	4628      	mov	r0, r5
    2fa4:	4619      	mov	r1, r3
    2fa6:	f7ff fcd7 	bl	2958 <_Unwind_VRS_Pop>
    2faa:	2800      	cmp	r0, #0
    2fac:	f43f af1d 	beq.w	2dea <__gnu_unwind_execute+0xe>
    2fb0:	e741      	b.n	2e36 <__gnu_unwind_execute+0x5a>
    2fb2:	ac03      	add	r4, sp, #12
    2fb4:	4643      	mov	r3, r8
    2fb6:	220e      	movs	r2, #14
    2fb8:	4641      	mov	r1, r8
    2fba:	9400      	str	r4, [sp, #0]
    2fbc:	4628      	mov	r0, r5
    2fbe:	f7ff fae5 	bl	258c <_Unwind_VRS_Get>
    2fc2:	9400      	str	r4, [sp, #0]
    2fc4:	4628      	mov	r0, r5
    2fc6:	4643      	mov	r3, r8
    2fc8:	220f      	movs	r2, #15
    2fca:	4641      	mov	r1, r8
    2fcc:	f7ff fb00 	bl	25d0 <_Unwind_VRS_Set>
    2fd0:	4640      	mov	r0, r8
    2fd2:	e731      	b.n	2e38 <__gnu_unwind_execute+0x5c>
    2fd4:	4630      	mov	r0, r6
    2fd6:	f7ff fed5 	bl	2d84 <next_unwind_byte>
    2fda:	0301      	lsls	r1, r0, #12
    2fdc:	f000 000f 	and.w	r0, r0, #15
    2fe0:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    2fe4:	1c42      	adds	r2, r0, #1
    2fe6:	2303      	movs	r3, #3
    2fe8:	e7da      	b.n	2fa0 <__gnu_unwind_execute+0x1c4>
    2fea:	4630      	mov	r0, r6
    2fec:	f7ff feca 	bl	2d84 <next_unwind_byte>
    2ff0:	2800      	cmp	r0, #0
    2ff2:	f43f af20 	beq.w	2e36 <__gnu_unwind_execute+0x5a>
    2ff6:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    2ffa:	f47f af1c 	bne.w	2e36 <__gnu_unwind_execute+0x5a>
    2ffe:	4602      	mov	r2, r0
    3000:	2104      	movs	r1, #4
    3002:	4628      	mov	r0, r5
    3004:	f7ff fca8 	bl	2958 <_Unwind_VRS_Pop>
    3008:	2800      	cmp	r0, #0
    300a:	f43f aeee 	beq.w	2dea <__gnu_unwind_execute+0xe>
    300e:	e712      	b.n	2e36 <__gnu_unwind_execute+0x5a>
    3010:	f000 020f 	and.w	r2, r0, #15
    3014:	3201      	adds	r2, #1
    3016:	2303      	movs	r3, #3
    3018:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    301c:	4619      	mov	r1, r3
    301e:	4628      	mov	r0, r5
    3020:	f7ff fc9a 	bl	2958 <_Unwind_VRS_Pop>
    3024:	2800      	cmp	r0, #0
    3026:	f43f aee0 	beq.w	2dea <__gnu_unwind_execute+0xe>
    302a:	e704      	b.n	2e36 <__gnu_unwind_execute+0x5a>
    302c:	4630      	mov	r0, r6
    302e:	f7ff fea9 	bl	2d84 <next_unwind_byte>
    3032:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    3036:	f000 030f 	and.w	r3, r0, #15
    303a:	3210      	adds	r2, #16
    303c:	3301      	adds	r3, #1
    303e:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    3042:	e6f1      	b.n	2e28 <__gnu_unwind_execute+0x4c>
    3044:	2300      	movs	r3, #0
    3046:	f10d 090c 	add.w	r9, sp, #12
    304a:	220d      	movs	r2, #13
    304c:	4619      	mov	r1, r3
    304e:	f8cd 9000 	str.w	r9, [sp]
    3052:	4628      	mov	r0, r5
    3054:	f7ff fa9a 	bl	258c <_Unwind_VRS_Get>
    3058:	4630      	mov	r0, r6
    305a:	f7ff fe93 	bl	2d84 <next_unwind_byte>
    305e:	0602      	lsls	r2, r0, #24
    3060:	f04f 0702 	mov.w	r7, #2
    3064:	d50c      	bpl.n	3080 <__gnu_unwind_execute+0x2a4>
    3066:	9b03      	ldr	r3, [sp, #12]
    3068:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    306c:	40b8      	lsls	r0, r7
    306e:	4403      	add	r3, r0
    3070:	4630      	mov	r0, r6
    3072:	9303      	str	r3, [sp, #12]
    3074:	f7ff fe86 	bl	2d84 <next_unwind_byte>
    3078:	0603      	lsls	r3, r0, #24
    307a:	f107 0707 	add.w	r7, r7, #7
    307e:	d4f2      	bmi.n	3066 <__gnu_unwind_execute+0x28a>
    3080:	9b03      	ldr	r3, [sp, #12]
    3082:	f8cd 9000 	str.w	r9, [sp]
    3086:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    308a:	f503 7201 	add.w	r2, r3, #516	; 0x204
    308e:	40bc      	lsls	r4, r7
    3090:	2300      	movs	r3, #0
    3092:	4414      	add	r4, r2
    3094:	4619      	mov	r1, r3
    3096:	220d      	movs	r2, #13
    3098:	4628      	mov	r0, r5
    309a:	9403      	str	r4, [sp, #12]
    309c:	f7ff fa98 	bl	25d0 <_Unwind_VRS_Set>
    30a0:	e6a3      	b.n	2dea <__gnu_unwind_execute+0xe>
    30a2:	bf00      	nop

000030a4 <__gnu_unwind_frame>:
    30a4:	b510      	push	{r4, lr}
    30a6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    30a8:	b084      	sub	sp, #16
    30aa:	685a      	ldr	r2, [r3, #4]
    30ac:	2003      	movs	r0, #3
    30ae:	f88d 000c 	strb.w	r0, [sp, #12]
    30b2:	79dc      	ldrb	r4, [r3, #7]
    30b4:	f88d 400d 	strb.w	r4, [sp, #13]
    30b8:	0212      	lsls	r2, r2, #8
    30ba:	3308      	adds	r3, #8
    30bc:	4608      	mov	r0, r1
    30be:	a901      	add	r1, sp, #4
    30c0:	9201      	str	r2, [sp, #4]
    30c2:	9302      	str	r3, [sp, #8]
    30c4:	f7ff fe8a 	bl	2ddc <__gnu_unwind_execute>
    30c8:	b004      	add	sp, #16
    30ca:	bd10      	pop	{r4, pc}

000030cc <_Unwind_GetRegionStart>:
    30cc:	b508      	push	{r3, lr}
    30ce:	f7ff fe83 	bl	2dd8 <unwind_UCB_from_context>
    30d2:	6c80      	ldr	r0, [r0, #72]	; 0x48
    30d4:	bd08      	pop	{r3, pc}
    30d6:	bf00      	nop

000030d8 <_Unwind_GetLanguageSpecificData>:
    30d8:	b508      	push	{r3, lr}
    30da:	f7ff fe7d 	bl	2dd8 <unwind_UCB_from_context>
    30de:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    30e0:	79c3      	ldrb	r3, [r0, #7]
    30e2:	3302      	adds	r3, #2
    30e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    30e8:	bd08      	pop	{r3, pc}
    30ea:	bf00      	nop

000030ec <abort>:
    30ec:	b508      	push	{r3, lr}
    30ee:	2006      	movs	r0, #6
    30f0:	f000 f918 	bl	3324 <raise>
    30f4:	2001      	movs	r0, #1
    30f6:	f000 fb83 	bl	3800 <_exit>
	...

000030fc <__cxa_atexit>:
    30fc:	b510      	push	{r4, lr}
    30fe:	4c05      	ldr	r4, [pc, #20]	; (3114 <__cxa_atexit+0x18>)
    3100:	4613      	mov	r3, r2
    3102:	b12c      	cbz	r4, 3110 <__cxa_atexit+0x14>
    3104:	460a      	mov	r2, r1
    3106:	4601      	mov	r1, r0
    3108:	2002      	movs	r0, #2
    310a:	f3af 8000 	nop.w
    310e:	bd10      	pop	{r4, pc}
    3110:	4620      	mov	r0, r4
    3112:	e7fc      	b.n	310e <__cxa_atexit+0x12>
    3114:	00000000 	.word	0x00000000

00003118 <malloc>:
    3118:	4b02      	ldr	r3, [pc, #8]	; (3124 <malloc+0xc>)
    311a:	4601      	mov	r1, r0
    311c:	6818      	ldr	r0, [r3, #0]
    311e:	f000 b86f 	b.w	3200 <_malloc_r>
    3122:	bf00      	nop
    3124:	20000010 	.word	0x20000010

00003128 <free>:
    3128:	4b02      	ldr	r3, [pc, #8]	; (3134 <free+0xc>)
    312a:	4601      	mov	r1, r0
    312c:	6818      	ldr	r0, [r3, #0]
    312e:	f000 b819 	b.w	3164 <_free_r>
    3132:	bf00      	nop
    3134:	20000010 	.word	0x20000010

00003138 <memcpy>:
    3138:	440a      	add	r2, r1
    313a:	4291      	cmp	r1, r2
    313c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    3140:	d100      	bne.n	3144 <memcpy+0xc>
    3142:	4770      	bx	lr
    3144:	b510      	push	{r4, lr}
    3146:	f811 4b01 	ldrb.w	r4, [r1], #1
    314a:	f803 4f01 	strb.w	r4, [r3, #1]!
    314e:	4291      	cmp	r1, r2
    3150:	d1f9      	bne.n	3146 <memcpy+0xe>
    3152:	bd10      	pop	{r4, pc}

00003154 <memset>:
    3154:	4402      	add	r2, r0
    3156:	4603      	mov	r3, r0
    3158:	4293      	cmp	r3, r2
    315a:	d100      	bne.n	315e <memset+0xa>
    315c:	4770      	bx	lr
    315e:	f803 1b01 	strb.w	r1, [r3], #1
    3162:	e7f9      	b.n	3158 <memset+0x4>

00003164 <_free_r>:
    3164:	b538      	push	{r3, r4, r5, lr}
    3166:	4605      	mov	r5, r0
    3168:	2900      	cmp	r1, #0
    316a:	d045      	beq.n	31f8 <_free_r+0x94>
    316c:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3170:	1f0c      	subs	r4, r1, #4
    3172:	2b00      	cmp	r3, #0
    3174:	bfb8      	it	lt
    3176:	18e4      	addlt	r4, r4, r3
    3178:	f000 f8f0 	bl	335c <__malloc_lock>
    317c:	4a1f      	ldr	r2, [pc, #124]	; (31fc <_free_r+0x98>)
    317e:	6813      	ldr	r3, [r2, #0]
    3180:	4610      	mov	r0, r2
    3182:	b933      	cbnz	r3, 3192 <_free_r+0x2e>
    3184:	6063      	str	r3, [r4, #4]
    3186:	6014      	str	r4, [r2, #0]
    3188:	4628      	mov	r0, r5
    318a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    318e:	f000 b8eb 	b.w	3368 <__malloc_unlock>
    3192:	42a3      	cmp	r3, r4
    3194:	d90c      	bls.n	31b0 <_free_r+0x4c>
    3196:	6821      	ldr	r1, [r4, #0]
    3198:	1862      	adds	r2, r4, r1
    319a:	4293      	cmp	r3, r2
    319c:	bf04      	itt	eq
    319e:	681a      	ldreq	r2, [r3, #0]
    31a0:	685b      	ldreq	r3, [r3, #4]
    31a2:	6063      	str	r3, [r4, #4]
    31a4:	bf04      	itt	eq
    31a6:	1852      	addeq	r2, r2, r1
    31a8:	6022      	streq	r2, [r4, #0]
    31aa:	6004      	str	r4, [r0, #0]
    31ac:	e7ec      	b.n	3188 <_free_r+0x24>
    31ae:	4613      	mov	r3, r2
    31b0:	685a      	ldr	r2, [r3, #4]
    31b2:	b10a      	cbz	r2, 31b8 <_free_r+0x54>
    31b4:	42a2      	cmp	r2, r4
    31b6:	d9fa      	bls.n	31ae <_free_r+0x4a>
    31b8:	6819      	ldr	r1, [r3, #0]
    31ba:	1858      	adds	r0, r3, r1
    31bc:	42a0      	cmp	r0, r4
    31be:	d10b      	bne.n	31d8 <_free_r+0x74>
    31c0:	6820      	ldr	r0, [r4, #0]
    31c2:	4401      	add	r1, r0
    31c4:	1858      	adds	r0, r3, r1
    31c6:	4282      	cmp	r2, r0
    31c8:	6019      	str	r1, [r3, #0]
    31ca:	d1dd      	bne.n	3188 <_free_r+0x24>
    31cc:	6810      	ldr	r0, [r2, #0]
    31ce:	6852      	ldr	r2, [r2, #4]
    31d0:	605a      	str	r2, [r3, #4]
    31d2:	4401      	add	r1, r0
    31d4:	6019      	str	r1, [r3, #0]
    31d6:	e7d7      	b.n	3188 <_free_r+0x24>
    31d8:	d902      	bls.n	31e0 <_free_r+0x7c>
    31da:	230c      	movs	r3, #12
    31dc:	602b      	str	r3, [r5, #0]
    31de:	e7d3      	b.n	3188 <_free_r+0x24>
    31e0:	6820      	ldr	r0, [r4, #0]
    31e2:	1821      	adds	r1, r4, r0
    31e4:	428a      	cmp	r2, r1
    31e6:	bf04      	itt	eq
    31e8:	6811      	ldreq	r1, [r2, #0]
    31ea:	6852      	ldreq	r2, [r2, #4]
    31ec:	6062      	str	r2, [r4, #4]
    31ee:	bf04      	itt	eq
    31f0:	1809      	addeq	r1, r1, r0
    31f2:	6021      	streq	r1, [r4, #0]
    31f4:	605c      	str	r4, [r3, #4]
    31f6:	e7c7      	b.n	3188 <_free_r+0x24>
    31f8:	bd38      	pop	{r3, r4, r5, pc}
    31fa:	bf00      	nop
    31fc:	20000164 	.word	0x20000164

00003200 <_malloc_r>:
    3200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3202:	1ccd      	adds	r5, r1, #3
    3204:	f025 0503 	bic.w	r5, r5, #3
    3208:	3508      	adds	r5, #8
    320a:	2d0c      	cmp	r5, #12
    320c:	bf38      	it	cc
    320e:	250c      	movcc	r5, #12
    3210:	2d00      	cmp	r5, #0
    3212:	4606      	mov	r6, r0
    3214:	db01      	blt.n	321a <_malloc_r+0x1a>
    3216:	42a9      	cmp	r1, r5
    3218:	d903      	bls.n	3222 <_malloc_r+0x22>
    321a:	230c      	movs	r3, #12
    321c:	6033      	str	r3, [r6, #0]
    321e:	2000      	movs	r0, #0
    3220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3222:	f000 f89b 	bl	335c <__malloc_lock>
    3226:	4921      	ldr	r1, [pc, #132]	; (32ac <_malloc_r+0xac>)
    3228:	680a      	ldr	r2, [r1, #0]
    322a:	4614      	mov	r4, r2
    322c:	b99c      	cbnz	r4, 3256 <_malloc_r+0x56>
    322e:	4f20      	ldr	r7, [pc, #128]	; (32b0 <_malloc_r+0xb0>)
    3230:	683b      	ldr	r3, [r7, #0]
    3232:	b923      	cbnz	r3, 323e <_malloc_r+0x3e>
    3234:	4621      	mov	r1, r4
    3236:	4630      	mov	r0, r6
    3238:	f000 f83c 	bl	32b4 <_sbrk_r>
    323c:	6038      	str	r0, [r7, #0]
    323e:	4629      	mov	r1, r5
    3240:	4630      	mov	r0, r6
    3242:	f000 f837 	bl	32b4 <_sbrk_r>
    3246:	1c43      	adds	r3, r0, #1
    3248:	d123      	bne.n	3292 <_malloc_r+0x92>
    324a:	230c      	movs	r3, #12
    324c:	6033      	str	r3, [r6, #0]
    324e:	4630      	mov	r0, r6
    3250:	f000 f88a 	bl	3368 <__malloc_unlock>
    3254:	e7e3      	b.n	321e <_malloc_r+0x1e>
    3256:	6823      	ldr	r3, [r4, #0]
    3258:	1b5b      	subs	r3, r3, r5
    325a:	d417      	bmi.n	328c <_malloc_r+0x8c>
    325c:	2b0b      	cmp	r3, #11
    325e:	d903      	bls.n	3268 <_malloc_r+0x68>
    3260:	6023      	str	r3, [r4, #0]
    3262:	441c      	add	r4, r3
    3264:	6025      	str	r5, [r4, #0]
    3266:	e004      	b.n	3272 <_malloc_r+0x72>
    3268:	6863      	ldr	r3, [r4, #4]
    326a:	42a2      	cmp	r2, r4
    326c:	bf0c      	ite	eq
    326e:	600b      	streq	r3, [r1, #0]
    3270:	6053      	strne	r3, [r2, #4]
    3272:	4630      	mov	r0, r6
    3274:	f000 f878 	bl	3368 <__malloc_unlock>
    3278:	f104 000b 	add.w	r0, r4, #11
    327c:	1d23      	adds	r3, r4, #4
    327e:	f020 0007 	bic.w	r0, r0, #7
    3282:	1ac2      	subs	r2, r0, r3
    3284:	d0cc      	beq.n	3220 <_malloc_r+0x20>
    3286:	1a1b      	subs	r3, r3, r0
    3288:	50a3      	str	r3, [r4, r2]
    328a:	e7c9      	b.n	3220 <_malloc_r+0x20>
    328c:	4622      	mov	r2, r4
    328e:	6864      	ldr	r4, [r4, #4]
    3290:	e7cc      	b.n	322c <_malloc_r+0x2c>
    3292:	1cc4      	adds	r4, r0, #3
    3294:	f024 0403 	bic.w	r4, r4, #3
    3298:	42a0      	cmp	r0, r4
    329a:	d0e3      	beq.n	3264 <_malloc_r+0x64>
    329c:	1a21      	subs	r1, r4, r0
    329e:	4630      	mov	r0, r6
    32a0:	f000 f808 	bl	32b4 <_sbrk_r>
    32a4:	3001      	adds	r0, #1
    32a6:	d1dd      	bne.n	3264 <_malloc_r+0x64>
    32a8:	e7cf      	b.n	324a <_malloc_r+0x4a>
    32aa:	bf00      	nop
    32ac:	20000164 	.word	0x20000164
    32b0:	20000168 	.word	0x20000168

000032b4 <_sbrk_r>:
    32b4:	b538      	push	{r3, r4, r5, lr}
    32b6:	4c06      	ldr	r4, [pc, #24]	; (32d0 <_sbrk_r+0x1c>)
    32b8:	2300      	movs	r3, #0
    32ba:	4605      	mov	r5, r0
    32bc:	4608      	mov	r0, r1
    32be:	6023      	str	r3, [r4, #0]
    32c0:	f000 f962 	bl	3588 <_sbrk>
    32c4:	1c43      	adds	r3, r0, #1
    32c6:	d102      	bne.n	32ce <_sbrk_r+0x1a>
    32c8:	6823      	ldr	r3, [r4, #0]
    32ca:	b103      	cbz	r3, 32ce <_sbrk_r+0x1a>
    32cc:	602b      	str	r3, [r5, #0]
    32ce:	bd38      	pop	{r3, r4, r5, pc}
    32d0:	20000210 	.word	0x20000210

000032d4 <_raise_r>:
    32d4:	291f      	cmp	r1, #31
    32d6:	b538      	push	{r3, r4, r5, lr}
    32d8:	4604      	mov	r4, r0
    32da:	460d      	mov	r5, r1
    32dc:	d904      	bls.n	32e8 <_raise_r+0x14>
    32de:	2316      	movs	r3, #22
    32e0:	6003      	str	r3, [r0, #0]
    32e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    32e6:	bd38      	pop	{r3, r4, r5, pc}
    32e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
    32ea:	b112      	cbz	r2, 32f2 <_raise_r+0x1e>
    32ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    32f0:	b94b      	cbnz	r3, 3306 <_raise_r+0x32>
    32f2:	4620      	mov	r0, r4
    32f4:	f000 f830 	bl	3358 <_getpid_r>
    32f8:	462a      	mov	r2, r5
    32fa:	4601      	mov	r1, r0
    32fc:	4620      	mov	r0, r4
    32fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3302:	f000 b817 	b.w	3334 <_kill_r>
    3306:	2b01      	cmp	r3, #1
    3308:	d00a      	beq.n	3320 <_raise_r+0x4c>
    330a:	1c59      	adds	r1, r3, #1
    330c:	d103      	bne.n	3316 <_raise_r+0x42>
    330e:	2316      	movs	r3, #22
    3310:	6003      	str	r3, [r0, #0]
    3312:	2001      	movs	r0, #1
    3314:	e7e7      	b.n	32e6 <_raise_r+0x12>
    3316:	2400      	movs	r4, #0
    3318:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    331c:	4628      	mov	r0, r5
    331e:	4798      	blx	r3
    3320:	2000      	movs	r0, #0
    3322:	e7e0      	b.n	32e6 <_raise_r+0x12>

00003324 <raise>:
    3324:	4b02      	ldr	r3, [pc, #8]	; (3330 <raise+0xc>)
    3326:	4601      	mov	r1, r0
    3328:	6818      	ldr	r0, [r3, #0]
    332a:	f7ff bfd3 	b.w	32d4 <_raise_r>
    332e:	bf00      	nop
    3330:	20000010 	.word	0x20000010

00003334 <_kill_r>:
    3334:	b538      	push	{r3, r4, r5, lr}
    3336:	4c07      	ldr	r4, [pc, #28]	; (3354 <_kill_r+0x20>)
    3338:	2300      	movs	r3, #0
    333a:	4605      	mov	r5, r0
    333c:	4608      	mov	r0, r1
    333e:	4611      	mov	r1, r2
    3340:	6023      	str	r3, [r4, #0]
    3342:	f000 fa7b 	bl	383c <_kill>
    3346:	1c43      	adds	r3, r0, #1
    3348:	d102      	bne.n	3350 <_kill_r+0x1c>
    334a:	6823      	ldr	r3, [r4, #0]
    334c:	b103      	cbz	r3, 3350 <_kill_r+0x1c>
    334e:	602b      	str	r3, [r5, #0]
    3350:	bd38      	pop	{r3, r4, r5, pc}
    3352:	bf00      	nop
    3354:	20000210 	.word	0x20000210

00003358 <_getpid_r>:
    3358:	f000 b914 	b.w	3584 <_getpid>

0000335c <__malloc_lock>:
    335c:	4801      	ldr	r0, [pc, #4]	; (3364 <__malloc_lock+0x8>)
    335e:	f000 b80a 	b.w	3376 <__retarget_lock_acquire_recursive>
    3362:	bf00      	nop
    3364:	20000218 	.word	0x20000218

00003368 <__malloc_unlock>:
    3368:	4801      	ldr	r0, [pc, #4]	; (3370 <__malloc_unlock+0x8>)
    336a:	f000 b805 	b.w	3378 <__retarget_lock_release_recursive>
    336e:	bf00      	nop
    3370:	20000218 	.word	0x20000218

00003374 <__retarget_lock_init_recursive>:
    3374:	4770      	bx	lr

00003376 <__retarget_lock_acquire_recursive>:
    3376:	4770      	bx	lr

00003378 <__retarget_lock_release_recursive>:
    3378:	4770      	bx	lr
	...

0000337c <findslot>:
    337c:	4b0a      	ldr	r3, [pc, #40]	; (33a8 <findslot+0x2c>)
    337e:	b510      	push	{r4, lr}
    3380:	4604      	mov	r4, r0
    3382:	6818      	ldr	r0, [r3, #0]
    3384:	b118      	cbz	r0, 338e <findslot+0x12>
    3386:	6983      	ldr	r3, [r0, #24]
    3388:	b90b      	cbnz	r3, 338e <findslot+0x12>
    338a:	f000 fac1 	bl	3910 <__sinit>
    338e:	2c13      	cmp	r4, #19
    3390:	d807      	bhi.n	33a2 <findslot+0x26>
    3392:	4806      	ldr	r0, [pc, #24]	; (33ac <findslot+0x30>)
    3394:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
    3398:	3301      	adds	r3, #1
    339a:	d002      	beq.n	33a2 <findslot+0x26>
    339c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    33a0:	bd10      	pop	{r4, pc}
    33a2:	2000      	movs	r0, #0
    33a4:	e7fc      	b.n	33a0 <findslot+0x24>
    33a6:	bf00      	nop
    33a8:	20000010 	.word	0x20000010
    33ac:	20000170 	.word	0x20000170

000033b0 <checkerror>:
    33b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33b2:	1c43      	adds	r3, r0, #1
    33b4:	4605      	mov	r5, r0
    33b6:	d109      	bne.n	33cc <checkerror+0x1c>
    33b8:	f000 fa4c 	bl	3854 <__errno>
    33bc:	2413      	movs	r4, #19
    33be:	4606      	mov	r6, r0
    33c0:	2700      	movs	r7, #0
    33c2:	4620      	mov	r0, r4
    33c4:	4639      	mov	r1, r7
    33c6:	beab      	bkpt	0x00ab
    33c8:	4604      	mov	r4, r0
    33ca:	6034      	str	r4, [r6, #0]
    33cc:	4628      	mov	r0, r5
    33ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000033d0 <error>:
    33d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33d2:	4605      	mov	r5, r0
    33d4:	f000 fa3e 	bl	3854 <__errno>
    33d8:	2413      	movs	r4, #19
    33da:	4606      	mov	r6, r0
    33dc:	2700      	movs	r7, #0
    33de:	4620      	mov	r0, r4
    33e0:	4639      	mov	r1, r7
    33e2:	beab      	bkpt	0x00ab
    33e4:	4604      	mov	r4, r0
    33e6:	6034      	str	r4, [r6, #0]
    33e8:	4628      	mov	r0, r5
    33ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000033ec <_swiread>:
    33ec:	b530      	push	{r4, r5, lr}
    33ee:	b085      	sub	sp, #20
    33f0:	e9cd 0101 	strd	r0, r1, [sp, #4]
    33f4:	9203      	str	r2, [sp, #12]
    33f6:	2406      	movs	r4, #6
    33f8:	ad01      	add	r5, sp, #4
    33fa:	4620      	mov	r0, r4
    33fc:	4629      	mov	r1, r5
    33fe:	beab      	bkpt	0x00ab
    3400:	4604      	mov	r4, r0
    3402:	4620      	mov	r0, r4
    3404:	f7ff ffd4 	bl	33b0 <checkerror>
    3408:	b005      	add	sp, #20
    340a:	bd30      	pop	{r4, r5, pc}

0000340c <_read>:
    340c:	b570      	push	{r4, r5, r6, lr}
    340e:	460e      	mov	r6, r1
    3410:	4615      	mov	r5, r2
    3412:	f7ff ffb3 	bl	337c <findslot>
    3416:	4604      	mov	r4, r0
    3418:	b930      	cbnz	r0, 3428 <_read+0x1c>
    341a:	f000 fa1b 	bl	3854 <__errno>
    341e:	2309      	movs	r3, #9
    3420:	6003      	str	r3, [r0, #0]
    3422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3426:	bd70      	pop	{r4, r5, r6, pc}
    3428:	462a      	mov	r2, r5
    342a:	4631      	mov	r1, r6
    342c:	6800      	ldr	r0, [r0, #0]
    342e:	f7ff ffdd 	bl	33ec <_swiread>
    3432:	1c43      	adds	r3, r0, #1
    3434:	bf1f      	itttt	ne
    3436:	6863      	ldrne	r3, [r4, #4]
    3438:	1a28      	subne	r0, r5, r0
    343a:	181b      	addne	r3, r3, r0
    343c:	6063      	strne	r3, [r4, #4]
    343e:	e7f2      	b.n	3426 <_read+0x1a>

00003440 <_swilseek>:
    3440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3442:	460c      	mov	r4, r1
    3444:	4616      	mov	r6, r2
    3446:	f7ff ff99 	bl	337c <findslot>
    344a:	4605      	mov	r5, r0
    344c:	b940      	cbnz	r0, 3460 <_swilseek+0x20>
    344e:	f000 fa01 	bl	3854 <__errno>
    3452:	2309      	movs	r3, #9
    3454:	6003      	str	r3, [r0, #0]
    3456:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    345a:	4620      	mov	r0, r4
    345c:	b003      	add	sp, #12
    345e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3460:	2e02      	cmp	r6, #2
    3462:	d903      	bls.n	346c <_swilseek+0x2c>
    3464:	f000 f9f6 	bl	3854 <__errno>
    3468:	2316      	movs	r3, #22
    346a:	e7f3      	b.n	3454 <_swilseek+0x14>
    346c:	2e01      	cmp	r6, #1
    346e:	d112      	bne.n	3496 <_swilseek+0x56>
    3470:	6843      	ldr	r3, [r0, #4]
    3472:	18e4      	adds	r4, r4, r3
    3474:	d4f6      	bmi.n	3464 <_swilseek+0x24>
    3476:	682b      	ldr	r3, [r5, #0]
    3478:	260a      	movs	r6, #10
    347a:	e9cd 3400 	strd	r3, r4, [sp]
    347e:	466f      	mov	r7, sp
    3480:	4630      	mov	r0, r6
    3482:	4639      	mov	r1, r7
    3484:	beab      	bkpt	0x00ab
    3486:	4606      	mov	r6, r0
    3488:	4630      	mov	r0, r6
    348a:	f7ff ff91 	bl	33b0 <checkerror>
    348e:	2800      	cmp	r0, #0
    3490:	dbe1      	blt.n	3456 <_swilseek+0x16>
    3492:	606c      	str	r4, [r5, #4]
    3494:	e7e1      	b.n	345a <_swilseek+0x1a>
    3496:	2e02      	cmp	r6, #2
    3498:	d1ed      	bne.n	3476 <_swilseek+0x36>
    349a:	6803      	ldr	r3, [r0, #0]
    349c:	9300      	str	r3, [sp, #0]
    349e:	260c      	movs	r6, #12
    34a0:	466f      	mov	r7, sp
    34a2:	4630      	mov	r0, r6
    34a4:	4639      	mov	r1, r7
    34a6:	beab      	bkpt	0x00ab
    34a8:	4606      	mov	r6, r0
    34aa:	4630      	mov	r0, r6
    34ac:	f7ff ff80 	bl	33b0 <checkerror>
    34b0:	1c43      	adds	r3, r0, #1
    34b2:	d0d0      	beq.n	3456 <_swilseek+0x16>
    34b4:	4404      	add	r4, r0
    34b6:	e7de      	b.n	3476 <_swilseek+0x36>

000034b8 <_lseek>:
    34b8:	f7ff bfc2 	b.w	3440 <_swilseek>

000034bc <_swiwrite>:
    34bc:	b530      	push	{r4, r5, lr}
    34be:	b085      	sub	sp, #20
    34c0:	e9cd 0101 	strd	r0, r1, [sp, #4]
    34c4:	9203      	str	r2, [sp, #12]
    34c6:	2405      	movs	r4, #5
    34c8:	ad01      	add	r5, sp, #4
    34ca:	4620      	mov	r0, r4
    34cc:	4629      	mov	r1, r5
    34ce:	beab      	bkpt	0x00ab
    34d0:	4604      	mov	r4, r0
    34d2:	4620      	mov	r0, r4
    34d4:	f7ff ff6c 	bl	33b0 <checkerror>
    34d8:	b005      	add	sp, #20
    34da:	bd30      	pop	{r4, r5, pc}

000034dc <_write>:
    34dc:	b570      	push	{r4, r5, r6, lr}
    34de:	460e      	mov	r6, r1
    34e0:	4615      	mov	r5, r2
    34e2:	f7ff ff4b 	bl	337c <findslot>
    34e6:	4604      	mov	r4, r0
    34e8:	b930      	cbnz	r0, 34f8 <_write+0x1c>
    34ea:	f000 f9b3 	bl	3854 <__errno>
    34ee:	2309      	movs	r3, #9
    34f0:	6003      	str	r3, [r0, #0]
    34f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    34f6:	bd70      	pop	{r4, r5, r6, pc}
    34f8:	462a      	mov	r2, r5
    34fa:	4631      	mov	r1, r6
    34fc:	6800      	ldr	r0, [r0, #0]
    34fe:	f7ff ffdd 	bl	34bc <_swiwrite>
    3502:	1e02      	subs	r2, r0, #0
    3504:	dbf5      	blt.n	34f2 <_write+0x16>
    3506:	6863      	ldr	r3, [r4, #4]
    3508:	1aa8      	subs	r0, r5, r2
    350a:	4403      	add	r3, r0
    350c:	42aa      	cmp	r2, r5
    350e:	6063      	str	r3, [r4, #4]
    3510:	d1f1      	bne.n	34f6 <_write+0x1a>
    3512:	2000      	movs	r0, #0
    3514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3518:	f7ff bf5a 	b.w	33d0 <error>

0000351c <_swiclose>:
    351c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    351e:	2402      	movs	r4, #2
    3520:	9001      	str	r0, [sp, #4]
    3522:	ad01      	add	r5, sp, #4
    3524:	4620      	mov	r0, r4
    3526:	4629      	mov	r1, r5
    3528:	beab      	bkpt	0x00ab
    352a:	4604      	mov	r4, r0
    352c:	4620      	mov	r0, r4
    352e:	f7ff ff3f 	bl	33b0 <checkerror>
    3532:	b003      	add	sp, #12
    3534:	bd30      	pop	{r4, r5, pc}
	...

00003538 <_close>:
    3538:	b538      	push	{r3, r4, r5, lr}
    353a:	4605      	mov	r5, r0
    353c:	f7ff ff1e 	bl	337c <findslot>
    3540:	4604      	mov	r4, r0
    3542:	b930      	cbnz	r0, 3552 <_close+0x1a>
    3544:	f000 f986 	bl	3854 <__errno>
    3548:	2309      	movs	r3, #9
    354a:	6003      	str	r3, [r0, #0]
    354c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3550:	bd38      	pop	{r3, r4, r5, pc}
    3552:	3d01      	subs	r5, #1
    3554:	2d01      	cmp	r5, #1
    3556:	d809      	bhi.n	356c <_close+0x34>
    3558:	4b09      	ldr	r3, [pc, #36]	; (3580 <_close+0x48>)
    355a:	689a      	ldr	r2, [r3, #8]
    355c:	691b      	ldr	r3, [r3, #16]
    355e:	429a      	cmp	r2, r3
    3560:	d104      	bne.n	356c <_close+0x34>
    3562:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3566:	6003      	str	r3, [r0, #0]
    3568:	2000      	movs	r0, #0
    356a:	e7f1      	b.n	3550 <_close+0x18>
    356c:	6820      	ldr	r0, [r4, #0]
    356e:	f7ff ffd5 	bl	351c <_swiclose>
    3572:	2800      	cmp	r0, #0
    3574:	d1ec      	bne.n	3550 <_close+0x18>
    3576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    357a:	6023      	str	r3, [r4, #0]
    357c:	e7e8      	b.n	3550 <_close+0x18>
    357e:	bf00      	nop
    3580:	20000170 	.word	0x20000170

00003584 <_getpid>:
    3584:	2001      	movs	r0, #1
    3586:	4770      	bx	lr

00003588 <_sbrk>:
    3588:	4b0d      	ldr	r3, [pc, #52]	; (35c0 <_sbrk+0x38>)
    358a:	6819      	ldr	r1, [r3, #0]
    358c:	b510      	push	{r4, lr}
    358e:	4602      	mov	r2, r0
    3590:	b909      	cbnz	r1, 3596 <_sbrk+0xe>
    3592:	490c      	ldr	r1, [pc, #48]	; (35c4 <_sbrk+0x3c>)
    3594:	6019      	str	r1, [r3, #0]
    3596:	6818      	ldr	r0, [r3, #0]
    3598:	4669      	mov	r1, sp
    359a:	4402      	add	r2, r0
    359c:	428a      	cmp	r2, r1
    359e:	d806      	bhi.n	35ae <_sbrk+0x26>
    35a0:	4909      	ldr	r1, [pc, #36]	; (35c8 <_sbrk+0x40>)
    35a2:	4c0a      	ldr	r4, [pc, #40]	; (35cc <_sbrk+0x44>)
    35a4:	6809      	ldr	r1, [r1, #0]
    35a6:	42a1      	cmp	r1, r4
    35a8:	d008      	beq.n	35bc <_sbrk+0x34>
    35aa:	428a      	cmp	r2, r1
    35ac:	d906      	bls.n	35bc <_sbrk+0x34>
    35ae:	f000 f951 	bl	3854 <__errno>
    35b2:	230c      	movs	r3, #12
    35b4:	6003      	str	r3, [r0, #0]
    35b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    35ba:	bd10      	pop	{r4, pc}
    35bc:	601a      	str	r2, [r3, #0]
    35be:	e7fc      	b.n	35ba <_sbrk+0x32>
    35c0:	2000016c 	.word	0x2000016c
    35c4:	20000220 	.word	0x20000220
    35c8:	20000074 	.word	0x20000074
    35cc:	cafedead 	.word	0xcafedead

000035d0 <_swistat>:
    35d0:	b570      	push	{r4, r5, r6, lr}
    35d2:	460c      	mov	r4, r1
    35d4:	f7ff fed2 	bl	337c <findslot>
    35d8:	4606      	mov	r6, r0
    35da:	b930      	cbnz	r0, 35ea <_swistat+0x1a>
    35dc:	f000 f93a 	bl	3854 <__errno>
    35e0:	2309      	movs	r3, #9
    35e2:	6003      	str	r3, [r0, #0]
    35e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    35e8:	bd70      	pop	{r4, r5, r6, pc}
    35ea:	6863      	ldr	r3, [r4, #4]
    35ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    35f0:	6063      	str	r3, [r4, #4]
    35f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    35f6:	6463      	str	r3, [r4, #68]	; 0x44
    35f8:	250c      	movs	r5, #12
    35fa:	4628      	mov	r0, r5
    35fc:	4631      	mov	r1, r6
    35fe:	beab      	bkpt	0x00ab
    3600:	4605      	mov	r5, r0
    3602:	4628      	mov	r0, r5
    3604:	f7ff fed4 	bl	33b0 <checkerror>
    3608:	1c43      	adds	r3, r0, #1
    360a:	bf1c      	itt	ne
    360c:	6120      	strne	r0, [r4, #16]
    360e:	2000      	movne	r0, #0
    3610:	e7ea      	b.n	35e8 <_swistat+0x18>

00003612 <_stat>:
    3612:	b538      	push	{r3, r4, r5, lr}
    3614:	460d      	mov	r5, r1
    3616:	4604      	mov	r4, r0
    3618:	2258      	movs	r2, #88	; 0x58
    361a:	2100      	movs	r1, #0
    361c:	4628      	mov	r0, r5
    361e:	f7ff fd99 	bl	3154 <memset>
    3622:	4620      	mov	r0, r4
    3624:	2100      	movs	r1, #0
    3626:	f000 f811 	bl	364c <_swiopen>
    362a:	1c43      	adds	r3, r0, #1
    362c:	4604      	mov	r4, r0
    362e:	d00b      	beq.n	3648 <_stat+0x36>
    3630:	686b      	ldr	r3, [r5, #4]
    3632:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
    3636:	606b      	str	r3, [r5, #4]
    3638:	4629      	mov	r1, r5
    363a:	f7ff ffc9 	bl	35d0 <_swistat>
    363e:	4605      	mov	r5, r0
    3640:	4620      	mov	r0, r4
    3642:	f7ff ff79 	bl	3538 <_close>
    3646:	462c      	mov	r4, r5
    3648:	4620      	mov	r0, r4
    364a:	bd38      	pop	{r3, r4, r5, pc}

0000364c <_swiopen>:
    364c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3650:	4b2a      	ldr	r3, [pc, #168]	; (36fc <_swiopen+0xb0>)
    3652:	b097      	sub	sp, #92	; 0x5c
    3654:	4681      	mov	r9, r0
    3656:	460e      	mov	r6, r1
    3658:	2500      	movs	r5, #0
    365a:	461f      	mov	r7, r3
    365c:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
    3660:	1c61      	adds	r1, r4, #1
    3662:	d037      	beq.n	36d4 <_swiopen+0x88>
    3664:	3501      	adds	r5, #1
    3666:	2d14      	cmp	r5, #20
    3668:	d1f8      	bne.n	365c <_swiopen+0x10>
    366a:	f000 f8f3 	bl	3854 <__errno>
    366e:	2318      	movs	r3, #24
    3670:	6003      	str	r3, [r0, #0]
    3672:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3676:	e03d      	b.n	36f4 <_swiopen+0xa8>
    3678:	f3c6 4400 	ubfx	r4, r6, #16, #1
    367c:	f240 6301 	movw	r3, #1537	; 0x601
    3680:	07b2      	lsls	r2, r6, #30
    3682:	bf48      	it	mi
    3684:	f044 0402 	orrmi.w	r4, r4, #2
    3688:	421e      	tst	r6, r3
    368a:	bf18      	it	ne
    368c:	f044 0404 	orrne.w	r4, r4, #4
    3690:	0733      	lsls	r3, r6, #28
    3692:	bf48      	it	mi
    3694:	f024 0404 	bicmi.w	r4, r4, #4
    3698:	4648      	mov	r0, r9
    369a:	bf48      	it	mi
    369c:	f044 0408 	orrmi.w	r4, r4, #8
    36a0:	f8cd 9000 	str.w	r9, [sp]
    36a4:	f000 fa13 	bl	3ace <strlen>
    36a8:	e9cd 4001 	strd	r4, r0, [sp, #4]
    36ac:	2401      	movs	r4, #1
    36ae:	4620      	mov	r0, r4
    36b0:	4641      	mov	r1, r8
    36b2:	beab      	bkpt	0x00ab
    36b4:	4604      	mov	r4, r0
    36b6:	2c00      	cmp	r4, #0
    36b8:	db07      	blt.n	36ca <_swiopen+0x7e>
    36ba:	f847 4035 	str.w	r4, [r7, r5, lsl #3]
    36be:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
    36c2:	2300      	movs	r3, #0
    36c4:	607b      	str	r3, [r7, #4]
    36c6:	462c      	mov	r4, r5
    36c8:	e014      	b.n	36f4 <_swiopen+0xa8>
    36ca:	4620      	mov	r0, r4
    36cc:	f7ff fe80 	bl	33d0 <error>
    36d0:	4604      	mov	r4, r0
    36d2:	e00f      	b.n	36f4 <_swiopen+0xa8>
    36d4:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
    36d8:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
    36dc:	46e8      	mov	r8, sp
    36de:	d1cb      	bne.n	3678 <_swiopen+0x2c>
    36e0:	4641      	mov	r1, r8
    36e2:	4648      	mov	r0, r9
    36e4:	f7ff ff95 	bl	3612 <_stat>
    36e8:	3001      	adds	r0, #1
    36ea:	d0c5      	beq.n	3678 <_swiopen+0x2c>
    36ec:	f000 f8b2 	bl	3854 <__errno>
    36f0:	2311      	movs	r3, #17
    36f2:	6003      	str	r3, [r0, #0]
    36f4:	4620      	mov	r0, r4
    36f6:	b017      	add	sp, #92	; 0x5c
    36f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    36fc:	20000170 	.word	0x20000170

00003700 <_get_semihosting_exts>:
    3700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3704:	4607      	mov	r7, r0
    3706:	4688      	mov	r8, r1
    3708:	4829      	ldr	r0, [pc, #164]	; (37b0 <_get_semihosting_exts+0xb0>)
    370a:	2100      	movs	r1, #0
    370c:	4615      	mov	r5, r2
    370e:	f7ff ff9d 	bl	364c <_swiopen>
    3712:	462a      	mov	r2, r5
    3714:	4604      	mov	r4, r0
    3716:	2100      	movs	r1, #0
    3718:	4638      	mov	r0, r7
    371a:	f7ff fd1b 	bl	3154 <memset>
    371e:	1c63      	adds	r3, r4, #1
    3720:	d015      	beq.n	374e <_get_semihosting_exts+0x4e>
    3722:	4620      	mov	r0, r4
    3724:	f7ff fe2a 	bl	337c <findslot>
    3728:	260c      	movs	r6, #12
    372a:	4681      	mov	r9, r0
    372c:	4630      	mov	r0, r6
    372e:	4649      	mov	r1, r9
    3730:	beab      	bkpt	0x00ab
    3732:	4606      	mov	r6, r0
    3734:	4630      	mov	r0, r6
    3736:	f7ff fe3b 	bl	33b0 <checkerror>
    373a:	2803      	cmp	r0, #3
    373c:	dd02      	ble.n	3744 <_get_semihosting_exts+0x44>
    373e:	3803      	subs	r0, #3
    3740:	42a8      	cmp	r0, r5
    3742:	dc08      	bgt.n	3756 <_get_semihosting_exts+0x56>
    3744:	4620      	mov	r0, r4
    3746:	f7ff fef7 	bl	3538 <_close>
    374a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    374e:	4620      	mov	r0, r4
    3750:	b003      	add	sp, #12
    3752:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    3756:	2204      	movs	r2, #4
    3758:	eb0d 0102 	add.w	r1, sp, r2
    375c:	4620      	mov	r0, r4
    375e:	f7ff fe55 	bl	340c <_read>
    3762:	2803      	cmp	r0, #3
    3764:	ddee      	ble.n	3744 <_get_semihosting_exts+0x44>
    3766:	f89d 3004 	ldrb.w	r3, [sp, #4]
    376a:	2b53      	cmp	r3, #83	; 0x53
    376c:	d1ea      	bne.n	3744 <_get_semihosting_exts+0x44>
    376e:	f89d 3005 	ldrb.w	r3, [sp, #5]
    3772:	2b48      	cmp	r3, #72	; 0x48
    3774:	d1e6      	bne.n	3744 <_get_semihosting_exts+0x44>
    3776:	f89d 3006 	ldrb.w	r3, [sp, #6]
    377a:	2b46      	cmp	r3, #70	; 0x46
    377c:	d1e2      	bne.n	3744 <_get_semihosting_exts+0x44>
    377e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3782:	2b42      	cmp	r3, #66	; 0x42
    3784:	d1de      	bne.n	3744 <_get_semihosting_exts+0x44>
    3786:	2201      	movs	r2, #1
    3788:	4641      	mov	r1, r8
    378a:	4620      	mov	r0, r4
    378c:	f7ff fe58 	bl	3440 <_swilseek>
    3790:	2800      	cmp	r0, #0
    3792:	dbd7      	blt.n	3744 <_get_semihosting_exts+0x44>
    3794:	462a      	mov	r2, r5
    3796:	4639      	mov	r1, r7
    3798:	4620      	mov	r0, r4
    379a:	f7ff fe37 	bl	340c <_read>
    379e:	4605      	mov	r5, r0
    37a0:	4620      	mov	r0, r4
    37a2:	f7ff fec9 	bl	3538 <_close>
    37a6:	4628      	mov	r0, r5
    37a8:	f7ff fe02 	bl	33b0 <checkerror>
    37ac:	4604      	mov	r4, r0
    37ae:	e7ce      	b.n	374e <_get_semihosting_exts+0x4e>
    37b0:	00003e00 	.word	0x00003e00

000037b4 <initialise_semihosting_exts>:
    37b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    37b6:	4d0a      	ldr	r5, [pc, #40]	; (37e0 <initialise_semihosting_exts+0x2c>)
    37b8:	4c0a      	ldr	r4, [pc, #40]	; (37e4 <initialise_semihosting_exts+0x30>)
    37ba:	2100      	movs	r1, #0
    37bc:	2201      	movs	r2, #1
    37be:	a801      	add	r0, sp, #4
    37c0:	6029      	str	r1, [r5, #0]
    37c2:	6022      	str	r2, [r4, #0]
    37c4:	f7ff ff9c 	bl	3700 <_get_semihosting_exts>
    37c8:	2800      	cmp	r0, #0
    37ca:	dd07      	ble.n	37dc <initialise_semihosting_exts+0x28>
    37cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    37d0:	f003 0201 	and.w	r2, r3, #1
    37d4:	f003 0302 	and.w	r3, r3, #2
    37d8:	602a      	str	r2, [r5, #0]
    37da:	6023      	str	r3, [r4, #0]
    37dc:	b003      	add	sp, #12
    37de:	bd30      	pop	{r4, r5, pc}
    37e0:	20000078 	.word	0x20000078
    37e4:	2000007c 	.word	0x2000007c

000037e8 <_has_ext_exit_extended>:
    37e8:	b510      	push	{r4, lr}
    37ea:	4c04      	ldr	r4, [pc, #16]	; (37fc <_has_ext_exit_extended+0x14>)
    37ec:	6822      	ldr	r2, [r4, #0]
    37ee:	2a00      	cmp	r2, #0
    37f0:	da01      	bge.n	37f6 <_has_ext_exit_extended+0xe>
    37f2:	f7ff ffdf 	bl	37b4 <initialise_semihosting_exts>
    37f6:	6820      	ldr	r0, [r4, #0]
    37f8:	bd10      	pop	{r4, pc}
    37fa:	bf00      	nop
    37fc:	20000078 	.word	0x20000078

00003800 <_exit>:
    3800:	4601      	mov	r1, r0
    3802:	b508      	push	{r3, lr}
    3804:	4a02      	ldr	r2, [pc, #8]	; (3810 <_exit+0x10>)
    3806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    380a:	f000 f803 	bl	3814 <_kill_shared>
    380e:	bf00      	nop
    3810:	00020026 	.word	0x00020026

00003814 <_kill_shared>:
    3814:	b507      	push	{r0, r1, r2, lr}
    3816:	e9cd 2100 	strd	r2, r1, [sp]
    381a:	f7ff ffe5 	bl	37e8 <_has_ext_exit_extended>
    381e:	2800      	cmp	r0, #0
    3820:	bf14      	ite	ne
    3822:	2420      	movne	r4, #32
    3824:	2418      	moveq	r4, #24
    3826:	f7ff ffdf 	bl	37e8 <_has_ext_exit_extended>
    382a:	b120      	cbz	r0, 3836 <_kill_shared+0x22>
    382c:	466d      	mov	r5, sp
    382e:	4620      	mov	r0, r4
    3830:	4629      	mov	r1, r5
    3832:	beab      	bkpt	0x00ab
    3834:	4604      	mov	r4, r0
    3836:	9d00      	ldr	r5, [sp, #0]
    3838:	e7f9      	b.n	382e <_kill_shared+0x1a>
	...

0000383c <_kill>:
    383c:	2906      	cmp	r1, #6
    383e:	b508      	push	{r3, lr}
    3840:	bf0c      	ite	eq
    3842:	4a02      	ldreq	r2, [pc, #8]	; (384c <_kill+0x10>)
    3844:	4a02      	ldrne	r2, [pc, #8]	; (3850 <_kill+0x14>)
    3846:	f7ff ffe5 	bl	3814 <_kill_shared>
    384a:	bf00      	nop
    384c:	00020023 	.word	0x00020023
    3850:	00020026 	.word	0x00020026

00003854 <__errno>:
    3854:	4b01      	ldr	r3, [pc, #4]	; (385c <__errno+0x8>)
    3856:	6818      	ldr	r0, [r3, #0]
    3858:	4770      	bx	lr
    385a:	bf00      	nop
    385c:	20000010 	.word	0x20000010

00003860 <std>:
    3860:	2300      	movs	r3, #0
    3862:	b510      	push	{r4, lr}
    3864:	4604      	mov	r4, r0
    3866:	e9c0 3300 	strd	r3, r3, [r0]
    386a:	6083      	str	r3, [r0, #8]
    386c:	8181      	strh	r1, [r0, #12]
    386e:	6643      	str	r3, [r0, #100]	; 0x64
    3870:	81c2      	strh	r2, [r0, #14]
    3872:	e9c0 3304 	strd	r3, r3, [r0, #16]
    3876:	6183      	str	r3, [r0, #24]
    3878:	4619      	mov	r1, r3
    387a:	2208      	movs	r2, #8
    387c:	305c      	adds	r0, #92	; 0x5c
    387e:	f7ff fc69 	bl	3154 <memset>
    3882:	4b05      	ldr	r3, [pc, #20]	; (3898 <std+0x38>)
    3884:	6263      	str	r3, [r4, #36]	; 0x24
    3886:	4b05      	ldr	r3, [pc, #20]	; (389c <std+0x3c>)
    3888:	62a3      	str	r3, [r4, #40]	; 0x28
    388a:	4b05      	ldr	r3, [pc, #20]	; (38a0 <std+0x40>)
    388c:	62e3      	str	r3, [r4, #44]	; 0x2c
    388e:	4b05      	ldr	r3, [pc, #20]	; (38a4 <std+0x44>)
    3890:	6224      	str	r4, [r4, #32]
    3892:	6323      	str	r3, [r4, #48]	; 0x30
    3894:	bd10      	pop	{r4, pc}
    3896:	bf00      	nop
    3898:	00003a49 	.word	0x00003a49
    389c:	00003a6b 	.word	0x00003a6b
    38a0:	00003aa3 	.word	0x00003aa3
    38a4:	00003ac7 	.word	0x00003ac7

000038a8 <_cleanup_r>:
    38a8:	4901      	ldr	r1, [pc, #4]	; (38b0 <_cleanup_r+0x8>)
    38aa:	f000 b8af 	b.w	3a0c <_fwalk_reent>
    38ae:	bf00      	nop
    38b0:	00003c31 	.word	0x00003c31

000038b4 <__sfmoreglue>:
    38b4:	b570      	push	{r4, r5, r6, lr}
    38b6:	1e4a      	subs	r2, r1, #1
    38b8:	2568      	movs	r5, #104	; 0x68
    38ba:	4355      	muls	r5, r2
    38bc:	460e      	mov	r6, r1
    38be:	f105 0174 	add.w	r1, r5, #116	; 0x74
    38c2:	f7ff fc9d 	bl	3200 <_malloc_r>
    38c6:	4604      	mov	r4, r0
    38c8:	b140      	cbz	r0, 38dc <__sfmoreglue+0x28>
    38ca:	2100      	movs	r1, #0
    38cc:	e9c0 1600 	strd	r1, r6, [r0]
    38d0:	300c      	adds	r0, #12
    38d2:	60a0      	str	r0, [r4, #8]
    38d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
    38d8:	f7ff fc3c 	bl	3154 <memset>
    38dc:	4620      	mov	r0, r4
    38de:	bd70      	pop	{r4, r5, r6, pc}

000038e0 <__sfp_lock_acquire>:
    38e0:	4801      	ldr	r0, [pc, #4]	; (38e8 <__sfp_lock_acquire+0x8>)
    38e2:	f7ff bd48 	b.w	3376 <__retarget_lock_acquire_recursive>
    38e6:	bf00      	nop
    38e8:	2000021c 	.word	0x2000021c

000038ec <__sfp_lock_release>:
    38ec:	4801      	ldr	r0, [pc, #4]	; (38f4 <__sfp_lock_release+0x8>)
    38ee:	f7ff bd43 	b.w	3378 <__retarget_lock_release_recursive>
    38f2:	bf00      	nop
    38f4:	2000021c 	.word	0x2000021c

000038f8 <__sinit_lock_acquire>:
    38f8:	4801      	ldr	r0, [pc, #4]	; (3900 <__sinit_lock_acquire+0x8>)
    38fa:	f7ff bd3c 	b.w	3376 <__retarget_lock_acquire_recursive>
    38fe:	bf00      	nop
    3900:	20000217 	.word	0x20000217

00003904 <__sinit_lock_release>:
    3904:	4801      	ldr	r0, [pc, #4]	; (390c <__sinit_lock_release+0x8>)
    3906:	f7ff bd37 	b.w	3378 <__retarget_lock_release_recursive>
    390a:	bf00      	nop
    390c:	20000217 	.word	0x20000217

00003910 <__sinit>:
    3910:	b510      	push	{r4, lr}
    3912:	4604      	mov	r4, r0
    3914:	f7ff fff0 	bl	38f8 <__sinit_lock_acquire>
    3918:	69a3      	ldr	r3, [r4, #24]
    391a:	b11b      	cbz	r3, 3924 <__sinit+0x14>
    391c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3920:	f7ff bff0 	b.w	3904 <__sinit_lock_release>
    3924:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    3928:	6523      	str	r3, [r4, #80]	; 0x50
    392a:	4b13      	ldr	r3, [pc, #76]	; (3978 <__sinit+0x68>)
    392c:	4a13      	ldr	r2, [pc, #76]	; (397c <__sinit+0x6c>)
    392e:	681b      	ldr	r3, [r3, #0]
    3930:	62a2      	str	r2, [r4, #40]	; 0x28
    3932:	42a3      	cmp	r3, r4
    3934:	bf04      	itt	eq
    3936:	2301      	moveq	r3, #1
    3938:	61a3      	streq	r3, [r4, #24]
    393a:	4620      	mov	r0, r4
    393c:	f000 f820 	bl	3980 <__sfp>
    3940:	6060      	str	r0, [r4, #4]
    3942:	4620      	mov	r0, r4
    3944:	f000 f81c 	bl	3980 <__sfp>
    3948:	60a0      	str	r0, [r4, #8]
    394a:	4620      	mov	r0, r4
    394c:	f000 f818 	bl	3980 <__sfp>
    3950:	2200      	movs	r2, #0
    3952:	60e0      	str	r0, [r4, #12]
    3954:	2104      	movs	r1, #4
    3956:	6860      	ldr	r0, [r4, #4]
    3958:	f7ff ff82 	bl	3860 <std>
    395c:	2201      	movs	r2, #1
    395e:	2109      	movs	r1, #9
    3960:	68a0      	ldr	r0, [r4, #8]
    3962:	f7ff ff7d 	bl	3860 <std>
    3966:	2202      	movs	r2, #2
    3968:	2112      	movs	r1, #18
    396a:	68e0      	ldr	r0, [r4, #12]
    396c:	f7ff ff78 	bl	3860 <std>
    3970:	2301      	movs	r3, #1
    3972:	61a3      	str	r3, [r4, #24]
    3974:	e7d2      	b.n	391c <__sinit+0xc>
    3976:	bf00      	nop
    3978:	00003dfc 	.word	0x00003dfc
    397c:	000038a9 	.word	0x000038a9

00003980 <__sfp>:
    3980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3982:	4607      	mov	r7, r0
    3984:	f7ff ffac 	bl	38e0 <__sfp_lock_acquire>
    3988:	4b1e      	ldr	r3, [pc, #120]	; (3a04 <__sfp+0x84>)
    398a:	681e      	ldr	r6, [r3, #0]
    398c:	69b3      	ldr	r3, [r6, #24]
    398e:	b913      	cbnz	r3, 3996 <__sfp+0x16>
    3990:	4630      	mov	r0, r6
    3992:	f7ff ffbd 	bl	3910 <__sinit>
    3996:	3648      	adds	r6, #72	; 0x48
    3998:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    399c:	3b01      	subs	r3, #1
    399e:	d503      	bpl.n	39a8 <__sfp+0x28>
    39a0:	6833      	ldr	r3, [r6, #0]
    39a2:	b30b      	cbz	r3, 39e8 <__sfp+0x68>
    39a4:	6836      	ldr	r6, [r6, #0]
    39a6:	e7f7      	b.n	3998 <__sfp+0x18>
    39a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    39ac:	b9d5      	cbnz	r5, 39e4 <__sfp+0x64>
    39ae:	4b16      	ldr	r3, [pc, #88]	; (3a08 <__sfp+0x88>)
    39b0:	60e3      	str	r3, [r4, #12]
    39b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
    39b6:	6665      	str	r5, [r4, #100]	; 0x64
    39b8:	f7ff fcdc 	bl	3374 <__retarget_lock_init_recursive>
    39bc:	f7ff ff96 	bl	38ec <__sfp_lock_release>
    39c0:	6025      	str	r5, [r4, #0]
    39c2:	e9c4 5501 	strd	r5, r5, [r4, #4]
    39c6:	e9c4 5504 	strd	r5, r5, [r4, #16]
    39ca:	61a5      	str	r5, [r4, #24]
    39cc:	2208      	movs	r2, #8
    39ce:	4629      	mov	r1, r5
    39d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    39d4:	f7ff fbbe 	bl	3154 <memset>
    39d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    39dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    39e0:	4620      	mov	r0, r4
    39e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    39e4:	3468      	adds	r4, #104	; 0x68
    39e6:	e7d9      	b.n	399c <__sfp+0x1c>
    39e8:	2104      	movs	r1, #4
    39ea:	4638      	mov	r0, r7
    39ec:	f7ff ff62 	bl	38b4 <__sfmoreglue>
    39f0:	4604      	mov	r4, r0
    39f2:	6030      	str	r0, [r6, #0]
    39f4:	2800      	cmp	r0, #0
    39f6:	d1d5      	bne.n	39a4 <__sfp+0x24>
    39f8:	f7ff ff78 	bl	38ec <__sfp_lock_release>
    39fc:	230c      	movs	r3, #12
    39fe:	603b      	str	r3, [r7, #0]
    3a00:	e7ee      	b.n	39e0 <__sfp+0x60>
    3a02:	bf00      	nop
    3a04:	00003dfc 	.word	0x00003dfc
    3a08:	ffff0001 	.word	0xffff0001

00003a0c <_fwalk_reent>:
    3a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3a10:	4680      	mov	r8, r0
    3a12:	4689      	mov	r9, r1
    3a14:	f100 0448 	add.w	r4, r0, #72	; 0x48
    3a18:	2600      	movs	r6, #0
    3a1a:	b914      	cbnz	r4, 3a22 <_fwalk_reent+0x16>
    3a1c:	4630      	mov	r0, r6
    3a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3a22:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    3a26:	3f01      	subs	r7, #1
    3a28:	d501      	bpl.n	3a2e <_fwalk_reent+0x22>
    3a2a:	6824      	ldr	r4, [r4, #0]
    3a2c:	e7f5      	b.n	3a1a <_fwalk_reent+0xe>
    3a2e:	89ab      	ldrh	r3, [r5, #12]
    3a30:	2b01      	cmp	r3, #1
    3a32:	d907      	bls.n	3a44 <_fwalk_reent+0x38>
    3a34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    3a38:	3301      	adds	r3, #1
    3a3a:	d003      	beq.n	3a44 <_fwalk_reent+0x38>
    3a3c:	4629      	mov	r1, r5
    3a3e:	4640      	mov	r0, r8
    3a40:	47c8      	blx	r9
    3a42:	4306      	orrs	r6, r0
    3a44:	3568      	adds	r5, #104	; 0x68
    3a46:	e7ee      	b.n	3a26 <_fwalk_reent+0x1a>

00003a48 <__sread>:
    3a48:	b510      	push	{r4, lr}
    3a4a:	460c      	mov	r4, r1
    3a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3a50:	f000 f93c 	bl	3ccc <_read_r>
    3a54:	2800      	cmp	r0, #0
    3a56:	bfab      	itete	ge
    3a58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    3a5a:	89a3      	ldrhlt	r3, [r4, #12]
    3a5c:	181b      	addge	r3, r3, r0
    3a5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    3a62:	bfac      	ite	ge
    3a64:	6563      	strge	r3, [r4, #84]	; 0x54
    3a66:	81a3      	strhlt	r3, [r4, #12]
    3a68:	bd10      	pop	{r4, pc}

00003a6a <__swrite>:
    3a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a6e:	461f      	mov	r7, r3
    3a70:	898b      	ldrh	r3, [r1, #12]
    3a72:	05db      	lsls	r3, r3, #23
    3a74:	4605      	mov	r5, r0
    3a76:	460c      	mov	r4, r1
    3a78:	4616      	mov	r6, r2
    3a7a:	d505      	bpl.n	3a88 <__swrite+0x1e>
    3a7c:	2302      	movs	r3, #2
    3a7e:	2200      	movs	r2, #0
    3a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3a84:	f000 f910 	bl	3ca8 <_lseek_r>
    3a88:	89a3      	ldrh	r3, [r4, #12]
    3a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    3a8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3a92:	81a3      	strh	r3, [r4, #12]
    3a94:	4632      	mov	r2, r6
    3a96:	463b      	mov	r3, r7
    3a98:	4628      	mov	r0, r5
    3a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3a9e:	f000 b81f 	b.w	3ae0 <_write_r>

00003aa2 <__sseek>:
    3aa2:	b510      	push	{r4, lr}
    3aa4:	460c      	mov	r4, r1
    3aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3aaa:	f000 f8fd 	bl	3ca8 <_lseek_r>
    3aae:	1c43      	adds	r3, r0, #1
    3ab0:	89a3      	ldrh	r3, [r4, #12]
    3ab2:	bf15      	itete	ne
    3ab4:	6560      	strne	r0, [r4, #84]	; 0x54
    3ab6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    3aba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    3abe:	81a3      	strheq	r3, [r4, #12]
    3ac0:	bf18      	it	ne
    3ac2:	81a3      	strhne	r3, [r4, #12]
    3ac4:	bd10      	pop	{r4, pc}

00003ac6 <__sclose>:
    3ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3aca:	f000 b81b 	b.w	3b04 <_close_r>

00003ace <strlen>:
    3ace:	4603      	mov	r3, r0
    3ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
    3ad4:	2a00      	cmp	r2, #0
    3ad6:	d1fb      	bne.n	3ad0 <strlen+0x2>
    3ad8:	1a18      	subs	r0, r3, r0
    3ada:	3801      	subs	r0, #1
    3adc:	4770      	bx	lr
	...

00003ae0 <_write_r>:
    3ae0:	b538      	push	{r3, r4, r5, lr}
    3ae2:	4c07      	ldr	r4, [pc, #28]	; (3b00 <_write_r+0x20>)
    3ae4:	4605      	mov	r5, r0
    3ae6:	4608      	mov	r0, r1
    3ae8:	4611      	mov	r1, r2
    3aea:	2200      	movs	r2, #0
    3aec:	6022      	str	r2, [r4, #0]
    3aee:	461a      	mov	r2, r3
    3af0:	f7ff fcf4 	bl	34dc <_write>
    3af4:	1c43      	adds	r3, r0, #1
    3af6:	d102      	bne.n	3afe <_write_r+0x1e>
    3af8:	6823      	ldr	r3, [r4, #0]
    3afa:	b103      	cbz	r3, 3afe <_write_r+0x1e>
    3afc:	602b      	str	r3, [r5, #0]
    3afe:	bd38      	pop	{r3, r4, r5, pc}
    3b00:	20000210 	.word	0x20000210

00003b04 <_close_r>:
    3b04:	b538      	push	{r3, r4, r5, lr}
    3b06:	4c06      	ldr	r4, [pc, #24]	; (3b20 <_close_r+0x1c>)
    3b08:	2300      	movs	r3, #0
    3b0a:	4605      	mov	r5, r0
    3b0c:	4608      	mov	r0, r1
    3b0e:	6023      	str	r3, [r4, #0]
    3b10:	f7ff fd12 	bl	3538 <_close>
    3b14:	1c43      	adds	r3, r0, #1
    3b16:	d102      	bne.n	3b1e <_close_r+0x1a>
    3b18:	6823      	ldr	r3, [r4, #0]
    3b1a:	b103      	cbz	r3, 3b1e <_close_r+0x1a>
    3b1c:	602b      	str	r3, [r5, #0]
    3b1e:	bd38      	pop	{r3, r4, r5, pc}
    3b20:	20000210 	.word	0x20000210

00003b24 <__sflush_r>:
    3b24:	898a      	ldrh	r2, [r1, #12]
    3b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b2a:	4605      	mov	r5, r0
    3b2c:	0710      	lsls	r0, r2, #28
    3b2e:	460c      	mov	r4, r1
    3b30:	d458      	bmi.n	3be4 <__sflush_r+0xc0>
    3b32:	684b      	ldr	r3, [r1, #4]
    3b34:	2b00      	cmp	r3, #0
    3b36:	dc05      	bgt.n	3b44 <__sflush_r+0x20>
    3b38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	dc02      	bgt.n	3b44 <__sflush_r+0x20>
    3b3e:	2000      	movs	r0, #0
    3b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    3b46:	2e00      	cmp	r6, #0
    3b48:	d0f9      	beq.n	3b3e <__sflush_r+0x1a>
    3b4a:	2300      	movs	r3, #0
    3b4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    3b50:	682f      	ldr	r7, [r5, #0]
    3b52:	602b      	str	r3, [r5, #0]
    3b54:	d032      	beq.n	3bbc <__sflush_r+0x98>
    3b56:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3b58:	89a3      	ldrh	r3, [r4, #12]
    3b5a:	075a      	lsls	r2, r3, #29
    3b5c:	d505      	bpl.n	3b6a <__sflush_r+0x46>
    3b5e:	6863      	ldr	r3, [r4, #4]
    3b60:	1ac0      	subs	r0, r0, r3
    3b62:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3b64:	b10b      	cbz	r3, 3b6a <__sflush_r+0x46>
    3b66:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3b68:	1ac0      	subs	r0, r0, r3
    3b6a:	2300      	movs	r3, #0
    3b6c:	4602      	mov	r2, r0
    3b6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    3b70:	6a21      	ldr	r1, [r4, #32]
    3b72:	4628      	mov	r0, r5
    3b74:	47b0      	blx	r6
    3b76:	1c43      	adds	r3, r0, #1
    3b78:	89a3      	ldrh	r3, [r4, #12]
    3b7a:	d106      	bne.n	3b8a <__sflush_r+0x66>
    3b7c:	6829      	ldr	r1, [r5, #0]
    3b7e:	291d      	cmp	r1, #29
    3b80:	d82c      	bhi.n	3bdc <__sflush_r+0xb8>
    3b82:	4a2a      	ldr	r2, [pc, #168]	; (3c2c <__sflush_r+0x108>)
    3b84:	40ca      	lsrs	r2, r1
    3b86:	07d6      	lsls	r6, r2, #31
    3b88:	d528      	bpl.n	3bdc <__sflush_r+0xb8>
    3b8a:	2200      	movs	r2, #0
    3b8c:	6062      	str	r2, [r4, #4]
    3b8e:	04d9      	lsls	r1, r3, #19
    3b90:	6922      	ldr	r2, [r4, #16]
    3b92:	6022      	str	r2, [r4, #0]
    3b94:	d504      	bpl.n	3ba0 <__sflush_r+0x7c>
    3b96:	1c42      	adds	r2, r0, #1
    3b98:	d101      	bne.n	3b9e <__sflush_r+0x7a>
    3b9a:	682b      	ldr	r3, [r5, #0]
    3b9c:	b903      	cbnz	r3, 3ba0 <__sflush_r+0x7c>
    3b9e:	6560      	str	r0, [r4, #84]	; 0x54
    3ba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3ba2:	602f      	str	r7, [r5, #0]
    3ba4:	2900      	cmp	r1, #0
    3ba6:	d0ca      	beq.n	3b3e <__sflush_r+0x1a>
    3ba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    3bac:	4299      	cmp	r1, r3
    3bae:	d002      	beq.n	3bb6 <__sflush_r+0x92>
    3bb0:	4628      	mov	r0, r5
    3bb2:	f7ff fad7 	bl	3164 <_free_r>
    3bb6:	2000      	movs	r0, #0
    3bb8:	6360      	str	r0, [r4, #52]	; 0x34
    3bba:	e7c1      	b.n	3b40 <__sflush_r+0x1c>
    3bbc:	6a21      	ldr	r1, [r4, #32]
    3bbe:	2301      	movs	r3, #1
    3bc0:	4628      	mov	r0, r5
    3bc2:	47b0      	blx	r6
    3bc4:	1c41      	adds	r1, r0, #1
    3bc6:	d1c7      	bne.n	3b58 <__sflush_r+0x34>
    3bc8:	682b      	ldr	r3, [r5, #0]
    3bca:	2b00      	cmp	r3, #0
    3bcc:	d0c4      	beq.n	3b58 <__sflush_r+0x34>
    3bce:	2b1d      	cmp	r3, #29
    3bd0:	d001      	beq.n	3bd6 <__sflush_r+0xb2>
    3bd2:	2b16      	cmp	r3, #22
    3bd4:	d101      	bne.n	3bda <__sflush_r+0xb6>
    3bd6:	602f      	str	r7, [r5, #0]
    3bd8:	e7b1      	b.n	3b3e <__sflush_r+0x1a>
    3bda:	89a3      	ldrh	r3, [r4, #12]
    3bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3be0:	81a3      	strh	r3, [r4, #12]
    3be2:	e7ad      	b.n	3b40 <__sflush_r+0x1c>
    3be4:	690f      	ldr	r7, [r1, #16]
    3be6:	2f00      	cmp	r7, #0
    3be8:	d0a9      	beq.n	3b3e <__sflush_r+0x1a>
    3bea:	0793      	lsls	r3, r2, #30
    3bec:	680e      	ldr	r6, [r1, #0]
    3bee:	bf08      	it	eq
    3bf0:	694b      	ldreq	r3, [r1, #20]
    3bf2:	600f      	str	r7, [r1, #0]
    3bf4:	bf18      	it	ne
    3bf6:	2300      	movne	r3, #0
    3bf8:	eba6 0807 	sub.w	r8, r6, r7
    3bfc:	608b      	str	r3, [r1, #8]
    3bfe:	f1b8 0f00 	cmp.w	r8, #0
    3c02:	dd9c      	ble.n	3b3e <__sflush_r+0x1a>
    3c04:	4643      	mov	r3, r8
    3c06:	463a      	mov	r2, r7
    3c08:	6a21      	ldr	r1, [r4, #32]
    3c0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    3c0c:	4628      	mov	r0, r5
    3c0e:	47b0      	blx	r6
    3c10:	2800      	cmp	r0, #0
    3c12:	dc06      	bgt.n	3c22 <__sflush_r+0xfe>
    3c14:	89a3      	ldrh	r3, [r4, #12]
    3c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3c1a:	81a3      	strh	r3, [r4, #12]
    3c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c20:	e78e      	b.n	3b40 <__sflush_r+0x1c>
    3c22:	4407      	add	r7, r0
    3c24:	eba8 0800 	sub.w	r8, r8, r0
    3c28:	e7e9      	b.n	3bfe <__sflush_r+0xda>
    3c2a:	bf00      	nop
    3c2c:	20400001 	.word	0x20400001

00003c30 <_fflush_r>:
    3c30:	b538      	push	{r3, r4, r5, lr}
    3c32:	690b      	ldr	r3, [r1, #16]
    3c34:	4605      	mov	r5, r0
    3c36:	460c      	mov	r4, r1
    3c38:	b913      	cbnz	r3, 3c40 <_fflush_r+0x10>
    3c3a:	2500      	movs	r5, #0
    3c3c:	4628      	mov	r0, r5
    3c3e:	bd38      	pop	{r3, r4, r5, pc}
    3c40:	b118      	cbz	r0, 3c4a <_fflush_r+0x1a>
    3c42:	6983      	ldr	r3, [r0, #24]
    3c44:	b90b      	cbnz	r3, 3c4a <_fflush_r+0x1a>
    3c46:	f7ff fe63 	bl	3910 <__sinit>
    3c4a:	4b14      	ldr	r3, [pc, #80]	; (3c9c <_fflush_r+0x6c>)
    3c4c:	429c      	cmp	r4, r3
    3c4e:	d11b      	bne.n	3c88 <_fflush_r+0x58>
    3c50:	686c      	ldr	r4, [r5, #4]
    3c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3c56:	2b00      	cmp	r3, #0
    3c58:	d0ef      	beq.n	3c3a <_fflush_r+0xa>
    3c5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    3c5c:	07d0      	lsls	r0, r2, #31
    3c5e:	d404      	bmi.n	3c6a <_fflush_r+0x3a>
    3c60:	0599      	lsls	r1, r3, #22
    3c62:	d402      	bmi.n	3c6a <_fflush_r+0x3a>
    3c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3c66:	f7ff fb86 	bl	3376 <__retarget_lock_acquire_recursive>
    3c6a:	4628      	mov	r0, r5
    3c6c:	4621      	mov	r1, r4
    3c6e:	f7ff ff59 	bl	3b24 <__sflush_r>
    3c72:	6e63      	ldr	r3, [r4, #100]	; 0x64
    3c74:	07da      	lsls	r2, r3, #31
    3c76:	4605      	mov	r5, r0
    3c78:	d4e0      	bmi.n	3c3c <_fflush_r+0xc>
    3c7a:	89a3      	ldrh	r3, [r4, #12]
    3c7c:	059b      	lsls	r3, r3, #22
    3c7e:	d4dd      	bmi.n	3c3c <_fflush_r+0xc>
    3c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3c82:	f7ff fb79 	bl	3378 <__retarget_lock_release_recursive>
    3c86:	e7d9      	b.n	3c3c <_fflush_r+0xc>
    3c88:	4b05      	ldr	r3, [pc, #20]	; (3ca0 <_fflush_r+0x70>)
    3c8a:	429c      	cmp	r4, r3
    3c8c:	d101      	bne.n	3c92 <_fflush_r+0x62>
    3c8e:	68ac      	ldr	r4, [r5, #8]
    3c90:	e7df      	b.n	3c52 <_fflush_r+0x22>
    3c92:	4b04      	ldr	r3, [pc, #16]	; (3ca4 <_fflush_r+0x74>)
    3c94:	429c      	cmp	r4, r3
    3c96:	bf08      	it	eq
    3c98:	68ec      	ldreq	r4, [r5, #12]
    3c9a:	e7da      	b.n	3c52 <_fflush_r+0x22>
    3c9c:	00003e38 	.word	0x00003e38
    3ca0:	00003e58 	.word	0x00003e58
    3ca4:	00003e18 	.word	0x00003e18

00003ca8 <_lseek_r>:
    3ca8:	b538      	push	{r3, r4, r5, lr}
    3caa:	4c07      	ldr	r4, [pc, #28]	; (3cc8 <_lseek_r+0x20>)
    3cac:	4605      	mov	r5, r0
    3cae:	4608      	mov	r0, r1
    3cb0:	4611      	mov	r1, r2
    3cb2:	2200      	movs	r2, #0
    3cb4:	6022      	str	r2, [r4, #0]
    3cb6:	461a      	mov	r2, r3
    3cb8:	f7ff fbfe 	bl	34b8 <_lseek>
    3cbc:	1c43      	adds	r3, r0, #1
    3cbe:	d102      	bne.n	3cc6 <_lseek_r+0x1e>
    3cc0:	6823      	ldr	r3, [r4, #0]
    3cc2:	b103      	cbz	r3, 3cc6 <_lseek_r+0x1e>
    3cc4:	602b      	str	r3, [r5, #0]
    3cc6:	bd38      	pop	{r3, r4, r5, pc}
    3cc8:	20000210 	.word	0x20000210

00003ccc <_read_r>:
    3ccc:	b538      	push	{r3, r4, r5, lr}
    3cce:	4c07      	ldr	r4, [pc, #28]	; (3cec <_read_r+0x20>)
    3cd0:	4605      	mov	r5, r0
    3cd2:	4608      	mov	r0, r1
    3cd4:	4611      	mov	r1, r2
    3cd6:	2200      	movs	r2, #0
    3cd8:	6022      	str	r2, [r4, #0]
    3cda:	461a      	mov	r2, r3
    3cdc:	f7ff fb96 	bl	340c <_read>
    3ce0:	1c43      	adds	r3, r0, #1
    3ce2:	d102      	bne.n	3cea <_read_r+0x1e>
    3ce4:	6823      	ldr	r3, [r4, #0]
    3ce6:	b103      	cbz	r3, 3cea <_read_r+0x1e>
    3ce8:	602b      	str	r3, [r5, #0]
    3cea:	bd38      	pop	{r3, r4, r5, pc}
    3cec:	20000210 	.word	0x20000210

00003cf0 <_init>:
    3cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cf2:	bf00      	nop
    3cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3cf6:	bc08      	pop	{r3}
    3cf8:	469e      	mov	lr, r3
    3cfa:	4770      	bx	lr

00003cfc <_fini>:
    3cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cfe:	bf00      	nop
    3d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3d02:	bc08      	pop	{r3}
    3d04:	469e      	mov	lr, r3
    3d06:	4770      	bx	lr

00003d08 <_ZL18corePeripheralBase>:
    3d08:	e000 e000                                   ....

00003d0c <_ZN4Nvic10ENn_OFFSETE>:
    3d0c:	0100 0000 0104 0000 0108 0000 010c 0000     ................
    3d1c:	0110 0000                                   ....

00003d20 <_ZN4Nvic11DISn_OFFSETE>:
    3d20:	0180 0000 0184 0000 0188 0000 018c 0000     ................
    3d30:	0190 0000                                   ....

00003d34 <_ZN4Nvic12PENDn_OFFSETE>:
    3d34:	0200 0000 0204 0000 0208 0000 020c 0000     ................
    3d44:	0210 0000                                   ....

00003d48 <_ZN4Nvic14UNPENDn_OFFSETE>:
    3d48:	0280 0000 0284 0000 0288 0000 028c 0000     ................
    3d58:	0290 0000                                   ....

00003d5c <_ZN4Nvic14ACTIVEn_OFFSETE>:
    3d5c:	0300 0000 0304 0000 0308 0000 030c 0000     ................
    3d6c:	0310 0000                                   ....

00003d70 <_ZN4Nvic11PRIn_OFFSETE>:
    3d70:	0400 0000 0404 0000 0408 0000 040c 0000     ................
    3d80:	040c 0000 0414 0000 0418 0000 041c 0000     ................
    3d90:	0420 0000 0424 0000 0428 0000 042c 0000      ...$...(...,...
    3da0:	0430 0000 0434 0000 0438 0000 043c 0000     0...4...8...<...
    3db0:	0440 0000 0444 0000 0448 0000 044c 0000     @...D...H...L...
    3dc0:	0450 0000 0454 0000 0458 0000 045c 0000     P...T...X...\...
    3dd0:	0460 0000 0464 0000 0468 0000 046c 0000     `...d...h...l...
    3de0:	0470 0000 0474 0000 0478 0000 047c 0000     p...t...x...|...
    3df0:	0480 0000 0484 0000 0488 0000               ............

00003dfc <_global_impure_ptr>:
    3dfc:	0014 2000 733a 6d65 6869 736f 6974 676e     ... :semihosting
    3e0c:	662d 6165 7574 6572 0073 0000               -features...

00003e18 <__sf_fake_stderr>:
	...

00003e38 <__sf_fake_stdin>:
	...

00003e58 <__sf_fake_stdout>:
	...

00003e78 <__EH_FRAME_BEGIN__>:
    3e78:	0000 0000                                   ....
