
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	00 80 00 20 ad 02 00 00 ed 02 00 00 ed 02 00 00     ... ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	00 00 00 00 ed 02 00 00 ed 02 00 00 fd 02 00 00     ................
	...
      c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	...
      ec:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      fc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     10c:	ed 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
     150:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	...
     1b0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
     258:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     268:	ed 02 00 00                                         ....

0000026c <__do_global_dtors_aux>:
     26c:	b510      	push	{r4, lr}
     26e:	4c05      	ldr	r4, [pc, #20]	; (284 <__do_global_dtors_aux+0x18>)
     270:	7823      	ldrb	r3, [r4, #0]
     272:	b933      	cbnz	r3, 282 <__do_global_dtors_aux+0x16>
     274:	4b04      	ldr	r3, [pc, #16]	; (288 <__do_global_dtors_aux+0x1c>)
     276:	b113      	cbz	r3, 27e <__do_global_dtors_aux+0x12>
     278:	4804      	ldr	r0, [pc, #16]	; (28c <__do_global_dtors_aux+0x20>)
     27a:	f3af 8000 	nop.w
     27e:	2301      	movs	r3, #1
     280:	7023      	strb	r3, [r4, #0]
     282:	bd10      	pop	{r4, pc}
     284:	20000088 	.word	0x20000088
     288:	00000000 	.word	0x00000000
     28c:	00003558 	.word	0x00003558

00000290 <frame_dummy>:
     290:	b508      	push	{r3, lr}
     292:	4b03      	ldr	r3, [pc, #12]	; (2a0 <frame_dummy+0x10>)
     294:	b11b      	cbz	r3, 29e <frame_dummy+0xe>
     296:	4903      	ldr	r1, [pc, #12]	; (2a4 <frame_dummy+0x14>)
     298:	4803      	ldr	r0, [pc, #12]	; (2a8 <frame_dummy+0x18>)
     29a:	f3af 8000 	nop.w
     29e:	bd08      	pop	{r3, pc}
     2a0:	00000000 	.word	0x00000000
     2a4:	2000008c 	.word	0x2000008c
     2a8:	00003558 	.word	0x00003558

000002ac <Reset_Handler>:
 *    __data_start__: VMA of start of the section to copy to
 *    __data_end__: VMA of end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r1, =__etext
     2ac:	490a      	ldr	r1, [pc, #40]	; (2d8 <Reset_Handler+0x2c>)
	ldr	r2, =__data_start__
     2ae:	4a0b      	ldr	r2, [pc, #44]	; (2dc <Reset_Handler+0x30>)
	ldr	r3, =__data_end__
     2b0:	4b0b      	ldr	r3, [pc, #44]	; (2e0 <Reset_Handler+0x34>)

.L_loop1:
	cmp	r2, r3
     2b2:	429a      	cmp	r2, r3
	ittt	lt
     2b4:	bfbe      	ittt	lt
	ldrlt	r0, [r1], #4
     2b6:	f851 0b04 	ldrlt.w	r0, [r1], #4
	strlt	r0, [r2], #4
     2ba:	f842 0b04 	strlt.w	r0, [r2], #4
	blt	.L_loop1
     2be:	e7f8      	blt.n	2b2 <Reset_Handler+0x6>
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
	ldr	r1, =__bss_start__
     2c0:	4908      	ldr	r1, [pc, #32]	; (2e4 <Reset_Handler+0x38>)
	ldr	r2, =__bss_end__
     2c2:	4a09      	ldr	r2, [pc, #36]	; (2e8 <Reset_Handler+0x3c>)

	movs	r0, 0
     2c4:	2000      	movs	r0, #0
.L_loop3:
	cmp	r1, r2
     2c6:	4291      	cmp	r1, r2
	itt	lt
     2c8:	bfbc      	itt	lt
	strlt	r0, [r1], #4
     2ca:	f841 0b04 	strlt.w	r0, [r1], #4
	blt	.L_loop3
     2ce:	e7fa      	blt.n	2c6 <Reset_Handler+0x1a>
#endif /* __STARTUP_CLEAR_BSS_MULTIPLE || __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
	bl	SystemInit
     2d0:	f000 f87a 	bl	3c8 <SystemInit>
#endif

#ifndef __START
#define __START _start
#endif
	bl	__START
     2d4:	f000 f8c6 	bl	464 <main>
	ldr	r1, =__etext
     2d8:	0000384c 	.word	0x0000384c
	ldr	r2, =__data_start__
     2dc:	20000000 	.word	0x20000000
	ldr	r3, =__data_end__
     2e0:	20000088 	.word	0x20000088
	ldr	r1, =__bss_start__
     2e4:	20000088 	.word	0x20000088
	ldr	r2, =__bss_end__
     2e8:	20000218 	.word	0x20000218

000002ec <ADC_0_Sequence_0_Handler>:
	.align	1
	.thumb_func
	.weak	Default_Handler
	.type	Default_Handler, %function
Default_Handler:
	b	.
     2ec:	e7fe      	b.n	2ec <ADC_0_Sequence_0_Handler>
     2ee:	bf00      	nop

000002f0 <__cxa_pure_virtual>:
/**
 * These functions further help eliminate unwanted exceptions
 */

extern "C" void __cxa_pure_virtual() 
{ 
     2f0:	b480      	push	{r7}
     2f2:	af00      	add	r7, sp, #0
    while(1); 
     2f4:	e7fe      	b.n	2f4 <__cxa_pure_virtual+0x4>

000002f6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
}

void __gnu_cxx::__verbose_terminate_handler()
{
     2f6:	b480      	push	{r7}
     2f8:	af00      	add	r7, sp, #0
    while(1);
     2fa:	e7fe      	b.n	2fa <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x4>

000002fc <GPIO_Port_F_Handler>:
}

extern "C" void GPIO_Port_F_Handler(void)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	af00      	add	r7, sp, #0
    
    if(swtich1.read() == 1)
     300:	4824      	ldr	r0, [pc, #144]	; (394 <GPIO_Port_F_Handler+0x98>)
     302:	f001 f94f 	bl	15a4 <_ZN4Gpio4readEv>
     306:	4603      	mov	r3, r0
     308:	2b01      	cmp	r3, #1
     30a:	bf0c      	ite	eq
     30c:	2301      	moveq	r3, #1
     30e:	2300      	movne	r3, #0
     310:	b2db      	uxtb	r3, r3
     312:	2b00      	cmp	r3, #0
     314:	d006      	beq.n	324 <GPIO_Port_F_Handler+0x28>
    {
        redLed.write((uint32_t)setORClear::clear);
     316:	2100      	movs	r1, #0
     318:	481f      	ldr	r0, [pc, #124]	; (398 <GPIO_Port_F_Handler+0x9c>)
     31a:	f001 f927 	bl	156c <_ZN4Gpio5writeEm>
        swtich1.interruptClear();
     31e:	481d      	ldr	r0, [pc, #116]	; (394 <GPIO_Port_F_Handler+0x98>)
     320:	f001 f90f 	bl	1542 <_ZN4Gpio14interruptClearEv>
    }

    if(swtich1.read() == 0)
     324:	481b      	ldr	r0, [pc, #108]	; (394 <GPIO_Port_F_Handler+0x98>)
     326:	f001 f93d 	bl	15a4 <_ZN4Gpio4readEv>
     32a:	4603      	mov	r3, r0
     32c:	2b00      	cmp	r3, #0
     32e:	bf0c      	ite	eq
     330:	2301      	moveq	r3, #1
     332:	2300      	movne	r3, #0
     334:	b2db      	uxtb	r3, r3
     336:	2b00      	cmp	r3, #0
     338:	d006      	beq.n	348 <GPIO_Port_F_Handler+0x4c>
    {
        redLed.write((uint32_t)setORClear::set);
     33a:	2101      	movs	r1, #1
     33c:	4816      	ldr	r0, [pc, #88]	; (398 <GPIO_Port_F_Handler+0x9c>)
     33e:	f001 f915 	bl	156c <_ZN4Gpio5writeEm>
        swtich1.interruptClear();
     342:	4814      	ldr	r0, [pc, #80]	; (394 <GPIO_Port_F_Handler+0x98>)
     344:	f001 f8fd 	bl	1542 <_ZN4Gpio14interruptClearEv>
    }

    if(swtich2.read() == 1)
     348:	4814      	ldr	r0, [pc, #80]	; (39c <GPIO_Port_F_Handler+0xa0>)
     34a:	f001 f92b 	bl	15a4 <_ZN4Gpio4readEv>
     34e:	4603      	mov	r3, r0
     350:	2b01      	cmp	r3, #1
     352:	bf0c      	ite	eq
     354:	2301      	moveq	r3, #1
     356:	2300      	movne	r3, #0
     358:	b2db      	uxtb	r3, r3
     35a:	2b00      	cmp	r3, #0
     35c:	d006      	beq.n	36c <GPIO_Port_F_Handler+0x70>
    {
        blueLed.write((uint32_t)setORClear::clear);
     35e:	2100      	movs	r1, #0
     360:	480f      	ldr	r0, [pc, #60]	; (3a0 <GPIO_Port_F_Handler+0xa4>)
     362:	f001 f903 	bl	156c <_ZN4Gpio5writeEm>
        swtich2.interruptClear();
     366:	480d      	ldr	r0, [pc, #52]	; (39c <GPIO_Port_F_Handler+0xa0>)
     368:	f001 f8eb 	bl	1542 <_ZN4Gpio14interruptClearEv>
    }

    if(swtich2.read() == 0)
     36c:	480b      	ldr	r0, [pc, #44]	; (39c <GPIO_Port_F_Handler+0xa0>)
     36e:	f001 f919 	bl	15a4 <_ZN4Gpio4readEv>
     372:	4603      	mov	r3, r0
     374:	2b00      	cmp	r3, #0
     376:	bf0c      	ite	eq
     378:	2301      	moveq	r3, #1
     37a:	2300      	movne	r3, #0
     37c:	b2db      	uxtb	r3, r3
     37e:	2b00      	cmp	r3, #0
     380:	d006      	beq.n	390 <GPIO_Port_F_Handler+0x94>
    {
        blueLed.write((uint32_t)setORClear::set);
     382:	2101      	movs	r1, #1
     384:	4806      	ldr	r0, [pc, #24]	; (3a0 <GPIO_Port_F_Handler+0xa4>)
     386:	f001 f8f1 	bl	156c <_ZN4Gpio5writeEm>
        swtich2.interruptClear();
     38a:	4804      	ldr	r0, [pc, #16]	; (39c <GPIO_Port_F_Handler+0xa0>)
     38c:	f001 f8d9 	bl	1542 <_ZN4Gpio14interruptClearEv>
    }

}
     390:	bf00      	nop
     392:	bd80      	pop	{r7, pc}
     394:	200000ec 	.word	0x200000ec
     398:	200000d4 	.word	0x200000d4
     39c:	20000104 	.word	0x20000104
     3a0:	200000bc 	.word	0x200000bc

000003a4 <_Z8pollTestv>:
//         myTimer.clearInterrupt();
//     } 
// }

void pollTest(void)
{
     3a4:	b580      	push	{r7, lr}
     3a6:	af00      	add	r7, sp, #0
    readme = testAdc.getAdcSample();
     3a8:	4805      	ldr	r0, [pc, #20]	; (3c0 <_Z8pollTestv+0x1c>)
     3aa:	f000 fcf2 	bl	d92 <_ZN3Adc12getAdcSampleEv>
     3ae:	4603      	mov	r3, r0
     3b0:	461a      	mov	r2, r3
     3b2:	4b04      	ldr	r3, [pc, #16]	; (3c4 <_Z8pollTestv+0x20>)
     3b4:	601a      	str	r2, [r3, #0]
    testAdc.clearInterrupt();
     3b6:	4802      	ldr	r0, [pc, #8]	; (3c0 <_Z8pollTestv+0x1c>)
     3b8:	f000 fd01 	bl	dbe <_ZN3Adc14clearInterruptEv>
}
     3bc:	bf00      	nop
     3be:	bd80      	pop	{r7, pc}
     3c0:	2000013c 	.word	0x2000013c
     3c4:	20000004 	.word	0x20000004

000003c8 <SystemInit>:

extern "C" void SystemInit(void)
{
     3c8:	b580      	push	{r7, lr}
     3ca:	b086      	sub	sp, #24
     3cc:	af06      	add	r7, sp, #24
    SystemControl::initializeGPIOHB();
     3ce:	f000 fe7b 	bl	10c8 <_ZN13SystemControl16initializeGPIOHBEv>
    SystemControl::initializeClock(_80MHz);
     3d2:	2005      	movs	r0, #5
     3d4:	f000 feb0 	bl	1138 <_ZN13SystemControl15initializeClockE7SYSDIV2>

    greenLed.initialize((uint32_t)PF3::M1PWM7, output);
     3d8:	2201      	movs	r2, #1
     3da:	f241 01d2 	movw	r1, #4306	; 0x10d2
     3de:	481a      	ldr	r0, [pc, #104]	; (448 <Stack_Size+0x48>)
     3e0:	f000 ff30 	bl	1244 <_ZN4Gpio10initializeEm9direction>
    blueLed.initialize((uint32_t)PF2::GPIO, output); 
     3e4:	2201      	movs	r2, #1
     3e6:	f241 0168 	movw	r1, #4200	; 0x1068
     3ea:	4818      	ldr	r0, [pc, #96]	; (44c <Stack_Size+0x4c>)
     3ec:	f000 ff2a 	bl	1244 <_ZN4Gpio10initializeEm9direction>
    redLed.initialize((uint32_t)PF1::GPIO, output);
     3f0:	2201      	movs	r2, #1
     3f2:	f241 0104 	movw	r1, #4100	; 0x1004
     3f6:	4816      	ldr	r0, [pc, #88]	; (450 <Stack_Size+0x50>)
     3f8:	f000 ff24 	bl	1244 <_ZN4Gpio10initializeEm9direction>
    adcPin.initialize((uint32_t)PE3::AIN0, input);
     3fc:	2200      	movs	r2, #0
     3fe:	f640 51ad 	movw	r1, #3501	; 0xdad
     402:	4814      	ldr	r0, [pc, #80]	; (454 <Stack_Size+0x54>)
     404:	f000 ff1e 	bl	1244 <_ZN4Gpio10initializeEm9direction>

    greenPwm.initializeSingle(7, module1, 0xFFFF, 0xFFFF/2, 0x1, countDirectionPwm::down, (uint32_t)ACTZERO::invertPwm, true, (uint32_t)pwmUnitClockDivisor::_64);
     408:	2305      	movs	r3, #5
     40a:	9305      	str	r3, [sp, #20]
     40c:	2301      	movs	r3, #1
     40e:	9304      	str	r3, [sp, #16]
     410:	2301      	movs	r3, #1
     412:	9303      	str	r3, [sp, #12]
     414:	2300      	movs	r3, #0
     416:	9302      	str	r3, [sp, #8]
     418:	2301      	movs	r3, #1
     41a:	9301      	str	r3, [sp, #4]
     41c:	f647 73ff 	movw	r3, #32767	; 0x7fff
     420:	9300      	str	r3, [sp, #0]
     422:	f64f 73ff 	movw	r3, #65535	; 0xffff
     426:	2201      	movs	r2, #1
     428:	2107      	movs	r1, #7
     42a:	480b      	ldr	r0, [pc, #44]	; (458 <Stack_Size+0x58>)
     42c:	f001 f8e4 	bl	15f8 <_ZN3Pwm16initializeSingleEm9pwmModulemmm17countDirectionPwmmbm>

    testAdc.initializeModule((uint32_t)adcModule::module0, sequencerPriority, false, false);
     430:	4b0a      	ldr	r3, [pc, #40]	; (45c <Stack_Size+0x5c>)
     432:	681a      	ldr	r2, [r3, #0]
     434:	2300      	movs	r3, #0
     436:	9300      	str	r3, [sp, #0]
     438:	2300      	movs	r3, #0
     43a:	2100      	movs	r1, #0
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <Stack_Size+0x60>)
     43e:	f000 fa37 	bl	8b0 <_ZN3Adc16initializeModuleEmmmm>
}
     442:	bf00      	nop
     444:	46bd      	mov	sp, r7
     446:	bd80      	pop	{r7, pc}
     448:	200000a4 	.word	0x200000a4
     44c:	200000bc 	.word	0x200000bc
     450:	200000d4 	.word	0x200000d4
     454:	2000011c 	.word	0x2000011c
     458:	20000134 	.word	0x20000134
     45c:	20000008 	.word	0x20000008
     460:	2000013c 	.word	0x2000013c

00000464 <main>:
 
int main(void)
{
     464:	b580      	push	{r7, lr}
     466:	b082      	sub	sp, #8
     468:	af02      	add	r7, sp, #8
    
    Nvic::disableInterrupts();
     46a:	f000 f9e3 	bl	834 <_ZN4Nvic17disableInterruptsEv>

    swtich1.initialize((uint32_t)PF4::GPIO, input, 3);
     46e:	2303      	movs	r3, #3
     470:	2200      	movs	r2, #0
     472:	f241 1130 	movw	r1, #4400	; 0x1130
     476:	4812      	ldr	r0, [pc, #72]	; (4c0 <main+0x5c>)
     478:	f000 fffe 	bl	1478 <_ZN4Gpio10initializeEm9directionm>
    swtich2.initialize((uint32_t)PF0::GPIO, input, 3);
     47c:	2303      	movs	r3, #3
     47e:	2200      	movs	r2, #0
     480:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
     484:	480f      	ldr	r0, [pc, #60]	; (4c4 <main+0x60>)
     486:	f000 fff7 	bl	1478 <_ZN4Gpio10initializeEm9directionm>

    // myTimer.initializeForInterupt(periodic, shortTimer0, 80000000, down, concatenated, 3);
    // myTimer.enableTimer();

    Nvic::enableInterrupts();
     48a:	f000 f9e2 	bl	852 <_ZN4Nvic16enableInterruptsEv>

    testAdc.initializeForPolling((uint32_t)sampleSequencer::SS3, (uint32_t)ssTriggerSource::continousSampling, (uint32_t)ssInputSrc0::AIN0, (uint32_t)ssControl0::END0|(uint32_t)ssControl0::IE0, pollTest);
     48e:	4b0e      	ldr	r3, [pc, #56]	; (4c8 <main+0x64>)
     490:	9301      	str	r3, [sp, #4]
     492:	2306      	movs	r3, #6
     494:	9300      	str	r3, [sp, #0]
     496:	2300      	movs	r3, #0
     498:	220f      	movs	r2, #15
     49a:	2103      	movs	r1, #3
     49c:	480b      	ldr	r0, [pc, #44]	; (4cc <main+0x68>)
     49e:	f000 fa79 	bl	994 <_ZN3Adc20initializeForPollingEmmmmPFvvE>
    testAdc.enableSampleSequencer();
     4a2:	480a      	ldr	r0, [pc, #40]	; (4cc <main+0x68>)
     4a4:	f000 fb03 	bl	aae <_ZN3Adc21enableSampleSequencerEv>

    blueLed.write((uint32_t)setORClear::set);
     4a8:	2101      	movs	r1, #1
     4aa:	4809      	ldr	r0, [pc, #36]	; (4d0 <main+0x6c>)
     4ac:	f001 f85e 	bl	156c <_ZN4Gpio5writeEm>
    redLed.write((uint32_t)setORClear::set);
     4b0:	2101      	movs	r1, #1
     4b2:	4808      	ldr	r0, [pc, #32]	; (4d4 <main+0x70>)
     4b4:	f001 f85a 	bl	156c <_ZN4Gpio5writeEm>
        
    while(1)
    {
        // Nvic::wfi();
        testAdc.pollStatus();
     4b8:	4804      	ldr	r0, [pc, #16]	; (4cc <main+0x68>)
     4ba:	f000 fc1d 	bl	cf8 <_ZN3Adc10pollStatusEv>
     4be:	e7fb      	b.n	4b8 <main+0x54>
     4c0:	200000ec 	.word	0x200000ec
     4c4:	20000104 	.word	0x20000104
     4c8:	000003a5 	.word	0x000003a5
     4cc:	2000013c 	.word	0x2000013c
     4d0:	200000bc 	.word	0x200000bc
     4d4:	200000d4 	.word	0x200000d4

000004d8 <_Z41__static_initialization_and_destruction_0ii>:
    }

}
     4d8:	b580      	push	{r7, lr}
     4da:	b082      	sub	sp, #8
     4dc:	af00      	add	r7, sp, #0
     4de:	6078      	str	r0, [r7, #4]
     4e0:	6039      	str	r1, [r7, #0]
     4e2:	687b      	ldr	r3, [r7, #4]
     4e4:	2b01      	cmp	r3, #1
     4e6:	d144      	bne.n	572 <_Z41__static_initialization_and_destruction_0ii+0x9a>
     4e8:	683b      	ldr	r3, [r7, #0]
     4ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
     4ee:	4293      	cmp	r3, r2
     4f0:	d13f      	bne.n	572 <_Z41__static_initialization_and_destruction_0ii+0x9a>
Gpio greenLed;
     4f2:	4822      	ldr	r0, [pc, #136]	; (57c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
     4f4:	f000 fe8c 	bl	1210 <_ZN4GpioC1Ev>
     4f8:	4a21      	ldr	r2, [pc, #132]	; (580 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     4fa:	4922      	ldr	r1, [pc, #136]	; (584 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     4fc:	481f      	ldr	r0, [pc, #124]	; (57c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
     4fe:	f001 fa03 	bl	1908 <__aeabi_atexit>
Gpio blueLed;
     502:	4821      	ldr	r0, [pc, #132]	; (588 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     504:	f000 fe84 	bl	1210 <_ZN4GpioC1Ev>
     508:	4a1d      	ldr	r2, [pc, #116]	; (580 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     50a:	491e      	ldr	r1, [pc, #120]	; (584 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     50c:	481e      	ldr	r0, [pc, #120]	; (588 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
     50e:	f001 f9fb 	bl	1908 <__aeabi_atexit>
Gpio redLed;
     512:	481e      	ldr	r0, [pc, #120]	; (58c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     514:	f000 fe7c 	bl	1210 <_ZN4GpioC1Ev>
     518:	4a19      	ldr	r2, [pc, #100]	; (580 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     51a:	491a      	ldr	r1, [pc, #104]	; (584 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     51c:	481b      	ldr	r0, [pc, #108]	; (58c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
     51e:	f001 f9f3 	bl	1908 <__aeabi_atexit>
Gpio swtich1;
     522:	481b      	ldr	r0, [pc, #108]	; (590 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     524:	f000 fe74 	bl	1210 <_ZN4GpioC1Ev>
     528:	4a15      	ldr	r2, [pc, #84]	; (580 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     52a:	4916      	ldr	r1, [pc, #88]	; (584 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     52c:	4818      	ldr	r0, [pc, #96]	; (590 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
     52e:	f001 f9eb 	bl	1908 <__aeabi_atexit>
Gpio swtich2;
     532:	4818      	ldr	r0, [pc, #96]	; (594 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     534:	f000 fe6c 	bl	1210 <_ZN4GpioC1Ev>
     538:	4a11      	ldr	r2, [pc, #68]	; (580 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     53a:	4912      	ldr	r1, [pc, #72]	; (584 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     53c:	4815      	ldr	r0, [pc, #84]	; (594 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
     53e:	f001 f9e3 	bl	1908 <__aeabi_atexit>
Gpio adcPin;
     542:	4815      	ldr	r0, [pc, #84]	; (598 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     544:	f000 fe64 	bl	1210 <_ZN4GpioC1Ev>
     548:	4a0d      	ldr	r2, [pc, #52]	; (580 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     54a:	490e      	ldr	r1, [pc, #56]	; (584 <_Z41__static_initialization_and_destruction_0ii+0xac>)
     54c:	4812      	ldr	r0, [pc, #72]	; (598 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
     54e:	f001 f9db 	bl	1908 <__aeabi_atexit>
Pwm greenPwm;
     552:	4812      	ldr	r0, [pc, #72]	; (59c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     554:	f001 f83a 	bl	15cc <_ZN3PwmC1Ev>
     558:	4a09      	ldr	r2, [pc, #36]	; (580 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     55a:	4911      	ldr	r1, [pc, #68]	; (5a0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
     55c:	480f      	ldr	r0, [pc, #60]	; (59c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
     55e:	f001 f9d3 	bl	1908 <__aeabi_atexit>
Adc testAdc;
     562:	4810      	ldr	r0, [pc, #64]	; (5a4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     564:	f000 f98e 	bl	884 <_ZN3AdcC1Ev>
     568:	4a05      	ldr	r2, [pc, #20]	; (580 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
     56a:	490f      	ldr	r1, [pc, #60]	; (5a8 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
     56c:	480d      	ldr	r0, [pc, #52]	; (5a4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
     56e:	f001 f9cb 	bl	1908 <__aeabi_atexit>
}
     572:	bf00      	nop
     574:	3708      	adds	r7, #8
     576:	46bd      	mov	sp, r7
     578:	bd80      	pop	{r7, pc}
     57a:	bf00      	nop
     57c:	200000a4 	.word	0x200000a4
     580:	20000000 	.word	0x20000000
     584:	0000122f 	.word	0x0000122f
     588:	200000bc 	.word	0x200000bc
     58c:	200000d4 	.word	0x200000d4
     590:	200000ec 	.word	0x200000ec
     594:	20000104 	.word	0x20000104
     598:	2000011c 	.word	0x2000011c
     59c:	20000134 	.word	0x20000134
     5a0:	000015e3 	.word	0x000015e3
     5a4:	2000013c 	.word	0x2000013c
     5a8:	0000089b 	.word	0x0000089b

000005ac <_GLOBAL__sub_I_readme>:
     5ac:	b580      	push	{r7, lr}
     5ae:	af00      	add	r7, sp, #0
     5b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
     5b4:	2001      	movs	r0, #1
     5b6:	f7ff ff8f 	bl	4d8 <_Z41__static_initialization_and_destruction_0ii>
     5ba:	bd80      	pop	{r7, pc}

000005bc <_ZN8RegisterC1Ev>:
#include "register.h"

/**
 * @brief empty constructor placeholder
 */
Register::Register()
     5bc:	b480      	push	{r7}
     5be:	b083      	sub	sp, #12
     5c0:	af00      	add	r7, sp, #0
     5c2:	6078      	str	r0, [r7, #4]
{
    
}
     5c4:	687b      	ldr	r3, [r7, #4]
     5c6:	4618      	mov	r0, r3
     5c8:	370c      	adds	r7, #12
     5ca:	46bd      	mov	sp, r7
     5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
     5d0:	4770      	bx	lr

000005d2 <_ZN8RegisterD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Register::~Register()
     5d2:	b480      	push	{r7}
     5d4:	b083      	sub	sp, #12
     5d6:	af00      	add	r7, sp, #0
     5d8:	6078      	str	r0, [r7, #4]
{

}
     5da:	687b      	ldr	r3, [r7, #4]
     5dc:	4618      	mov	r0, r3
     5de:	370c      	adds	r7, #12
     5e0:	46bd      	mov	sp, r7
     5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
     5e6:	4770      	bx	lr

000005e8 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>:
 * @param permission of the bitfield, read-only, write-only, etc...
 * 
 * @return retrieved information in the bitfield
 */
uint32_t Register::getRegisterBitFieldStatus(volatile uint32_t* address, uint32_t bit, uint32_t bitWidth, bitFieldPermission permission)
{
     5e8:	b480      	push	{r7}
     5ea:	b087      	sub	sp, #28
     5ec:	af00      	add	r7, sp, #0
     5ee:	60f8      	str	r0, [r7, #12]
     5f0:	60b9      	str	r1, [r7, #8]
     5f2:	607a      	str	r2, [r7, #4]
     5f4:	70fb      	strb	r3, [r7, #3]
    if((permission == RW) || (permission == RO) || (permission == RW1C))
     5f6:	78fb      	ldrb	r3, [r7, #3]
     5f8:	2b00      	cmp	r3, #0
     5fa:	d005      	beq.n	608 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x20>
     5fc:	78fb      	ldrb	r3, [r7, #3]
     5fe:	2b01      	cmp	r3, #1
     600:	d002      	beq.n	608 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x20>
     602:	78fb      	ldrb	r3, [r7, #3]
     604:	2b03      	cmp	r3, #3
     606:	d111      	bne.n	62c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x44>
    {
        uint32_t select = ((((0xFFFFFFFF >> (32 - bitWidth)))) << bit);
     608:	687b      	ldr	r3, [r7, #4]
     60a:	f1c3 0320 	rsb	r3, r3, #32
     60e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     612:	40da      	lsrs	r2, r3
     614:	68bb      	ldr	r3, [r7, #8]
     616:	fa02 f303 	lsl.w	r3, r2, r3
     61a:	617b      	str	r3, [r7, #20]
        return(((*address) & select) >> bit);
     61c:	68fb      	ldr	r3, [r7, #12]
     61e:	681a      	ldr	r2, [r3, #0]
     620:	697b      	ldr	r3, [r7, #20]
     622:	401a      	ands	r2, r3
     624:	68bb      	ldr	r3, [r7, #8]
     626:	fa22 f303 	lsr.w	r3, r2, r3
     62a:	e001      	b.n	630 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x48>
    }

    else
    {
        return(UINT32_MAX);
     62c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
     630:	4618      	mov	r0, r3
     632:	371c      	adds	r7, #28
     634:	46bd      	mov	sp, r7
     636:	f85d 7b04 	ldr.w	r7, [sp], #4
     63a:	4770      	bx	lr

0000063c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>:
 * @param bit to be set or the first bit of the bitfield to be set
 * @param width of the bitfield
 * @param permission of the bitfield, read-only, write-only, etc...
 */
void Register::setRegisterBitFieldStatus(volatile uint32_t* address, uint32_t value, uint32_t bit, uint32_t bitWidth, bitFieldPermission permission)
{
     63c:	b480      	push	{r7}
     63e:	b087      	sub	sp, #28
     640:	af00      	add	r7, sp, #0
     642:	60f8      	str	r0, [r7, #12]
     644:	60b9      	str	r1, [r7, #8]
     646:	607a      	str	r2, [r7, #4]
     648:	603b      	str	r3, [r7, #0]
    if((permission == RW1C) && (value != 1))
     64a:	f897 3020 	ldrb.w	r3, [r7, #32]
     64e:	2b03      	cmp	r3, #3
     650:	d102      	bne.n	658 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x1c>
     652:	68bb      	ldr	r3, [r7, #8]
     654:	2b01      	cmp	r3, #1
     656:	d12f      	bne.n	6b8 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x7c>
    {
        return;
    }
    
    else if((permission == RW) || (permission == WO) || (permission == RW1C))
     658:	f897 3020 	ldrb.w	r3, [r7, #32]
     65c:	2b00      	cmp	r3, #0
     65e:	d007      	beq.n	670 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x34>
     660:	f897 3020 	ldrb.w	r3, [r7, #32]
     664:	2b02      	cmp	r3, #2
     666:	d003      	beq.n	670 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x34>
     668:	f897 3020 	ldrb.w	r3, [r7, #32]
     66c:	2b03      	cmp	r3, #3
     66e:	d125      	bne.n	6bc <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x80>
    {
        uint32_t maxValue = (0xFFFFFFFF >> (32 - bitWidth));
     670:	683b      	ldr	r3, [r7, #0]
     672:	f1c3 0320 	rsb	r3, r3, #32
     676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     67a:	fa22 f303 	lsr.w	r3, r2, r3
     67e:	617b      	str	r3, [r7, #20]

        if((value <= maxValue))
     680:	68ba      	ldr	r2, [r7, #8]
     682:	697b      	ldr	r3, [r7, #20]
     684:	429a      	cmp	r2, r3
     686:	d81b      	bhi.n	6c0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x84>
        {
            uint32_t clear = (~(maxValue << bit));
     688:	697a      	ldr	r2, [r7, #20]
     68a:	687b      	ldr	r3, [r7, #4]
     68c:	fa02 f303 	lsl.w	r3, r2, r3
     690:	43db      	mvns	r3, r3
     692:	613b      	str	r3, [r7, #16]
            value = value << bit;
     694:	68ba      	ldr	r2, [r7, #8]
     696:	687b      	ldr	r3, [r7, #4]
     698:	fa02 f303 	lsl.w	r3, r2, r3
     69c:	60bb      	str	r3, [r7, #8]
    
            (*address) &= clear;
     69e:	68fb      	ldr	r3, [r7, #12]
     6a0:	681a      	ldr	r2, [r3, #0]
     6a2:	693b      	ldr	r3, [r7, #16]
     6a4:	401a      	ands	r2, r3
     6a6:	68fb      	ldr	r3, [r7, #12]
     6a8:	601a      	str	r2, [r3, #0]
            (*address) |= value;
     6aa:	68fb      	ldr	r3, [r7, #12]
     6ac:	681a      	ldr	r2, [r3, #0]
     6ae:	68bb      	ldr	r3, [r7, #8]
     6b0:	431a      	orrs	r2, r3
     6b2:	68fb      	ldr	r3, [r7, #12]
     6b4:	601a      	str	r2, [r3, #0]
        }

        else
        {
            return;
        }
     6b6:	e004      	b.n	6c2 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
        return;
     6b8:	bf00      	nop
     6ba:	e002      	b.n	6c2 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
        
    }

    else
    {
        return;
     6bc:	bf00      	nop
     6be:	e000      	b.n	6c2 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
            return;
     6c0:	bf00      	nop
    }
}
     6c2:	371c      	adds	r7, #28
     6c4:	46bd      	mov	sp, r7
     6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
     6ca:	4770      	bx	lr

000006cc <_Znwj>:


void* operator new(size_t size) noexcept 
{ 
     6cc:	b580      	push	{r7, lr}
     6ce:	b082      	sub	sp, #8
     6d0:	af00      	add	r7, sp, #0
     6d2:	6078      	str	r0, [r7, #4]
    return malloc(size); 
     6d4:	6878      	ldr	r0, [r7, #4]
     6d6:	f002 f885 	bl	27e4 <malloc>
     6da:	4603      	mov	r3, r0
} 
     6dc:	4618      	mov	r0, r3
     6de:	3708      	adds	r7, #8
     6e0:	46bd      	mov	sp, r7
     6e2:	bd80      	pop	{r7, pc}

000006e4 <_ZdlPv>:

void operator delete(void *p) noexcept 
{ 
     6e4:	b580      	push	{r7, lr}
     6e6:	b082      	sub	sp, #8
     6e8:	af00      	add	r7, sp, #0
     6ea:	6078      	str	r0, [r7, #4]
    free(p); 
     6ec:	6878      	ldr	r0, [r7, #4]
     6ee:	f002 f881 	bl	27f4 <free>
} 
     6f2:	bf00      	nop
     6f4:	3708      	adds	r7, #8
     6f6:	46bd      	mov	sp, r7
     6f8:	bd80      	pop	{r7, pc}

000006fa <_Znaj>:

void* operator new[](size_t size) noexcept 
{ 
     6fa:	b580      	push	{r7, lr}
     6fc:	b082      	sub	sp, #8
     6fe:	af00      	add	r7, sp, #0
     700:	6078      	str	r0, [r7, #4]
    return operator new(size); // Same as regular new
     702:	6878      	ldr	r0, [r7, #4]
     704:	f7ff ffe2 	bl	6cc <_Znwj>
     708:	4603      	mov	r3, r0
} 
     70a:	4618      	mov	r0, r3
     70c:	3708      	adds	r7, #8
     70e:	46bd      	mov	sp, r7
     710:	bd80      	pop	{r7, pc}

00000712 <_ZdaPv>:

void operator delete[](void *p) noexcept 
{ 
     712:	b580      	push	{r7, lr}
     714:	b082      	sub	sp, #8
     716:	af00      	add	r7, sp, #0
     718:	6078      	str	r0, [r7, #4]
    operator delete(p); // Same as regular delete
     71a:	6878      	ldr	r0, [r7, #4]
     71c:	f7ff ffe2 	bl	6e4 <_ZdlPv>
} 
     720:	bf00      	nop
     722:	3708      	adds	r7, #8
     724:	46bd      	mov	sp, r7
     726:	bd80      	pop	{r7, pc}

00000728 <_ZnwjSt9nothrow_t>:

void* operator new(size_t size, std::nothrow_t) noexcept 
{ 
     728:	b580      	push	{r7, lr}
     72a:	b082      	sub	sp, #8
     72c:	af00      	add	r7, sp, #0
     72e:	6078      	str	r0, [r7, #4]
     730:	7039      	strb	r1, [r7, #0]
    return operator new(size); // Same as regular new 
     732:	6878      	ldr	r0, [r7, #4]
     734:	f7ff ffca 	bl	6cc <_Znwj>
     738:	4603      	mov	r3, r0
} 
     73a:	4618      	mov	r0, r3
     73c:	3708      	adds	r7, #8
     73e:	46bd      	mov	sp, r7
     740:	bd80      	pop	{r7, pc}

00000742 <_ZdlPvSt9nothrow_t>:

void operator delete(void *p,  std::nothrow_t) noexcept 
{ 
     742:	b580      	push	{r7, lr}
     744:	b082      	sub	sp, #8
     746:	af00      	add	r7, sp, #0
     748:	6078      	str	r0, [r7, #4]
     74a:	7039      	strb	r1, [r7, #0]
    operator delete(p); // Same as regular delete
     74c:	6878      	ldr	r0, [r7, #4]
     74e:	f7ff ffc9 	bl	6e4 <_ZdlPv>
} 
     752:	bf00      	nop
     754:	3708      	adds	r7, #8
     756:	46bd      	mov	sp, r7
     758:	bd80      	pop	{r7, pc}

0000075a <_ZnajSt9nothrow_t>:

void* operator new[](size_t size, std::nothrow_t) noexcept 
{ 
     75a:	b580      	push	{r7, lr}
     75c:	b082      	sub	sp, #8
     75e:	af00      	add	r7, sp, #0
     760:	6078      	str	r0, [r7, #4]
     762:	7039      	strb	r1, [r7, #0]
    return operator new(size); // Same as regular new
     764:	6878      	ldr	r0, [r7, #4]
     766:	f7ff ffb1 	bl	6cc <_Znwj>
     76a:	4603      	mov	r3, r0
} 
     76c:	4618      	mov	r0, r3
     76e:	3708      	adds	r7, #8
     770:	46bd      	mov	sp, r7
     772:	bd80      	pop	{r7, pc}

00000774 <_ZdaPvSt9nothrow_t>:

void operator delete[](void *p,  std::nothrow_t) noexcept 
{ 
     774:	b580      	push	{r7, lr}
     776:	b082      	sub	sp, #8
     778:	af00      	add	r7, sp, #0
     77a:	6078      	str	r0, [r7, #4]
     77c:	7039      	strb	r1, [r7, #0]
    operator delete(p); // Same as regular delete
     77e:	6878      	ldr	r0, [r7, #4]
     780:	f7ff ffb0 	bl	6e4 <_ZdlPv>
}
     784:	bf00      	nop
     786:	3708      	adds	r7, #8
     788:	46bd      	mov	sp, r7
     78a:	bd80      	pop	{r7, pc}

0000078c <_ZN4NvicC1Ev>:


/**
 * @brief empty constructor placeholder
 */
Nvic::Nvic()
     78c:	b480      	push	{r7}
     78e:	b083      	sub	sp, #12
     790:	af00      	add	r7, sp, #0
     792:	6078      	str	r0, [r7, #4]
{

}
     794:	687b      	ldr	r3, [r7, #4]
     796:	4618      	mov	r0, r3
     798:	370c      	adds	r7, #12
     79a:	46bd      	mov	sp, r7
     79c:	f85d 7b04 	ldr.w	r7, [sp], #4
     7a0:	4770      	bx	lr

000007a2 <_ZN4NvicD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Nvic::~Nvic()
     7a2:	b480      	push	{r7}
     7a4:	b083      	sub	sp, #12
     7a6:	af00      	add	r7, sp, #0
     7a8:	6078      	str	r0, [r7, #4]
{

}
     7aa:	687b      	ldr	r3, [r7, #4]
     7ac:	4618      	mov	r0, r3
     7ae:	370c      	adds	r7, #12
     7b0:	46bd      	mov	sp, r7
     7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
     7b6:	4770      	bx	lr

000007b8 <_ZN4Nvic17activateInterruptE9interruptm>:
 * @param myInterrupt coresponds to the interrupt number of the interrupt that 
 *        you want to activate.
 * @param priority of the interrput that you want to activate
 */
void Nvic::activateInterrupt(interrupt myInterrupt, uint32_t priority)
{
     7b8:	b580      	push	{r7, lr}
     7ba:	b084      	sub	sp, #16
     7bc:	af02      	add	r7, sp, #8
     7be:	4603      	mov	r3, r0
     7c0:	6039      	str	r1, [r7, #0]
     7c2:	71fb      	strb	r3, [r7, #7]
    
    if((myInterrupt < 139) && (priority < 8))
     7c4:	79fb      	ldrb	r3, [r7, #7]
     7c6:	2b8a      	cmp	r3, #138	; 0x8a
     7c8:	d82b      	bhi.n	822 <_ZN4Nvic17activateInterruptE9interruptm+0x6a>
     7ca:	683b      	ldr	r3, [r7, #0]
     7cc:	2b07      	cmp	r3, #7
     7ce:	d828      	bhi.n	822 <_ZN4Nvic17activateInterruptE9interruptm+0x6a>
    {   
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(corePeripheralBase + PRIn_OFFSET[myInterrupt/4])), priority, ((myInterrupt % nvicRegisterOffset) * 8) + 5, 3, RW);
     7d0:	79fb      	ldrb	r3, [r7, #7]
     7d2:	089b      	lsrs	r3, r3, #2
     7d4:	b2db      	uxtb	r3, r3
     7d6:	461a      	mov	r2, r3
     7d8:	4b14      	ldr	r3, [pc, #80]	; (82c <_ZN4Nvic17activateInterruptE9interruptm+0x74>)
     7da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     7de:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
     7e2:	4618      	mov	r0, r3
     7e4:	79fb      	ldrb	r3, [r7, #7]
     7e6:	f003 0303 	and.w	r3, r3, #3
     7ea:	00db      	lsls	r3, r3, #3
     7ec:	1d5a      	adds	r2, r3, #5
     7ee:	2300      	movs	r3, #0
     7f0:	9300      	str	r3, [sp, #0]
     7f2:	2303      	movs	r3, #3
     7f4:	6839      	ldr	r1, [r7, #0]
     7f6:	f7ff ff21 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(corePeripheralBase + ENn_OFFSET[myInterrupt/32])), (uint32_t)setORClear::set, (uint32_t)(myInterrupt % 32), 1, RW);
     7fa:	79fb      	ldrb	r3, [r7, #7]
     7fc:	095b      	lsrs	r3, r3, #5
     7fe:	b2db      	uxtb	r3, r3
     800:	461a      	mov	r2, r3
     802:	4b0b      	ldr	r3, [pc, #44]	; (830 <_ZN4Nvic17activateInterruptE9interruptm+0x78>)
     804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     808:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
     80c:	4618      	mov	r0, r3
     80e:	79fb      	ldrb	r3, [r7, #7]
     810:	f003 021f 	and.w	r2, r3, #31
     814:	2300      	movs	r3, #0
     816:	9300      	str	r3, [sp, #0]
     818:	2301      	movs	r3, #1
     81a:	2101      	movs	r1, #1
     81c:	f7ff ff0e 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
     820:	e000      	b.n	824 <_ZN4Nvic17activateInterruptE9interruptm+0x6c>

    }
    
    else
    {
        return;
     822:	bf00      	nop
    }
}
     824:	3708      	adds	r7, #8
     826:	46bd      	mov	sp, r7
     828:	bd80      	pop	{r7, pc}
     82a:	bf00      	nop
     82c:	00003450 	.word	0x00003450
     830:	000033ec 	.word	0x000033ec

00000834 <_ZN4Nvic17disableInterruptsEv>:
 *         value to void.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
uint32_t Nvic::disableInterrupts(void)
{
     834:	b480      	push	{r7}
     836:	b083      	sub	sp, #12
     838:	af00      	add	r7, sp, #0

        "mrs     r0, PRIMASK\n"
        "cpsid   i\n"
        "bx      lr\n"
        : "=r" (ui32Ret)
    );
     83a:	f3ef 8010 	mrs	r0, PRIMASK
     83e:	b672      	cpsid	i
     840:	4770      	bx	lr
     842:	607b      	str	r3, [r7, #4]

    return(ui32Ret);
     844:	687b      	ldr	r3, [r7, #4]
}
     846:	4618      	mov	r0, r3
     848:	370c      	adds	r7, #12
     84a:	46bd      	mov	sp, r7
     84c:	f85d 7b04 	ldr.w	r7, [sp], #4
     850:	4770      	bx	lr

00000852 <_ZN4Nvic16enableInterruptsEv>:
 *         value to void.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
uint32_t Nvic::enableInterrupts(void)
{
     852:	b480      	push	{r7}
     854:	b083      	sub	sp, #12
     856:	af00      	add	r7, sp, #0

        "mrs     r0, PRIMASK\n"
        "cpsie   i\n"
        "bx      lr\n"
        : "=r" (ui32Ret)
    );
     858:	f3ef 8010 	mrs	r0, PRIMASK
     85c:	b662      	cpsie	i
     85e:	4770      	bx	lr
     860:	607b      	str	r3, [r7, #4]

    return(ui32Ret);
     862:	687b      	ldr	r3, [r7, #4]
}
     864:	4618      	mov	r0, r3
     866:	370c      	adds	r7, #12
     868:	46bd      	mov	sp, r7
     86a:	f85d 7b04 	ldr.w	r7, [sp], #4
     86e:	4770      	bx	lr

00000870 <_ZN4Nvic3wfiEv>:
 *        module and waits for another interrupt.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
void Nvic::wfi(void)
{
     870:	b480      	push	{r7}
     872:	af00      	add	r7, sp, #0
    //
    asm volatile(

        "wfi     \n"
        "bx    lr\n"
    );
     874:	bf30      	wfi
     876:	4770      	bx	lr
    
}
     878:	bf00      	nop
     87a:	46bd      	mov	sp, r7
     87c:	f85d 7b04 	ldr.w	r7, [sp], #4
     880:	4770      	bx	lr
     882:	bf00      	nop

00000884 <_ZN3AdcC1Ev>:
#include "adc.h"

/**
 * @brief empty constructor placeholder
 */
Adc::Adc()
     884:	b480      	push	{r7}
     886:	b083      	sub	sp, #12
     888:	af00      	add	r7, sp, #0
     88a:	6078      	str	r0, [r7, #4]
{

}
     88c:	687b      	ldr	r3, [r7, #4]
     88e:	4618      	mov	r0, r3
     890:	370c      	adds	r7, #12
     892:	46bd      	mov	sp, r7
     894:	f85d 7b04 	ldr.w	r7, [sp], #4
     898:	4770      	bx	lr

0000089a <_ZN3AdcD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Adc::~Adc()
     89a:	b480      	push	{r7}
     89c:	b083      	sub	sp, #12
     89e:	af00      	add	r7, sp, #0
     8a0:	6078      	str	r0, [r7, #4]
{

}
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	4618      	mov	r0, r3
     8a6:	370c      	adds	r7, #12
     8a8:	46bd      	mov	sp, r7
     8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
     8ae:	4770      	bx	lr

000008b0 <_ZN3Adc16initializeModuleEmmmm>:
 * Implement digital comparator functionality
 * DC interrupt status and clear
 */

void Adc::initializeModule(uint32_t adcModule, uint32_t sequencerPriority, uint32_t hardwareAveraging, uint32_t phaseDelay)
{
     8b0:	b580      	push	{r7, lr}
     8b2:	b088      	sub	sp, #32
     8b4:	af02      	add	r7, sp, #8
     8b6:	60f8      	str	r0, [r7, #12]
     8b8:	60b9      	str	r1, [r7, #8]
     8ba:	607a      	str	r2, [r7, #4]
     8bc:	603b      	str	r3, [r7, #0]
    (*this).adcModule = adcModule;
     8be:	68fb      	ldr	r3, [r7, #12]
     8c0:	68ba      	ldr	r2, [r7, #8]
     8c2:	609a      	str	r2, [r3, #8]
    baseAddress = adc0BaseAddress + (adcModule * 0x1000);
     8c4:	68bb      	ldr	r3, [r7, #8]
     8c6:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     8ca:	3338      	adds	r3, #56	; 0x38
     8cc:	031a      	lsls	r2, r3, #12
     8ce:	68fb      	ldr	r3, [r7, #12]
     8d0:	605a      	str	r2, [r3, #4]

    //0. Enable ADC module clock
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCADC_OFFSET)), (uint32_t)setORClear::set, adcModule, 1, RW);
     8d2:	2300      	movs	r3, #0
     8d4:	9300      	str	r3, [sp, #0]
     8d6:	2301      	movs	r3, #1
     8d8:	68ba      	ldr	r2, [r7, #8]
     8da:	2101      	movs	r1, #1
     8dc:	482b      	ldr	r0, [pc, #172]	; (98c <_ZN3Adc16initializeModuleEmmmm+0xdc>)
     8de:	f7ff fead 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRADC_OFFSET), adcModule, 1, RO) == 0)
     8e2:	2301      	movs	r3, #1
     8e4:	2201      	movs	r2, #1
     8e6:	68b9      	ldr	r1, [r7, #8]
     8e8:	4829      	ldr	r0, [pc, #164]	; (990 <_ZN3Adc16initializeModuleEmmmm+0xe0>)
     8ea:	f7ff fe7d 	bl	5e8 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     8ee:	4603      	mov	r3, r0
     8f0:	2b00      	cmp	r3, #0
     8f2:	bf0c      	ite	eq
     8f4:	2301      	moveq	r3, #1
     8f6:	2300      	movne	r3, #0
     8f8:	b2db      	uxtb	r3, r3
     8fa:	2b00      	cmp	r3, #0
     8fc:	d000      	beq.n	900 <_ZN3Adc16initializeModuleEmmmm+0x50>
     8fe:	e7f0      	b.n	8e2 <_ZN3Adc16initializeModuleEmmmm+0x32>
     * 0.A If required by the application, reconfigure the sample sequencer 
     * priorities in the ADCSSPRI register. The default configuration has 
     * Sample Sequencer 0 with the highest priority and Sample Sequencer 3 as 
     * the lowest priority.
     */
    for(int i = 0; i < 4; i++)
     900:	2300      	movs	r3, #0
     902:	617b      	str	r3, [r7, #20]
     904:	697b      	ldr	r3, [r7, #20]
     906:	2b03      	cmp	r3, #3
     908:	dc14      	bgt.n	934 <_ZN3Adc16initializeModuleEmmmm+0x84>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSPRI_OFFSET)), sequencerPriority >> (4 * i), i * 4, 1 + 1, RW);
     90a:	68fb      	ldr	r3, [r7, #12]
     90c:	685b      	ldr	r3, [r3, #4]
     90e:	3320      	adds	r3, #32
     910:	4618      	mov	r0, r3
     912:	697b      	ldr	r3, [r7, #20]
     914:	009b      	lsls	r3, r3, #2
     916:	687a      	ldr	r2, [r7, #4]
     918:	fa22 f103 	lsr.w	r1, r2, r3
     91c:	697b      	ldr	r3, [r7, #20]
     91e:	009b      	lsls	r3, r3, #2
     920:	461a      	mov	r2, r3
     922:	2300      	movs	r3, #0
     924:	9300      	str	r3, [sp, #0]
     926:	2302      	movs	r3, #2
     928:	f7ff fe88 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    for(int i = 0; i < 4; i++)
     92c:	697b      	ldr	r3, [r7, #20]
     92e:	3301      	adds	r3, #1
     930:	617b      	str	r3, [r7, #20]
     932:	e7e7      	b.n	904 <_ZN3Adc16initializeModuleEmmmm+0x54>
    }

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSAC_OFFSET)), hardwareAveraging, 0, 2 + 1, RW);
     934:	68fb      	ldr	r3, [r7, #12]
     936:	685b      	ldr	r3, [r3, #4]
     938:	3330      	adds	r3, #48	; 0x30
     93a:	4618      	mov	r0, r3
     93c:	2300      	movs	r3, #0
     93e:	9300      	str	r3, [sp, #0]
     940:	2303      	movs	r3, #3
     942:	2200      	movs	r2, #0
     944:	6839      	ldr	r1, [r7, #0]
     946:	f7ff fe79 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCCTL_OFFSET)), hardwareAveraging == 0 ? 0x0 : 0x1, 6, 1, RW);
     94a:	68fb      	ldr	r3, [r7, #12]
     94c:	685b      	ldr	r3, [r3, #4]
     94e:	3338      	adds	r3, #56	; 0x38
     950:	4618      	mov	r0, r3
     952:	683b      	ldr	r3, [r7, #0]
     954:	2b00      	cmp	r3, #0
     956:	bf14      	ite	ne
     958:	2301      	movne	r3, #1
     95a:	2300      	moveq	r3, #0
     95c:	b2db      	uxtb	r3, r3
     95e:	4619      	mov	r1, r3
     960:	2300      	movs	r3, #0
     962:	9300      	str	r3, [sp, #0]
     964:	2301      	movs	r3, #1
     966:	2206      	movs	r2, #6
     968:	f7ff fe68 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSPC_OFFSET)), phaseDelay, 0, 3 + 1, RW);
     96c:	68fb      	ldr	r3, [r7, #12]
     96e:	685b      	ldr	r3, [r3, #4]
     970:	3324      	adds	r3, #36	; 0x24
     972:	4618      	mov	r0, r3
     974:	2300      	movs	r3, #0
     976:	9300      	str	r3, [sp, #0]
     978:	2304      	movs	r3, #4
     97a:	2200      	movs	r2, #0
     97c:	6a39      	ldr	r1, [r7, #32]
     97e:	f7ff fe5d 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    
}
     982:	bf00      	nop
     984:	3718      	adds	r7, #24
     986:	46bd      	mov	sp, r7
     988:	bd80      	pop	{r7, pc}
     98a:	bf00      	nop
     98c:	400fe638 	.word	0x400fe638
     990:	400fea38 	.word	0x400fea38

00000994 <_ZN3Adc20initializeForPollingEmmmmPFvvE>:
 * 
 * @param adcModule Clock to be intialized for the ADC module
 * @param action when polling the adc, the action to be taken when RIS is activate
 */
void Adc::initializeForPolling(uint32_t sampleSequencer, uint32_t sequencerTrigSrc, uint32_t inputSource, uint32_t sequencerControl, void (*action)(void))
{
     994:	b580      	push	{r7, lr}
     996:	b084      	sub	sp, #16
     998:	af00      	add	r7, sp, #0
     99a:	60f8      	str	r0, [r7, #12]
     99c:	60b9      	str	r1, [r7, #8]
     99e:	607a      	str	r2, [r7, #4]
     9a0:	603b      	str	r3, [r7, #0]
    (*this).sampleSequencer = sampleSequencer;
     9a2:	68fb      	ldr	r3, [r7, #12]
     9a4:	68ba      	ldr	r2, [r7, #8]
     9a6:	60da      	str	r2, [r3, #12]
    (*this).sequencerTrigSrc = sequencerTrigSrc;
     9a8:	68fb      	ldr	r3, [r7, #12]
     9aa:	687a      	ldr	r2, [r7, #4]
     9ac:	615a      	str	r2, [r3, #20]
    (*this).inputSource = inputSource;
     9ae:	68fb      	ldr	r3, [r7, #12]
     9b0:	683a      	ldr	r2, [r7, #0]
     9b2:	619a      	str	r2, [r3, #24]
    (*this).sequencerControl = sequencerControl;
     9b4:	68fb      	ldr	r3, [r7, #12]
     9b6:	69ba      	ldr	r2, [r7, #24]
     9b8:	61da      	str	r2, [r3, #28]
    initialization();
     9ba:	68f8      	ldr	r0, [r7, #12]
     9bc:	f000 fa40 	bl	e40 <_ZN3Adc14initializationEv>
    (*this).action = action;
     9c0:	68fb      	ldr	r3, [r7, #12]
     9c2:	69fa      	ldr	r2, [r7, #28]
     9c4:	601a      	str	r2, [r3, #0]

}
     9c6:	bf00      	nop
     9c8:	3710      	adds	r7, #16
     9ca:	46bd      	mov	sp, r7
     9cc:	bd80      	pop	{r7, pc}

000009ce <_ZN3Adc22initializeForInterruptEmmmmm>:

void Adc::initializeForInterrupt(uint32_t sampleSequencer, uint32_t sequencerTrigSrc, uint32_t inputSource, uint32_t sequencerControl, uint32_t interruptPriority)
{
     9ce:	b580      	push	{r7, lr}
     9d0:	b086      	sub	sp, #24
     9d2:	af02      	add	r7, sp, #8
     9d4:	60f8      	str	r0, [r7, #12]
     9d6:	60b9      	str	r1, [r7, #8]
     9d8:	607a      	str	r2, [r7, #4]
     9da:	603b      	str	r3, [r7, #0]
    (*this).sampleSequencer = sampleSequencer;
     9dc:	68fb      	ldr	r3, [r7, #12]
     9de:	68ba      	ldr	r2, [r7, #8]
     9e0:	60da      	str	r2, [r3, #12]
    (*this).sequencerTrigSrc = sequencerTrigSrc;
     9e2:	68fb      	ldr	r3, [r7, #12]
     9e4:	687a      	ldr	r2, [r7, #4]
     9e6:	615a      	str	r2, [r3, #20]
    (*this).inputSource = inputSource;
     9e8:	68fb      	ldr	r3, [r7, #12]
     9ea:	683a      	ldr	r2, [r7, #0]
     9ec:	619a      	str	r2, [r3, #24]
    (*this).sequencerControl = sequencerControl;
     9ee:	68fb      	ldr	r3, [r7, #12]
     9f0:	69ba      	ldr	r2, [r7, #24]
     9f2:	61da      	str	r2, [r3, #28]
    initialization();
     9f4:	68f8      	ldr	r0, [r7, #12]
     9f6:	f000 fa23 	bl	e40 <_ZN3Adc14initializationEv>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCIM_OFFSET)), (uint32_t)setORClear::set, sampleSequencer, 1, RW);
     9fa:	68fb      	ldr	r3, [r7, #12]
     9fc:	685b      	ldr	r3, [r3, #4]
     9fe:	3308      	adds	r3, #8
     a00:	4618      	mov	r0, r3
     a02:	2300      	movs	r3, #0
     a04:	9300      	str	r3, [sp, #0]
     a06:	2301      	movs	r3, #1
     a08:	68ba      	ldr	r2, [r7, #8]
     a0a:	2101      	movs	r1, #1
     a0c:	f7ff fe16 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    if(adcModule == (uint32_t)adcModule::module0)
     a10:	68fb      	ldr	r3, [r7, #12]
     a12:	689b      	ldr	r3, [r3, #8]
     a14:	2b00      	cmp	r3, #0
     a16:	d121      	bne.n	a5c <_ZN3Adc22initializeForInterruptEmmmmm+0x8e>
     a18:	68bb      	ldr	r3, [r7, #8]
     a1a:	2b03      	cmp	r3, #3
     a1c:	d840      	bhi.n	aa0 <_ZN3Adc22initializeForInterruptEmmmmm+0xd2>
     a1e:	a201      	add	r2, pc, #4	; (adr r2, a24 <_ZN3Adc22initializeForInterruptEmmmmm+0x56>)
     a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a24:	00000a35 	.word	0x00000a35
     a28:	00000a3f 	.word	0x00000a3f
     a2c:	00000a49 	.word	0x00000a49
     a30:	00000a53 	.word	0x00000a53
    {
        switch (sampleSequencer)
        {
            case (uint32_t)sampleSequencer::SS0:
                Nvic::activateInterrupt(ADC_0_Sequence_0_Interrupt, interruptPriority);
     a34:	69f9      	ldr	r1, [r7, #28]
     a36:	200e      	movs	r0, #14
     a38:	f7ff febe 	bl	7b8 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a3c:	e033      	b.n	aa6 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS1:
                Nvic::activateInterrupt(ADC_0_Sequence_1_Interrupt, interruptPriority);
     a3e:	69f9      	ldr	r1, [r7, #28]
     a40:	200f      	movs	r0, #15
     a42:	f7ff feb9 	bl	7b8 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a46:	e02e      	b.n	aa6 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS2:
                Nvic::activateInterrupt(ADC_0_Sequence_2_Interrupt, interruptPriority);
     a48:	69f9      	ldr	r1, [r7, #28]
     a4a:	2010      	movs	r0, #16
     a4c:	f7ff feb4 	bl	7b8 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a50:	e029      	b.n	aa6 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS3:
                Nvic::activateInterrupt(ADC_0_Sequence_3_Interrupt, interruptPriority);
     a52:	69f9      	ldr	r1, [r7, #28]
     a54:	2011      	movs	r0, #17
     a56:	f7ff feaf 	bl	7b8 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a5a:	e024      	b.n	aa6 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>
     a5c:	68bb      	ldr	r3, [r7, #8]
     a5e:	2b03      	cmp	r3, #3
     a60:	d820      	bhi.n	aa4 <_ZN3Adc22initializeForInterruptEmmmmm+0xd6>
     a62:	a201      	add	r2, pc, #4	; (adr r2, a68 <_ZN3Adc22initializeForInterruptEmmmmm+0x9a>)
     a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a68:	00000a79 	.word	0x00000a79
     a6c:	00000a83 	.word	0x00000a83
     a70:	00000a8d 	.word	0x00000a8d
     a74:	00000a97 	.word	0x00000a97
    else
    {
        switch (sampleSequencer)
        {
            case (uint32_t)sampleSequencer::SS0:
                Nvic::activateInterrupt(ADC_1_Sequence_0_Interrupt, interruptPriority);
     a78:	69f9      	ldr	r1, [r7, #28]
     a7a:	2030      	movs	r0, #48	; 0x30
     a7c:	f7ff fe9c 	bl	7b8 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a80:	e011      	b.n	aa6 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS1:
                Nvic::activateInterrupt(ADC_1_Sequence_1_Interrupt, interruptPriority);
     a82:	69f9      	ldr	r1, [r7, #28]
     a84:	2031      	movs	r0, #49	; 0x31
     a86:	f7ff fe97 	bl	7b8 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a8a:	e00c      	b.n	aa6 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS2:
                Nvic::activateInterrupt(ADC_1_Sequence_2_Interrupt, interruptPriority);
     a8c:	69f9      	ldr	r1, [r7, #28]
     a8e:	2032      	movs	r0, #50	; 0x32
     a90:	f7ff fe92 	bl	7b8 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a94:	e007      	b.n	aa6 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>

            case (uint32_t)sampleSequencer::SS3:
                Nvic::activateInterrupt(ADC_1_Sequence_3_Interrupt, interruptPriority);
     a96:	69f9      	ldr	r1, [r7, #28]
     a98:	2033      	movs	r0, #51	; 0x33
     a9a:	f7ff fe8d 	bl	7b8 <_ZN4Nvic17activateInterruptE9interruptm>
                break;
     a9e:	e002      	b.n	aa6 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>
                break;
     aa0:	bf00      	nop
     aa2:	e000      	b.n	aa6 <_ZN3Adc22initializeForInterruptEmmmmm+0xd8>
            
            default:
                break;
     aa4:	bf00      	nop
        }
    }
    
}
     aa6:	bf00      	nop
     aa8:	3710      	adds	r7, #16
     aaa:	46bd      	mov	sp, r7
     aac:	bd80      	pop	{r7, pc}

00000aae <_ZN3Adc21enableSampleSequencerEv>:


void Adc::enableSampleSequencer(void)
{
     aae:	b580      	push	{r7, lr}
     ab0:	b084      	sub	sp, #16
     ab2:	af02      	add	r7, sp, #8
     ab4:	6078      	str	r0, [r7, #4]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCACTSS_OFFSET)), (uint32_t)setORClear::set, sampleSequencer, 1, RW);
     ab6:	687b      	ldr	r3, [r7, #4]
     ab8:	685b      	ldr	r3, [r3, #4]
     aba:	4618      	mov	r0, r3
     abc:	687b      	ldr	r3, [r7, #4]
     abe:	68da      	ldr	r2, [r3, #12]
     ac0:	2300      	movs	r3, #0
     ac2:	9300      	str	r3, [sp, #0]
     ac4:	2301      	movs	r3, #1
     ac6:	2101      	movs	r1, #1
     ac8:	f7ff fdb8 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     acc:	bf00      	nop
     ace:	3708      	adds	r7, #8
     ad0:	46bd      	mov	sp, r7
     ad2:	bd80      	pop	{r7, pc}

00000ad4 <_ZN3Adc23enableSampleSequencerDcEmm>:

void Adc::enableSampleSequencerDc(uint32_t dcOperation, uint32_t dcSelect)
{
     ad4:	b580      	push	{r7, lr}
     ad6:	b08a      	sub	sp, #40	; 0x28
     ad8:	af02      	add	r7, sp, #8
     ada:	60f8      	str	r0, [r7, #12]
     adc:	60b9      	str	r1, [r7, #8]
     ade:	607a      	str	r2, [r7, #4]
    if(sampleSequencer == (uint32_t)sampleSequencer::SS0)
     ae0:	68fb      	ldr	r3, [r7, #12]
     ae2:	68db      	ldr	r3, [r3, #12]
     ae4:	2b00      	cmp	r3, #0
     ae6:	d129      	bne.n	b3c <_ZN3Adc23enableSampleSequencerDcEmm+0x68>
    {
        for(uint32_t i = 0; i < 8; i++)
     ae8:	2300      	movs	r3, #0
     aea:	61fb      	str	r3, [r7, #28]
     aec:	69fb      	ldr	r3, [r7, #28]
     aee:	2b07      	cmp	r3, #7
     af0:	f200 8098 	bhi.w	c24 <_ZN3Adc23enableSampleSequencerDcEmm+0x150>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSOP0_OFFSET)), dcOperation >> (4*i), 4*i, 1, RW);
     af4:	68fb      	ldr	r3, [r7, #12]
     af6:	685b      	ldr	r3, [r3, #4]
     af8:	3350      	adds	r3, #80	; 0x50
     afa:	4618      	mov	r0, r3
     afc:	69fb      	ldr	r3, [r7, #28]
     afe:	009b      	lsls	r3, r3, #2
     b00:	68ba      	ldr	r2, [r7, #8]
     b02:	fa22 f103 	lsr.w	r1, r2, r3
     b06:	69fb      	ldr	r3, [r7, #28]
     b08:	009a      	lsls	r2, r3, #2
     b0a:	2300      	movs	r3, #0
     b0c:	9300      	str	r3, [sp, #0]
     b0e:	2301      	movs	r3, #1
     b10:	f7ff fd94 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSDC0_OFFSET)), dcSelect >> (4*i), 4*i, 4, RW);
     b14:	68fb      	ldr	r3, [r7, #12]
     b16:	685b      	ldr	r3, [r3, #4]
     b18:	3354      	adds	r3, #84	; 0x54
     b1a:	4618      	mov	r0, r3
     b1c:	69fb      	ldr	r3, [r7, #28]
     b1e:	009b      	lsls	r3, r3, #2
     b20:	687a      	ldr	r2, [r7, #4]
     b22:	fa22 f103 	lsr.w	r1, r2, r3
     b26:	69fb      	ldr	r3, [r7, #28]
     b28:	009a      	lsls	r2, r3, #2
     b2a:	2300      	movs	r3, #0
     b2c:	9300      	str	r3, [sp, #0]
     b2e:	2304      	movs	r3, #4
     b30:	f7ff fd84 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(uint32_t i = 0; i < 8; i++)
     b34:	69fb      	ldr	r3, [r7, #28]
     b36:	3301      	adds	r3, #1
     b38:	61fb      	str	r3, [r7, #28]
     b3a:	e7d7      	b.n	aec <_ZN3Adc23enableSampleSequencerDcEmm+0x18>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS1)
     b3c:	68fb      	ldr	r3, [r7, #12]
     b3e:	68db      	ldr	r3, [r3, #12]
     b40:	2b01      	cmp	r3, #1
     b42:	d128      	bne.n	b96 <_ZN3Adc23enableSampleSequencerDcEmm+0xc2>
    {
        for(uint32_t i = 0; i < 4; i++)
     b44:	2300      	movs	r3, #0
     b46:	61bb      	str	r3, [r7, #24]
     b48:	69bb      	ldr	r3, [r7, #24]
     b4a:	2b03      	cmp	r3, #3
     b4c:	d86a      	bhi.n	c24 <_ZN3Adc23enableSampleSequencerDcEmm+0x150>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSOP1_OFFSET)), dcOperation >> (4*i), 4*i, 1, RW);
     b4e:	68fb      	ldr	r3, [r7, #12]
     b50:	685b      	ldr	r3, [r3, #4]
     b52:	3370      	adds	r3, #112	; 0x70
     b54:	4618      	mov	r0, r3
     b56:	69bb      	ldr	r3, [r7, #24]
     b58:	009b      	lsls	r3, r3, #2
     b5a:	68ba      	ldr	r2, [r7, #8]
     b5c:	fa22 f103 	lsr.w	r1, r2, r3
     b60:	69bb      	ldr	r3, [r7, #24]
     b62:	009a      	lsls	r2, r3, #2
     b64:	2300      	movs	r3, #0
     b66:	9300      	str	r3, [sp, #0]
     b68:	2301      	movs	r3, #1
     b6a:	f7ff fd67 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSDC1_OFFSET)), dcSelect >> (4*i), 4*i, 4, RW);
     b6e:	68fb      	ldr	r3, [r7, #12]
     b70:	685b      	ldr	r3, [r3, #4]
     b72:	3374      	adds	r3, #116	; 0x74
     b74:	4618      	mov	r0, r3
     b76:	69bb      	ldr	r3, [r7, #24]
     b78:	009b      	lsls	r3, r3, #2
     b7a:	687a      	ldr	r2, [r7, #4]
     b7c:	fa22 f103 	lsr.w	r1, r2, r3
     b80:	69bb      	ldr	r3, [r7, #24]
     b82:	009a      	lsls	r2, r3, #2
     b84:	2300      	movs	r3, #0
     b86:	9300      	str	r3, [sp, #0]
     b88:	2304      	movs	r3, #4
     b8a:	f7ff fd57 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(uint32_t i = 0; i < 4; i++)
     b8e:	69bb      	ldr	r3, [r7, #24]
     b90:	3301      	adds	r3, #1
     b92:	61bb      	str	r3, [r7, #24]
     b94:	e7d8      	b.n	b48 <_ZN3Adc23enableSampleSequencerDcEmm+0x74>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS2)
     b96:	68fb      	ldr	r3, [r7, #12]
     b98:	68db      	ldr	r3, [r3, #12]
     b9a:	2b02      	cmp	r3, #2
     b9c:	d128      	bne.n	bf0 <_ZN3Adc23enableSampleSequencerDcEmm+0x11c>
    {
        for(uint32_t i = 0; i < 4; i++)
     b9e:	2300      	movs	r3, #0
     ba0:	617b      	str	r3, [r7, #20]
     ba2:	697b      	ldr	r3, [r7, #20]
     ba4:	2b03      	cmp	r3, #3
     ba6:	d83d      	bhi.n	c24 <_ZN3Adc23enableSampleSequencerDcEmm+0x150>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSOP2_OFFSET)), dcOperation >> (4*i), 4*i, 1, RW);
     ba8:	68fb      	ldr	r3, [r7, #12]
     baa:	685b      	ldr	r3, [r3, #4]
     bac:	3390      	adds	r3, #144	; 0x90
     bae:	4618      	mov	r0, r3
     bb0:	697b      	ldr	r3, [r7, #20]
     bb2:	009b      	lsls	r3, r3, #2
     bb4:	68ba      	ldr	r2, [r7, #8]
     bb6:	fa22 f103 	lsr.w	r1, r2, r3
     bba:	697b      	ldr	r3, [r7, #20]
     bbc:	009a      	lsls	r2, r3, #2
     bbe:	2300      	movs	r3, #0
     bc0:	9300      	str	r3, [sp, #0]
     bc2:	2301      	movs	r3, #1
     bc4:	f7ff fd3a 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSDC2_OFFSET)), dcSelect >> (4*i), 4*i, 4, RW);
     bc8:	68fb      	ldr	r3, [r7, #12]
     bca:	685b      	ldr	r3, [r3, #4]
     bcc:	3394      	adds	r3, #148	; 0x94
     bce:	4618      	mov	r0, r3
     bd0:	697b      	ldr	r3, [r7, #20]
     bd2:	009b      	lsls	r3, r3, #2
     bd4:	687a      	ldr	r2, [r7, #4]
     bd6:	fa22 f103 	lsr.w	r1, r2, r3
     bda:	697b      	ldr	r3, [r7, #20]
     bdc:	009a      	lsls	r2, r3, #2
     bde:	2300      	movs	r3, #0
     be0:	9300      	str	r3, [sp, #0]
     be2:	2304      	movs	r3, #4
     be4:	f7ff fd2a 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(uint32_t i = 0; i < 4; i++)
     be8:	697b      	ldr	r3, [r7, #20]
     bea:	3301      	adds	r3, #1
     bec:	617b      	str	r3, [r7, #20]
     bee:	e7d8      	b.n	ba2 <_ZN3Adc23enableSampleSequencerDcEmm+0xce>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS3)
     bf0:	68fb      	ldr	r3, [r7, #12]
     bf2:	68db      	ldr	r3, [r3, #12]
     bf4:	2b03      	cmp	r3, #3
     bf6:	d115      	bne.n	c24 <_ZN3Adc23enableSampleSequencerDcEmm+0x150>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSOP3_OFFSET)), dcOperation, 0, 1, RW);
     bf8:	68fb      	ldr	r3, [r7, #12]
     bfa:	685b      	ldr	r3, [r3, #4]
     bfc:	33b0      	adds	r3, #176	; 0xb0
     bfe:	4618      	mov	r0, r3
     c00:	2300      	movs	r3, #0
     c02:	9300      	str	r3, [sp, #0]
     c04:	2301      	movs	r3, #1
     c06:	2200      	movs	r2, #0
     c08:	68b9      	ldr	r1, [r7, #8]
     c0a:	f7ff fd17 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCSSDC3_OFFSET)), dcSelect, 0, 4, RW);
     c0e:	68fb      	ldr	r3, [r7, #12]
     c10:	685b      	ldr	r3, [r3, #4]
     c12:	33b4      	adds	r3, #180	; 0xb4
     c14:	4618      	mov	r0, r3
     c16:	2300      	movs	r3, #0
     c18:	9300      	str	r3, [sp, #0]
     c1a:	2304      	movs	r3, #4
     c1c:	2200      	movs	r2, #0
     c1e:	6879      	ldr	r1, [r7, #4]
     c20:	f7ff fd0c 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    }
}
     c24:	bf00      	nop
     c26:	3720      	adds	r7, #32
     c28:	46bd      	mov	sp, r7
     c2a:	bd80      	pop	{r7, pc}

00000c2c <_ZN3Adc12initializeDcEmmmmm>:

void Adc::initializeDc(uint32_t adcModule, uint32_t dc, uint32_t bitField, uint32_t highBand, uint32_t lowBand)
{
     c2c:	b580      	push	{r7, lr}
     c2e:	b088      	sub	sp, #32
     c30:	af02      	add	r7, sp, #8
     c32:	60f8      	str	r0, [r7, #12]
     c34:	60b9      	str	r1, [r7, #8]
     c36:	607a      	str	r2, [r7, #4]
     c38:	603b      	str	r3, [r7, #0]
    uint32_t dcCtlAddress = (adc0BaseAddress + (adcModule * 0x1000) + (ADCDCCTL0_OFFSET + dc*0x4));
     c3a:	68fb      	ldr	r3, [r7, #12]
     c3c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     c40:	3338      	adds	r3, #56	; 0x38
     c42:	029a      	lsls	r2, r3, #10
     c44:	68bb      	ldr	r3, [r7, #8]
     c46:	4413      	add	r3, r2
     c48:	f503 7360 	add.w	r3, r3, #896	; 0x380
     c4c:	009b      	lsls	r3, r3, #2
     c4e:	617b      	str	r3, [r7, #20]
    uint32_t dcCmpAddress = (adc0BaseAddress + (adcModule * 0x1000) + (ADCDCCMP0_OFFSET + dc*0x4));
     c50:	68fb      	ldr	r3, [r7, #12]
     c52:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     c56:	3338      	adds	r3, #56	; 0x38
     c58:	029a      	lsls	r2, r3, #10
     c5a:	68bb      	ldr	r3, [r7, #8]
     c5c:	4413      	add	r3, r2
     c5e:	f503 7364 	add.w	r3, r3, #912	; 0x390
     c62:	009b      	lsls	r3, r3, #2
     c64:	613b      	str	r3, [r7, #16]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), bitField, 0, 2, RW);
     c66:	6978      	ldr	r0, [r7, #20]
     c68:	2300      	movs	r3, #0
     c6a:	9300      	str	r3, [sp, #0]
     c6c:	2302      	movs	r3, #2
     c6e:	2200      	movs	r2, #0
     c70:	6879      	ldr	r1, [r7, #4]
     c72:	f7ff fce3 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), bitField >> 2, 2, 2, RW);
     c76:	6978      	ldr	r0, [r7, #20]
     c78:	687b      	ldr	r3, [r7, #4]
     c7a:	0899      	lsrs	r1, r3, #2
     c7c:	2300      	movs	r3, #0
     c7e:	9300      	str	r3, [sp, #0]
     c80:	2302      	movs	r3, #2
     c82:	2202      	movs	r2, #2
     c84:	f7ff fcda 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), bitField >> 4, 4, 1, RW);
     c88:	6978      	ldr	r0, [r7, #20]
     c8a:	687b      	ldr	r3, [r7, #4]
     c8c:	0919      	lsrs	r1, r3, #4
     c8e:	2300      	movs	r3, #0
     c90:	9300      	str	r3, [sp, #0]
     c92:	2301      	movs	r3, #1
     c94:	2204      	movs	r2, #4
     c96:	f7ff fcd1 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), bitField >> 8, 8, 2, RW);
     c9a:	6978      	ldr	r0, [r7, #20]
     c9c:	687b      	ldr	r3, [r7, #4]
     c9e:	0a19      	lsrs	r1, r3, #8
     ca0:	2300      	movs	r3, #0
     ca2:	9300      	str	r3, [sp, #0]
     ca4:	2302      	movs	r3, #2
     ca6:	2208      	movs	r2, #8
     ca8:	f7ff fcc8 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), bitField >> 10, 10, 2, RW);
     cac:	6978      	ldr	r0, [r7, #20]
     cae:	687b      	ldr	r3, [r7, #4]
     cb0:	0a99      	lsrs	r1, r3, #10
     cb2:	2300      	movs	r3, #0
     cb4:	9300      	str	r3, [sp, #0]
     cb6:	2302      	movs	r3, #2
     cb8:	220a      	movs	r2, #10
     cba:	f7ff fcbf 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCtlAddress), bitField >> 12, 12, 1, RW);
     cbe:	6978      	ldr	r0, [r7, #20]
     cc0:	687b      	ldr	r3, [r7, #4]
     cc2:	0b19      	lsrs	r1, r3, #12
     cc4:	2300      	movs	r3, #0
     cc6:	9300      	str	r3, [sp, #0]
     cc8:	2301      	movs	r3, #1
     cca:	220c      	movs	r2, #12
     ccc:	f7ff fcb6 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCmpAddress), lowBand, 0, 11 + 1, RW);
     cd0:	6938      	ldr	r0, [r7, #16]
     cd2:	2300      	movs	r3, #0
     cd4:	9300      	str	r3, [sp, #0]
     cd6:	230c      	movs	r3, #12
     cd8:	2200      	movs	r2, #0
     cda:	6a39      	ldr	r1, [r7, #32]
     cdc:	f7ff fcae 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)dcCmpAddress), highBand, 16, 27 - 16 + 1, RW);
     ce0:	6938      	ldr	r0, [r7, #16]
     ce2:	2300      	movs	r3, #0
     ce4:	9300      	str	r3, [sp, #0]
     ce6:	230c      	movs	r3, #12
     ce8:	2210      	movs	r2, #16
     cea:	6839      	ldr	r1, [r7, #0]
     cec:	f7ff fca6 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

}
     cf0:	bf00      	nop
     cf2:	3718      	adds	r7, #24
     cf4:	46bd      	mov	sp, r7
     cf6:	bd80      	pop	{r7, pc}

00000cf8 <_ZN3Adc10pollStatusEv>:

void Adc::pollStatus(void)
{
     cf8:	b580      	push	{r7, lr}
     cfa:	b082      	sub	sp, #8
     cfc:	af00      	add	r7, sp, #0
     cfe:	6078      	str	r0, [r7, #4]
    if(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCRIS_OFFSET)), sampleSequencer, 1, RO) == (uint32_t)setORClear::set)
     d00:	687b      	ldr	r3, [r7, #4]
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	3304      	adds	r3, #4
     d06:	4618      	mov	r0, r3
     d08:	687b      	ldr	r3, [r7, #4]
     d0a:	68d9      	ldr	r1, [r3, #12]
     d0c:	2301      	movs	r3, #1
     d0e:	2201      	movs	r2, #1
     d10:	f7ff fc6a 	bl	5e8 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     d14:	4603      	mov	r3, r0
     d16:	2b01      	cmp	r3, #1
     d18:	bf0c      	ite	eq
     d1a:	2301      	moveq	r3, #1
     d1c:	2300      	movne	r3, #0
     d1e:	b2db      	uxtb	r3, r3
     d20:	2b00      	cmp	r3, #0
     d22:	d002      	beq.n	d2a <_ZN3Adc10pollStatusEv+0x32>
    {
        action();
     d24:	687b      	ldr	r3, [r7, #4]
     d26:	681b      	ldr	r3, [r3, #0]
     d28:	4798      	blx	r3
    }
}
     d2a:	bf00      	nop
     d2c:	3708      	adds	r7, #8
     d2e:	46bd      	mov	sp, r7
     d30:	bd80      	pop	{r7, pc}

00000d32 <_ZN3Adc21pollDigitalComparatorEv>:

void Adc::pollDigitalComparator(void)
{
     d32:	b580      	push	{r7, lr}
     d34:	b082      	sub	sp, #8
     d36:	af00      	add	r7, sp, #0
     d38:	6078      	str	r0, [r7, #4]
    if(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCRIS_OFFSET)), 16, 1, RO) == (uint32_t)setORClear::set)
     d3a:	687b      	ldr	r3, [r7, #4]
     d3c:	685b      	ldr	r3, [r3, #4]
     d3e:	3304      	adds	r3, #4
     d40:	4618      	mov	r0, r3
     d42:	2301      	movs	r3, #1
     d44:	2201      	movs	r2, #1
     d46:	2110      	movs	r1, #16
     d48:	f7ff fc4e 	bl	5e8 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     d4c:	4603      	mov	r3, r0
     d4e:	2b01      	cmp	r3, #1
     d50:	bf0c      	ite	eq
     d52:	2301      	moveq	r3, #1
     d54:	2300      	movne	r3, #0
     d56:	b2db      	uxtb	r3, r3
     d58:	2b00      	cmp	r3, #0
     d5a:	d002      	beq.n	d62 <_ZN3Adc21pollDigitalComparatorEv+0x30>
    {
        action();
     d5c:	687b      	ldr	r3, [r7, #4]
     d5e:	681b      	ldr	r3, [r3, #0]
     d60:	4798      	blx	r3
    }
}
     d62:	bf00      	nop
     d64:	3708      	adds	r7, #8
     d66:	46bd      	mov	sp, r7
     d68:	bd80      	pop	{r7, pc}

00000d6a <_ZN3Adc14softwareTrigerEv>:


void Adc::softwareTriger(void)
{
     d6a:	b580      	push	{r7, lr}
     d6c:	b084      	sub	sp, #16
     d6e:	af02      	add	r7, sp, #8
     d70:	6078      	str	r0, [r7, #4]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCPSSI_OFFSET)), (uint32_t)setORClear::set, sampleSequencer, 1, RW);
     d72:	687b      	ldr	r3, [r7, #4]
     d74:	685b      	ldr	r3, [r3, #4]
     d76:	3328      	adds	r3, #40	; 0x28
     d78:	4618      	mov	r0, r3
     d7a:	687b      	ldr	r3, [r7, #4]
     d7c:	68da      	ldr	r2, [r3, #12]
     d7e:	2300      	movs	r3, #0
     d80:	9300      	str	r3, [sp, #0]
     d82:	2301      	movs	r3, #1
     d84:	2101      	movs	r1, #1
     d86:	f7ff fc59 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     d8a:	bf00      	nop
     d8c:	3708      	adds	r7, #8
     d8e:	46bd      	mov	sp, r7
     d90:	bd80      	pop	{r7, pc}

00000d92 <_ZN3Adc12getAdcSampleEv>:

uint32_t Adc::getAdcSample(void)
{
     d92:	b580      	push	{r7, lr}
     d94:	b082      	sub	sp, #8
     d96:	af00      	add	r7, sp, #0
     d98:	6078      	str	r0, [r7, #4]
    return(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSFIFO0_OFFSET + (ssOffset * sampleSequencer)))), 0, 11 + 1, RO));
     d9a:	687b      	ldr	r3, [r7, #4]
     d9c:	685a      	ldr	r2, [r3, #4]
     d9e:	687b      	ldr	r3, [r7, #4]
     da0:	68db      	ldr	r3, [r3, #12]
     da2:	015b      	lsls	r3, r3, #5
     da4:	4413      	add	r3, r2
     da6:	3348      	adds	r3, #72	; 0x48
     da8:	4618      	mov	r0, r3
     daa:	2301      	movs	r3, #1
     dac:	220c      	movs	r2, #12
     dae:	2100      	movs	r1, #0
     db0:	f7ff fc1a 	bl	5e8 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     db4:	4603      	mov	r3, r0
}
     db6:	4618      	mov	r0, r3
     db8:	3708      	adds	r7, #8
     dba:	46bd      	mov	sp, r7
     dbc:	bd80      	pop	{r7, pc}

00000dbe <_ZN3Adc14clearInterruptEv>:

void Adc::clearInterrupt(void)
{
     dbe:	b580      	push	{r7, lr}
     dc0:	b084      	sub	sp, #16
     dc2:	af02      	add	r7, sp, #8
     dc4:	6078      	str	r0, [r7, #4]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCISC_OFFSET)), (uint32_t)setORClear::set, sampleSequencer, 1, RW1C);
     dc6:	687b      	ldr	r3, [r7, #4]
     dc8:	685b      	ldr	r3, [r3, #4]
     dca:	330c      	adds	r3, #12
     dcc:	4618      	mov	r0, r3
     dce:	687b      	ldr	r3, [r7, #4]
     dd0:	68da      	ldr	r2, [r3, #12]
     dd2:	2303      	movs	r3, #3
     dd4:	9300      	str	r3, [sp, #0]
     dd6:	2301      	movs	r3, #1
     dd8:	2101      	movs	r1, #1
     dda:	f7ff fc2f 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     dde:	bf00      	nop
     de0:	3708      	adds	r7, #8
     de2:	46bd      	mov	sp, r7
     de4:	bd80      	pop	{r7, pc}

00000de6 <_ZN3Adc20getDcInterruptStatusEmm>:

uint32_t Adc::getDcInterruptStatus(uint32_t adcModule, uint32_t digitalComparator)
{
     de6:	b580      	push	{r7, lr}
     de8:	b082      	sub	sp, #8
     dea:	af00      	add	r7, sp, #0
     dec:	6078      	str	r0, [r7, #4]
     dee:	6039      	str	r1, [r7, #0]
    return(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(adc0BaseAddress + (adcModule * 0x1000) + ADCDCISC_OFFSET)), digitalComparator, 1, RW1C));
     df0:	687b      	ldr	r3, [r7, #4]
     df2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     df6:	3338      	adds	r3, #56	; 0x38
     df8:	031b      	lsls	r3, r3, #12
     dfa:	3334      	adds	r3, #52	; 0x34
     dfc:	4618      	mov	r0, r3
     dfe:	2303      	movs	r3, #3
     e00:	2201      	movs	r2, #1
     e02:	6839      	ldr	r1, [r7, #0]
     e04:	f7ff fbf0 	bl	5e8 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     e08:	4603      	mov	r3, r0
}
     e0a:	4618      	mov	r0, r3
     e0c:	3708      	adds	r7, #8
     e0e:	46bd      	mov	sp, r7
     e10:	bd80      	pop	{r7, pc}

00000e12 <_ZN3Adc16clearDcInterruptEmm>:

void Adc::clearDcInterrupt(uint32_t adcModule, uint32_t digitalComparator)
{
     e12:	b580      	push	{r7, lr}
     e14:	b084      	sub	sp, #16
     e16:	af02      	add	r7, sp, #8
     e18:	6078      	str	r0, [r7, #4]
     e1a:	6039      	str	r1, [r7, #0]
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(adc0BaseAddress + (adcModule * 0x1000) + ADCDCISC_OFFSET)), (uint32_t)setORClear::set , digitalComparator, 1, RW1C);
     e1c:	687b      	ldr	r3, [r7, #4]
     e1e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     e22:	3338      	adds	r3, #56	; 0x38
     e24:	031b      	lsls	r3, r3, #12
     e26:	3334      	adds	r3, #52	; 0x34
     e28:	4618      	mov	r0, r3
     e2a:	2303      	movs	r3, #3
     e2c:	9300      	str	r3, [sp, #0]
     e2e:	2301      	movs	r3, #1
     e30:	683a      	ldr	r2, [r7, #0]
     e32:	2101      	movs	r1, #1
     e34:	f7ff fc02 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     e38:	bf00      	nop
     e3a:	3708      	adds	r7, #8
     e3c:	46bd      	mov	sp, r7
     e3e:	bd80      	pop	{r7, pc}

00000e40 <_ZN3Adc14initializationEv>:
 *          Configuration of the sample sequencers is slightly more complex 
 *          than the module initialization because each sample sequencer is 
 *          completely programmable.
 */
void Adc::initialization(void)
{    
     e40:	b580      	push	{r7, lr}
     e42:	b08c      	sub	sp, #48	; 0x30
     e44:	af02      	add	r7, sp, #8
     e46:	6078      	str	r0, [r7, #4]
     * corresponding ASENn bit in the ADCACTSS register. Programming of the 
     * sample sequencers is allowed without having them enabled. Disabling the 
     * sequencer during programming prevents erroneous execution if a trigger
     * event were to occur during the configuration process.
     */
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCACTSS_OFFSET)), (uint32_t)setORClear::clear, sampleSequencer, 1, RW);
     e48:	687b      	ldr	r3, [r7, #4]
     e4a:	685b      	ldr	r3, [r3, #4]
     e4c:	4618      	mov	r0, r3
     e4e:	687b      	ldr	r3, [r7, #4]
     e50:	68da      	ldr	r2, [r3, #12]
     e52:	2300      	movs	r3, #0
     e54:	9300      	str	r3, [sp, #0]
     e56:	2301      	movs	r3, #1
     e58:	2100      	movs	r1, #0
     e5a:	f7ff fbef 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
     * 0 for all generators.
     */


    //2. Configure the trigger event for the sample sequencer in the ADCEMUX register.
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + ADCEMUX_OFFSET)), sequencerTrigSrc, sampleSequencer * 4, 3 + 1, RW);
     e5e:	687b      	ldr	r3, [r7, #4]
     e60:	685b      	ldr	r3, [r3, #4]
     e62:	3314      	adds	r3, #20
     e64:	4618      	mov	r0, r3
     e66:	687b      	ldr	r3, [r7, #4]
     e68:	6959      	ldr	r1, [r3, #20]
     e6a:	687b      	ldr	r3, [r7, #4]
     e6c:	68db      	ldr	r3, [r3, #12]
     e6e:	009a      	lsls	r2, r3, #2
     e70:	2300      	movs	r3, #0
     e72:	9300      	str	r3, [sp, #0]
     e74:	2304      	movs	r3, #4
     e76:	f7ff fbe1 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //3. For each sample in the sample sequence, configure the corresponding input source in the ADCSSMUXn register.
    if(sampleSequencer == (uint32_t)sampleSequencer::SS0)
     e7a:	687b      	ldr	r3, [r7, #4]
     e7c:	68db      	ldr	r3, [r3, #12]
     e7e:	2b00      	cmp	r3, #0
     e80:	d11f      	bne.n	ec2 <_ZN3Adc14initializationEv+0x82>
    {
        for(int i = 0; i < 8; i++)
     e82:	2300      	movs	r3, #0
     e84:	627b      	str	r3, [r7, #36]	; 0x24
     e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     e88:	2b07      	cmp	r3, #7
     e8a:	f300 8083 	bgt.w	f94 <_ZN3Adc14initializationEv+0x154>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
     e8e:	687b      	ldr	r3, [r7, #4]
     e90:	685a      	ldr	r2, [r3, #4]
     e92:	687b      	ldr	r3, [r7, #4]
     e94:	68db      	ldr	r3, [r3, #12]
     e96:	3302      	adds	r3, #2
     e98:	015b      	lsls	r3, r3, #5
     e9a:	4413      	add	r3, r2
     e9c:	4618      	mov	r0, r3
     e9e:	687b      	ldr	r3, [r7, #4]
     ea0:	699a      	ldr	r2, [r3, #24]
     ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ea4:	009b      	lsls	r3, r3, #2
     ea6:	fa22 f103 	lsr.w	r1, r2, r3
     eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     eac:	009b      	lsls	r3, r3, #2
     eae:	461a      	mov	r2, r3
     eb0:	2300      	movs	r3, #0
     eb2:	9300      	str	r3, [sp, #0]
     eb4:	2304      	movs	r3, #4
     eb6:	f7ff fbc1 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 8; i++)
     eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ebc:	3301      	adds	r3, #1
     ebe:	627b      	str	r3, [r7, #36]	; 0x24
     ec0:	e7e1      	b.n	e86 <_ZN3Adc14initializationEv+0x46>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS1)
     ec2:	687b      	ldr	r3, [r7, #4]
     ec4:	68db      	ldr	r3, [r3, #12]
     ec6:	2b01      	cmp	r3, #1
     ec8:	d11e      	bne.n	f08 <_ZN3Adc14initializationEv+0xc8>
    {
        for(int i = 0; i < 4; i++)
     eca:	2300      	movs	r3, #0
     ecc:	623b      	str	r3, [r7, #32]
     ece:	6a3b      	ldr	r3, [r7, #32]
     ed0:	2b03      	cmp	r3, #3
     ed2:	dc5f      	bgt.n	f94 <_ZN3Adc14initializationEv+0x154>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
     ed4:	687b      	ldr	r3, [r7, #4]
     ed6:	685a      	ldr	r2, [r3, #4]
     ed8:	687b      	ldr	r3, [r7, #4]
     eda:	68db      	ldr	r3, [r3, #12]
     edc:	3302      	adds	r3, #2
     ede:	015b      	lsls	r3, r3, #5
     ee0:	4413      	add	r3, r2
     ee2:	4618      	mov	r0, r3
     ee4:	687b      	ldr	r3, [r7, #4]
     ee6:	699a      	ldr	r2, [r3, #24]
     ee8:	6a3b      	ldr	r3, [r7, #32]
     eea:	009b      	lsls	r3, r3, #2
     eec:	fa22 f103 	lsr.w	r1, r2, r3
     ef0:	6a3b      	ldr	r3, [r7, #32]
     ef2:	009b      	lsls	r3, r3, #2
     ef4:	461a      	mov	r2, r3
     ef6:	2300      	movs	r3, #0
     ef8:	9300      	str	r3, [sp, #0]
     efa:	2304      	movs	r3, #4
     efc:	f7ff fb9e 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 4; i++)
     f00:	6a3b      	ldr	r3, [r7, #32]
     f02:	3301      	adds	r3, #1
     f04:	623b      	str	r3, [r7, #32]
     f06:	e7e2      	b.n	ece <_ZN3Adc14initializationEv+0x8e>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS2)
     f08:	687b      	ldr	r3, [r7, #4]
     f0a:	68db      	ldr	r3, [r3, #12]
     f0c:	2b02      	cmp	r3, #2
     f0e:	d11e      	bne.n	f4e <_ZN3Adc14initializationEv+0x10e>
    {
        for(int i = 0; i < 4; i++)
     f10:	2300      	movs	r3, #0
     f12:	61fb      	str	r3, [r7, #28]
     f14:	69fb      	ldr	r3, [r7, #28]
     f16:	2b03      	cmp	r3, #3
     f18:	dc3c      	bgt.n	f94 <_ZN3Adc14initializationEv+0x154>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
     f1a:	687b      	ldr	r3, [r7, #4]
     f1c:	685a      	ldr	r2, [r3, #4]
     f1e:	687b      	ldr	r3, [r7, #4]
     f20:	68db      	ldr	r3, [r3, #12]
     f22:	3302      	adds	r3, #2
     f24:	015b      	lsls	r3, r3, #5
     f26:	4413      	add	r3, r2
     f28:	4618      	mov	r0, r3
     f2a:	687b      	ldr	r3, [r7, #4]
     f2c:	699a      	ldr	r2, [r3, #24]
     f2e:	69fb      	ldr	r3, [r7, #28]
     f30:	009b      	lsls	r3, r3, #2
     f32:	fa22 f103 	lsr.w	r1, r2, r3
     f36:	69fb      	ldr	r3, [r7, #28]
     f38:	009b      	lsls	r3, r3, #2
     f3a:	461a      	mov	r2, r3
     f3c:	2300      	movs	r3, #0
     f3e:	9300      	str	r3, [sp, #0]
     f40:	2304      	movs	r3, #4
     f42:	f7ff fb7b 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 4; i++)
     f46:	69fb      	ldr	r3, [r7, #28]
     f48:	3301      	adds	r3, #1
     f4a:	61fb      	str	r3, [r7, #28]
     f4c:	e7e2      	b.n	f14 <_ZN3Adc14initializationEv+0xd4>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS3)
     f4e:	687b      	ldr	r3, [r7, #4]
     f50:	68db      	ldr	r3, [r3, #12]
     f52:	2b03      	cmp	r3, #3
     f54:	d11e      	bne.n	f94 <_ZN3Adc14initializationEv+0x154>
    {
        for(int i = 0; i < 1; i++)
     f56:	2300      	movs	r3, #0
     f58:	61bb      	str	r3, [r7, #24]
     f5a:	69bb      	ldr	r3, [r7, #24]
     f5c:	2b00      	cmp	r3, #0
     f5e:	dc19      	bgt.n	f94 <_ZN3Adc14initializationEv+0x154>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSMUX0_OFFSET + (ssOffset * sampleSequencer)))), inputSource >> (i * 4), i * 4, 3 + 1, RW);
     f60:	687b      	ldr	r3, [r7, #4]
     f62:	685a      	ldr	r2, [r3, #4]
     f64:	687b      	ldr	r3, [r7, #4]
     f66:	68db      	ldr	r3, [r3, #12]
     f68:	3302      	adds	r3, #2
     f6a:	015b      	lsls	r3, r3, #5
     f6c:	4413      	add	r3, r2
     f6e:	4618      	mov	r0, r3
     f70:	687b      	ldr	r3, [r7, #4]
     f72:	699a      	ldr	r2, [r3, #24]
     f74:	69bb      	ldr	r3, [r7, #24]
     f76:	009b      	lsls	r3, r3, #2
     f78:	fa22 f103 	lsr.w	r1, r2, r3
     f7c:	69bb      	ldr	r3, [r7, #24]
     f7e:	009b      	lsls	r3, r3, #2
     f80:	461a      	mov	r2, r3
     f82:	2300      	movs	r3, #0
     f84:	9300      	str	r3, [sp, #0]
     f86:	2304      	movs	r3, #4
     f88:	f7ff fb58 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 1; i++)
     f8c:	69bb      	ldr	r3, [r7, #24]
     f8e:	3301      	adds	r3, #1
     f90:	61bb      	str	r3, [r7, #24]
     f92:	e7e2      	b.n	f5a <_ZN3Adc14initializationEv+0x11a>
     * 4. For each sample in the sample sequence, configure the sample control 
     * bits in the corresponding nibble in the ADCSSCTLn register. When 
     * programming the last nibble, ensure that the END bit is set. Failure to 
     * set the END bit causes unpredictable behavior.
     */
    if(sampleSequencer == (uint32_t)sampleSequencer::SS0)
     f94:	687b      	ldr	r3, [r7, #4]
     f96:	68db      	ldr	r3, [r3, #12]
     f98:	2b00      	cmp	r3, #0
     f9a:	d11b      	bne.n	fd4 <_ZN3Adc14initializationEv+0x194>
    {
        for(int i = 0; i < 32; i++)
     f9c:	2300      	movs	r3, #0
     f9e:	617b      	str	r3, [r7, #20]
     fa0:	697b      	ldr	r3, [r7, #20]
     fa2:	2b1f      	cmp	r3, #31
     fa4:	dc76      	bgt.n	1094 <_ZN3Adc14initializationEv+0x254>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> i, i, 1, RW);
     fa6:	687b      	ldr	r3, [r7, #4]
     fa8:	685a      	ldr	r2, [r3, #4]
     faa:	687b      	ldr	r3, [r7, #4]
     fac:	68db      	ldr	r3, [r3, #12]
     fae:	015b      	lsls	r3, r3, #5
     fb0:	4413      	add	r3, r2
     fb2:	3344      	adds	r3, #68	; 0x44
     fb4:	4618      	mov	r0, r3
     fb6:	687b      	ldr	r3, [r7, #4]
     fb8:	69da      	ldr	r2, [r3, #28]
     fba:	697b      	ldr	r3, [r7, #20]
     fbc:	fa22 f103 	lsr.w	r1, r2, r3
     fc0:	697a      	ldr	r2, [r7, #20]
     fc2:	2300      	movs	r3, #0
     fc4:	9300      	str	r3, [sp, #0]
     fc6:	2301      	movs	r3, #1
     fc8:	f7ff fb38 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 32; i++)
     fcc:	697b      	ldr	r3, [r7, #20]
     fce:	3301      	adds	r3, #1
     fd0:	617b      	str	r3, [r7, #20]
     fd2:	e7e5      	b.n	fa0 <_ZN3Adc14initializationEv+0x160>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS1)
     fd4:	687b      	ldr	r3, [r7, #4]
     fd6:	68db      	ldr	r3, [r3, #12]
     fd8:	2b01      	cmp	r3, #1
     fda:	d11b      	bne.n	1014 <_ZN3Adc14initializationEv+0x1d4>
    {
        for(int i = 0; i < 16; i++)
     fdc:	2300      	movs	r3, #0
     fde:	613b      	str	r3, [r7, #16]
     fe0:	693b      	ldr	r3, [r7, #16]
     fe2:	2b0f      	cmp	r3, #15
     fe4:	dc56      	bgt.n	1094 <_ZN3Adc14initializationEv+0x254>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> i, i, 1, RW);
     fe6:	687b      	ldr	r3, [r7, #4]
     fe8:	685a      	ldr	r2, [r3, #4]
     fea:	687b      	ldr	r3, [r7, #4]
     fec:	68db      	ldr	r3, [r3, #12]
     fee:	015b      	lsls	r3, r3, #5
     ff0:	4413      	add	r3, r2
     ff2:	3344      	adds	r3, #68	; 0x44
     ff4:	4618      	mov	r0, r3
     ff6:	687b      	ldr	r3, [r7, #4]
     ff8:	69da      	ldr	r2, [r3, #28]
     ffa:	693b      	ldr	r3, [r7, #16]
     ffc:	fa22 f103 	lsr.w	r1, r2, r3
    1000:	693a      	ldr	r2, [r7, #16]
    1002:	2300      	movs	r3, #0
    1004:	9300      	str	r3, [sp, #0]
    1006:	2301      	movs	r3, #1
    1008:	f7ff fb18 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 16; i++)
    100c:	693b      	ldr	r3, [r7, #16]
    100e:	3301      	adds	r3, #1
    1010:	613b      	str	r3, [r7, #16]
    1012:	e7e5      	b.n	fe0 <_ZN3Adc14initializationEv+0x1a0>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS2)
    1014:	687b      	ldr	r3, [r7, #4]
    1016:	68db      	ldr	r3, [r3, #12]
    1018:	2b02      	cmp	r3, #2
    101a:	d11b      	bne.n	1054 <_ZN3Adc14initializationEv+0x214>
    {
        for(int i = 0; i < 16; i++)
    101c:	2300      	movs	r3, #0
    101e:	60fb      	str	r3, [r7, #12]
    1020:	68fb      	ldr	r3, [r7, #12]
    1022:	2b0f      	cmp	r3, #15
    1024:	dc36      	bgt.n	1094 <_ZN3Adc14initializationEv+0x254>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> i, i, 1, RW);
    1026:	687b      	ldr	r3, [r7, #4]
    1028:	685a      	ldr	r2, [r3, #4]
    102a:	687b      	ldr	r3, [r7, #4]
    102c:	68db      	ldr	r3, [r3, #12]
    102e:	015b      	lsls	r3, r3, #5
    1030:	4413      	add	r3, r2
    1032:	3344      	adds	r3, #68	; 0x44
    1034:	4618      	mov	r0, r3
    1036:	687b      	ldr	r3, [r7, #4]
    1038:	69da      	ldr	r2, [r3, #28]
    103a:	68fb      	ldr	r3, [r7, #12]
    103c:	fa22 f103 	lsr.w	r1, r2, r3
    1040:	68fa      	ldr	r2, [r7, #12]
    1042:	2300      	movs	r3, #0
    1044:	9300      	str	r3, [sp, #0]
    1046:	2301      	movs	r3, #1
    1048:	f7ff faf8 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 16; i++)
    104c:	68fb      	ldr	r3, [r7, #12]
    104e:	3301      	adds	r3, #1
    1050:	60fb      	str	r3, [r7, #12]
    1052:	e7e5      	b.n	1020 <_ZN3Adc14initializationEv+0x1e0>
        }
    }

    else if(sampleSequencer == (uint32_t)sampleSequencer::SS3)
    1054:	687b      	ldr	r3, [r7, #4]
    1056:	68db      	ldr	r3, [r3, #12]
    1058:	2b03      	cmp	r3, #3
    105a:	d11b      	bne.n	1094 <_ZN3Adc14initializationEv+0x254>
    {
        for(int i = 0; i < 4; i++)
    105c:	2300      	movs	r3, #0
    105e:	60bb      	str	r3, [r7, #8]
    1060:	68bb      	ldr	r3, [r7, #8]
    1062:	2b03      	cmp	r3, #3
    1064:	dc16      	bgt.n	1094 <_ZN3Adc14initializationEv+0x254>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + (ADCSSCTL0_OFFSET + (ssOffset * sampleSequencer)))), sequencerControl >> i, i, 1, RW);
    1066:	687b      	ldr	r3, [r7, #4]
    1068:	685a      	ldr	r2, [r3, #4]
    106a:	687b      	ldr	r3, [r7, #4]
    106c:	68db      	ldr	r3, [r3, #12]
    106e:	015b      	lsls	r3, r3, #5
    1070:	4413      	add	r3, r2
    1072:	3344      	adds	r3, #68	; 0x44
    1074:	4618      	mov	r0, r3
    1076:	687b      	ldr	r3, [r7, #4]
    1078:	69da      	ldr	r2, [r3, #28]
    107a:	68bb      	ldr	r3, [r7, #8]
    107c:	fa22 f103 	lsr.w	r1, r2, r3
    1080:	68ba      	ldr	r2, [r7, #8]
    1082:	2300      	movs	r3, #0
    1084:	9300      	str	r3, [sp, #0]
    1086:	2301      	movs	r3, #1
    1088:	f7ff fad8 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        for(int i = 0; i < 4; i++)
    108c:	68bb      	ldr	r3, [r7, #8]
    108e:	3301      	adds	r3, #1
    1090:	60bb      	str	r3, [r7, #8]
    1092:	e7e5      	b.n	1060 <_ZN3Adc14initializationEv+0x220>
        }
    }

    1094:	bf00      	nop
    1096:	3728      	adds	r7, #40	; 0x28
    1098:	46bd      	mov	sp, r7
    109a:	bd80      	pop	{r7, pc}

0000109c <_ZN13SystemControlC1Ev>:
#include "systemControl.h"

/**
 * @brief empty constructor placeholder
 */
SystemControl::SystemControl()
    109c:	b480      	push	{r7}
    109e:	b083      	sub	sp, #12
    10a0:	af00      	add	r7, sp, #0
    10a2:	6078      	str	r0, [r7, #4]
{
    
}
    10a4:	687b      	ldr	r3, [r7, #4]
    10a6:	4618      	mov	r0, r3
    10a8:	370c      	adds	r7, #12
    10aa:	46bd      	mov	sp, r7
    10ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    10b0:	4770      	bx	lr

000010b2 <_ZN13SystemControlD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
SystemControl::~SystemControl()
    10b2:	b480      	push	{r7}
    10b4:	b083      	sub	sp, #12
    10b6:	af00      	add	r7, sp, #0
    10b8:	6078      	str	r0, [r7, #4]
{
	
}
    10ba:	687b      	ldr	r3, [r7, #4]
    10bc:	4618      	mov	r0, r3
    10be:	370c      	adds	r7, #12
    10c0:	46bd      	mov	sp, r7
    10c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    10c6:	4770      	bx	lr

000010c8 <_ZN13SystemControl16initializeGPIOHBEv>:

/**
 * @brief Initializes the system to use GPIO AHB for use instead of the APB
 */
void SystemControl::initializeGPIOHB(void)
{
    10c8:	b580      	push	{r7, lr}
    10ca:	b082      	sub	sp, #8
    10cc:	af02      	add	r7, sp, #8

	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 0, 1, RW);
    10ce:	2300      	movs	r3, #0
    10d0:	9300      	str	r3, [sp, #0]
    10d2:	2301      	movs	r3, #1
    10d4:	2200      	movs	r2, #0
    10d6:	2101      	movs	r1, #1
    10d8:	4816      	ldr	r0, [pc, #88]	; (1134 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    10da:	f7ff faaf 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 1, 1, RW);
    10de:	2300      	movs	r3, #0
    10e0:	9300      	str	r3, [sp, #0]
    10e2:	2301      	movs	r3, #1
    10e4:	2201      	movs	r2, #1
    10e6:	2101      	movs	r1, #1
    10e8:	4812      	ldr	r0, [pc, #72]	; (1134 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    10ea:	f7ff faa7 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 2, 1, RW);
    10ee:	2300      	movs	r3, #0
    10f0:	9300      	str	r3, [sp, #0]
    10f2:	2301      	movs	r3, #1
    10f4:	2202      	movs	r2, #2
    10f6:	2101      	movs	r1, #1
    10f8:	480e      	ldr	r0, [pc, #56]	; (1134 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    10fa:	f7ff fa9f 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 3, 1, RW);
    10fe:	2300      	movs	r3, #0
    1100:	9300      	str	r3, [sp, #0]
    1102:	2301      	movs	r3, #1
    1104:	2203      	movs	r2, #3
    1106:	2101      	movs	r1, #1
    1108:	480a      	ldr	r0, [pc, #40]	; (1134 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    110a:	f7ff fa97 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 4, 1, RW);
    110e:	2300      	movs	r3, #0
    1110:	9300      	str	r3, [sp, #0]
    1112:	2301      	movs	r3, #1
    1114:	2204      	movs	r2, #4
    1116:	2101      	movs	r1, #1
    1118:	4806      	ldr	r0, [pc, #24]	; (1134 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    111a:	f7ff fa8f 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), (uint32_t)setORClear::set, 5, 1, RW);
    111e:	2300      	movs	r3, #0
    1120:	9300      	str	r3, [sp, #0]
    1122:	2301      	movs	r3, #1
    1124:	2205      	movs	r2, #5
    1126:	2101      	movs	r1, #1
    1128:	4802      	ldr	r0, [pc, #8]	; (1134 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
    112a:	f7ff fa87 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    112e:	bf00      	nop
    1130:	46bd      	mov	sp, r7
    1132:	bd80      	pop	{r7, pc}
    1134:	400fe06c 	.word	0x400fe06c

00001138 <_ZN13SystemControl15initializeClockE7SYSDIV2>:
 * @brief Initializes the PLL for system clock use
 *
 * @param frequency of the new system clock.
 */ 
void SystemControl::initializeClock(SYSDIV2 frequency)
{
    1138:	b580      	push	{r7, lr}
    113a:	b084      	sub	sp, #16
    113c:	af02      	add	r7, sp, #8
    113e:	4603      	mov	r3, r0
    1140:	71fb      	strb	r3, [r7, #7]
	
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::set, 31, 1, RW); //0. Use RCC2.
    1142:	2300      	movs	r3, #0
    1144:	9300      	str	r3, [sp, #0]
    1146:	2301      	movs	r3, #1
    1148:	221f      	movs	r2, #31
    114a:	2101      	movs	r1, #1
    114c:	482d      	ldr	r0, [pc, #180]	; (1204 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    114e:	f7ff fa75 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::set, 11, 1, RW); //1. Bypass PLL while initiializing
    1152:	2300      	movs	r3, #0
    1154:	9300      	str	r3, [sp, #0]
    1156:	2301      	movs	r3, #1
    1158:	220b      	movs	r2, #11
    115a:	2101      	movs	r1, #1
    115c:	4829      	ldr	r0, [pc, #164]	; (1204 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    115e:	f7ff fa6d 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC_OFFSET)), _16MHz_XTAL, 6, 5, RW); // 2. Select the crystal value and the oscillator source, configure for 16MHz crystal.
    1162:	2300      	movs	r3, #0
    1164:	9300      	str	r3, [sp, #0]
    1166:	2305      	movs	r3, #5
    1168:	2206      	movs	r2, #6
    116a:	2115      	movs	r1, #21
    116c:	4826      	ldr	r0, [pc, #152]	; (1208 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xd0>)
    116e:	f7ff fa65 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), MOSC, 4, 3, RW);  //Confgure for main oscillator source.
    1172:	2300      	movs	r3, #0
    1174:	9300      	str	r3, [sp, #0]
    1176:	2303      	movs	r3, #3
    1178:	2204      	movs	r2, #4
    117a:	2100      	movs	r1, #0
    117c:	4821      	ldr	r0, [pc, #132]	; (1204 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    117e:	f7ff fa5d 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::clear, 13, 1, RW); // 3. Activate PLL by clearing PWRDN.
    1182:	2300      	movs	r3, #0
    1184:	9300      	str	r3, [sp, #0]
    1186:	2301      	movs	r3, #1
    1188:	220d      	movs	r2, #13
    118a:	2100      	movs	r1, #0
    118c:	481d      	ldr	r0, [pc, #116]	; (1204 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    118e:	f7ff fa55 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

	/*
	 * Append the SYSDIV2LSB bit to the SYSDIV2 field to create a 7 bit divisor 
	 * using the 400 MHz PLL output.
	 */
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::set, 30, 1, RW);
    1192:	2300      	movs	r3, #0
    1194:	9300      	str	r3, [sp, #0]
    1196:	2301      	movs	r3, #1
    1198:	221e      	movs	r2, #30
    119a:	2101      	movs	r1, #1
    119c:	4819      	ldr	r0, [pc, #100]	; (1204 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    119e:	f7ff fa4d 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), ((frequency - 1) & 0x01), 22, 1, RW);
    11a2:	79fb      	ldrb	r3, [r7, #7]
    11a4:	3b01      	subs	r3, #1
    11a6:	f003 0101 	and.w	r1, r3, #1
    11aa:	2300      	movs	r3, #0
    11ac:	9300      	str	r3, [sp, #0]
    11ae:	2301      	movs	r3, #1
    11b0:	2216      	movs	r2, #22
    11b2:	4814      	ldr	r0, [pc, #80]	; (1204 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    11b4:	f7ff fa42 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), ((frequency - 1) >> 1), 23, 6, RW);
    11b8:	79fb      	ldrb	r3, [r7, #7]
    11ba:	3b01      	subs	r3, #1
    11bc:	105b      	asrs	r3, r3, #1
    11be:	4619      	mov	r1, r3
    11c0:	2300      	movs	r3, #0
    11c2:	9300      	str	r3, [sp, #0]
    11c4:	2306      	movs	r3, #6
    11c6:	2217      	movs	r2, #23
    11c8:	480e      	ldr	r0, [pc, #56]	; (1204 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    11ca:	f7ff fa37 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

	while((Register::getRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RIS_OFFSET)), 6, 1, RO)) == 0)  // 5. Wait for the PLL to lock by polling PLLRIS.
    11ce:	2301      	movs	r3, #1
    11d0:	2201      	movs	r2, #1
    11d2:	2106      	movs	r1, #6
    11d4:	480d      	ldr	r0, [pc, #52]	; (120c <_ZN13SystemControl15initializeClockE7SYSDIV2+0xd4>)
    11d6:	f7ff fa07 	bl	5e8 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    11da:	4603      	mov	r3, r0
    11dc:	2b00      	cmp	r3, #0
    11de:	bf0c      	ite	eq
    11e0:	2301      	moveq	r3, #1
    11e2:	2300      	movne	r3, #0
    11e4:	b2db      	uxtb	r3, r3
    11e6:	2b00      	cmp	r3, #0
    11e8:	d000      	beq.n	11ec <_ZN13SystemControl15initializeClockE7SYSDIV2+0xb4>
    11ea:	e7f0      	b.n	11ce <_ZN13SystemControl15initializeClockE7SYSDIV2+0x96>
	{

	}
	
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), (uint32_t)setORClear::clear, 11, 1, RW); // 6. Enable use of the PLL by clearing BYPASS.
    11ec:	2300      	movs	r3, #0
    11ee:	9300      	str	r3, [sp, #0]
    11f0:	2301      	movs	r3, #1
    11f2:	220b      	movs	r2, #11
    11f4:	2100      	movs	r1, #0
    11f6:	4803      	ldr	r0, [pc, #12]	; (1204 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
    11f8:	f7ff fa20 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    11fc:	bf00      	nop
    11fe:	3708      	adds	r7, #8
    1200:	46bd      	mov	sp, r7
    1202:	bd80      	pop	{r7, pc}
    1204:	400fe070 	.word	0x400fe070
    1208:	400fe060 	.word	0x400fe060
    120c:	400fe050 	.word	0x400fe050

00001210 <_ZN4GpioC1Ev>:
#include "gpio.h"

/**
 * @brief empty constructor placeholder
 */
Gpio::Gpio()
    1210:	b480      	push	{r7}
    1212:	b083      	sub	sp, #12
    1214:	af00      	add	r7, sp, #0
    1216:	6078      	str	r0, [r7, #4]
    1218:	687b      	ldr	r3, [r7, #4]
    121a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    121e:	60da      	str	r2, [r3, #12]
{

}
    1220:	687b      	ldr	r3, [r7, #4]
    1222:	4618      	mov	r0, r3
    1224:	370c      	adds	r7, #12
    1226:	46bd      	mov	sp, r7
    1228:	f85d 7b04 	ldr.w	r7, [sp], #4
    122c:	4770      	bx	lr

0000122e <_ZN4GpioD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Gpio::~Gpio()
    122e:	b480      	push	{r7}
    1230:	b083      	sub	sp, #12
    1232:	af00      	add	r7, sp, #0
    1234:	6078      	str	r0, [r7, #4]
{   

}
    1236:	687b      	ldr	r3, [r7, #4]
    1238:	4618      	mov	r0, r3
    123a:	370c      	adds	r7, #12
    123c:	46bd      	mov	sp, r7
    123e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1242:	4770      	bx	lr

00001244 <_ZN4Gpio10initializeEm9direction>:
 * @brief Simple gpio initializer constructor.
 * @param gpio pin to be initialized.
 * @param dir of the gpio, to be an output or input.
 */
void Gpio::initialize(uint32_t gpio, direction dir)
{  
    1244:	b580      	push	{r7, lr}
    1246:	b086      	sub	sp, #24
    1248:	af02      	add	r7, sp, #8
    124a:	60f8      	str	r0, [r7, #12]
    124c:	60b9      	str	r1, [r7, #8]
    124e:	4613      	mov	r3, r2
    1250:	71fb      	strb	r3, [r7, #7]
    alternateFunction = gpio%100; //get encoding for alternate function
    1252:	68ba      	ldr	r2, [r7, #8]
    1254:	4b84      	ldr	r3, [pc, #528]	; (1468 <_ZN4Gpio10initializeEm9direction+0x224>)
    1256:	fba3 1302 	umull	r1, r3, r3, r2
    125a:	095b      	lsrs	r3, r3, #5
    125c:	2164      	movs	r1, #100	; 0x64
    125e:	fb01 f303 	mul.w	r3, r1, r3
    1262:	1ad3      	subs	r3, r2, r3
    1264:	461a      	mov	r2, r3
    1266:	68fb      	ldr	r3, [r7, #12]
    1268:	60da      	str	r2, [r3, #12]
    gpio = gpio/100; //get rid of gpio encoding
    126a:	68bb      	ldr	r3, [r7, #8]
    126c:	4a7e      	ldr	r2, [pc, #504]	; (1468 <_ZN4Gpio10initializeEm9direction+0x224>)
    126e:	fba2 2303 	umull	r2, r3, r2, r3
    1272:	095b      	lsrs	r3, r3, #5
    1274:	60bb      	str	r3, [r7, #8]

    gpioPort = (gpio/8);
    1276:	68bb      	ldr	r3, [r7, #8]
    1278:	08da      	lsrs	r2, r3, #3
    127a:	68fb      	ldr	r3, [r7, #12]
    127c:	615a      	str	r2, [r3, #20]
    (*this).gpio = (gpio%8);
    127e:	68bb      	ldr	r3, [r7, #8]
    1280:	f003 0207 	and.w	r2, r3, #7
    1284:	68fb      	ldr	r3, [r7, #12]
    1286:	601a      	str	r2, [r3, #0]
    (*this).dir = dir;
    1288:	68fb      	ldr	r3, [r7, #12]
    128a:	79fa      	ldrb	r2, [r7, #7]
    128c:	711a      	strb	r2, [r3, #4]
    baseAddress = GPIO_Port_AHB_BASE + (gpioPort) * 0x1000;
    128e:	68fb      	ldr	r3, [r7, #12]
    1290:	695b      	ldr	r3, [r3, #20]
    1292:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
    1296:	3358      	adds	r3, #88	; 0x58
    1298:	031a      	lsls	r2, r3, #12
    129a:	68fb      	ldr	r3, [r7, #12]
    129c:	611a      	str	r2, [r3, #16]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCGPIO_OFFSET)), (uint32_t)setORClear::set, (uint32_t)(gpioPort), 1, RW);
    129e:	68fb      	ldr	r3, [r7, #12]
    12a0:	695a      	ldr	r2, [r3, #20]
    12a2:	2300      	movs	r3, #0
    12a4:	9300      	str	r3, [sp, #0]
    12a6:	2301      	movs	r3, #1
    12a8:	2101      	movs	r1, #1
    12aa:	4870      	ldr	r0, [pc, #448]	; (146c <_ZN4Gpio10initializeEm9direction+0x228>)
    12ac:	f7ff f9c6 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + PRGPIO_OFFSET)), (uint32_t)(gpioPort), 1, RO) == 0)
    12b0:	68fb      	ldr	r3, [r7, #12]
    12b2:	6959      	ldr	r1, [r3, #20]
    12b4:	2301      	movs	r3, #1
    12b6:	2201      	movs	r2, #1
    12b8:	486d      	ldr	r0, [pc, #436]	; (1470 <_ZN4Gpio10initializeEm9direction+0x22c>)
    12ba:	f7ff f995 	bl	5e8 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    12be:	4603      	mov	r3, r0
    12c0:	2b00      	cmp	r3, #0
    12c2:	bf0c      	ite	eq
    12c4:	2301      	moveq	r3, #1
    12c6:	2300      	movne	r3, #0
    12c8:	b2db      	uxtb	r3, r3
    12ca:	2b00      	cmp	r3, #0
    12cc:	d000      	beq.n	12d0 <_ZN4Gpio10initializeEm9direction+0x8c>
    12ce:	e7ef      	b.n	12b0 <_ZN4Gpio10initializeEm9direction+0x6c>
    {
        //Ready?
    }

    //Unlock NMI for use.
    if(gpio == ((uint32_t)PF0::GPIO)/100)
    12d0:	68bb      	ldr	r3, [r7, #8]
    12d2:	2b28      	cmp	r3, #40	; 0x28
    12d4:	d11c      	bne.n	1310 <_ZN4Gpio10initializeEm9direction+0xcc>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOLOCK_OFFSET)), gpioKey, 0, 32, RW);
    12d6:	68fb      	ldr	r3, [r7, #12]
    12d8:	691b      	ldr	r3, [r3, #16]
    12da:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
    12de:	4618      	mov	r0, r3
    12e0:	2300      	movs	r3, #0
    12e2:	9300      	str	r3, [sp, #0]
    12e4:	2320      	movs	r3, #32
    12e6:	2200      	movs	r2, #0
    12e8:	4962      	ldr	r1, [pc, #392]	; (1474 <_ZN4Gpio10initializeEm9direction+0x230>)
    12ea:	f7ff f9a7 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        *(((volatile uint32_t*)(baseAddress + GPIOCR_OFFSET))) |= (0x1 << (*this).gpio);
    12ee:	68fb      	ldr	r3, [r7, #12]
    12f0:	691b      	ldr	r3, [r3, #16]
    12f2:	f203 5324 	addw	r3, r3, #1316	; 0x524
    12f6:	681b      	ldr	r3, [r3, #0]
    12f8:	68fa      	ldr	r2, [r7, #12]
    12fa:	6812      	ldr	r2, [r2, #0]
    12fc:	2101      	movs	r1, #1
    12fe:	fa01 f202 	lsl.w	r2, r1, r2
    1302:	4611      	mov	r1, r2
    1304:	68fa      	ldr	r2, [r7, #12]
    1306:	6912      	ldr	r2, [r2, #16]
    1308:	f202 5224 	addw	r2, r2, #1316	; 0x524
    130c:	430b      	orrs	r3, r1
    130e:	6013      	str	r3, [r2, #0]
    }

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODIR_OFFSET)), (*this).dir, (*this).gpio, 1, RW);
    1310:	68fb      	ldr	r3, [r7, #12]
    1312:	691b      	ldr	r3, [r3, #16]
    1314:	f503 6380 	add.w	r3, r3, #1024	; 0x400
    1318:	4618      	mov	r0, r3
    131a:	68fb      	ldr	r3, [r7, #12]
    131c:	791b      	ldrb	r3, [r3, #4]
    131e:	4619      	mov	r1, r3
    1320:	68fb      	ldr	r3, [r7, #12]
    1322:	681a      	ldr	r2, [r3, #0]
    1324:	2300      	movs	r3, #0
    1326:	9300      	str	r3, [sp, #0]
    1328:	2301      	movs	r3, #1
    132a:	f7ff f987 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    
    //If no alternate function encoding
    if(alternateFunction == 0)
    132e:	68fb      	ldr	r3, [r7, #12]
    1330:	68db      	ldr	r3, [r3, #12]
    1332:	2b00      	cmp	r3, #0
    1334:	d138      	bne.n	13a8 <_ZN4Gpio10initializeEm9direction+0x164>
    {
        if((*this).dir == input)
    1336:	68fb      	ldr	r3, [r7, #12]
    1338:	791b      	ldrb	r3, [r3, #4]
    133a:	2b00      	cmp	r3, #0
    133c:	d10c      	bne.n	1358 <_ZN4Gpio10initializeEm9direction+0x114>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOPUR_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    133e:	68fb      	ldr	r3, [r7, #12]
    1340:	691b      	ldr	r3, [r3, #16]
    1342:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
    1346:	4618      	mov	r0, r3
    1348:	68fb      	ldr	r3, [r7, #12]
    134a:	681a      	ldr	r2, [r3, #0]
    134c:	2300      	movs	r3, #0
    134e:	9300      	str	r3, [sp, #0]
    1350:	2301      	movs	r3, #1
    1352:	2101      	movs	r1, #1
    1354:	f7ff f972 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        }


        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAFSEl_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    1358:	68fb      	ldr	r3, [r7, #12]
    135a:	691b      	ldr	r3, [r3, #16]
    135c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    1360:	4618      	mov	r0, r3
    1362:	68fb      	ldr	r3, [r7, #12]
    1364:	681a      	ldr	r2, [r3, #0]
    1366:	2300      	movs	r3, #0
    1368:	9300      	str	r3, [sp, #0]
    136a:	2301      	movs	r3, #1
    136c:	2100      	movs	r1, #0
    136e:	f7ff f965 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    1372:	68fb      	ldr	r3, [r7, #12]
    1374:	691b      	ldr	r3, [r3, #16]
    1376:	f203 531c 	addw	r3, r3, #1308	; 0x51c
    137a:	4618      	mov	r0, r3
    137c:	68fb      	ldr	r3, [r7, #12]
    137e:	681a      	ldr	r2, [r3, #0]
    1380:	2300      	movs	r3, #0
    1382:	9300      	str	r3, [sp, #0]
    1384:	2301      	movs	r3, #1
    1386:	2101      	movs	r1, #1
    1388:	f7ff f958 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    138c:	68fb      	ldr	r3, [r7, #12]
    138e:	691b      	ldr	r3, [r3, #16]
    1390:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    1394:	4618      	mov	r0, r3
    1396:	68fb      	ldr	r3, [r7, #12]
    1398:	681a      	ldr	r2, [r3, #0]
    139a:	2300      	movs	r3, #0
    139c:	9300      	str	r3, [sp, #0]
    139e:	2301      	movs	r3, #1
    13a0:	2100      	movs	r1, #0
    13a2:	f7ff f94b 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
        }


    }
}
    13a6:	e05a      	b.n	145e <_ZN4Gpio10initializeEm9direction+0x21a>
        alternateFunction = alternateFunction - 1; //Get rid of encoding offset
    13a8:	68fb      	ldr	r3, [r7, #12]
    13aa:	68db      	ldr	r3, [r3, #12]
    13ac:	1e5a      	subs	r2, r3, #1
    13ae:	68fb      	ldr	r3, [r7, #12]
    13b0:	60da      	str	r2, [r3, #12]
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAFSEl_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW); //Enable alternate function for GPIO pin
    13b2:	68fb      	ldr	r3, [r7, #12]
    13b4:	691b      	ldr	r3, [r3, #16]
    13b6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
    13ba:	4618      	mov	r0, r3
    13bc:	68fb      	ldr	r3, [r7, #12]
    13be:	681a      	ldr	r2, [r3, #0]
    13c0:	2300      	movs	r3, #0
    13c2:	9300      	str	r3, [sp, #0]
    13c4:	2301      	movs	r3, #1
    13c6:	2101      	movs	r1, #1
    13c8:	f7ff f938 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        if(alternateFunction == 0)
    13cc:	68fb      	ldr	r3, [r7, #12]
    13ce:	68db      	ldr	r3, [r3, #12]
    13d0:	2b00      	cmp	r3, #0
    13d2:	d11a      	bne.n	140a <_ZN4Gpio10initializeEm9direction+0x1c6>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    13d4:	68fb      	ldr	r3, [r7, #12]
    13d6:	691b      	ldr	r3, [r3, #16]
    13d8:	f203 531c 	addw	r3, r3, #1308	; 0x51c
    13dc:	4618      	mov	r0, r3
    13de:	68fb      	ldr	r3, [r7, #12]
    13e0:	681a      	ldr	r2, [r3, #0]
    13e2:	2300      	movs	r3, #0
    13e4:	9300      	str	r3, [sp, #0]
    13e6:	2301      	movs	r3, #1
    13e8:	2100      	movs	r1, #0
    13ea:	f7ff f927 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    13ee:	68fb      	ldr	r3, [r7, #12]
    13f0:	691b      	ldr	r3, [r3, #16]
    13f2:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    13f6:	4618      	mov	r0, r3
    13f8:	68fb      	ldr	r3, [r7, #12]
    13fa:	681a      	ldr	r2, [r3, #0]
    13fc:	2300      	movs	r3, #0
    13fe:	9300      	str	r3, [sp, #0]
    1400:	2301      	movs	r3, #1
    1402:	2101      	movs	r1, #1
    1404:	f7ff f91a 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    1408:	e029      	b.n	145e <_ZN4Gpio10initializeEm9direction+0x21a>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOPCTL_OFFSET)), alternateFunction, ((*this).gpio) * 4, 4, RW);
    140a:	68fb      	ldr	r3, [r7, #12]
    140c:	691b      	ldr	r3, [r3, #16]
    140e:	f203 532c 	addw	r3, r3, #1324	; 0x52c
    1412:	4618      	mov	r0, r3
    1414:	68fb      	ldr	r3, [r7, #12]
    1416:	68db      	ldr	r3, [r3, #12]
    1418:	4619      	mov	r1, r3
    141a:	68fb      	ldr	r3, [r7, #12]
    141c:	681b      	ldr	r3, [r3, #0]
    141e:	009a      	lsls	r2, r3, #2
    1420:	2300      	movs	r3, #0
    1422:	9300      	str	r3, [sp, #0]
    1424:	2304      	movs	r3, #4
    1426:	f7ff f909 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    142a:	68fb      	ldr	r3, [r7, #12]
    142c:	691b      	ldr	r3, [r3, #16]
    142e:	f203 531c 	addw	r3, r3, #1308	; 0x51c
    1432:	4618      	mov	r0, r3
    1434:	68fb      	ldr	r3, [r7, #12]
    1436:	681a      	ldr	r2, [r3, #0]
    1438:	2300      	movs	r3, #0
    143a:	9300      	str	r3, [sp, #0]
    143c:	2301      	movs	r3, #1
    143e:	2101      	movs	r1, #1
    1440:	f7ff f8fc 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    1444:	68fb      	ldr	r3, [r7, #12]
    1446:	691b      	ldr	r3, [r3, #16]
    1448:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
    144c:	4618      	mov	r0, r3
    144e:	68fb      	ldr	r3, [r7, #12]
    1450:	681a      	ldr	r2, [r3, #0]
    1452:	2300      	movs	r3, #0
    1454:	9300      	str	r3, [sp, #0]
    1456:	2301      	movs	r3, #1
    1458:	2100      	movs	r1, #0
    145a:	f7ff f8ef 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    145e:	bf00      	nop
    1460:	3710      	adds	r7, #16
    1462:	46bd      	mov	sp, r7
    1464:	bd80      	pop	{r7, pc}
    1466:	bf00      	nop
    1468:	51eb851f 	.word	0x51eb851f
    146c:	400fe608 	.word	0x400fe608
    1470:	400fea08 	.word	0x400fea08
    1474:	4c4f434b 	.word	0x4c4f434b

00001478 <_ZN4Gpio10initializeEm9directionm>:
 * @param dir of the gpio, to be an output or input.
 * @param interruptPriority of the gpio, 0 being the highest priority and 7
 *        being the lowest.
 */
void Gpio::initialize(uint32_t gpio, direction dir, uint32_t interruptPriority)
{
    1478:	b580      	push	{r7, lr}
    147a:	b086      	sub	sp, #24
    147c:	af02      	add	r7, sp, #8
    147e:	60f8      	str	r0, [r7, #12]
    1480:	60b9      	str	r1, [r7, #8]
    1482:	603b      	str	r3, [r7, #0]
    1484:	4613      	mov	r3, r2
    1486:	71fb      	strb	r3, [r7, #7]
    (*this).interruptPriority = interruptPriority;
    1488:	68fb      	ldr	r3, [r7, #12]
    148a:	683a      	ldr	r2, [r7, #0]
    148c:	609a      	str	r2, [r3, #8]
    
    initialize(gpio, dir);
    148e:	79fb      	ldrb	r3, [r7, #7]
    1490:	461a      	mov	r2, r3
    1492:	68b9      	ldr	r1, [r7, #8]
    1494:	68f8      	ldr	r0, [r7, #12]
    1496:	f7ff fed5 	bl	1244 <_ZN4Gpio10initializeEm9direction>
    
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIM_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    149a:	68fb      	ldr	r3, [r7, #12]
    149c:	691b      	ldr	r3, [r3, #16]
    149e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
    14a2:	4618      	mov	r0, r3
    14a4:	68fb      	ldr	r3, [r7, #12]
    14a6:	681a      	ldr	r2, [r3, #0]
    14a8:	2300      	movs	r3, #0
    14aa:	9300      	str	r3, [sp, #0]
    14ac:	2301      	movs	r3, #1
    14ae:	2100      	movs	r1, #0
    14b0:	f7ff f8c4 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIS_OFFSET)), (uint32_t)setORClear::clear, (*this).gpio, 1, RW);
    14b4:	68fb      	ldr	r3, [r7, #12]
    14b6:	691b      	ldr	r3, [r3, #16]
    14b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
    14bc:	4618      	mov	r0, r3
    14be:	68fb      	ldr	r3, [r7, #12]
    14c0:	681a      	ldr	r2, [r3, #0]
    14c2:	2300      	movs	r3, #0
    14c4:	9300      	str	r3, [sp, #0]
    14c6:	2301      	movs	r3, #1
    14c8:	2100      	movs	r1, #0
    14ca:	f7ff f8b7 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIBE_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    14ce:	68fb      	ldr	r3, [r7, #12]
    14d0:	691b      	ldr	r3, [r3, #16]
    14d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
    14d6:	4618      	mov	r0, r3
    14d8:	68fb      	ldr	r3, [r7, #12]
    14da:	681a      	ldr	r2, [r3, #0]
    14dc:	2300      	movs	r3, #0
    14de:	9300      	str	r3, [sp, #0]
    14e0:	2301      	movs	r3, #1
    14e2:	2101      	movs	r1, #1
    14e4:	f7ff f8aa 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOICR_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    14e8:	68fb      	ldr	r3, [r7, #12]
    14ea:	691b      	ldr	r3, [r3, #16]
    14ec:	f203 431c 	addw	r3, r3, #1052	; 0x41c
    14f0:	4618      	mov	r0, r3
    14f2:	68fb      	ldr	r3, [r7, #12]
    14f4:	681a      	ldr	r2, [r3, #0]
    14f6:	2300      	movs	r3, #0
    14f8:	9300      	str	r3, [sp, #0]
    14fa:	2301      	movs	r3, #1
    14fc:	2101      	movs	r1, #1
    14fe:	f7ff f89d 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIM_OFFSET)), (uint32_t)setORClear::set, (*this).gpio, 1, RW);
    1502:	68fb      	ldr	r3, [r7, #12]
    1504:	691b      	ldr	r3, [r3, #16]
    1506:	f503 6382 	add.w	r3, r3, #1040	; 0x410
    150a:	4618      	mov	r0, r3
    150c:	68fb      	ldr	r3, [r7, #12]
    150e:	681a      	ldr	r2, [r3, #0]
    1510:	2300      	movs	r3, #0
    1512:	9300      	str	r3, [sp, #0]
    1514:	2301      	movs	r3, #1
    1516:	2101      	movs	r1, #1
    1518:	f7ff f890 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    /*
    * If gpio is == to Port F (Port number 5) use interrupt number 30 
    * (according to interrupt table), else use interrupt number 0 -> 4 
    * (corresponding to interrupt Port A through Port E)
    */
    Nvic::activateInterrupt((interrupt)((((gpioPort) == 5) ? 30 : (gpioPort))), (*this).interruptPriority);
    151c:	68fb      	ldr	r3, [r7, #12]
    151e:	695b      	ldr	r3, [r3, #20]
    1520:	2b05      	cmp	r3, #5
    1522:	d003      	beq.n	152c <_ZN4Gpio10initializeEm9directionm+0xb4>
    1524:	68fb      	ldr	r3, [r7, #12]
    1526:	695b      	ldr	r3, [r3, #20]
    1528:	b2db      	uxtb	r3, r3
    152a:	e000      	b.n	152e <_ZN4Gpio10initializeEm9directionm+0xb6>
    152c:	231e      	movs	r3, #30
    152e:	68fa      	ldr	r2, [r7, #12]
    1530:	6892      	ldr	r2, [r2, #8]
    1532:	4611      	mov	r1, r2
    1534:	4618      	mov	r0, r3
    1536:	f7ff f93f 	bl	7b8 <_ZN4Nvic17activateInterruptE9interruptm>
}
    153a:	bf00      	nop
    153c:	3710      	adds	r7, #16
    153e:	46bd      	mov	sp, r7
    1540:	bd80      	pop	{r7, pc}

00001542 <_ZN4Gpio14interruptClearEv>:

/**
 * @brief Clears the interrupt. Generally used in an ISR.
 */
void Gpio::interruptClear()
{
    1542:	b580      	push	{r7, lr}
    1544:	b084      	sub	sp, #16
    1546:	af02      	add	r7, sp, #8
    1548:	6078      	str	r0, [r7, #4]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOICR_OFFSET)), (uint32_t)setORClear::set, gpio, 1, RW);
    154a:	687b      	ldr	r3, [r7, #4]
    154c:	691b      	ldr	r3, [r3, #16]
    154e:	f203 431c 	addw	r3, r3, #1052	; 0x41c
    1552:	4618      	mov	r0, r3
    1554:	687b      	ldr	r3, [r7, #4]
    1556:	681a      	ldr	r2, [r3, #0]
    1558:	2300      	movs	r3, #0
    155a:	9300      	str	r3, [sp, #0]
    155c:	2301      	movs	r3, #1
    155e:	2101      	movs	r1, #1
    1560:	f7ff f86c 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    1564:	bf00      	nop
    1566:	3708      	adds	r7, #8
    1568:	46bd      	mov	sp, r7
    156a:	bd80      	pop	{r7, pc}

0000156c <_ZN4Gpio5writeEm>:
/**
 * @brief Writes to the gpio pin.
 * @param value to write to pin. Accepted values are 1 or 0.
 */
void Gpio::write(uint32_t value)
{
    156c:	b580      	push	{r7, lr}
    156e:	b084      	sub	sp, #16
    1570:	af02      	add	r7, sp, #8
    1572:	6078      	str	r0, [r7, #4]
    1574:	6039      	str	r1, [r7, #0]
    if((value == 0x0) || (value == 0x1))
    1576:	683b      	ldr	r3, [r7, #0]
    1578:	2b00      	cmp	r3, #0
    157a:	d002      	beq.n	1582 <_ZN4Gpio5writeEm+0x16>
    157c:	683b      	ldr	r3, [r7, #0]
    157e:	2b01      	cmp	r3, #1
    1580:	d10c      	bne.n	159c <_ZN4Gpio5writeEm+0x30>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODATA_OFFSET)), value, gpio, 1, RW);
    1582:	687b      	ldr	r3, [r7, #4]
    1584:	691b      	ldr	r3, [r3, #16]
    1586:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
    158a:	4618      	mov	r0, r3
    158c:	687b      	ldr	r3, [r7, #4]
    158e:	681a      	ldr	r2, [r3, #0]
    1590:	2300      	movs	r3, #0
    1592:	9300      	str	r3, [sp, #0]
    1594:	2301      	movs	r3, #1
    1596:	6839      	ldr	r1, [r7, #0]
    1598:	f7ff f850 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    }
}
    159c:	bf00      	nop
    159e:	3708      	adds	r7, #8
    15a0:	46bd      	mov	sp, r7
    15a2:	bd80      	pop	{r7, pc}

000015a4 <_ZN4Gpio4readEv>:
/**
 * @brief Reads from a gpio pin.
 * @return Value of the gpio pin, either a 1 or 0.
 */
uint32_t Gpio::read()
{
    15a4:	b580      	push	{r7, lr}
    15a6:	b082      	sub	sp, #8
    15a8:	af00      	add	r7, sp, #0
    15aa:	6078      	str	r0, [r7, #4]
    return((Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODATA_OFFSET)), gpio, 1, RW)));
    15ac:	687b      	ldr	r3, [r7, #4]
    15ae:	691b      	ldr	r3, [r3, #16]
    15b0:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
    15b4:	4618      	mov	r0, r3
    15b6:	687b      	ldr	r3, [r7, #4]
    15b8:	6819      	ldr	r1, [r3, #0]
    15ba:	2300      	movs	r3, #0
    15bc:	2201      	movs	r2, #1
    15be:	f7ff f813 	bl	5e8 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    15c2:	4603      	mov	r3, r0
    15c4:	4618      	mov	r0, r3
    15c6:	3708      	adds	r7, #8
    15c8:	46bd      	mov	sp, r7
    15ca:	bd80      	pop	{r7, pc}

000015cc <_ZN3PwmC1Ev>:
#include "pwm.h"

/**
 * @brief empty constructor placeholder
 */
Pwm::Pwm()
    15cc:	b480      	push	{r7}
    15ce:	b083      	sub	sp, #12
    15d0:	af00      	add	r7, sp, #0
    15d2:	6078      	str	r0, [r7, #4]
{

}
    15d4:	687b      	ldr	r3, [r7, #4]
    15d6:	4618      	mov	r0, r3
    15d8:	370c      	adds	r7, #12
    15da:	46bd      	mov	sp, r7
    15dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    15e0:	4770      	bx	lr

000015e2 <_ZN3PwmD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Pwm::~Pwm()
    15e2:	b480      	push	{r7}
    15e4:	b083      	sub	sp, #12
    15e6:	af00      	add	r7, sp, #0
    15e8:	6078      	str	r0, [r7, #4]
{

}
    15ea:	687b      	ldr	r3, [r7, #4]
    15ec:	4618      	mov	r0, r3
    15ee:	370c      	adds	r7, #12
    15f0:	46bd      	mov	sp, r7
    15f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    15f6:	4770      	bx	lr

000015f8 <_ZN3Pwm16initializeSingleEm9pwmModulemmm17countDirectionPwmmbm>:
 *                     peripheral
 * @param divisor Binary divisor used to pre-divide the system clock. Must be
 *                enabled with the \c enablePwmDiv first.
 */
void Pwm::initializeSingle(uint32_t pwmPin, pwmModule module, uint32_t period, uint32_t compA, uint32_t compB, countDirectionPwm countDir, uint32_t genOptions, bool enablePwmDiv, uint32_t divisor)
{
    15f8:	b580      	push	{r7, lr}
    15fa:	b086      	sub	sp, #24
    15fc:	af02      	add	r7, sp, #8
    15fe:	60f8      	str	r0, [r7, #12]
    1600:	60b9      	str	r1, [r7, #8]
    1602:	603b      	str	r3, [r7, #0]
    1604:	4613      	mov	r3, r2
    1606:	71fb      	strb	r3, [r7, #7]
    myPwmGen = pwmPin/2;
    1608:	68bb      	ldr	r3, [r7, #8]
    160a:	085a      	lsrs	r2, r3, #1
    160c:	68fb      	ldr	r3, [r7, #12]
    160e:	605a      	str	r2, [r3, #4]
    
    initialize(module, period, countDir, enablePwmDiv, divisor);
    1610:	79f9      	ldrb	r1, [r7, #7]
    1612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1614:	9301      	str	r3, [sp, #4]
    1616:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    161a:	9300      	str	r3, [sp, #0]
    161c:	6a3b      	ldr	r3, [r7, #32]
    161e:	683a      	ldr	r2, [r7, #0]
    1620:	68f8      	ldr	r0, [r7, #12]
    1622:	f000 f8c5 	bl	17b0 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>
    
    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.
    
    //2b. Write the PWMnGENn register. 
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENA_OFFSET + (0x40 * myPwmGen) + ((pwmPin%2) * 4))), genOptions, 0, 11+1, RW);
    1626:	68fb      	ldr	r3, [r7, #12]
    1628:	681a      	ldr	r2, [r3, #0]
    162a:	68fb      	ldr	r3, [r7, #12]
    162c:	685b      	ldr	r3, [r3, #4]
    162e:	0119      	lsls	r1, r3, #4
    1630:	68bb      	ldr	r3, [r7, #8]
    1632:	f003 0301 	and.w	r3, r3, #1
    1636:	440b      	add	r3, r1
    1638:	3318      	adds	r3, #24
    163a:	009b      	lsls	r3, r3, #2
    163c:	4413      	add	r3, r2
    163e:	4618      	mov	r0, r3
    1640:	2300      	movs	r3, #0
    1642:	9300      	str	r3, [sp, #0]
    1644:	230c      	movs	r3, #12
    1646:	2200      	movs	r2, #0
    1648:	6a79      	ldr	r1, [r7, #36]	; 0x24
    164a:	f7fe fff7 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //4. Set counter comparators
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPA_OFFSET + (0x40 * myPwmGen))), compA, 0, 15+1, RW);
    164e:	68fb      	ldr	r3, [r7, #12]
    1650:	681a      	ldr	r2, [r3, #0]
    1652:	68fb      	ldr	r3, [r7, #12]
    1654:	685b      	ldr	r3, [r3, #4]
    1656:	019b      	lsls	r3, r3, #6
    1658:	4413      	add	r3, r2
    165a:	3358      	adds	r3, #88	; 0x58
    165c:	4618      	mov	r0, r3
    165e:	2300      	movs	r3, #0
    1660:	9300      	str	r3, [sp, #0]
    1662:	2310      	movs	r3, #16
    1664:	2200      	movs	r2, #0
    1666:	69b9      	ldr	r1, [r7, #24]
    1668:	f7fe ffe8 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPB_OFFSET + (0x40 * myPwmGen))), compB, 0, 15+1, RW);
    166c:	68fb      	ldr	r3, [r7, #12]
    166e:	681a      	ldr	r2, [r3, #0]
    1670:	68fb      	ldr	r3, [r7, #12]
    1672:	685b      	ldr	r3, [r3, #4]
    1674:	019b      	lsls	r3, r3, #6
    1676:	4413      	add	r3, r2
    1678:	335c      	adds	r3, #92	; 0x5c
    167a:	4618      	mov	r0, r3
    167c:	2300      	movs	r3, #0
    167e:	9300      	str	r3, [sp, #0]
    1680:	2310      	movs	r3, #16
    1682:	2200      	movs	r2, #0
    1684:	69f9      	ldr	r1, [r7, #28]
    1686:	f7fe ffd9 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //6. Enable PWM
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)setORClear::set, 0, 1, RW);
    168a:	68fb      	ldr	r3, [r7, #12]
    168c:	681a      	ldr	r2, [r3, #0]
    168e:	68fb      	ldr	r3, [r7, #12]
    1690:	685b      	ldr	r3, [r3, #4]
    1692:	3301      	adds	r3, #1
    1694:	019b      	lsls	r3, r3, #6
    1696:	4413      	add	r3, r2
    1698:	4618      	mov	r0, r3
    169a:	2300      	movs	r3, #0
    169c:	9300      	str	r3, [sp, #0]
    169e:	2301      	movs	r3, #1
    16a0:	2200      	movs	r2, #0
    16a2:	2101      	movs	r1, #1
    16a4:	f7fe ffca 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //7. Enable PWM output.
    // Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + PWMENABLE_OFFSET), set, 0 + ((myPwmGen*2)+(((pwmPin%2) * 4)/4)), 1, RW); //(uint32_t)output >> 2
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + PWMENABLE_OFFSET), (uint32_t)setORClear::set, pwmPin, 1, RW); //(uint32_t)output >> 2
    16a8:	68fb      	ldr	r3, [r7, #12]
    16aa:	681b      	ldr	r3, [r3, #0]
    16ac:	3308      	adds	r3, #8
    16ae:	4618      	mov	r0, r3
    16b0:	2300      	movs	r3, #0
    16b2:	9300      	str	r3, [sp, #0]
    16b4:	2301      	movs	r3, #1
    16b6:	68ba      	ldr	r2, [r7, #8]
    16b8:	2101      	movs	r1, #1
    16ba:	f7fe ffbf 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

}
    16be:	bf00      	nop
    16c0:	3710      	adds	r7, #16
    16c2:	46bd      	mov	sp, r7
    16c4:	bd80      	pop	{r7, pc}

000016c6 <_ZN3Pwm14initializePairEm9pwmModulemmm17countDirectionPwmmmbm>:
 * @param divisor Binary divisor used to pre-divide the system clock. Must be
 *                enabled with the \c enablePwmDiv first.
 */

void Pwm::initializePair(uint32_t pwmPin, pwmModule module, uint32_t period, uint32_t compA, uint32_t compB, countDirectionPwm countDir, uint32_t genOptionsA, uint32_t genOptionsB, bool enablePwmDiv, uint32_t divisor)
{
    16c6:	b580      	push	{r7, lr}
    16c8:	b086      	sub	sp, #24
    16ca:	af02      	add	r7, sp, #8
    16cc:	60f8      	str	r0, [r7, #12]
    16ce:	60b9      	str	r1, [r7, #8]
    16d0:	603b      	str	r3, [r7, #0]
    16d2:	4613      	mov	r3, r2
    16d4:	71fb      	strb	r3, [r7, #7]
    myPwmGen = pwmPin/2;
    16d6:	68bb      	ldr	r3, [r7, #8]
    16d8:	085a      	lsrs	r2, r3, #1
    16da:	68fb      	ldr	r3, [r7, #12]
    16dc:	605a      	str	r2, [r3, #4]

    initialize(module, period, countDir, enablePwmDiv, divisor);
    16de:	79f9      	ldrb	r1, [r7, #7]
    16e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    16e2:	9301      	str	r3, [sp, #4]
    16e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    16e8:	9300      	str	r3, [sp, #0]
    16ea:	6a3b      	ldr	r3, [r7, #32]
    16ec:	683a      	ldr	r2, [r7, #0]
    16ee:	68f8      	ldr	r0, [r7, #12]
    16f0:	f000 f85e 	bl	17b0 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>
    
    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.
    
    //2b. Write the PWMnGENA register.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENA_OFFSET + (0x40 * myPwmGen))), genOptionsA, 0, 11+1, RW);
    16f4:	68fb      	ldr	r3, [r7, #12]
    16f6:	681a      	ldr	r2, [r3, #0]
    16f8:	68fb      	ldr	r3, [r7, #12]
    16fa:	685b      	ldr	r3, [r3, #4]
    16fc:	019b      	lsls	r3, r3, #6
    16fe:	4413      	add	r3, r2
    1700:	3360      	adds	r3, #96	; 0x60
    1702:	4618      	mov	r0, r3
    1704:	2300      	movs	r3, #0
    1706:	9300      	str	r3, [sp, #0]
    1708:	230c      	movs	r3, #12
    170a:	2200      	movs	r2, #0
    170c:	6a79      	ldr	r1, [r7, #36]	; 0x24
    170e:	f7fe ff95 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //2c. Write the PWMnGENB register.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENB_OFFSET + (0x40 * myPwmGen))), genOptionsB, 0, 11+1, RW);
    1712:	68fb      	ldr	r3, [r7, #12]
    1714:	681a      	ldr	r2, [r3, #0]
    1716:	68fb      	ldr	r3, [r7, #12]
    1718:	685b      	ldr	r3, [r3, #4]
    171a:	019b      	lsls	r3, r3, #6
    171c:	4413      	add	r3, r2
    171e:	3364      	adds	r3, #100	; 0x64
    1720:	4618      	mov	r0, r3
    1722:	2300      	movs	r3, #0
    1724:	9300      	str	r3, [sp, #0]
    1726:	230c      	movs	r3, #12
    1728:	2200      	movs	r2, #0
    172a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    172c:	f7fe ff86 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //4. Set counter comparator for pwmA
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPA_OFFSET + (0x40 * myPwmGen))), compA, 0, 15+1, RW);
    1730:	68fb      	ldr	r3, [r7, #12]
    1732:	681a      	ldr	r2, [r3, #0]
    1734:	68fb      	ldr	r3, [r7, #12]
    1736:	685b      	ldr	r3, [r3, #4]
    1738:	019b      	lsls	r3, r3, #6
    173a:	4413      	add	r3, r2
    173c:	3358      	adds	r3, #88	; 0x58
    173e:	4618      	mov	r0, r3
    1740:	2300      	movs	r3, #0
    1742:	9300      	str	r3, [sp, #0]
    1744:	2310      	movs	r3, #16
    1746:	2200      	movs	r2, #0
    1748:	69b9      	ldr	r1, [r7, #24]
    174a:	f7fe ff77 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //5. Set counter comparator for pwmB
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPB_OFFSET + (0x40 * myPwmGen))), compB, 0, 15+1, RW);
    174e:	68fb      	ldr	r3, [r7, #12]
    1750:	681a      	ldr	r2, [r3, #0]
    1752:	68fb      	ldr	r3, [r7, #12]
    1754:	685b      	ldr	r3, [r3, #4]
    1756:	019b      	lsls	r3, r3, #6
    1758:	4413      	add	r3, r2
    175a:	335c      	adds	r3, #92	; 0x5c
    175c:	4618      	mov	r0, r3
    175e:	2300      	movs	r3, #0
    1760:	9300      	str	r3, [sp, #0]
    1762:	2310      	movs	r3, #16
    1764:	2200      	movs	r2, #0
    1766:	69f9      	ldr	r1, [r7, #28]
    1768:	f7fe ff68 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //6. Enable PWM
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)setORClear::set, 0, 1, RW);
    176c:	68fb      	ldr	r3, [r7, #12]
    176e:	681a      	ldr	r2, [r3, #0]
    1770:	68fb      	ldr	r3, [r7, #12]
    1772:	685b      	ldr	r3, [r3, #4]
    1774:	3301      	adds	r3, #1
    1776:	019b      	lsls	r3, r3, #6
    1778:	4413      	add	r3, r2
    177a:	4618      	mov	r0, r3
    177c:	2300      	movs	r3, #0
    177e:	9300      	str	r3, [sp, #0]
    1780:	2301      	movs	r3, #1
    1782:	2200      	movs	r2, #0
    1784:	2101      	movs	r1, #1
    1786:	f7fe ff59 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //7. Enable PWM output.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWMENABLE_OFFSET + (0x40 * myPwmGen))), 0x3, pwmPin, 2, RW); 
    178a:	68fb      	ldr	r3, [r7, #12]
    178c:	681a      	ldr	r2, [r3, #0]
    178e:	68fb      	ldr	r3, [r7, #12]
    1790:	685b      	ldr	r3, [r3, #4]
    1792:	019b      	lsls	r3, r3, #6
    1794:	4413      	add	r3, r2
    1796:	3308      	adds	r3, #8
    1798:	4618      	mov	r0, r3
    179a:	2300      	movs	r3, #0
    179c:	9300      	str	r3, [sp, #0]
    179e:	2302      	movs	r3, #2
    17a0:	68ba      	ldr	r2, [r7, #8]
    17a2:	2103      	movs	r1, #3
    17a4:	f7fe ff4a 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    17a8:	bf00      	nop
    17aa:	3710      	adds	r7, #16
    17ac:	46bd      	mov	sp, r7
    17ae:	bd80      	pop	{r7, pc}

000017b0 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>:
 * @param enablePwmDiv Enables the PWM peripheral clock pre-divider
 * @param divisor The value of the PWM clock pre-divider chosen by enum
 *                pwmUnitClockDivisor.       
 */
void Pwm::initialize(pwmModule module, uint32_t period, countDirectionPwm countDir, bool enablePwmDiv, uint32_t divisor)
{    
    17b0:	b580      	push	{r7, lr}
    17b2:	b088      	sub	sp, #32
    17b4:	af02      	add	r7, sp, #8
    17b6:	60f8      	str	r0, [r7, #12]
    17b8:	607a      	str	r2, [r7, #4]
    17ba:	603b      	str	r3, [r7, #0]
    17bc:	460b      	mov	r3, r1
    17be:	72fb      	strb	r3, [r7, #11]
    baseAddress = pwm0BaseAddress + (module * 0x1000);
    17c0:	7afb      	ldrb	r3, [r7, #11]
    17c2:	031b      	lsls	r3, r3, #12
    17c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    17c8:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
    17cc:	68fa      	ldr	r2, [r7, #12]
    17ce:	6013      	str	r3, [r2, #0]
    
    //0. Enable the clock for PWM
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCPWM_OFFSET)), (uint32_t)setORClear::set, module, 1, RW);
    17d0:	7afa      	ldrb	r2, [r7, #11]
    17d2:	2300      	movs	r3, #0
    17d4:	9300      	str	r3, [sp, #0]
    17d6:	2301      	movs	r3, #1
    17d8:	2101      	movs	r1, #1
    17da:	4847      	ldr	r0, [pc, #284]	; (18f8 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x148>)
    17dc:	f7fe ff2e 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRPWM_OFFSET), module, 1, RO) == 0)
    17e0:	7af9      	ldrb	r1, [r7, #11]
    17e2:	2301      	movs	r3, #1
    17e4:	2201      	movs	r2, #1
    17e6:	4845      	ldr	r0, [pc, #276]	; (18fc <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x14c>)
    17e8:	f7fe fefe 	bl	5e8 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    17ec:	4603      	mov	r3, r0
    17ee:	2b00      	cmp	r3, #0
    17f0:	bf0c      	ite	eq
    17f2:	2301      	moveq	r3, #1
    17f4:	2300      	movne	r3, #0
    17f6:	b2db      	uxtb	r3, r3
    17f8:	2b00      	cmp	r3, #0
    17fa:	d000      	beq.n	17fe <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x4e>
    17fc:	e7f0      	b.n	17e0 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x30>
        //Ready??
    }

    // Clear count register by reseting PWM

    Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + SRPWM_OFFSET), (uint32_t)setORClear::set, module, 1, RW);
    17fe:	7afa      	ldrb	r2, [r7, #11]
    1800:	2300      	movs	r3, #0
    1802:	9300      	str	r3, [sp, #0]
    1804:	2301      	movs	r3, #1
    1806:	2101      	movs	r1, #1
    1808:	483d      	ldr	r0, [pc, #244]	; (1900 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x150>)
    180a:	f7fe ff17 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    for(uint32_t i = 0; i < 100; i++)
    180e:	2300      	movs	r3, #0
    1810:	617b      	str	r3, [r7, #20]
    1812:	697b      	ldr	r3, [r7, #20]
    1814:	2b63      	cmp	r3, #99	; 0x63
    1816:	d803      	bhi.n	1820 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x70>
    1818:	697b      	ldr	r3, [r7, #20]
    181a:	3301      	adds	r3, #1
    181c:	617b      	str	r3, [r7, #20]
    181e:	e7f8      	b.n	1812 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x62>
    {
        //wait
    }

    Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + SRPWM_OFFSET), (uint32_t)setORClear::clear, module, 1, RW);
    1820:	7afa      	ldrb	r2, [r7, #11]
    1822:	2300      	movs	r3, #0
    1824:	9300      	str	r3, [sp, #0]
    1826:	2301      	movs	r3, #1
    1828:	2100      	movs	r1, #0
    182a:	4835      	ldr	r0, [pc, #212]	; (1900 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x150>)
    182c:	f7fe ff06 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRPWM_OFFSET), module, 1, RO) == 0)
    1830:	7af9      	ldrb	r1, [r7, #11]
    1832:	2301      	movs	r3, #1
    1834:	2201      	movs	r2, #1
    1836:	4831      	ldr	r0, [pc, #196]	; (18fc <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x14c>)
    1838:	f7fe fed6 	bl	5e8 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
    183c:	4603      	mov	r3, r0
    183e:	2b00      	cmp	r3, #0
    1840:	bf0c      	ite	eq
    1842:	2301      	moveq	r3, #1
    1844:	2300      	movne	r3, #0
    1846:	b2db      	uxtb	r3, r3
    1848:	2b00      	cmp	r3, #0
    184a:	d000      	beq.n	184e <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x9e>
    184c:	e7f0      	b.n	1830 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x80>
    {
        //Ready??
    }

    if(enablePwmDiv == true)
    184e:	f897 3020 	ldrb.w	r3, [r7, #32]
    1852:	2b01      	cmp	r3, #1
    1854:	d10f      	bne.n	1876 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0xc6>
    {
        //1a. Configure the Run-Mode Clock Configuration (RCC) register in the System Control module to use the PWM divide (USEPWMDIV).
        Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + RCC_OFFSET), (uint32_t)setORClear::set, 20, 1, RW);
    1856:	2300      	movs	r3, #0
    1858:	9300      	str	r3, [sp, #0]
    185a:	2301      	movs	r3, #1
    185c:	2214      	movs	r2, #20
    185e:	2101      	movs	r1, #1
    1860:	4828      	ldr	r0, [pc, #160]	; (1904 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x154>)
    1862:	f7fe feeb 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        //1b. Set the divider (PWMDIV).
        Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + RCC_OFFSET), divisor, 17, (19-17)+1, RW);
    1866:	2300      	movs	r3, #0
    1868:	9300      	str	r3, [sp, #0]
    186a:	2303      	movs	r3, #3
    186c:	2211      	movs	r2, #17
    186e:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1870:	4824      	ldr	r0, [pc, #144]	; (1904 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x154>)
    1872:	f7fe fee3 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    }

    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.

    //2a. Write the PWMnCTL register with a value of 0x0000.0000 to clear it.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)setORClear::clear, 0, 1, RW);
    1876:	68fb      	ldr	r3, [r7, #12]
    1878:	681a      	ldr	r2, [r3, #0]
    187a:	68fb      	ldr	r3, [r7, #12]
    187c:	685b      	ldr	r3, [r3, #4]
    187e:	3301      	adds	r3, #1
    1880:	019b      	lsls	r3, r3, #6
    1882:	4413      	add	r3, r2
    1884:	4618      	mov	r0, r3
    1886:	2300      	movs	r3, #0
    1888:	9300      	str	r3, [sp, #0]
    188a:	2301      	movs	r3, #1
    188c:	2200      	movs	r2, #0
    188e:	2100      	movs	r1, #0
    1890:	f7fe fed4 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)setORClear::set, 2, 1, RW);
    1894:	68fb      	ldr	r3, [r7, #12]
    1896:	681a      	ldr	r2, [r3, #0]
    1898:	68fb      	ldr	r3, [r7, #12]
    189a:	685b      	ldr	r3, [r3, #4]
    189c:	3301      	adds	r3, #1
    189e:	019b      	lsls	r3, r3, #6
    18a0:	4413      	add	r3, r2
    18a2:	4618      	mov	r0, r3
    18a4:	2300      	movs	r3, #0
    18a6:	9300      	str	r3, [sp, #0]
    18a8:	2301      	movs	r3, #1
    18aa:	2202      	movs	r2, #2
    18ac:	2101      	movs	r1, #1
    18ae:	f7fe fec5 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //Set count direction
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)countDir, 3, 1, RW);
    18b2:	68fb      	ldr	r3, [r7, #12]
    18b4:	681a      	ldr	r2, [r3, #0]
    18b6:	68fb      	ldr	r3, [r7, #12]
    18b8:	685b      	ldr	r3, [r3, #4]
    18ba:	3301      	adds	r3, #1
    18bc:	019b      	lsls	r3, r3, #6
    18be:	4413      	add	r3, r2
    18c0:	4618      	mov	r0, r3
    18c2:	6839      	ldr	r1, [r7, #0]
    18c4:	2300      	movs	r3, #0
    18c6:	9300      	str	r3, [sp, #0]
    18c8:	2301      	movs	r3, #1
    18ca:	2203      	movs	r2, #3
    18cc:	f7fe feb6 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //3. Set the period
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0LOAD_OFFSET + (0x40 * myPwmGen))), period, 0, 15+1, RW);
    18d0:	68fb      	ldr	r3, [r7, #12]
    18d2:	681a      	ldr	r2, [r3, #0]
    18d4:	68fb      	ldr	r3, [r7, #12]
    18d6:	685b      	ldr	r3, [r3, #4]
    18d8:	019b      	lsls	r3, r3, #6
    18da:	4413      	add	r3, r2
    18dc:	3350      	adds	r3, #80	; 0x50
    18de:	4618      	mov	r0, r3
    18e0:	2300      	movs	r3, #0
    18e2:	9300      	str	r3, [sp, #0]
    18e4:	2310      	movs	r3, #16
    18e6:	2200      	movs	r2, #0
    18e8:	6879      	ldr	r1, [r7, #4]
    18ea:	f7fe fea7 	bl	63c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    18ee:	bf00      	nop
    18f0:	3718      	adds	r7, #24
    18f2:	46bd      	mov	sp, r7
    18f4:	bd80      	pop	{r7, pc}
    18f6:	bf00      	nop
    18f8:	400fe640 	.word	0x400fe640
    18fc:	400fea40 	.word	0x400fea40
    1900:	400fe540 	.word	0x400fe540
    1904:	400fe060 	.word	0x400fe060

00001908 <__aeabi_atexit>:
    1908:	460b      	mov	r3, r1
    190a:	4601      	mov	r1, r0
    190c:	4618      	mov	r0, r3
    190e:	f000 bf5b 	b.w	27c8 <__cxa_atexit>
	...

00001914 <selfrel_offset31>:
    1914:	6803      	ldr	r3, [r0, #0]
    1916:	005a      	lsls	r2, r3, #1
    1918:	bf4c      	ite	mi
    191a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    191e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    1922:	4418      	add	r0, r3
    1924:	4770      	bx	lr
    1926:	bf00      	nop

00001928 <search_EIT_table>:
    1928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    192c:	b329      	cbz	r1, 197a <search_EIT_table+0x52>
    192e:	1e4f      	subs	r7, r1, #1
    1930:	4604      	mov	r4, r0
    1932:	4615      	mov	r5, r2
    1934:	463e      	mov	r6, r7
    1936:	f04f 0800 	mov.w	r8, #0
    193a:	eb08 0106 	add.w	r1, r8, r6
    193e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    1942:	1049      	asrs	r1, r1, #1
    1944:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
    1948:	4648      	mov	r0, r9
    194a:	f7ff ffe3 	bl	1914 <selfrel_offset31>
    194e:	4603      	mov	r3, r0
    1950:	00c8      	lsls	r0, r1, #3
    1952:	3008      	adds	r0, #8
    1954:	428f      	cmp	r7, r1
    1956:	4420      	add	r0, r4
    1958:	d009      	beq.n	196e <search_EIT_table+0x46>
    195a:	42ab      	cmp	r3, r5
    195c:	d809      	bhi.n	1972 <search_EIT_table+0x4a>
    195e:	f7ff ffd9 	bl	1914 <selfrel_offset31>
    1962:	3801      	subs	r0, #1
    1964:	42a8      	cmp	r0, r5
    1966:	d20a      	bcs.n	197e <search_EIT_table+0x56>
    1968:	f101 0801 	add.w	r8, r1, #1
    196c:	e7e5      	b.n	193a <search_EIT_table+0x12>
    196e:	42ab      	cmp	r3, r5
    1970:	d905      	bls.n	197e <search_EIT_table+0x56>
    1972:	4588      	cmp	r8, r1
    1974:	d001      	beq.n	197a <search_EIT_table+0x52>
    1976:	1e4e      	subs	r6, r1, #1
    1978:	e7df      	b.n	193a <search_EIT_table+0x12>
    197a:	f04f 0900 	mov.w	r9, #0
    197e:	4648      	mov	r0, r9
    1980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00001984 <__gnu_unwind_get_pr_addr>:
    1984:	2801      	cmp	r0, #1
    1986:	d007      	beq.n	1998 <__gnu_unwind_get_pr_addr+0x14>
    1988:	2802      	cmp	r0, #2
    198a:	d007      	beq.n	199c <__gnu_unwind_get_pr_addr+0x18>
    198c:	4b04      	ldr	r3, [pc, #16]	; (19a0 <__gnu_unwind_get_pr_addr+0x1c>)
    198e:	2800      	cmp	r0, #0
    1990:	bf0c      	ite	eq
    1992:	4618      	moveq	r0, r3
    1994:	2000      	movne	r0, #0
    1996:	4770      	bx	lr
    1998:	4802      	ldr	r0, [pc, #8]	; (19a4 <__gnu_unwind_get_pr_addr+0x20>)
    199a:	4770      	bx	lr
    199c:	4802      	ldr	r0, [pc, #8]	; (19a8 <__gnu_unwind_get_pr_addr+0x24>)
    199e:	4770      	bx	lr
    19a0:	00002049 	.word	0x00002049
    19a4:	0000204d 	.word	0x0000204d
    19a8:	00002051 	.word	0x00002051

000019ac <get_eit_entry>:
    19ac:	b530      	push	{r4, r5, lr}
    19ae:	4b23      	ldr	r3, [pc, #140]	; (1a3c <get_eit_entry+0x90>)
    19b0:	b083      	sub	sp, #12
    19b2:	4604      	mov	r4, r0
    19b4:	1e8d      	subs	r5, r1, #2
    19b6:	b33b      	cbz	r3, 1a08 <get_eit_entry+0x5c>
    19b8:	a901      	add	r1, sp, #4
    19ba:	4628      	mov	r0, r5
    19bc:	f3af 8000 	nop.w
    19c0:	b1e8      	cbz	r0, 19fe <get_eit_entry+0x52>
    19c2:	9901      	ldr	r1, [sp, #4]
    19c4:	462a      	mov	r2, r5
    19c6:	f7ff ffaf 	bl	1928 <search_EIT_table>
    19ca:	4601      	mov	r1, r0
    19cc:	b1b8      	cbz	r0, 19fe <get_eit_entry+0x52>
    19ce:	f7ff ffa1 	bl	1914 <selfrel_offset31>
    19d2:	684b      	ldr	r3, [r1, #4]
    19d4:	64a0      	str	r0, [r4, #72]	; 0x48
    19d6:	2b01      	cmp	r3, #1
    19d8:	d02b      	beq.n	1a32 <get_eit_entry+0x86>
    19da:	2b00      	cmp	r3, #0
    19dc:	f101 0004 	add.w	r0, r1, #4
    19e0:	db23      	blt.n	1a2a <get_eit_entry+0x7e>
    19e2:	f7ff ff97 	bl	1914 <selfrel_offset31>
    19e6:	2300      	movs	r3, #0
    19e8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    19ec:	6803      	ldr	r3, [r0, #0]
    19ee:	2b00      	cmp	r3, #0
    19f0:	db10      	blt.n	1a14 <get_eit_entry+0x68>
    19f2:	f7ff ff8f 	bl	1914 <selfrel_offset31>
    19f6:	6120      	str	r0, [r4, #16]
    19f8:	2000      	movs	r0, #0
    19fa:	b003      	add	sp, #12
    19fc:	bd30      	pop	{r4, r5, pc}
    19fe:	2300      	movs	r3, #0
    1a00:	2009      	movs	r0, #9
    1a02:	6123      	str	r3, [r4, #16]
    1a04:	b003      	add	sp, #12
    1a06:	bd30      	pop	{r4, r5, pc}
    1a08:	490d      	ldr	r1, [pc, #52]	; (1a40 <get_eit_entry+0x94>)
    1a0a:	480e      	ldr	r0, [pc, #56]	; (1a44 <get_eit_entry+0x98>)
    1a0c:	1a09      	subs	r1, r1, r0
    1a0e:	10c9      	asrs	r1, r1, #3
    1a10:	9101      	str	r1, [sp, #4]
    1a12:	e7d7      	b.n	19c4 <get_eit_entry+0x18>
    1a14:	f3c3 6003 	ubfx	r0, r3, #24, #4
    1a18:	f7ff ffb4 	bl	1984 <__gnu_unwind_get_pr_addr>
    1a1c:	2800      	cmp	r0, #0
    1a1e:	6120      	str	r0, [r4, #16]
    1a20:	bf14      	ite	ne
    1a22:	2000      	movne	r0, #0
    1a24:	2009      	moveq	r0, #9
    1a26:	b003      	add	sp, #12
    1a28:	bd30      	pop	{r4, r5, pc}
    1a2a:	2301      	movs	r3, #1
    1a2c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    1a30:	e7dc      	b.n	19ec <get_eit_entry+0x40>
    1a32:	2300      	movs	r3, #0
    1a34:	6123      	str	r3, [r4, #16]
    1a36:	2005      	movs	r0, #5
    1a38:	e7df      	b.n	19fa <get_eit_entry+0x4e>
    1a3a:	bf00      	nop
    1a3c:	00000000 	.word	0x00000000
    1a40:	0000384c 	.word	0x0000384c
    1a44:	00003694 	.word	0x00003694

00001a48 <restore_non_core_regs>:
    1a48:	6803      	ldr	r3, [r0, #0]
    1a4a:	07da      	lsls	r2, r3, #31
    1a4c:	b510      	push	{r4, lr}
    1a4e:	4604      	mov	r4, r0
    1a50:	d406      	bmi.n	1a60 <restore_non_core_regs+0x18>
    1a52:	079b      	lsls	r3, r3, #30
    1a54:	f100 0048 	add.w	r0, r0, #72	; 0x48
    1a58:	d509      	bpl.n	1a6e <restore_non_core_regs+0x26>
    1a5a:	f000 fc4b 	bl	22f4 <__gnu_Unwind_Restore_VFP_D>
    1a5e:	6823      	ldr	r3, [r4, #0]
    1a60:	0759      	lsls	r1, r3, #29
    1a62:	d509      	bpl.n	1a78 <restore_non_core_regs+0x30>
    1a64:	071a      	lsls	r2, r3, #28
    1a66:	d50e      	bpl.n	1a86 <restore_non_core_regs+0x3e>
    1a68:	06db      	lsls	r3, r3, #27
    1a6a:	d513      	bpl.n	1a94 <restore_non_core_regs+0x4c>
    1a6c:	bd10      	pop	{r4, pc}
    1a6e:	f000 fc39 	bl	22e4 <__gnu_Unwind_Restore_VFP>
    1a72:	6823      	ldr	r3, [r4, #0]
    1a74:	0759      	lsls	r1, r3, #29
    1a76:	d4f5      	bmi.n	1a64 <restore_non_core_regs+0x1c>
    1a78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    1a7c:	f000 fc42 	bl	2304 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    1a80:	6823      	ldr	r3, [r4, #0]
    1a82:	071a      	lsls	r2, r3, #28
    1a84:	d4f0      	bmi.n	1a68 <restore_non_core_regs+0x20>
    1a86:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    1a8a:	f000 fc43 	bl	2314 <__gnu_Unwind_Restore_WMMXD>
    1a8e:	6823      	ldr	r3, [r4, #0]
    1a90:	06db      	lsls	r3, r3, #27
    1a92:	d4eb      	bmi.n	1a6c <restore_non_core_regs+0x24>
    1a94:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    1a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a9c:	f000 bc7e 	b.w	239c <__gnu_Unwind_Restore_WMMXC>

00001aa0 <_Unwind_decode_typeinfo_ptr.isra.0>:
    1aa0:	4603      	mov	r3, r0
    1aa2:	6800      	ldr	r0, [r0, #0]
    1aa4:	b100      	cbz	r0, 1aa8 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
    1aa6:	4418      	add	r0, r3
    1aa8:	4770      	bx	lr
    1aaa:	bf00      	nop

00001aac <__gnu_unwind_24bit.isra.0>:
    1aac:	2009      	movs	r0, #9
    1aae:	4770      	bx	lr

00001ab0 <_Unwind_DebugHook>:
    1ab0:	4770      	bx	lr
    1ab2:	bf00      	nop

00001ab4 <unwind_phase2>:
    1ab4:	b570      	push	{r4, r5, r6, lr}
    1ab6:	4604      	mov	r4, r0
    1ab8:	460e      	mov	r6, r1
    1aba:	6c31      	ldr	r1, [r6, #64]	; 0x40
    1abc:	4620      	mov	r0, r4
    1abe:	f7ff ff75 	bl	19ac <get_eit_entry>
    1ac2:	4605      	mov	r5, r0
    1ac4:	b988      	cbnz	r0, 1aea <unwind_phase2+0x36>
    1ac6:	6c33      	ldr	r3, [r6, #64]	; 0x40
    1ac8:	6163      	str	r3, [r4, #20]
    1aca:	4632      	mov	r2, r6
    1acc:	6923      	ldr	r3, [r4, #16]
    1ace:	4621      	mov	r1, r4
    1ad0:	2001      	movs	r0, #1
    1ad2:	4798      	blx	r3
    1ad4:	2808      	cmp	r0, #8
    1ad6:	d0f0      	beq.n	1aba <unwind_phase2+0x6>
    1ad8:	2807      	cmp	r0, #7
    1ada:	d106      	bne.n	1aea <unwind_phase2+0x36>
    1adc:	4628      	mov	r0, r5
    1ade:	6c31      	ldr	r1, [r6, #64]	; 0x40
    1ae0:	f7ff ffe6 	bl	1ab0 <_Unwind_DebugHook>
    1ae4:	1d30      	adds	r0, r6, #4
    1ae6:	f000 fbf1 	bl	22cc <__restore_core_regs>
    1aea:	f000 fe65 	bl	27b8 <abort>
    1aee:	bf00      	nop

00001af0 <unwind_phase2_forced>:
    1af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1af4:	1d0d      	adds	r5, r1, #4
    1af6:	4606      	mov	r6, r0
    1af8:	4614      	mov	r4, r2
    1afa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1afc:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    1b00:	f10d 0c0c 	add.w	ip, sp, #12
    1b04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1b0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1b10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1b14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1b18:	ad02      	add	r5, sp, #8
    1b1a:	68f7      	ldr	r7, [r6, #12]
    1b1c:	f8d6 8018 	ldr.w	r8, [r6, #24]
    1b20:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    1b24:	2300      	movs	r3, #0
    1b26:	602b      	str	r3, [r5, #0]
    1b28:	e021      	b.n	1b6e <unwind_phase2_forced+0x7e>
    1b2a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    1b2c:	6173      	str	r3, [r6, #20]
    1b2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    1b32:	4629      	mov	r1, r5
    1b34:	a87a      	add	r0, sp, #488	; 0x1e8
    1b36:	f000 fe65 	bl	2804 <memcpy>
    1b3a:	6933      	ldr	r3, [r6, #16]
    1b3c:	aa7a      	add	r2, sp, #488	; 0x1e8
    1b3e:	4631      	mov	r1, r6
    1b40:	4650      	mov	r0, sl
    1b42:	4798      	blx	r3
    1b44:	9b88      	ldr	r3, [sp, #544]	; 0x220
    1b46:	e9cd 5800 	strd	r5, r8, [sp]
    1b4a:	4621      	mov	r1, r4
    1b4c:	646b      	str	r3, [r5, #68]	; 0x44
    1b4e:	4681      	mov	r9, r0
    1b50:	4633      	mov	r3, r6
    1b52:	4632      	mov	r2, r6
    1b54:	2001      	movs	r0, #1
    1b56:	47b8      	blx	r7
    1b58:	4604      	mov	r4, r0
    1b5a:	b9e8      	cbnz	r0, 1b98 <unwind_phase2_forced+0xa8>
    1b5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    1b60:	a97a      	add	r1, sp, #488	; 0x1e8
    1b62:	4628      	mov	r0, r5
    1b64:	f000 fe4e 	bl	2804 <memcpy>
    1b68:	f1b9 0f08 	cmp.w	r9, #8
    1b6c:	d11b      	bne.n	1ba6 <unwind_phase2_forced+0xb6>
    1b6e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1b70:	4630      	mov	r0, r6
    1b72:	f7ff ff1b 	bl	19ac <get_eit_entry>
    1b76:	3409      	adds	r4, #9
    1b78:	fa5f fa84 	uxtb.w	sl, r4
    1b7c:	4681      	mov	r9, r0
    1b7e:	2800      	cmp	r0, #0
    1b80:	d0d3      	beq.n	1b2a <unwind_phase2_forced+0x3a>
    1b82:	6bab      	ldr	r3, [r5, #56]	; 0x38
    1b84:	f04a 0110 	orr.w	r1, sl, #16
    1b88:	e9cd 5800 	strd	r5, r8, [sp]
    1b8c:	4632      	mov	r2, r6
    1b8e:	646b      	str	r3, [r5, #68]	; 0x44
    1b90:	2001      	movs	r0, #1
    1b92:	4633      	mov	r3, r6
    1b94:	47b8      	blx	r7
    1b96:	b108      	cbz	r0, 1b9c <unwind_phase2_forced+0xac>
    1b98:	f04f 0909 	mov.w	r9, #9
    1b9c:	4648      	mov	r0, r9
    1b9e:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    1ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1ba6:	f1b9 0f07 	cmp.w	r9, #7
    1baa:	d1f5      	bne.n	1b98 <unwind_phase2_forced+0xa8>
    1bac:	4620      	mov	r0, r4
    1bae:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1bb0:	f7ff ff7e 	bl	1ab0 <_Unwind_DebugHook>
    1bb4:	a803      	add	r0, sp, #12
    1bb6:	f000 fb89 	bl	22cc <__restore_core_regs>
    1bba:	bf00      	nop

00001bbc <_Unwind_GetCFA>:
    1bbc:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1bbe:	4770      	bx	lr

00001bc0 <__gnu_Unwind_RaiseException>:
    1bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bc2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    1bc4:	640b      	str	r3, [r1, #64]	; 0x40
    1bc6:	1d0e      	adds	r6, r1, #4
    1bc8:	460f      	mov	r7, r1
    1bca:	4605      	mov	r5, r0
    1bcc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1bce:	b0f9      	sub	sp, #484	; 0x1e4
    1bd0:	ac01      	add	r4, sp, #4
    1bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1bd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1bd8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1bdc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    1be0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    1be4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1be8:	9600      	str	r6, [sp, #0]
    1bea:	e006      	b.n	1bfa <__gnu_Unwind_RaiseException+0x3a>
    1bec:	692b      	ldr	r3, [r5, #16]
    1bee:	466a      	mov	r2, sp
    1bf0:	4629      	mov	r1, r5
    1bf2:	4798      	blx	r3
    1bf4:	2808      	cmp	r0, #8
    1bf6:	4604      	mov	r4, r0
    1bf8:	d108      	bne.n	1c0c <__gnu_Unwind_RaiseException+0x4c>
    1bfa:	9910      	ldr	r1, [sp, #64]	; 0x40
    1bfc:	4628      	mov	r0, r5
    1bfe:	f7ff fed5 	bl	19ac <get_eit_entry>
    1c02:	2800      	cmp	r0, #0
    1c04:	d0f2      	beq.n	1bec <__gnu_Unwind_RaiseException+0x2c>
    1c06:	2009      	movs	r0, #9
    1c08:	b079      	add	sp, #484	; 0x1e4
    1c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c0c:	4668      	mov	r0, sp
    1c0e:	f7ff ff1b 	bl	1a48 <restore_non_core_regs>
    1c12:	2c06      	cmp	r4, #6
    1c14:	d1f7      	bne.n	1c06 <__gnu_Unwind_RaiseException+0x46>
    1c16:	4639      	mov	r1, r7
    1c18:	4628      	mov	r0, r5
    1c1a:	f7ff ff4b 	bl	1ab4 <unwind_phase2>
    1c1e:	bf00      	nop

00001c20 <__gnu_Unwind_ForcedUnwind>:
    1c20:	b430      	push	{r4, r5}
    1c22:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    1c24:	60c1      	str	r1, [r0, #12]
    1c26:	6182      	str	r2, [r0, #24]
    1c28:	4619      	mov	r1, r3
    1c2a:	641d      	str	r5, [r3, #64]	; 0x40
    1c2c:	2200      	movs	r2, #0
    1c2e:	bc30      	pop	{r4, r5}
    1c30:	e75e      	b.n	1af0 <unwind_phase2_forced>
    1c32:	bf00      	nop

00001c34 <__gnu_Unwind_Resume>:
    1c34:	b570      	push	{r4, r5, r6, lr}
    1c36:	68c6      	ldr	r6, [r0, #12]
    1c38:	6943      	ldr	r3, [r0, #20]
    1c3a:	640b      	str	r3, [r1, #64]	; 0x40
    1c3c:	b9ae      	cbnz	r6, 1c6a <__gnu_Unwind_Resume+0x36>
    1c3e:	6903      	ldr	r3, [r0, #16]
    1c40:	460a      	mov	r2, r1
    1c42:	4604      	mov	r4, r0
    1c44:	460d      	mov	r5, r1
    1c46:	4601      	mov	r1, r0
    1c48:	2002      	movs	r0, #2
    1c4a:	4798      	blx	r3
    1c4c:	2807      	cmp	r0, #7
    1c4e:	d005      	beq.n	1c5c <__gnu_Unwind_Resume+0x28>
    1c50:	2808      	cmp	r0, #8
    1c52:	d10f      	bne.n	1c74 <__gnu_Unwind_Resume+0x40>
    1c54:	4629      	mov	r1, r5
    1c56:	4620      	mov	r0, r4
    1c58:	f7ff ff2c 	bl	1ab4 <unwind_phase2>
    1c5c:	4630      	mov	r0, r6
    1c5e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1c60:	f7ff ff26 	bl	1ab0 <_Unwind_DebugHook>
    1c64:	1d28      	adds	r0, r5, #4
    1c66:	f000 fb31 	bl	22cc <__restore_core_regs>
    1c6a:	2201      	movs	r2, #1
    1c6c:	f7ff ff40 	bl	1af0 <unwind_phase2_forced>
    1c70:	f000 fda2 	bl	27b8 <abort>
    1c74:	f000 fda0 	bl	27b8 <abort>

00001c78 <__gnu_Unwind_Resume_or_Rethrow>:
    1c78:	68c2      	ldr	r2, [r0, #12]
    1c7a:	b11a      	cbz	r2, 1c84 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    1c7c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    1c7e:	640a      	str	r2, [r1, #64]	; 0x40
    1c80:	2200      	movs	r2, #0
    1c82:	e735      	b.n	1af0 <unwind_phase2_forced>
    1c84:	e79c      	b.n	1bc0 <__gnu_Unwind_RaiseException>
    1c86:	bf00      	nop

00001c88 <_Unwind_Complete>:
    1c88:	4770      	bx	lr
    1c8a:	bf00      	nop

00001c8c <_Unwind_DeleteException>:
    1c8c:	6883      	ldr	r3, [r0, #8]
    1c8e:	4601      	mov	r1, r0
    1c90:	b10b      	cbz	r3, 1c96 <_Unwind_DeleteException+0xa>
    1c92:	2001      	movs	r0, #1
    1c94:	4718      	bx	r3
    1c96:	4770      	bx	lr

00001c98 <_Unwind_VRS_Get>:
    1c98:	2901      	cmp	r1, #1
    1c9a:	d012      	beq.n	1cc2 <_Unwind_VRS_Get+0x2a>
    1c9c:	d809      	bhi.n	1cb2 <_Unwind_VRS_Get+0x1a>
    1c9e:	b973      	cbnz	r3, 1cbe <_Unwind_VRS_Get+0x26>
    1ca0:	2a0f      	cmp	r2, #15
    1ca2:	d80c      	bhi.n	1cbe <_Unwind_VRS_Get+0x26>
    1ca4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1ca8:	4618      	mov	r0, r3
    1caa:	6853      	ldr	r3, [r2, #4]
    1cac:	9a00      	ldr	r2, [sp, #0]
    1cae:	6013      	str	r3, [r2, #0]
    1cb0:	4770      	bx	lr
    1cb2:	3903      	subs	r1, #3
    1cb4:	2901      	cmp	r1, #1
    1cb6:	bf94      	ite	ls
    1cb8:	2001      	movls	r0, #1
    1cba:	2002      	movhi	r0, #2
    1cbc:	4770      	bx	lr
    1cbe:	2002      	movs	r0, #2
    1cc0:	4770      	bx	lr
    1cc2:	4608      	mov	r0, r1
    1cc4:	4770      	bx	lr
    1cc6:	bf00      	nop

00001cc8 <_Unwind_GetGR>:
    1cc8:	b510      	push	{r4, lr}
    1cca:	b084      	sub	sp, #16
    1ccc:	2300      	movs	r3, #0
    1cce:	ac03      	add	r4, sp, #12
    1cd0:	460a      	mov	r2, r1
    1cd2:	9400      	str	r4, [sp, #0]
    1cd4:	4619      	mov	r1, r3
    1cd6:	f7ff ffdf 	bl	1c98 <_Unwind_VRS_Get>
    1cda:	9803      	ldr	r0, [sp, #12]
    1cdc:	b004      	add	sp, #16
    1cde:	bd10      	pop	{r4, pc}

00001ce0 <_Unwind_VRS_Set>:
    1ce0:	2901      	cmp	r1, #1
    1ce2:	d012      	beq.n	1d0a <_Unwind_VRS_Set+0x2a>
    1ce4:	d809      	bhi.n	1cfa <_Unwind_VRS_Set+0x1a>
    1ce6:	b973      	cbnz	r3, 1d06 <_Unwind_VRS_Set+0x26>
    1ce8:	2a0f      	cmp	r2, #15
    1cea:	d80c      	bhi.n	1d06 <_Unwind_VRS_Set+0x26>
    1cec:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    1cf0:	9a00      	ldr	r2, [sp, #0]
    1cf2:	6812      	ldr	r2, [r2, #0]
    1cf4:	6042      	str	r2, [r0, #4]
    1cf6:	4618      	mov	r0, r3
    1cf8:	4770      	bx	lr
    1cfa:	3903      	subs	r1, #3
    1cfc:	2901      	cmp	r1, #1
    1cfe:	bf94      	ite	ls
    1d00:	2001      	movls	r0, #1
    1d02:	2002      	movhi	r0, #2
    1d04:	4770      	bx	lr
    1d06:	2002      	movs	r0, #2
    1d08:	4770      	bx	lr
    1d0a:	4608      	mov	r0, r1
    1d0c:	4770      	bx	lr
    1d0e:	bf00      	nop

00001d10 <_Unwind_SetGR>:
    1d10:	b510      	push	{r4, lr}
    1d12:	b084      	sub	sp, #16
    1d14:	2300      	movs	r3, #0
    1d16:	ac03      	add	r4, sp, #12
    1d18:	9203      	str	r2, [sp, #12]
    1d1a:	9400      	str	r4, [sp, #0]
    1d1c:	460a      	mov	r2, r1
    1d1e:	4619      	mov	r1, r3
    1d20:	f7ff ffde 	bl	1ce0 <_Unwind_VRS_Set>
    1d24:	b004      	add	sp, #16
    1d26:	bd10      	pop	{r4, pc}

00001d28 <__gnu_Unwind_Backtrace>:
    1d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d2a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    1d2c:	6413      	str	r3, [r2, #64]	; 0x40
    1d2e:	1d15      	adds	r5, r2, #4
    1d30:	468c      	mov	ip, r1
    1d32:	4606      	mov	r6, r0
    1d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1d36:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    1d3a:	ac17      	add	r4, sp, #92	; 0x5c
    1d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1d3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1d42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1d44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1d46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1d4a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1d4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1d52:	4665      	mov	r5, ip
    1d54:	9716      	str	r7, [sp, #88]	; 0x58
    1d56:	e010      	b.n	1d7a <__gnu_Unwind_Backtrace+0x52>
    1d58:	f7ff ffda 	bl	1d10 <_Unwind_SetGR>
    1d5c:	4629      	mov	r1, r5
    1d5e:	a816      	add	r0, sp, #88	; 0x58
    1d60:	47b0      	blx	r6
    1d62:	4603      	mov	r3, r0
    1d64:	aa16      	add	r2, sp, #88	; 0x58
    1d66:	4669      	mov	r1, sp
    1d68:	2008      	movs	r0, #8
    1d6a:	b983      	cbnz	r3, 1d8e <__gnu_Unwind_Backtrace+0x66>
    1d6c:	9b04      	ldr	r3, [sp, #16]
    1d6e:	4798      	blx	r3
    1d70:	2805      	cmp	r0, #5
    1d72:	4604      	mov	r4, r0
    1d74:	d00c      	beq.n	1d90 <__gnu_Unwind_Backtrace+0x68>
    1d76:	2809      	cmp	r0, #9
    1d78:	d009      	beq.n	1d8e <__gnu_Unwind_Backtrace+0x66>
    1d7a:	9926      	ldr	r1, [sp, #152]	; 0x98
    1d7c:	4668      	mov	r0, sp
    1d7e:	f7ff fe15 	bl	19ac <get_eit_entry>
    1d82:	4603      	mov	r3, r0
    1d84:	466a      	mov	r2, sp
    1d86:	210c      	movs	r1, #12
    1d88:	a816      	add	r0, sp, #88	; 0x58
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	d0e4      	beq.n	1d58 <__gnu_Unwind_Backtrace+0x30>
    1d8e:	2409      	movs	r4, #9
    1d90:	a816      	add	r0, sp, #88	; 0x58
    1d92:	f7ff fe59 	bl	1a48 <restore_non_core_regs>
    1d96:	4620      	mov	r0, r4
    1d98:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    1d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d9e:	bf00      	nop

00001da0 <__gnu_unwind_pr_common>:
    1da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1da4:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
    1da6:	b089      	sub	sp, #36	; 0x24
    1da8:	460d      	mov	r5, r1
    1daa:	f854 1b04 	ldr.w	r1, [r4], #4
    1dae:	9406      	str	r4, [sp, #24]
    1db0:	4617      	mov	r7, r2
    1db2:	f000 0803 	and.w	r8, r0, #3
    1db6:	461e      	mov	r6, r3
    1db8:	2b00      	cmp	r3, #0
    1dba:	d079      	beq.n	1eb0 <__gnu_unwind_pr_common+0x110>
    1dbc:	0c0b      	lsrs	r3, r1, #16
    1dbe:	b2da      	uxtb	r2, r3
    1dc0:	0409      	lsls	r1, r1, #16
    1dc2:	f88d 301d 	strb.w	r3, [sp, #29]
    1dc6:	2302      	movs	r3, #2
    1dc8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    1dcc:	9105      	str	r1, [sp, #20]
    1dce:	f88d 301c 	strb.w	r3, [sp, #28]
    1dd2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    1dd4:	f1b8 0f02 	cmp.w	r8, #2
    1dd8:	bf08      	it	eq
    1dda:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    1ddc:	f013 0301 	ands.w	r3, r3, #1
    1de0:	d00c      	beq.n	1dfc <__gnu_unwind_pr_common+0x5c>
    1de2:	4638      	mov	r0, r7
    1de4:	a905      	add	r1, sp, #20
    1de6:	f000 fb73 	bl	24d0 <__gnu_unwind_execute>
    1dea:	b918      	cbnz	r0, 1df4 <__gnu_unwind_pr_common+0x54>
    1dec:	2008      	movs	r0, #8
    1dee:	b009      	add	sp, #36	; 0x24
    1df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1df4:	2009      	movs	r0, #9
    1df6:	b009      	add	sp, #36	; 0x24
    1df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dfc:	f8d4 a000 	ldr.w	sl, [r4]
    1e00:	f1ba 0f00 	cmp.w	sl, #0
    1e04:	d0ed      	beq.n	1de2 <__gnu_unwind_pr_common+0x42>
    1e06:	9301      	str	r3, [sp, #4]
    1e08:	f000 0308 	and.w	r3, r0, #8
    1e0c:	9302      	str	r3, [sp, #8]
    1e0e:	2e02      	cmp	r6, #2
    1e10:	d04a      	beq.n	1ea8 <__gnu_unwind_pr_common+0x108>
    1e12:	f8b4 a000 	ldrh.w	sl, [r4]
    1e16:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    1e1a:	3404      	adds	r4, #4
    1e1c:	6caa      	ldr	r2, [r5, #72]	; 0x48
    1e1e:	f029 0b01 	bic.w	fp, r9, #1
    1e22:	210f      	movs	r1, #15
    1e24:	4638      	mov	r0, r7
    1e26:	4493      	add	fp, r2
    1e28:	f7ff ff4e 	bl	1cc8 <_Unwind_GetGR>
    1e2c:	4583      	cmp	fp, r0
    1e2e:	d839      	bhi.n	1ea4 <__gnu_unwind_pr_common+0x104>
    1e30:	f02a 0201 	bic.w	r2, sl, #1
    1e34:	445a      	add	r2, fp
    1e36:	4282      	cmp	r2, r0
    1e38:	bf94      	ite	ls
    1e3a:	2000      	movls	r0, #0
    1e3c:	2001      	movhi	r0, #1
    1e3e:	ea4f 0349 	mov.w	r3, r9, lsl #1
    1e42:	f003 0302 	and.w	r3, r3, #2
    1e46:	f00a 0a01 	and.w	sl, sl, #1
    1e4a:	ea43 030a 	orr.w	r3, r3, sl
    1e4e:	2b01      	cmp	r3, #1
    1e50:	d049      	beq.n	1ee6 <__gnu_unwind_pr_common+0x146>
    1e52:	2b02      	cmp	r3, #2
    1e54:	d032      	beq.n	1ebc <__gnu_unwind_pr_common+0x11c>
    1e56:	2b00      	cmp	r3, #0
    1e58:	d1cc      	bne.n	1df4 <__gnu_unwind_pr_common+0x54>
    1e5a:	f1b8 0f00 	cmp.w	r8, #0
    1e5e:	d002      	beq.n	1e66 <__gnu_unwind_pr_common+0xc6>
    1e60:	2800      	cmp	r0, #0
    1e62:	f040 80cd 	bne.w	2000 <__gnu_unwind_pr_common+0x260>
    1e66:	3404      	adds	r4, #4
    1e68:	f8d4 a000 	ldr.w	sl, [r4]
    1e6c:	f1ba 0f00 	cmp.w	sl, #0
    1e70:	d1cd      	bne.n	1e0e <__gnu_unwind_pr_common+0x6e>
    1e72:	a905      	add	r1, sp, #20
    1e74:	4638      	mov	r0, r7
    1e76:	f000 fb2b 	bl	24d0 <__gnu_unwind_execute>
    1e7a:	2800      	cmp	r0, #0
    1e7c:	d1ba      	bne.n	1df4 <__gnu_unwind_pr_common+0x54>
    1e7e:	9b01      	ldr	r3, [sp, #4]
    1e80:	2b00      	cmp	r3, #0
    1e82:	d0b3      	beq.n	1dec <__gnu_unwind_pr_common+0x4c>
    1e84:	210f      	movs	r1, #15
    1e86:	4638      	mov	r0, r7
    1e88:	f7ff ff1e 	bl	1cc8 <_Unwind_GetGR>
    1e8c:	210e      	movs	r1, #14
    1e8e:	4602      	mov	r2, r0
    1e90:	4638      	mov	r0, r7
    1e92:	f7ff ff3d 	bl	1d10 <_Unwind_SetGR>
    1e96:	4638      	mov	r0, r7
    1e98:	4a6a      	ldr	r2, [pc, #424]	; (2044 <__gnu_unwind_pr_common+0x2a4>)
    1e9a:	210f      	movs	r1, #15
    1e9c:	f7ff ff38 	bl	1d10 <_Unwind_SetGR>
    1ea0:	2007      	movs	r0, #7
    1ea2:	e7a8      	b.n	1df6 <__gnu_unwind_pr_common+0x56>
    1ea4:	2000      	movs	r0, #0
    1ea6:	e7ca      	b.n	1e3e <__gnu_unwind_pr_common+0x9e>
    1ea8:	f8d4 9004 	ldr.w	r9, [r4, #4]
    1eac:	3408      	adds	r4, #8
    1eae:	e7b5      	b.n	1e1c <__gnu_unwind_pr_common+0x7c>
    1eb0:	0209      	lsls	r1, r1, #8
    1eb2:	2303      	movs	r3, #3
    1eb4:	9105      	str	r1, [sp, #20]
    1eb6:	f8ad 301c 	strh.w	r3, [sp, #28]
    1eba:	e78a      	b.n	1dd2 <__gnu_unwind_pr_common+0x32>
    1ebc:	6823      	ldr	r3, [r4, #0]
    1ebe:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
    1ec2:	f1b8 0f00 	cmp.w	r8, #0
    1ec6:	d145      	bne.n	1f54 <__gnu_unwind_pr_common+0x1b4>
    1ec8:	b128      	cbz	r0, 1ed6 <__gnu_unwind_pr_common+0x136>
    1eca:	9a02      	ldr	r2, [sp, #8]
    1ecc:	2a00      	cmp	r2, #0
    1ece:	d05c      	beq.n	1f8a <__gnu_unwind_pr_common+0x1ea>
    1ed0:	f1bb 0f00 	cmp.w	fp, #0
    1ed4:	d074      	beq.n	1fc0 <__gnu_unwind_pr_common+0x220>
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	da00      	bge.n	1edc <__gnu_unwind_pr_common+0x13c>
    1eda:	3404      	adds	r4, #4
    1edc:	f10b 0b01 	add.w	fp, fp, #1
    1ee0:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    1ee4:	e7c0      	b.n	1e68 <__gnu_unwind_pr_common+0xc8>
    1ee6:	f1b8 0f00 	cmp.w	r8, #0
    1eea:	d119      	bne.n	1f20 <__gnu_unwind_pr_common+0x180>
    1eec:	b1b0      	cbz	r0, 1f1c <__gnu_unwind_pr_common+0x17c>
    1eee:	e9d4 2300 	ldrd	r2, r3, [r4]
    1ef2:	1c99      	adds	r1, r3, #2
    1ef4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    1ef8:	f43f af7c 	beq.w	1df4 <__gnu_unwind_pr_common+0x54>
    1efc:	f105 0158 	add.w	r1, r5, #88	; 0x58
    1f00:	3301      	adds	r3, #1
    1f02:	9104      	str	r1, [sp, #16]
    1f04:	f000 8090 	beq.w	2028 <__gnu_unwind_pr_common+0x288>
    1f08:	1d20      	adds	r0, r4, #4
    1f0a:	f7ff fdc9 	bl	1aa0 <_Unwind_decode_typeinfo_ptr.isra.0>
    1f0e:	ab04      	add	r3, sp, #16
    1f10:	4601      	mov	r1, r0
    1f12:	4628      	mov	r0, r5
    1f14:	f3af 8000 	nop.w
    1f18:	2800      	cmp	r0, #0
    1f1a:	d15b      	bne.n	1fd4 <__gnu_unwind_pr_common+0x234>
    1f1c:	3408      	adds	r4, #8
    1f1e:	e7a3      	b.n	1e68 <__gnu_unwind_pr_common+0xc8>
    1f20:	210d      	movs	r1, #13
    1f22:	4638      	mov	r0, r7
    1f24:	f8d5 9020 	ldr.w	r9, [r5, #32]
    1f28:	f7ff fece 	bl	1cc8 <_Unwind_GetGR>
    1f2c:	4581      	cmp	r9, r0
    1f2e:	d1f5      	bne.n	1f1c <__gnu_unwind_pr_common+0x17c>
    1f30:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f32:	429c      	cmp	r4, r3
    1f34:	d1f2      	bne.n	1f1c <__gnu_unwind_pr_common+0x17c>
    1f36:	4620      	mov	r0, r4
    1f38:	f7ff fcec 	bl	1914 <selfrel_offset31>
    1f3c:	210f      	movs	r1, #15
    1f3e:	4602      	mov	r2, r0
    1f40:	4638      	mov	r0, r7
    1f42:	f7ff fee5 	bl	1d10 <_Unwind_SetGR>
    1f46:	4638      	mov	r0, r7
    1f48:	462a      	mov	r2, r5
    1f4a:	2100      	movs	r1, #0
    1f4c:	f7ff fee0 	bl	1d10 <_Unwind_SetGR>
    1f50:	2007      	movs	r0, #7
    1f52:	e750      	b.n	1df6 <__gnu_unwind_pr_common+0x56>
    1f54:	210d      	movs	r1, #13
    1f56:	4638      	mov	r0, r7
    1f58:	f8d5 9020 	ldr.w	r9, [r5, #32]
    1f5c:	f7ff feb4 	bl	1cc8 <_Unwind_GetGR>
    1f60:	4581      	cmp	r9, r0
    1f62:	d001      	beq.n	1f68 <__gnu_unwind_pr_common+0x1c8>
    1f64:	6823      	ldr	r3, [r4, #0]
    1f66:	e7b6      	b.n	1ed6 <__gnu_unwind_pr_common+0x136>
    1f68:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1f6a:	429c      	cmp	r4, r3
    1f6c:	d1fa      	bne.n	1f64 <__gnu_unwind_pr_common+0x1c4>
    1f6e:	2204      	movs	r2, #4
    1f70:	2100      	movs	r1, #0
    1f72:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
    1f76:	18a3      	adds	r3, r4, r2
    1f78:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
    1f7c:	636b      	str	r3, [r5, #52]	; 0x34
    1f7e:	6823      	ldr	r3, [r4, #0]
    1f80:	428b      	cmp	r3, r1
    1f82:	db59      	blt.n	2038 <__gnu_unwind_pr_common+0x298>
    1f84:	2301      	movs	r3, #1
    1f86:	9301      	str	r3, [sp, #4]
    1f88:	e7a8      	b.n	1edc <__gnu_unwind_pr_common+0x13c>
    1f8a:	f105 0358 	add.w	r3, r5, #88	; 0x58
    1f8e:	f8cd 800c 	str.w	r8, [sp, #12]
    1f92:	f104 0a04 	add.w	sl, r4, #4
    1f96:	46b0      	mov	r8, r6
    1f98:	4691      	mov	r9, r2
    1f9a:	461e      	mov	r6, r3
    1f9c:	e00d      	b.n	1fba <__gnu_unwind_pr_common+0x21a>
    1f9e:	9604      	str	r6, [sp, #16]
    1fa0:	f7ff fd7e 	bl	1aa0 <_Unwind_decode_typeinfo_ptr.isra.0>
    1fa4:	ab04      	add	r3, sp, #16
    1fa6:	4601      	mov	r1, r0
    1fa8:	2200      	movs	r2, #0
    1faa:	4628      	mov	r0, r5
    1fac:	f3af 8000 	nop.w
    1fb0:	f109 0901 	add.w	r9, r9, #1
    1fb4:	f10a 0a04 	add.w	sl, sl, #4
    1fb8:	b9e8      	cbnz	r0, 1ff6 <__gnu_unwind_pr_common+0x256>
    1fba:	45d9      	cmp	r9, fp
    1fbc:	4650      	mov	r0, sl
    1fbe:	d1ee      	bne.n	1f9e <__gnu_unwind_pr_common+0x1fe>
    1fc0:	4638      	mov	r0, r7
    1fc2:	210d      	movs	r1, #13
    1fc4:	f7ff fe80 	bl	1cc8 <_Unwind_GetGR>
    1fc8:	9b04      	ldr	r3, [sp, #16]
    1fca:	6228      	str	r0, [r5, #32]
    1fcc:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    1fd0:	2006      	movs	r0, #6
    1fd2:	e710      	b.n	1df6 <__gnu_unwind_pr_common+0x56>
    1fd4:	4681      	mov	r9, r0
    1fd6:	210d      	movs	r1, #13
    1fd8:	4638      	mov	r0, r7
    1fda:	f7ff fe75 	bl	1cc8 <_Unwind_GetGR>
    1fde:	f1b9 0f02 	cmp.w	r9, #2
    1fe2:	6228      	str	r0, [r5, #32]
    1fe4:	d125      	bne.n	2032 <__gnu_unwind_pr_common+0x292>
    1fe6:	462b      	mov	r3, r5
    1fe8:	9a04      	ldr	r2, [sp, #16]
    1fea:	f843 2f2c 	str.w	r2, [r3, #44]!
    1fee:	626b      	str	r3, [r5, #36]	; 0x24
    1ff0:	62ac      	str	r4, [r5, #40]	; 0x28
    1ff2:	2006      	movs	r0, #6
    1ff4:	e6ff      	b.n	1df6 <__gnu_unwind_pr_common+0x56>
    1ff6:	4646      	mov	r6, r8
    1ff8:	6823      	ldr	r3, [r4, #0]
    1ffa:	f8dd 800c 	ldr.w	r8, [sp, #12]
    1ffe:	e76a      	b.n	1ed6 <__gnu_unwind_pr_common+0x136>
    2000:	4620      	mov	r0, r4
    2002:	f7ff fc87 	bl	1914 <selfrel_offset31>
    2006:	3404      	adds	r4, #4
    2008:	4602      	mov	r2, r0
    200a:	63ac      	str	r4, [r5, #56]	; 0x38
    200c:	4628      	mov	r0, r5
    200e:	4614      	mov	r4, r2
    2010:	f3af 8000 	nop.w
    2014:	2800      	cmp	r0, #0
    2016:	f43f aeed 	beq.w	1df4 <__gnu_unwind_pr_common+0x54>
    201a:	4638      	mov	r0, r7
    201c:	4622      	mov	r2, r4
    201e:	210f      	movs	r1, #15
    2020:	f7ff fe76 	bl	1d10 <_Unwind_SetGR>
    2024:	2007      	movs	r0, #7
    2026:	e6e6      	b.n	1df6 <__gnu_unwind_pr_common+0x56>
    2028:	4638      	mov	r0, r7
    202a:	210d      	movs	r1, #13
    202c:	f7ff fe4c 	bl	1cc8 <_Unwind_GetGR>
    2030:	6228      	str	r0, [r5, #32]
    2032:	9b04      	ldr	r3, [sp, #16]
    2034:	626b      	str	r3, [r5, #36]	; 0x24
    2036:	e7db      	b.n	1ff0 <__gnu_unwind_pr_common+0x250>
    2038:	f10b 0001 	add.w	r0, fp, #1
    203c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    2040:	e77a      	b.n	1f38 <__gnu_unwind_pr_common+0x198>
    2042:	bf00      	nop
    2044:	00000000 	.word	0x00000000

00002048 <__aeabi_unwind_cpp_pr0>:
    2048:	2300      	movs	r3, #0
    204a:	e6a9      	b.n	1da0 <__gnu_unwind_pr_common>

0000204c <__aeabi_unwind_cpp_pr1>:
    204c:	2301      	movs	r3, #1
    204e:	e6a7      	b.n	1da0 <__gnu_unwind_pr_common>

00002050 <__aeabi_unwind_cpp_pr2>:
    2050:	2302      	movs	r3, #2
    2052:	e6a5      	b.n	1da0 <__gnu_unwind_pr_common>

00002054 <_Unwind_VRS_Pop>:
    2054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2058:	4606      	mov	r6, r0
    205a:	b0c3      	sub	sp, #268	; 0x10c
    205c:	4615      	mov	r5, r2
    205e:	461c      	mov	r4, r3
    2060:	2904      	cmp	r1, #4
    2062:	f200 80b9 	bhi.w	21d8 <_Unwind_VRS_Pop+0x184>
    2066:	e8df f001 	tbb	[pc, r1]
    206a:	539a      	.short	0x539a
    206c:	29b7      	.short	0x29b7
    206e:	03          	.byte	0x03
    206f:	00          	.byte	0x00
    2070:	2c00      	cmp	r4, #0
    2072:	f040 80b1 	bne.w	21d8 <_Unwind_VRS_Pop+0x184>
    2076:	2a10      	cmp	r2, #16
    2078:	f200 80ae 	bhi.w	21d8 <_Unwind_VRS_Pop+0x184>
    207c:	6803      	ldr	r3, [r0, #0]
    207e:	06d8      	lsls	r0, r3, #27
    2080:	f100 80f3 	bmi.w	226a <_Unwind_VRS_Pop+0x216>
    2084:	af20      	add	r7, sp, #128	; 0x80
    2086:	4638      	mov	r0, r7
    2088:	f000 f992 	bl	23b0 <__gnu_Unwind_Save_WMMXC>
    208c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    208e:	2300      	movs	r3, #0
    2090:	2401      	movs	r4, #1
    2092:	fa04 f203 	lsl.w	r2, r4, r3
    2096:	422a      	tst	r2, r5
    2098:	4601      	mov	r1, r0
    209a:	d004      	beq.n	20a6 <_Unwind_VRS_Pop+0x52>
    209c:	f851 2b04 	ldr.w	r2, [r1], #4
    20a0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    20a4:	4608      	mov	r0, r1
    20a6:	3301      	adds	r3, #1
    20a8:	2b04      	cmp	r3, #4
    20aa:	d1f2      	bne.n	2092 <_Unwind_VRS_Pop+0x3e>
    20ac:	63b0      	str	r0, [r6, #56]	; 0x38
    20ae:	4638      	mov	r0, r7
    20b0:	f000 f974 	bl	239c <__gnu_Unwind_Restore_WMMXC>
    20b4:	2000      	movs	r0, #0
    20b6:	b043      	add	sp, #268	; 0x10c
    20b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    20bc:	2c03      	cmp	r4, #3
    20be:	f040 808b 	bne.w	21d8 <_Unwind_VRS_Pop+0x184>
    20c2:	b294      	uxth	r4, r2
    20c4:	eb04 4312 	add.w	r3, r4, r2, lsr #16
    20c8:	2b10      	cmp	r3, #16
    20ca:	ea4f 4512 	mov.w	r5, r2, lsr #16
    20ce:	f200 8083 	bhi.w	21d8 <_Unwind_VRS_Pop+0x184>
    20d2:	6803      	ldr	r3, [r0, #0]
    20d4:	071f      	lsls	r7, r3, #28
    20d6:	f100 80d0 	bmi.w	227a <_Unwind_VRS_Pop+0x226>
    20da:	af20      	add	r7, sp, #128	; 0x80
    20dc:	4638      	mov	r0, r7
    20de:	f000 f93b 	bl	2358 <__gnu_Unwind_Save_WMMXD>
    20e2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
    20e6:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    20e8:	b154      	cbz	r4, 2100 <_Unwind_VRS_Pop+0xac>
    20ea:	460b      	mov	r3, r1
    20ec:	1ae8      	subs	r0, r5, r3
    20ee:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    20f2:	00e4      	lsls	r4, r4, #3
    20f4:	581a      	ldr	r2, [r3, r0]
    20f6:	f843 2b04 	str.w	r2, [r3], #4
    20fa:	428b      	cmp	r3, r1
    20fc:	d1fa      	bne.n	20f4 <_Unwind_VRS_Pop+0xa0>
    20fe:	4425      	add	r5, r4
    2100:	4638      	mov	r0, r7
    2102:	63b5      	str	r5, [r6, #56]	; 0x38
    2104:	f000 f906 	bl	2314 <__gnu_Unwind_Restore_WMMXD>
    2108:	2000      	movs	r0, #0
    210a:	b043      	add	sp, #268	; 0x10c
    210c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2110:	2c01      	cmp	r4, #1
    2112:	ea4f 4812 	mov.w	r8, r2, lsr #16
    2116:	b295      	uxth	r5, r2
    2118:	d05a      	beq.n	21d0 <_Unwind_VRS_Pop+0x17c>
    211a:	2c05      	cmp	r4, #5
    211c:	d15c      	bne.n	21d8 <_Unwind_VRS_Pop+0x184>
    211e:	eb08 0905 	add.w	r9, r8, r5
    2122:	f1b9 0f20 	cmp.w	r9, #32
    2126:	d857      	bhi.n	21d8 <_Unwind_VRS_Pop+0x184>
    2128:	f1b8 0f0f 	cmp.w	r8, #15
    212c:	d977      	bls.n	221e <_Unwind_VRS_Pop+0x1ca>
    212e:	46a9      	mov	r9, r5
    2130:	2d00      	cmp	r5, #0
    2132:	f040 8088 	bne.w	2246 <_Unwind_VRS_Pop+0x1f2>
    2136:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2138:	b36d      	cbz	r5, 2196 <_Unwind_VRS_Pop+0x142>
    213a:	af20      	add	r7, sp, #128	; 0x80
    213c:	f04f 0900 	mov.w	r9, #0
    2140:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    2144:	3f04      	subs	r7, #4
    2146:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    214a:	f853 1b04 	ldr.w	r1, [r3], #4
    214e:	f847 1f04 	str.w	r1, [r7, #4]!
    2152:	42ab      	cmp	r3, r5
    2154:	d1f9      	bne.n	214a <_Unwind_VRS_Pop+0xf6>
    2156:	f1b9 0f00 	cmp.w	r9, #0
    215a:	d00f      	beq.n	217c <_Unwind_VRS_Pop+0x128>
    215c:	466f      	mov	r7, sp
    215e:	4641      	mov	r1, r8
    2160:	2910      	cmp	r1, #16
    2162:	bf38      	it	cc
    2164:	2110      	movcc	r1, #16
    2166:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
    216a:	3984      	subs	r1, #132	; 0x84
    216c:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
    2170:	f853 0b04 	ldr.w	r0, [r3], #4
    2174:	f841 0f04 	str.w	r0, [r1, #4]!
    2178:	42ab      	cmp	r3, r5
    217a:	d1f9      	bne.n	2170 <_Unwind_VRS_Pop+0x11c>
    217c:	2c01      	cmp	r4, #1
    217e:	f000 8084 	beq.w	228a <_Unwind_VRS_Pop+0x236>
    2182:	f1b8 0f0f 	cmp.w	r8, #15
    2186:	63b5      	str	r5, [r6, #56]	; 0x38
    2188:	d945      	bls.n	2216 <_Unwind_VRS_Pop+0x1c2>
    218a:	f1b9 0f00 	cmp.w	r9, #0
    218e:	d002      	beq.n	2196 <_Unwind_VRS_Pop+0x142>
    2190:	4668      	mov	r0, sp
    2192:	f000 f8b7 	bl	2304 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    2196:	2000      	movs	r0, #0
    2198:	b043      	add	sp, #268	; 0x10c
    219a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    219e:	b9dc      	cbnz	r4, 21d8 <_Unwind_VRS_Pop+0x184>
    21a0:	6b87      	ldr	r7, [r0, #56]	; 0x38
    21a2:	4623      	mov	r3, r4
    21a4:	2001      	movs	r0, #1
    21a6:	b294      	uxth	r4, r2
    21a8:	f106 0c04 	add.w	ip, r6, #4
    21ac:	fa00 f203 	lsl.w	r2, r0, r3
    21b0:	4222      	tst	r2, r4
    21b2:	4639      	mov	r1, r7
    21b4:	d004      	beq.n	21c0 <_Unwind_VRS_Pop+0x16c>
    21b6:	f851 2b04 	ldr.w	r2, [r1], #4
    21ba:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
    21be:	460f      	mov	r7, r1
    21c0:	3301      	adds	r3, #1
    21c2:	2b10      	cmp	r3, #16
    21c4:	d1f2      	bne.n	21ac <_Unwind_VRS_Pop+0x158>
    21c6:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
    21ca:	d1e4      	bne.n	2196 <_Unwind_VRS_Pop+0x142>
    21cc:	63b7      	str	r7, [r6, #56]	; 0x38
    21ce:	e004      	b.n	21da <_Unwind_VRS_Pop+0x186>
    21d0:	eb08 0305 	add.w	r3, r8, r5
    21d4:	2b10      	cmp	r3, #16
    21d6:	d903      	bls.n	21e0 <_Unwind_VRS_Pop+0x18c>
    21d8:	2002      	movs	r0, #2
    21da:	b043      	add	sp, #268	; 0x10c
    21dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    21e0:	f1b8 0f0f 	cmp.w	r8, #15
    21e4:	d8f8      	bhi.n	21d8 <_Unwind_VRS_Pop+0x184>
    21e6:	6833      	ldr	r3, [r6, #0]
    21e8:	07da      	lsls	r2, r3, #31
    21ea:	d506      	bpl.n	21fa <_Unwind_VRS_Pop+0x1a6>
    21ec:	4630      	mov	r0, r6
    21ee:	f023 0303 	bic.w	r3, r3, #3
    21f2:	f840 3b48 	str.w	r3, [r0], #72
    21f6:	f000 f879 	bl	22ec <__gnu_Unwind_Save_VFP>
    21fa:	af20      	add	r7, sp, #128	; 0x80
    21fc:	4638      	mov	r0, r7
    21fe:	f000 f875 	bl	22ec <__gnu_Unwind_Save_VFP>
    2202:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2204:	2d00      	cmp	r5, #0
    2206:	d199      	bne.n	213c <_Unwind_VRS_Pop+0xe8>
    2208:	461d      	mov	r5, r3
    220a:	3504      	adds	r5, #4
    220c:	63b5      	str	r5, [r6, #56]	; 0x38
    220e:	4638      	mov	r0, r7
    2210:	f000 f868 	bl	22e4 <__gnu_Unwind_Restore_VFP>
    2214:	e7bf      	b.n	2196 <_Unwind_VRS_Pop+0x142>
    2216:	a820      	add	r0, sp, #128	; 0x80
    2218:	f000 f86c 	bl	22f4 <__gnu_Unwind_Restore_VFP_D>
    221c:	e7b5      	b.n	218a <_Unwind_VRS_Pop+0x136>
    221e:	f1b9 0f10 	cmp.w	r9, #16
    2222:	d940      	bls.n	22a6 <_Unwind_VRS_Pop+0x252>
    2224:	f1a9 0910 	sub.w	r9, r9, #16
    2228:	6833      	ldr	r3, [r6, #0]
    222a:	07d9      	lsls	r1, r3, #31
    222c:	d508      	bpl.n	2240 <_Unwind_VRS_Pop+0x1ec>
    222e:	f023 0301 	bic.w	r3, r3, #1
    2232:	4630      	mov	r0, r6
    2234:	f043 0302 	orr.w	r3, r3, #2
    2238:	f840 3b48 	str.w	r3, [r0], #72
    223c:	f000 f85e 	bl	22fc <__gnu_Unwind_Save_VFP_D>
    2240:	f1b9 0f00 	cmp.w	r9, #0
    2244:	d032      	beq.n	22ac <_Unwind_VRS_Pop+0x258>
    2246:	6833      	ldr	r3, [r6, #0]
    2248:	075a      	lsls	r2, r3, #29
    224a:	d420      	bmi.n	228e <_Unwind_VRS_Pop+0x23a>
    224c:	f1b8 0f0f 	cmp.w	r8, #15
    2250:	d925      	bls.n	229e <_Unwind_VRS_Pop+0x24a>
    2252:	466f      	mov	r7, sp
    2254:	4638      	mov	r0, r7
    2256:	f1c8 0510 	rsb	r5, r8, #16
    225a:	f000 f857 	bl	230c <__gnu_Unwind_Save_VFP_D_16_to_31>
    225e:	2d00      	cmp	r5, #0
    2260:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2262:	f77f af7c 	ble.w	215e <_Unwind_VRS_Pop+0x10a>
    2266:	af20      	add	r7, sp, #128	; 0x80
    2268:	e76a      	b.n	2140 <_Unwind_VRS_Pop+0xec>
    226a:	f023 0310 	bic.w	r3, r3, #16
    226e:	6033      	str	r3, [r6, #0]
    2270:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
    2274:	f000 f89c 	bl	23b0 <__gnu_Unwind_Save_WMMXC>
    2278:	e704      	b.n	2084 <_Unwind_VRS_Pop+0x30>
    227a:	f023 0308 	bic.w	r3, r3, #8
    227e:	6003      	str	r3, [r0, #0]
    2280:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2284:	f000 f868 	bl	2358 <__gnu_Unwind_Save_WMMXD>
    2288:	e727      	b.n	20da <_Unwind_VRS_Pop+0x86>
    228a:	af20      	add	r7, sp, #128	; 0x80
    228c:	e7bd      	b.n	220a <_Unwind_VRS_Pop+0x1b6>
    228e:	4630      	mov	r0, r6
    2290:	f023 0304 	bic.w	r3, r3, #4
    2294:	f840 3bd0 	str.w	r3, [r0], #208
    2298:	f000 f838 	bl	230c <__gnu_Unwind_Save_VFP_D_16_to_31>
    229c:	e7d6      	b.n	224c <_Unwind_VRS_Pop+0x1f8>
    229e:	a820      	add	r0, sp, #128	; 0x80
    22a0:	f000 f82c 	bl	22fc <__gnu_Unwind_Save_VFP_D>
    22a4:	e7d5      	b.n	2252 <_Unwind_VRS_Pop+0x1fe>
    22a6:	f04f 0900 	mov.w	r9, #0
    22aa:	e7bd      	b.n	2228 <_Unwind_VRS_Pop+0x1d4>
    22ac:	f1b8 0f0f 	cmp.w	r8, #15
    22b0:	f63f af41 	bhi.w	2136 <_Unwind_VRS_Pop+0xe2>
    22b4:	af20      	add	r7, sp, #128	; 0x80
    22b6:	4638      	mov	r0, r7
    22b8:	f000 f820 	bl	22fc <__gnu_Unwind_Save_VFP_D>
    22bc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    22be:	2d00      	cmp	r5, #0
    22c0:	f47f af3c 	bne.w	213c <_Unwind_VRS_Pop+0xe8>
    22c4:	4638      	mov	r0, r7
    22c6:	f000 f815 	bl	22f4 <__gnu_Unwind_Restore_VFP_D>
    22ca:	e764      	b.n	2196 <_Unwind_VRS_Pop+0x142>

000022cc <__restore_core_regs>:
    22cc:	f100 0134 	add.w	r1, r0, #52	; 0x34
    22d0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    22d4:	469c      	mov	ip, r3
    22d6:	46a6      	mov	lr, r4
    22d8:	f84c 5d04 	str.w	r5, [ip, #-4]!
    22dc:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    22e0:	46e5      	mov	sp, ip
    22e2:	bd00      	pop	{pc}

000022e4 <__gnu_Unwind_Restore_VFP>:
    22e4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    22e8:	4770      	bx	lr
    22ea:	bf00      	nop

000022ec <__gnu_Unwind_Save_VFP>:
    22ec:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    22f0:	4770      	bx	lr
    22f2:	bf00      	nop

000022f4 <__gnu_Unwind_Restore_VFP_D>:
    22f4:	ec90 0b20 	vldmia	r0, {d0-d15}
    22f8:	4770      	bx	lr
    22fa:	bf00      	nop

000022fc <__gnu_Unwind_Save_VFP_D>:
    22fc:	ec80 0b20 	vstmia	r0, {d0-d15}
    2300:	4770      	bx	lr
    2302:	bf00      	nop

00002304 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    2304:	ecd0 0b20 	vldmia	r0, {d16-d31}
    2308:	4770      	bx	lr
    230a:	bf00      	nop

0000230c <__gnu_Unwind_Save_VFP_D_16_to_31>:
    230c:	ecc0 0b20 	vstmia	r0, {d16-d31}
    2310:	4770      	bx	lr
    2312:	bf00      	nop

00002314 <__gnu_Unwind_Restore_WMMXD>:
    2314:	ecf0 0102 	ldfe	f0, [r0], #8
    2318:	ecf0 1102 	ldfe	f1, [r0], #8
    231c:	ecf0 2102 	ldfe	f2, [r0], #8
    2320:	ecf0 3102 	ldfe	f3, [r0], #8
    2324:	ecf0 4102 	ldfe	f4, [r0], #8
    2328:	ecf0 5102 	ldfe	f5, [r0], #8
    232c:	ecf0 6102 	ldfe	f6, [r0], #8
    2330:	ecf0 7102 	ldfe	f7, [r0], #8
    2334:	ecf0 8102 	ldfp	f0, [r0], #8
    2338:	ecf0 9102 	ldfp	f1, [r0], #8
    233c:	ecf0 a102 	ldfp	f2, [r0], #8
    2340:	ecf0 b102 	ldfp	f3, [r0], #8
    2344:	ecf0 c102 	ldfp	f4, [r0], #8
    2348:	ecf0 d102 	ldfp	f5, [r0], #8
    234c:	ecf0 e102 	ldfp	f6, [r0], #8
    2350:	ecf0 f102 	ldfp	f7, [r0], #8
    2354:	4770      	bx	lr
    2356:	bf00      	nop

00002358 <__gnu_Unwind_Save_WMMXD>:
    2358:	ece0 0102 	stfe	f0, [r0], #8
    235c:	ece0 1102 	stfe	f1, [r0], #8
    2360:	ece0 2102 	stfe	f2, [r0], #8
    2364:	ece0 3102 	stfe	f3, [r0], #8
    2368:	ece0 4102 	stfe	f4, [r0], #8
    236c:	ece0 5102 	stfe	f5, [r0], #8
    2370:	ece0 6102 	stfe	f6, [r0], #8
    2374:	ece0 7102 	stfe	f7, [r0], #8
    2378:	ece0 8102 	stfp	f0, [r0], #8
    237c:	ece0 9102 	stfp	f1, [r0], #8
    2380:	ece0 a102 	stfp	f2, [r0], #8
    2384:	ece0 b102 	stfp	f3, [r0], #8
    2388:	ece0 c102 	stfp	f4, [r0], #8
    238c:	ece0 d102 	stfp	f5, [r0], #8
    2390:	ece0 e102 	stfp	f6, [r0], #8
    2394:	ece0 f102 	stfp	f7, [r0], #8
    2398:	4770      	bx	lr
    239a:	bf00      	nop

0000239c <__gnu_Unwind_Restore_WMMXC>:
    239c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    23a0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    23a4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    23a8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    23ac:	4770      	bx	lr
    23ae:	bf00      	nop

000023b0 <__gnu_Unwind_Save_WMMXC>:
    23b0:	fca0 8101 	stc2	1, cr8, [r0], #4
    23b4:	fca0 9101 	stc2	1, cr9, [r0], #4
    23b8:	fca0 a101 	stc2	1, cr10, [r0], #4
    23bc:	fca0 b101 	stc2	1, cr11, [r0], #4
    23c0:	4770      	bx	lr
    23c2:	bf00      	nop

000023c4 <_Unwind_RaiseException>:
    23c4:	46ec      	mov	ip, sp
    23c6:	b500      	push	{lr}
    23c8:	e92d 5000 	stmdb	sp!, {ip, lr}
    23cc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    23d0:	f04f 0300 	mov.w	r3, #0
    23d4:	e92d 000c 	stmdb	sp!, {r2, r3}
    23d8:	a901      	add	r1, sp, #4
    23da:	f7ff fbf1 	bl	1bc0 <__gnu_Unwind_RaiseException>
    23de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    23e2:	b012      	add	sp, #72	; 0x48
    23e4:	4770      	bx	lr
    23e6:	bf00      	nop

000023e8 <_Unwind_Resume>:
    23e8:	46ec      	mov	ip, sp
    23ea:	b500      	push	{lr}
    23ec:	e92d 5000 	stmdb	sp!, {ip, lr}
    23f0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    23f4:	f04f 0300 	mov.w	r3, #0
    23f8:	e92d 000c 	stmdb	sp!, {r2, r3}
    23fc:	a901      	add	r1, sp, #4
    23fe:	f7ff fc19 	bl	1c34 <__gnu_Unwind_Resume>
    2402:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    2406:	b012      	add	sp, #72	; 0x48
    2408:	4770      	bx	lr
    240a:	bf00      	nop

0000240c <_Unwind_Resume_or_Rethrow>:
    240c:	46ec      	mov	ip, sp
    240e:	b500      	push	{lr}
    2410:	e92d 5000 	stmdb	sp!, {ip, lr}
    2414:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2418:	f04f 0300 	mov.w	r3, #0
    241c:	e92d 000c 	stmdb	sp!, {r2, r3}
    2420:	a901      	add	r1, sp, #4
    2422:	f7ff fc29 	bl	1c78 <__gnu_Unwind_Resume_or_Rethrow>
    2426:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    242a:	b012      	add	sp, #72	; 0x48
    242c:	4770      	bx	lr
    242e:	bf00      	nop

00002430 <_Unwind_ForcedUnwind>:
    2430:	46ec      	mov	ip, sp
    2432:	b500      	push	{lr}
    2434:	e92d 5000 	stmdb	sp!, {ip, lr}
    2438:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    243c:	f04f 0300 	mov.w	r3, #0
    2440:	e92d 000c 	stmdb	sp!, {r2, r3}
    2444:	ab01      	add	r3, sp, #4
    2446:	f7ff fbeb 	bl	1c20 <__gnu_Unwind_ForcedUnwind>
    244a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    244e:	b012      	add	sp, #72	; 0x48
    2450:	4770      	bx	lr
    2452:	bf00      	nop

00002454 <_Unwind_Backtrace>:
    2454:	46ec      	mov	ip, sp
    2456:	b500      	push	{lr}
    2458:	e92d 5000 	stmdb	sp!, {ip, lr}
    245c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    2460:	f04f 0300 	mov.w	r3, #0
    2464:	e92d 000c 	stmdb	sp!, {r2, r3}
    2468:	aa01      	add	r2, sp, #4
    246a:	f7ff fc5d 	bl	1d28 <__gnu_Unwind_Backtrace>
    246e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    2472:	b012      	add	sp, #72	; 0x48
    2474:	4770      	bx	lr
    2476:	bf00      	nop

00002478 <next_unwind_byte>:
    2478:	7a02      	ldrb	r2, [r0, #8]
    247a:	b97a      	cbnz	r2, 249c <next_unwind_byte+0x24>
    247c:	7a43      	ldrb	r3, [r0, #9]
    247e:	b1a3      	cbz	r3, 24aa <next_unwind_byte+0x32>
    2480:	6842      	ldr	r2, [r0, #4]
    2482:	3b01      	subs	r3, #1
    2484:	b410      	push	{r4}
    2486:	7243      	strb	r3, [r0, #9]
    2488:	6813      	ldr	r3, [r2, #0]
    248a:	2103      	movs	r1, #3
    248c:	1d14      	adds	r4, r2, #4
    248e:	7201      	strb	r1, [r0, #8]
    2490:	021a      	lsls	r2, r3, #8
    2492:	6044      	str	r4, [r0, #4]
    2494:	6002      	str	r2, [r0, #0]
    2496:	bc10      	pop	{r4}
    2498:	0e18      	lsrs	r0, r3, #24
    249a:	4770      	bx	lr
    249c:	6803      	ldr	r3, [r0, #0]
    249e:	3a01      	subs	r2, #1
    24a0:	7202      	strb	r2, [r0, #8]
    24a2:	021a      	lsls	r2, r3, #8
    24a4:	6002      	str	r2, [r0, #0]
    24a6:	0e18      	lsrs	r0, r3, #24
    24a8:	4770      	bx	lr
    24aa:	20b0      	movs	r0, #176	; 0xb0
    24ac:	4770      	bx	lr
    24ae:	bf00      	nop

000024b0 <_Unwind_GetGR.constprop.0>:
    24b0:	b500      	push	{lr}
    24b2:	b085      	sub	sp, #20
    24b4:	aa03      	add	r2, sp, #12
    24b6:	2300      	movs	r3, #0
    24b8:	9200      	str	r2, [sp, #0]
    24ba:	4619      	mov	r1, r3
    24bc:	220c      	movs	r2, #12
    24be:	f7ff fbeb 	bl	1c98 <_Unwind_VRS_Get>
    24c2:	9803      	ldr	r0, [sp, #12]
    24c4:	b005      	add	sp, #20
    24c6:	f85d fb04 	ldr.w	pc, [sp], #4
    24ca:	bf00      	nop

000024cc <unwind_UCB_from_context>:
    24cc:	e7f0      	b.n	24b0 <_Unwind_GetGR.constprop.0>
    24ce:	bf00      	nop

000024d0 <__gnu_unwind_execute>:
    24d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    24d4:	4605      	mov	r5, r0
    24d6:	b085      	sub	sp, #20
    24d8:	460e      	mov	r6, r1
    24da:	f04f 0800 	mov.w	r8, #0
    24de:	4630      	mov	r0, r6
    24e0:	f7ff ffca 	bl	2478 <next_unwind_byte>
    24e4:	28b0      	cmp	r0, #176	; 0xb0
    24e6:	4604      	mov	r4, r0
    24e8:	f000 80b2 	beq.w	2650 <__gnu_unwind_execute+0x180>
    24ec:	0607      	lsls	r7, r0, #24
    24ee:	d520      	bpl.n	2532 <__gnu_unwind_execute+0x62>
    24f0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    24f4:	2b80      	cmp	r3, #128	; 0x80
    24f6:	d04d      	beq.n	2594 <__gnu_unwind_execute+0xc4>
    24f8:	2b90      	cmp	r3, #144	; 0x90
    24fa:	d036      	beq.n	256a <__gnu_unwind_execute+0x9a>
    24fc:	2ba0      	cmp	r3, #160	; 0xa0
    24fe:	d060      	beq.n	25c2 <__gnu_unwind_execute+0xf2>
    2500:	2bb0      	cmp	r3, #176	; 0xb0
    2502:	d074      	beq.n	25ee <__gnu_unwind_execute+0x11e>
    2504:	2bc0      	cmp	r3, #192	; 0xc0
    2506:	f000 808b 	beq.w	2620 <__gnu_unwind_execute+0x150>
    250a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    250e:	2bd0      	cmp	r3, #208	; 0xd0
    2510:	d10b      	bne.n	252a <__gnu_unwind_execute+0x5a>
    2512:	f000 0207 	and.w	r2, r0, #7
    2516:	3201      	adds	r2, #1
    2518:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    251c:	2305      	movs	r3, #5
    251e:	2101      	movs	r1, #1
    2520:	4628      	mov	r0, r5
    2522:	f7ff fd97 	bl	2054 <_Unwind_VRS_Pop>
    2526:	2800      	cmp	r0, #0
    2528:	d0d9      	beq.n	24de <__gnu_unwind_execute+0xe>
    252a:	2009      	movs	r0, #9
    252c:	b005      	add	sp, #20
    252e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2532:	f10d 090c 	add.w	r9, sp, #12
    2536:	2300      	movs	r3, #0
    2538:	4619      	mov	r1, r3
    253a:	0087      	lsls	r7, r0, #2
    253c:	f8cd 9000 	str.w	r9, [sp]
    2540:	220d      	movs	r2, #13
    2542:	4628      	mov	r0, r5
    2544:	f7ff fba8 	bl	1c98 <_Unwind_VRS_Get>
    2548:	b2ff      	uxtb	r7, r7
    254a:	9b03      	ldr	r3, [sp, #12]
    254c:	f8cd 9000 	str.w	r9, [sp]
    2550:	3704      	adds	r7, #4
    2552:	0660      	lsls	r0, r4, #25
    2554:	bf4c      	ite	mi
    2556:	1bdf      	submi	r7, r3, r7
    2558:	18ff      	addpl	r7, r7, r3
    255a:	2300      	movs	r3, #0
    255c:	4619      	mov	r1, r3
    255e:	220d      	movs	r2, #13
    2560:	4628      	mov	r0, r5
    2562:	9703      	str	r7, [sp, #12]
    2564:	f7ff fbbc 	bl	1ce0 <_Unwind_VRS_Set>
    2568:	e7b9      	b.n	24de <__gnu_unwind_execute+0xe>
    256a:	f000 030d 	and.w	r3, r0, #13
    256e:	2b0d      	cmp	r3, #13
    2570:	d0db      	beq.n	252a <__gnu_unwind_execute+0x5a>
    2572:	af03      	add	r7, sp, #12
    2574:	2300      	movs	r3, #0
    2576:	f000 020f 	and.w	r2, r0, #15
    257a:	4619      	mov	r1, r3
    257c:	9700      	str	r7, [sp, #0]
    257e:	4628      	mov	r0, r5
    2580:	f7ff fb8a 	bl	1c98 <_Unwind_VRS_Get>
    2584:	2300      	movs	r3, #0
    2586:	9700      	str	r7, [sp, #0]
    2588:	4619      	mov	r1, r3
    258a:	220d      	movs	r2, #13
    258c:	4628      	mov	r0, r5
    258e:	f7ff fba7 	bl	1ce0 <_Unwind_VRS_Set>
    2592:	e7a4      	b.n	24de <__gnu_unwind_execute+0xe>
    2594:	4630      	mov	r0, r6
    2596:	f7ff ff6f 	bl	2478 <next_unwind_byte>
    259a:	0224      	lsls	r4, r4, #8
    259c:	4320      	orrs	r0, r4
    259e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    25a2:	d0c2      	beq.n	252a <__gnu_unwind_execute+0x5a>
    25a4:	0104      	lsls	r4, r0, #4
    25a6:	2300      	movs	r3, #0
    25a8:	b2a2      	uxth	r2, r4
    25aa:	4619      	mov	r1, r3
    25ac:	4628      	mov	r0, r5
    25ae:	f7ff fd51 	bl	2054 <_Unwind_VRS_Pop>
    25b2:	2800      	cmp	r0, #0
    25b4:	d1b9      	bne.n	252a <__gnu_unwind_execute+0x5a>
    25b6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    25ba:	bf18      	it	ne
    25bc:	f04f 0801 	movne.w	r8, #1
    25c0:	e78d      	b.n	24de <__gnu_unwind_execute+0xe>
    25c2:	43c2      	mvns	r2, r0
    25c4:	f002 0307 	and.w	r3, r2, #7
    25c8:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    25cc:	411a      	asrs	r2, r3
    25ce:	0701      	lsls	r1, r0, #28
    25d0:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    25d4:	f04f 0300 	mov.w	r3, #0
    25d8:	bf48      	it	mi
    25da:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    25de:	4619      	mov	r1, r3
    25e0:	4628      	mov	r0, r5
    25e2:	f7ff fd37 	bl	2054 <_Unwind_VRS_Pop>
    25e6:	2800      	cmp	r0, #0
    25e8:	f43f af79 	beq.w	24de <__gnu_unwind_execute+0xe>
    25ec:	e79d      	b.n	252a <__gnu_unwind_execute+0x5a>
    25ee:	28b1      	cmp	r0, #177	; 0xb1
    25f0:	d033      	beq.n	265a <__gnu_unwind_execute+0x18a>
    25f2:	28b2      	cmp	r0, #178	; 0xb2
    25f4:	f000 808b 	beq.w	270e <__gnu_unwind_execute+0x23e>
    25f8:	28b3      	cmp	r0, #179	; 0xb3
    25fa:	d039      	beq.n	2670 <__gnu_unwind_execute+0x1a0>
    25fc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    2600:	2bb4      	cmp	r3, #180	; 0xb4
    2602:	d092      	beq.n	252a <__gnu_unwind_execute+0x5a>
    2604:	f000 0207 	and.w	r2, r0, #7
    2608:	3201      	adds	r2, #1
    260a:	2301      	movs	r3, #1
    260c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    2610:	4619      	mov	r1, r3
    2612:	4628      	mov	r0, r5
    2614:	f7ff fd1e 	bl	2054 <_Unwind_VRS_Pop>
    2618:	2800      	cmp	r0, #0
    261a:	f43f af60 	beq.w	24de <__gnu_unwind_execute+0xe>
    261e:	e784      	b.n	252a <__gnu_unwind_execute+0x5a>
    2620:	28c6      	cmp	r0, #198	; 0xc6
    2622:	d042      	beq.n	26aa <__gnu_unwind_execute+0x1da>
    2624:	28c7      	cmp	r0, #199	; 0xc7
    2626:	d04c      	beq.n	26c2 <__gnu_unwind_execute+0x1f2>
    2628:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    262c:	2bc0      	cmp	r3, #192	; 0xc0
    262e:	d05b      	beq.n	26e8 <__gnu_unwind_execute+0x218>
    2630:	28c8      	cmp	r0, #200	; 0xc8
    2632:	d060      	beq.n	26f6 <__gnu_unwind_execute+0x226>
    2634:	28c9      	cmp	r0, #201	; 0xc9
    2636:	f47f af78 	bne.w	252a <__gnu_unwind_execute+0x5a>
    263a:	4630      	mov	r0, r6
    263c:	f7ff ff1c 	bl	2478 <next_unwind_byte>
    2640:	0302      	lsls	r2, r0, #12
    2642:	f000 000f 	and.w	r0, r0, #15
    2646:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    264a:	3001      	adds	r0, #1
    264c:	4302      	orrs	r2, r0
    264e:	e765      	b.n	251c <__gnu_unwind_execute+0x4c>
    2650:	f1b8 0f00 	cmp.w	r8, #0
    2654:	d018      	beq.n	2688 <__gnu_unwind_execute+0x1b8>
    2656:	2000      	movs	r0, #0
    2658:	e768      	b.n	252c <__gnu_unwind_execute+0x5c>
    265a:	4630      	mov	r0, r6
    265c:	f7ff ff0c 	bl	2478 <next_unwind_byte>
    2660:	4602      	mov	r2, r0
    2662:	2800      	cmp	r0, #0
    2664:	f43f af61 	beq.w	252a <__gnu_unwind_execute+0x5a>
    2668:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    266c:	d0d0      	beq.n	2610 <__gnu_unwind_execute+0x140>
    266e:	e75c      	b.n	252a <__gnu_unwind_execute+0x5a>
    2670:	4630      	mov	r0, r6
    2672:	f7ff ff01 	bl	2478 <next_unwind_byte>
    2676:	0301      	lsls	r1, r0, #12
    2678:	f000 000f 	and.w	r0, r0, #15
    267c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    2680:	1c42      	adds	r2, r0, #1
    2682:	2301      	movs	r3, #1
    2684:	430a      	orrs	r2, r1
    2686:	e7c3      	b.n	2610 <__gnu_unwind_execute+0x140>
    2688:	ac03      	add	r4, sp, #12
    268a:	4643      	mov	r3, r8
    268c:	220e      	movs	r2, #14
    268e:	4641      	mov	r1, r8
    2690:	9400      	str	r4, [sp, #0]
    2692:	4628      	mov	r0, r5
    2694:	f7ff fb00 	bl	1c98 <_Unwind_VRS_Get>
    2698:	9400      	str	r4, [sp, #0]
    269a:	4628      	mov	r0, r5
    269c:	4643      	mov	r3, r8
    269e:	220f      	movs	r2, #15
    26a0:	4641      	mov	r1, r8
    26a2:	f7ff fb1d 	bl	1ce0 <_Unwind_VRS_Set>
    26a6:	4640      	mov	r0, r8
    26a8:	e740      	b.n	252c <__gnu_unwind_execute+0x5c>
    26aa:	4630      	mov	r0, r6
    26ac:	f7ff fee4 	bl	2478 <next_unwind_byte>
    26b0:	0301      	lsls	r1, r0, #12
    26b2:	f000 000f 	and.w	r0, r0, #15
    26b6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    26ba:	1c42      	adds	r2, r0, #1
    26bc:	2303      	movs	r3, #3
    26be:	430a      	orrs	r2, r1
    26c0:	e7a6      	b.n	2610 <__gnu_unwind_execute+0x140>
    26c2:	4630      	mov	r0, r6
    26c4:	f7ff fed8 	bl	2478 <next_unwind_byte>
    26c8:	4602      	mov	r2, r0
    26ca:	2800      	cmp	r0, #0
    26cc:	f43f af2d 	beq.w	252a <__gnu_unwind_execute+0x5a>
    26d0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    26d4:	f47f af29 	bne.w	252a <__gnu_unwind_execute+0x5a>
    26d8:	2104      	movs	r1, #4
    26da:	4628      	mov	r0, r5
    26dc:	f7ff fcba 	bl	2054 <_Unwind_VRS_Pop>
    26e0:	2800      	cmp	r0, #0
    26e2:	f43f aefc 	beq.w	24de <__gnu_unwind_execute+0xe>
    26e6:	e720      	b.n	252a <__gnu_unwind_execute+0x5a>
    26e8:	f000 020f 	and.w	r2, r0, #15
    26ec:	3201      	adds	r2, #1
    26ee:	2303      	movs	r3, #3
    26f0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    26f4:	e78c      	b.n	2610 <__gnu_unwind_execute+0x140>
    26f6:	4630      	mov	r0, r6
    26f8:	f7ff febe 	bl	2478 <next_unwind_byte>
    26fc:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    2700:	f000 030f 	and.w	r3, r0, #15
    2704:	3210      	adds	r2, #16
    2706:	3301      	adds	r3, #1
    2708:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    270c:	e706      	b.n	251c <__gnu_unwind_execute+0x4c>
    270e:	2300      	movs	r3, #0
    2710:	f10d 090c 	add.w	r9, sp, #12
    2714:	220d      	movs	r2, #13
    2716:	4619      	mov	r1, r3
    2718:	f8cd 9000 	str.w	r9, [sp]
    271c:	4628      	mov	r0, r5
    271e:	f7ff fabb 	bl	1c98 <_Unwind_VRS_Get>
    2722:	4630      	mov	r0, r6
    2724:	f7ff fea8 	bl	2478 <next_unwind_byte>
    2728:	0602      	lsls	r2, r0, #24
    272a:	f04f 0702 	mov.w	r7, #2
    272e:	d50c      	bpl.n	274a <__gnu_unwind_execute+0x27a>
    2730:	9b03      	ldr	r3, [sp, #12]
    2732:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    2736:	40b8      	lsls	r0, r7
    2738:	4403      	add	r3, r0
    273a:	4630      	mov	r0, r6
    273c:	9303      	str	r3, [sp, #12]
    273e:	f7ff fe9b 	bl	2478 <next_unwind_byte>
    2742:	0603      	lsls	r3, r0, #24
    2744:	f107 0707 	add.w	r7, r7, #7
    2748:	d4f2      	bmi.n	2730 <__gnu_unwind_execute+0x260>
    274a:	9b03      	ldr	r3, [sp, #12]
    274c:	f8cd 9000 	str.w	r9, [sp]
    2750:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    2754:	f503 7201 	add.w	r2, r3, #516	; 0x204
    2758:	40bc      	lsls	r4, r7
    275a:	2300      	movs	r3, #0
    275c:	4414      	add	r4, r2
    275e:	4619      	mov	r1, r3
    2760:	220d      	movs	r2, #13
    2762:	4628      	mov	r0, r5
    2764:	9403      	str	r4, [sp, #12]
    2766:	f7ff fabb 	bl	1ce0 <_Unwind_VRS_Set>
    276a:	e6b8      	b.n	24de <__gnu_unwind_execute+0xe>

0000276c <__gnu_unwind_frame>:
    276c:	b510      	push	{r4, lr}
    276e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    2770:	b084      	sub	sp, #16
    2772:	6853      	ldr	r3, [r2, #4]
    2774:	2403      	movs	r4, #3
    2776:	f88d 400c 	strb.w	r4, [sp, #12]
    277a:	021b      	lsls	r3, r3, #8
    277c:	f102 0408 	add.w	r4, r2, #8
    2780:	4608      	mov	r0, r1
    2782:	79d2      	ldrb	r2, [r2, #7]
    2784:	9301      	str	r3, [sp, #4]
    2786:	a901      	add	r1, sp, #4
    2788:	9402      	str	r4, [sp, #8]
    278a:	f88d 200d 	strb.w	r2, [sp, #13]
    278e:	f7ff fe9f 	bl	24d0 <__gnu_unwind_execute>
    2792:	b004      	add	sp, #16
    2794:	bd10      	pop	{r4, pc}
    2796:	bf00      	nop

00002798 <_Unwind_GetRegionStart>:
    2798:	b508      	push	{r3, lr}
    279a:	f7ff fe97 	bl	24cc <unwind_UCB_from_context>
    279e:	6c80      	ldr	r0, [r0, #72]	; 0x48
    27a0:	bd08      	pop	{r3, pc}
    27a2:	bf00      	nop

000027a4 <_Unwind_GetLanguageSpecificData>:
    27a4:	b508      	push	{r3, lr}
    27a6:	f7ff fe91 	bl	24cc <unwind_UCB_from_context>
    27aa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    27ac:	79c3      	ldrb	r3, [r0, #7]
    27ae:	3302      	adds	r3, #2
    27b0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    27b4:	bd08      	pop	{r3, pc}
    27b6:	bf00      	nop

000027b8 <abort>:
    27b8:	b508      	push	{r3, lr}
    27ba:	2006      	movs	r0, #6
    27bc:	f000 f91a 	bl	29f4 <raise>
    27c0:	2001      	movs	r0, #1
    27c2:	f000 fb8d 	bl	2ee0 <_exit>
	...

000027c8 <__cxa_atexit>:
    27c8:	b510      	push	{r4, lr}
    27ca:	4c05      	ldr	r4, [pc, #20]	; (27e0 <__cxa_atexit+0x18>)
    27cc:	4613      	mov	r3, r2
    27ce:	b12c      	cbz	r4, 27dc <__cxa_atexit+0x14>
    27d0:	460a      	mov	r2, r1
    27d2:	4601      	mov	r1, r0
    27d4:	2002      	movs	r0, #2
    27d6:	f3af 8000 	nop.w
    27da:	bd10      	pop	{r4, pc}
    27dc:	4620      	mov	r0, r4
    27de:	e7fc      	b.n	27da <__cxa_atexit+0x12>
    27e0:	00000000 	.word	0x00000000

000027e4 <malloc>:
    27e4:	4b02      	ldr	r3, [pc, #8]	; (27f0 <malloc+0xc>)
    27e6:	4601      	mov	r1, r0
    27e8:	6818      	ldr	r0, [r3, #0]
    27ea:	f000 b871 	b.w	28d0 <_malloc_r>
    27ee:	bf00      	nop
    27f0:	2000000c 	.word	0x2000000c

000027f4 <free>:
    27f4:	4b02      	ldr	r3, [pc, #8]	; (2800 <free+0xc>)
    27f6:	4601      	mov	r1, r0
    27f8:	6818      	ldr	r0, [r3, #0]
    27fa:	f000 b819 	b.w	2830 <_free_r>
    27fe:	bf00      	nop
    2800:	2000000c 	.word	0x2000000c

00002804 <memcpy>:
    2804:	440a      	add	r2, r1
    2806:	4291      	cmp	r1, r2
    2808:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    280c:	d100      	bne.n	2810 <memcpy+0xc>
    280e:	4770      	bx	lr
    2810:	b510      	push	{r4, lr}
    2812:	f811 4b01 	ldrb.w	r4, [r1], #1
    2816:	f803 4f01 	strb.w	r4, [r3, #1]!
    281a:	4291      	cmp	r1, r2
    281c:	d1f9      	bne.n	2812 <memcpy+0xe>
    281e:	bd10      	pop	{r4, pc}

00002820 <memset>:
    2820:	4402      	add	r2, r0
    2822:	4603      	mov	r3, r0
    2824:	4293      	cmp	r3, r2
    2826:	d100      	bne.n	282a <memset+0xa>
    2828:	4770      	bx	lr
    282a:	f803 1b01 	strb.w	r1, [r3], #1
    282e:	e7f9      	b.n	2824 <memset+0x4>

00002830 <_free_r>:
    2830:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2832:	2900      	cmp	r1, #0
    2834:	d048      	beq.n	28c8 <_free_r+0x98>
    2836:	f851 3c04 	ldr.w	r3, [r1, #-4]
    283a:	9001      	str	r0, [sp, #4]
    283c:	2b00      	cmp	r3, #0
    283e:	f1a1 0404 	sub.w	r4, r1, #4
    2842:	bfb8      	it	lt
    2844:	18e4      	addlt	r4, r4, r3
    2846:	f000 f8f1 	bl	2a2c <__malloc_lock>
    284a:	4a20      	ldr	r2, [pc, #128]	; (28cc <_free_r+0x9c>)
    284c:	9801      	ldr	r0, [sp, #4]
    284e:	6813      	ldr	r3, [r2, #0]
    2850:	4615      	mov	r5, r2
    2852:	b933      	cbnz	r3, 2862 <_free_r+0x32>
    2854:	6063      	str	r3, [r4, #4]
    2856:	6014      	str	r4, [r2, #0]
    2858:	b003      	add	sp, #12
    285a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    285e:	f000 b8eb 	b.w	2a38 <__malloc_unlock>
    2862:	42a3      	cmp	r3, r4
    2864:	d90b      	bls.n	287e <_free_r+0x4e>
    2866:	6821      	ldr	r1, [r4, #0]
    2868:	1862      	adds	r2, r4, r1
    286a:	4293      	cmp	r3, r2
    286c:	bf04      	itt	eq
    286e:	681a      	ldreq	r2, [r3, #0]
    2870:	685b      	ldreq	r3, [r3, #4]
    2872:	6063      	str	r3, [r4, #4]
    2874:	bf04      	itt	eq
    2876:	1852      	addeq	r2, r2, r1
    2878:	6022      	streq	r2, [r4, #0]
    287a:	602c      	str	r4, [r5, #0]
    287c:	e7ec      	b.n	2858 <_free_r+0x28>
    287e:	461a      	mov	r2, r3
    2880:	685b      	ldr	r3, [r3, #4]
    2882:	b10b      	cbz	r3, 2888 <_free_r+0x58>
    2884:	42a3      	cmp	r3, r4
    2886:	d9fa      	bls.n	287e <_free_r+0x4e>
    2888:	6811      	ldr	r1, [r2, #0]
    288a:	1855      	adds	r5, r2, r1
    288c:	42a5      	cmp	r5, r4
    288e:	d10b      	bne.n	28a8 <_free_r+0x78>
    2890:	6824      	ldr	r4, [r4, #0]
    2892:	4421      	add	r1, r4
    2894:	1854      	adds	r4, r2, r1
    2896:	42a3      	cmp	r3, r4
    2898:	6011      	str	r1, [r2, #0]
    289a:	d1dd      	bne.n	2858 <_free_r+0x28>
    289c:	681c      	ldr	r4, [r3, #0]
    289e:	685b      	ldr	r3, [r3, #4]
    28a0:	6053      	str	r3, [r2, #4]
    28a2:	4421      	add	r1, r4
    28a4:	6011      	str	r1, [r2, #0]
    28a6:	e7d7      	b.n	2858 <_free_r+0x28>
    28a8:	d902      	bls.n	28b0 <_free_r+0x80>
    28aa:	230c      	movs	r3, #12
    28ac:	6003      	str	r3, [r0, #0]
    28ae:	e7d3      	b.n	2858 <_free_r+0x28>
    28b0:	6825      	ldr	r5, [r4, #0]
    28b2:	1961      	adds	r1, r4, r5
    28b4:	428b      	cmp	r3, r1
    28b6:	bf04      	itt	eq
    28b8:	6819      	ldreq	r1, [r3, #0]
    28ba:	685b      	ldreq	r3, [r3, #4]
    28bc:	6063      	str	r3, [r4, #4]
    28be:	bf04      	itt	eq
    28c0:	1949      	addeq	r1, r1, r5
    28c2:	6021      	streq	r1, [r4, #0]
    28c4:	6054      	str	r4, [r2, #4]
    28c6:	e7c7      	b.n	2858 <_free_r+0x28>
    28c8:	b003      	add	sp, #12
    28ca:	bd30      	pop	{r4, r5, pc}
    28cc:	2000015c 	.word	0x2000015c

000028d0 <_malloc_r>:
    28d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28d2:	1ccd      	adds	r5, r1, #3
    28d4:	f025 0503 	bic.w	r5, r5, #3
    28d8:	3508      	adds	r5, #8
    28da:	2d0c      	cmp	r5, #12
    28dc:	bf38      	it	cc
    28de:	250c      	movcc	r5, #12
    28e0:	2d00      	cmp	r5, #0
    28e2:	4606      	mov	r6, r0
    28e4:	db01      	blt.n	28ea <_malloc_r+0x1a>
    28e6:	42a9      	cmp	r1, r5
    28e8:	d903      	bls.n	28f2 <_malloc_r+0x22>
    28ea:	230c      	movs	r3, #12
    28ec:	6033      	str	r3, [r6, #0]
    28ee:	2000      	movs	r0, #0
    28f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28f2:	f000 f89b 	bl	2a2c <__malloc_lock>
    28f6:	4921      	ldr	r1, [pc, #132]	; (297c <_malloc_r+0xac>)
    28f8:	680a      	ldr	r2, [r1, #0]
    28fa:	4614      	mov	r4, r2
    28fc:	b99c      	cbnz	r4, 2926 <_malloc_r+0x56>
    28fe:	4f20      	ldr	r7, [pc, #128]	; (2980 <_malloc_r+0xb0>)
    2900:	683b      	ldr	r3, [r7, #0]
    2902:	b923      	cbnz	r3, 290e <_malloc_r+0x3e>
    2904:	4621      	mov	r1, r4
    2906:	4630      	mov	r0, r6
    2908:	f000 f83c 	bl	2984 <_sbrk_r>
    290c:	6038      	str	r0, [r7, #0]
    290e:	4629      	mov	r1, r5
    2910:	4630      	mov	r0, r6
    2912:	f000 f837 	bl	2984 <_sbrk_r>
    2916:	1c43      	adds	r3, r0, #1
    2918:	d123      	bne.n	2962 <_malloc_r+0x92>
    291a:	230c      	movs	r3, #12
    291c:	6033      	str	r3, [r6, #0]
    291e:	4630      	mov	r0, r6
    2920:	f000 f88a 	bl	2a38 <__malloc_unlock>
    2924:	e7e3      	b.n	28ee <_malloc_r+0x1e>
    2926:	6823      	ldr	r3, [r4, #0]
    2928:	1b5b      	subs	r3, r3, r5
    292a:	d417      	bmi.n	295c <_malloc_r+0x8c>
    292c:	2b0b      	cmp	r3, #11
    292e:	d903      	bls.n	2938 <_malloc_r+0x68>
    2930:	6023      	str	r3, [r4, #0]
    2932:	441c      	add	r4, r3
    2934:	6025      	str	r5, [r4, #0]
    2936:	e004      	b.n	2942 <_malloc_r+0x72>
    2938:	6863      	ldr	r3, [r4, #4]
    293a:	42a2      	cmp	r2, r4
    293c:	bf0c      	ite	eq
    293e:	600b      	streq	r3, [r1, #0]
    2940:	6053      	strne	r3, [r2, #4]
    2942:	4630      	mov	r0, r6
    2944:	f000 f878 	bl	2a38 <__malloc_unlock>
    2948:	f104 000b 	add.w	r0, r4, #11
    294c:	1d23      	adds	r3, r4, #4
    294e:	f020 0007 	bic.w	r0, r0, #7
    2952:	1ac2      	subs	r2, r0, r3
    2954:	d0cc      	beq.n	28f0 <_malloc_r+0x20>
    2956:	1a1b      	subs	r3, r3, r0
    2958:	50a3      	str	r3, [r4, r2]
    295a:	e7c9      	b.n	28f0 <_malloc_r+0x20>
    295c:	4622      	mov	r2, r4
    295e:	6864      	ldr	r4, [r4, #4]
    2960:	e7cc      	b.n	28fc <_malloc_r+0x2c>
    2962:	1cc4      	adds	r4, r0, #3
    2964:	f024 0403 	bic.w	r4, r4, #3
    2968:	42a0      	cmp	r0, r4
    296a:	d0e3      	beq.n	2934 <_malloc_r+0x64>
    296c:	1a21      	subs	r1, r4, r0
    296e:	4630      	mov	r0, r6
    2970:	f000 f808 	bl	2984 <_sbrk_r>
    2974:	3001      	adds	r0, #1
    2976:	d1dd      	bne.n	2934 <_malloc_r+0x64>
    2978:	e7cf      	b.n	291a <_malloc_r+0x4a>
    297a:	bf00      	nop
    297c:	2000015c 	.word	0x2000015c
    2980:	20000160 	.word	0x20000160

00002984 <_sbrk_r>:
    2984:	b538      	push	{r3, r4, r5, lr}
    2986:	4d06      	ldr	r5, [pc, #24]	; (29a0 <_sbrk_r+0x1c>)
    2988:	2300      	movs	r3, #0
    298a:	4604      	mov	r4, r0
    298c:	4608      	mov	r0, r1
    298e:	602b      	str	r3, [r5, #0]
    2990:	f000 f968 	bl	2c64 <_sbrk>
    2994:	1c43      	adds	r3, r0, #1
    2996:	d102      	bne.n	299e <_sbrk_r+0x1a>
    2998:	682b      	ldr	r3, [r5, #0]
    299a:	b103      	cbz	r3, 299e <_sbrk_r+0x1a>
    299c:	6023      	str	r3, [r4, #0]
    299e:	bd38      	pop	{r3, r4, r5, pc}
    29a0:	20000208 	.word	0x20000208

000029a4 <_raise_r>:
    29a4:	291f      	cmp	r1, #31
    29a6:	b538      	push	{r3, r4, r5, lr}
    29a8:	4604      	mov	r4, r0
    29aa:	460d      	mov	r5, r1
    29ac:	d904      	bls.n	29b8 <_raise_r+0x14>
    29ae:	2316      	movs	r3, #22
    29b0:	6003      	str	r3, [r0, #0]
    29b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    29b6:	bd38      	pop	{r3, r4, r5, pc}
    29b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
    29ba:	b112      	cbz	r2, 29c2 <_raise_r+0x1e>
    29bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    29c0:	b94b      	cbnz	r3, 29d6 <_raise_r+0x32>
    29c2:	4620      	mov	r0, r4
    29c4:	f000 f830 	bl	2a28 <_getpid_r>
    29c8:	462a      	mov	r2, r5
    29ca:	4601      	mov	r1, r0
    29cc:	4620      	mov	r0, r4
    29ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    29d2:	f000 b817 	b.w	2a04 <_kill_r>
    29d6:	2b01      	cmp	r3, #1
    29d8:	d00a      	beq.n	29f0 <_raise_r+0x4c>
    29da:	1c59      	adds	r1, r3, #1
    29dc:	d103      	bne.n	29e6 <_raise_r+0x42>
    29de:	2316      	movs	r3, #22
    29e0:	6003      	str	r3, [r0, #0]
    29e2:	2001      	movs	r0, #1
    29e4:	e7e7      	b.n	29b6 <_raise_r+0x12>
    29e6:	2400      	movs	r4, #0
    29e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    29ec:	4628      	mov	r0, r5
    29ee:	4798      	blx	r3
    29f0:	2000      	movs	r0, #0
    29f2:	e7e0      	b.n	29b6 <_raise_r+0x12>

000029f4 <raise>:
    29f4:	4b02      	ldr	r3, [pc, #8]	; (2a00 <raise+0xc>)
    29f6:	4601      	mov	r1, r0
    29f8:	6818      	ldr	r0, [r3, #0]
    29fa:	f7ff bfd3 	b.w	29a4 <_raise_r>
    29fe:	bf00      	nop
    2a00:	2000000c 	.word	0x2000000c

00002a04 <_kill_r>:
    2a04:	b538      	push	{r3, r4, r5, lr}
    2a06:	4d07      	ldr	r5, [pc, #28]	; (2a24 <_kill_r+0x20>)
    2a08:	2300      	movs	r3, #0
    2a0a:	4604      	mov	r4, r0
    2a0c:	4608      	mov	r0, r1
    2a0e:	4611      	mov	r1, r2
    2a10:	602b      	str	r3, [r5, #0]
    2a12:	f000 fa83 	bl	2f1c <_kill>
    2a16:	1c43      	adds	r3, r0, #1
    2a18:	d102      	bne.n	2a20 <_kill_r+0x1c>
    2a1a:	682b      	ldr	r3, [r5, #0]
    2a1c:	b103      	cbz	r3, 2a20 <_kill_r+0x1c>
    2a1e:	6023      	str	r3, [r4, #0]
    2a20:	bd38      	pop	{r3, r4, r5, pc}
    2a22:	bf00      	nop
    2a24:	20000208 	.word	0x20000208

00002a28 <_getpid_r>:
    2a28:	f000 b91a 	b.w	2c60 <_getpid>

00002a2c <__malloc_lock>:
    2a2c:	4801      	ldr	r0, [pc, #4]	; (2a34 <__malloc_lock+0x8>)
    2a2e:	f000 b80a 	b.w	2a46 <__retarget_lock_acquire_recursive>
    2a32:	bf00      	nop
    2a34:	20000210 	.word	0x20000210

00002a38 <__malloc_unlock>:
    2a38:	4801      	ldr	r0, [pc, #4]	; (2a40 <__malloc_unlock+0x8>)
    2a3a:	f000 b805 	b.w	2a48 <__retarget_lock_release_recursive>
    2a3e:	bf00      	nop
    2a40:	20000210 	.word	0x20000210

00002a44 <__retarget_lock_init_recursive>:
    2a44:	4770      	bx	lr

00002a46 <__retarget_lock_acquire_recursive>:
    2a46:	4770      	bx	lr

00002a48 <__retarget_lock_release_recursive>:
    2a48:	4770      	bx	lr
	...

00002a4c <findslot>:
    2a4c:	4b0a      	ldr	r3, [pc, #40]	; (2a78 <findslot+0x2c>)
    2a4e:	b510      	push	{r4, lr}
    2a50:	4604      	mov	r4, r0
    2a52:	6818      	ldr	r0, [r3, #0]
    2a54:	b118      	cbz	r0, 2a5e <findslot+0x12>
    2a56:	6983      	ldr	r3, [r0, #24]
    2a58:	b90b      	cbnz	r3, 2a5e <findslot+0x12>
    2a5a:	f000 fac9 	bl	2ff0 <__sinit>
    2a5e:	2c13      	cmp	r4, #19
    2a60:	d807      	bhi.n	2a72 <findslot+0x26>
    2a62:	4806      	ldr	r0, [pc, #24]	; (2a7c <findslot+0x30>)
    2a64:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
    2a68:	3201      	adds	r2, #1
    2a6a:	d002      	beq.n	2a72 <findslot+0x26>
    2a6c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    2a70:	bd10      	pop	{r4, pc}
    2a72:	2000      	movs	r0, #0
    2a74:	e7fc      	b.n	2a70 <findslot+0x24>
    2a76:	bf00      	nop
    2a78:	2000000c 	.word	0x2000000c
    2a7c:	20000168 	.word	0x20000168

00002a80 <checkerror>:
    2a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a82:	1c43      	adds	r3, r0, #1
    2a84:	4604      	mov	r4, r0
    2a86:	d109      	bne.n	2a9c <checkerror+0x1c>
    2a88:	f000 fa54 	bl	2f34 <__errno>
    2a8c:	2613      	movs	r6, #19
    2a8e:	4605      	mov	r5, r0
    2a90:	2700      	movs	r7, #0
    2a92:	4630      	mov	r0, r6
    2a94:	4639      	mov	r1, r7
    2a96:	beab      	bkpt	0x00ab
    2a98:	4606      	mov	r6, r0
    2a9a:	602e      	str	r6, [r5, #0]
    2a9c:	4620      	mov	r0, r4
    2a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002aa0 <error>:
    2aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2aa2:	4604      	mov	r4, r0
    2aa4:	f000 fa46 	bl	2f34 <__errno>
    2aa8:	2613      	movs	r6, #19
    2aaa:	4605      	mov	r5, r0
    2aac:	2700      	movs	r7, #0
    2aae:	4630      	mov	r0, r6
    2ab0:	4639      	mov	r1, r7
    2ab2:	beab      	bkpt	0x00ab
    2ab4:	4606      	mov	r6, r0
    2ab6:	602e      	str	r6, [r5, #0]
    2ab8:	4620      	mov	r0, r4
    2aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002abc <_swiread>:
    2abc:	b530      	push	{r4, r5, lr}
    2abe:	b085      	sub	sp, #20
    2ac0:	e9cd 0101 	strd	r0, r1, [sp, #4]
    2ac4:	9203      	str	r2, [sp, #12]
    2ac6:	2406      	movs	r4, #6
    2ac8:	ad01      	add	r5, sp, #4
    2aca:	4620      	mov	r0, r4
    2acc:	4629      	mov	r1, r5
    2ace:	beab      	bkpt	0x00ab
    2ad0:	4604      	mov	r4, r0
    2ad2:	4620      	mov	r0, r4
    2ad4:	f7ff ffd4 	bl	2a80 <checkerror>
    2ad8:	b005      	add	sp, #20
    2ada:	bd30      	pop	{r4, r5, pc}

00002adc <_read>:
    2adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2ade:	4615      	mov	r5, r2
    2ae0:	9101      	str	r1, [sp, #4]
    2ae2:	f7ff ffb3 	bl	2a4c <findslot>
    2ae6:	9901      	ldr	r1, [sp, #4]
    2ae8:	4604      	mov	r4, r0
    2aea:	b938      	cbnz	r0, 2afc <_read+0x20>
    2aec:	f000 fa22 	bl	2f34 <__errno>
    2af0:	2309      	movs	r3, #9
    2af2:	6003      	str	r3, [r0, #0]
    2af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2af8:	b003      	add	sp, #12
    2afa:	bd30      	pop	{r4, r5, pc}
    2afc:	6800      	ldr	r0, [r0, #0]
    2afe:	462a      	mov	r2, r5
    2b00:	f7ff ffdc 	bl	2abc <_swiread>
    2b04:	1c43      	adds	r3, r0, #1
    2b06:	d0f7      	beq.n	2af8 <_read+0x1c>
    2b08:	6863      	ldr	r3, [r4, #4]
    2b0a:	1a2a      	subs	r2, r5, r0
    2b0c:	4413      	add	r3, r2
    2b0e:	6063      	str	r3, [r4, #4]
    2b10:	4610      	mov	r0, r2
    2b12:	e7f1      	b.n	2af8 <_read+0x1c>

00002b14 <_swilseek>:
    2b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2b16:	460c      	mov	r4, r1
    2b18:	4616      	mov	r6, r2
    2b1a:	f7ff ff97 	bl	2a4c <findslot>
    2b1e:	4605      	mov	r5, r0
    2b20:	b940      	cbnz	r0, 2b34 <_swilseek+0x20>
    2b22:	f000 fa07 	bl	2f34 <__errno>
    2b26:	2309      	movs	r3, #9
    2b28:	6003      	str	r3, [r0, #0]
    2b2a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2b2e:	4620      	mov	r0, r4
    2b30:	b003      	add	sp, #12
    2b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b34:	2e02      	cmp	r6, #2
    2b36:	d903      	bls.n	2b40 <_swilseek+0x2c>
    2b38:	f000 f9fc 	bl	2f34 <__errno>
    2b3c:	2316      	movs	r3, #22
    2b3e:	e7f3      	b.n	2b28 <_swilseek+0x14>
    2b40:	2e01      	cmp	r6, #1
    2b42:	d112      	bne.n	2b6a <_swilseek+0x56>
    2b44:	6843      	ldr	r3, [r0, #4]
    2b46:	18e4      	adds	r4, r4, r3
    2b48:	d4f6      	bmi.n	2b38 <_swilseek+0x24>
    2b4a:	682b      	ldr	r3, [r5, #0]
    2b4c:	260a      	movs	r6, #10
    2b4e:	e9cd 3400 	strd	r3, r4, [sp]
    2b52:	466f      	mov	r7, sp
    2b54:	4630      	mov	r0, r6
    2b56:	4639      	mov	r1, r7
    2b58:	beab      	bkpt	0x00ab
    2b5a:	4606      	mov	r6, r0
    2b5c:	4630      	mov	r0, r6
    2b5e:	f7ff ff8f 	bl	2a80 <checkerror>
    2b62:	2800      	cmp	r0, #0
    2b64:	dbe1      	blt.n	2b2a <_swilseek+0x16>
    2b66:	606c      	str	r4, [r5, #4]
    2b68:	e7e1      	b.n	2b2e <_swilseek+0x1a>
    2b6a:	2e02      	cmp	r6, #2
    2b6c:	d1ed      	bne.n	2b4a <_swilseek+0x36>
    2b6e:	6803      	ldr	r3, [r0, #0]
    2b70:	9300      	str	r3, [sp, #0]
    2b72:	260c      	movs	r6, #12
    2b74:	466f      	mov	r7, sp
    2b76:	4630      	mov	r0, r6
    2b78:	4639      	mov	r1, r7
    2b7a:	beab      	bkpt	0x00ab
    2b7c:	4606      	mov	r6, r0
    2b7e:	4630      	mov	r0, r6
    2b80:	f7ff ff7e 	bl	2a80 <checkerror>
    2b84:	1c43      	adds	r3, r0, #1
    2b86:	d0d0      	beq.n	2b2a <_swilseek+0x16>
    2b88:	4404      	add	r4, r0
    2b8a:	e7de      	b.n	2b4a <_swilseek+0x36>

00002b8c <_lseek>:
    2b8c:	f7ff bfc2 	b.w	2b14 <_swilseek>

00002b90 <_swiwrite>:
    2b90:	b530      	push	{r4, r5, lr}
    2b92:	b085      	sub	sp, #20
    2b94:	e9cd 0101 	strd	r0, r1, [sp, #4]
    2b98:	9203      	str	r2, [sp, #12]
    2b9a:	2405      	movs	r4, #5
    2b9c:	ad01      	add	r5, sp, #4
    2b9e:	4620      	mov	r0, r4
    2ba0:	4629      	mov	r1, r5
    2ba2:	beab      	bkpt	0x00ab
    2ba4:	4604      	mov	r4, r0
    2ba6:	4620      	mov	r0, r4
    2ba8:	f7ff ff6a 	bl	2a80 <checkerror>
    2bac:	b005      	add	sp, #20
    2bae:	bd30      	pop	{r4, r5, pc}

00002bb0 <_write>:
    2bb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2bb2:	4615      	mov	r5, r2
    2bb4:	9101      	str	r1, [sp, #4]
    2bb6:	f7ff ff49 	bl	2a4c <findslot>
    2bba:	9901      	ldr	r1, [sp, #4]
    2bbc:	4604      	mov	r4, r0
    2bbe:	b930      	cbnz	r0, 2bce <_write+0x1e>
    2bc0:	f000 f9b8 	bl	2f34 <__errno>
    2bc4:	2309      	movs	r3, #9
    2bc6:	6003      	str	r3, [r0, #0]
    2bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2bcc:	e012      	b.n	2bf4 <_write+0x44>
    2bce:	6800      	ldr	r0, [r0, #0]
    2bd0:	462a      	mov	r2, r5
    2bd2:	f7ff ffdd 	bl	2b90 <_swiwrite>
    2bd6:	2800      	cmp	r0, #0
    2bd8:	dbf6      	blt.n	2bc8 <_write+0x18>
    2bda:	6862      	ldr	r2, [r4, #4]
    2bdc:	1a2b      	subs	r3, r5, r0
    2bde:	441a      	add	r2, r3
    2be0:	42a8      	cmp	r0, r5
    2be2:	6062      	str	r2, [r4, #4]
    2be4:	d105      	bne.n	2bf2 <_write+0x42>
    2be6:	2000      	movs	r0, #0
    2be8:	b003      	add	sp, #12
    2bea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    2bee:	f7ff bf57 	b.w	2aa0 <error>
    2bf2:	4618      	mov	r0, r3
    2bf4:	b003      	add	sp, #12
    2bf6:	bd30      	pop	{r4, r5, pc}

00002bf8 <_swiclose>:
    2bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2bfa:	2402      	movs	r4, #2
    2bfc:	9001      	str	r0, [sp, #4]
    2bfe:	ad01      	add	r5, sp, #4
    2c00:	4620      	mov	r0, r4
    2c02:	4629      	mov	r1, r5
    2c04:	beab      	bkpt	0x00ab
    2c06:	4604      	mov	r4, r0
    2c08:	4620      	mov	r0, r4
    2c0a:	f7ff ff39 	bl	2a80 <checkerror>
    2c0e:	b003      	add	sp, #12
    2c10:	bd30      	pop	{r4, r5, pc}
	...

00002c14 <_close>:
    2c14:	b538      	push	{r3, r4, r5, lr}
    2c16:	4605      	mov	r5, r0
    2c18:	f7ff ff18 	bl	2a4c <findslot>
    2c1c:	4604      	mov	r4, r0
    2c1e:	b930      	cbnz	r0, 2c2e <_close+0x1a>
    2c20:	f000 f988 	bl	2f34 <__errno>
    2c24:	2309      	movs	r3, #9
    2c26:	6003      	str	r3, [r0, #0]
    2c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2c2c:	bd38      	pop	{r3, r4, r5, pc}
    2c2e:	3d01      	subs	r5, #1
    2c30:	2d01      	cmp	r5, #1
    2c32:	d809      	bhi.n	2c48 <_close+0x34>
    2c34:	4b09      	ldr	r3, [pc, #36]	; (2c5c <_close+0x48>)
    2c36:	689a      	ldr	r2, [r3, #8]
    2c38:	691b      	ldr	r3, [r3, #16]
    2c3a:	429a      	cmp	r2, r3
    2c3c:	d104      	bne.n	2c48 <_close+0x34>
    2c3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c42:	6003      	str	r3, [r0, #0]
    2c44:	2000      	movs	r0, #0
    2c46:	e7f1      	b.n	2c2c <_close+0x18>
    2c48:	6820      	ldr	r0, [r4, #0]
    2c4a:	f7ff ffd5 	bl	2bf8 <_swiclose>
    2c4e:	2800      	cmp	r0, #0
    2c50:	d1ec      	bne.n	2c2c <_close+0x18>
    2c52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2c56:	6023      	str	r3, [r4, #0]
    2c58:	e7e8      	b.n	2c2c <_close+0x18>
    2c5a:	bf00      	nop
    2c5c:	20000168 	.word	0x20000168

00002c60 <_getpid>:
    2c60:	2001      	movs	r0, #1
    2c62:	4770      	bx	lr

00002c64 <_sbrk>:
    2c64:	4a0d      	ldr	r2, [pc, #52]	; (2c9c <_sbrk+0x38>)
    2c66:	6811      	ldr	r1, [r2, #0]
    2c68:	b510      	push	{r4, lr}
    2c6a:	4603      	mov	r3, r0
    2c6c:	b909      	cbnz	r1, 2c72 <_sbrk+0xe>
    2c6e:	490c      	ldr	r1, [pc, #48]	; (2ca0 <_sbrk+0x3c>)
    2c70:	6011      	str	r1, [r2, #0]
    2c72:	6810      	ldr	r0, [r2, #0]
    2c74:	4669      	mov	r1, sp
    2c76:	4403      	add	r3, r0
    2c78:	428b      	cmp	r3, r1
    2c7a:	d806      	bhi.n	2c8a <_sbrk+0x26>
    2c7c:	4909      	ldr	r1, [pc, #36]	; (2ca4 <_sbrk+0x40>)
    2c7e:	4c0a      	ldr	r4, [pc, #40]	; (2ca8 <_sbrk+0x44>)
    2c80:	6809      	ldr	r1, [r1, #0]
    2c82:	42a1      	cmp	r1, r4
    2c84:	d008      	beq.n	2c98 <_sbrk+0x34>
    2c86:	428b      	cmp	r3, r1
    2c88:	d906      	bls.n	2c98 <_sbrk+0x34>
    2c8a:	f000 f953 	bl	2f34 <__errno>
    2c8e:	230c      	movs	r3, #12
    2c90:	6003      	str	r3, [r0, #0]
    2c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2c96:	bd10      	pop	{r4, pc}
    2c98:	6013      	str	r3, [r2, #0]
    2c9a:	e7fc      	b.n	2c96 <_sbrk+0x32>
    2c9c:	20000164 	.word	0x20000164
    2ca0:	20000218 	.word	0x20000218
    2ca4:	20000070 	.word	0x20000070
    2ca8:	cafedead 	.word	0xcafedead

00002cac <_swistat>:
    2cac:	b570      	push	{r4, r5, r6, lr}
    2cae:	460c      	mov	r4, r1
    2cb0:	f7ff fecc 	bl	2a4c <findslot>
    2cb4:	4605      	mov	r5, r0
    2cb6:	b930      	cbnz	r0, 2cc6 <_swistat+0x1a>
    2cb8:	f000 f93c 	bl	2f34 <__errno>
    2cbc:	2309      	movs	r3, #9
    2cbe:	6003      	str	r3, [r0, #0]
    2cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2cc4:	bd70      	pop	{r4, r5, r6, pc}
    2cc6:	6863      	ldr	r3, [r4, #4]
    2cc8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2ccc:	6063      	str	r3, [r4, #4]
    2cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2cd2:	6463      	str	r3, [r4, #68]	; 0x44
    2cd4:	260c      	movs	r6, #12
    2cd6:	4630      	mov	r0, r6
    2cd8:	4629      	mov	r1, r5
    2cda:	beab      	bkpt	0x00ab
    2cdc:	4605      	mov	r5, r0
    2cde:	4628      	mov	r0, r5
    2ce0:	f7ff fece 	bl	2a80 <checkerror>
    2ce4:	1c43      	adds	r3, r0, #1
    2ce6:	bf1c      	itt	ne
    2ce8:	6120      	strne	r0, [r4, #16]
    2cea:	2000      	movne	r0, #0
    2cec:	e7ea      	b.n	2cc4 <_swistat+0x18>

00002cee <_stat>:
    2cee:	b538      	push	{r3, r4, r5, lr}
    2cf0:	460d      	mov	r5, r1
    2cf2:	4604      	mov	r4, r0
    2cf4:	2258      	movs	r2, #88	; 0x58
    2cf6:	2100      	movs	r1, #0
    2cf8:	4628      	mov	r0, r5
    2cfa:	f7ff fd91 	bl	2820 <memset>
    2cfe:	4620      	mov	r0, r4
    2d00:	2100      	movs	r1, #0
    2d02:	f000 f811 	bl	2d28 <_swiopen>
    2d06:	1c43      	adds	r3, r0, #1
    2d08:	4604      	mov	r4, r0
    2d0a:	d00b      	beq.n	2d24 <_stat+0x36>
    2d0c:	686b      	ldr	r3, [r5, #4]
    2d0e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
    2d12:	606b      	str	r3, [r5, #4]
    2d14:	4629      	mov	r1, r5
    2d16:	f7ff ffc9 	bl	2cac <_swistat>
    2d1a:	4605      	mov	r5, r0
    2d1c:	4620      	mov	r0, r4
    2d1e:	f7ff ff79 	bl	2c14 <_close>
    2d22:	462c      	mov	r4, r5
    2d24:	4620      	mov	r0, r4
    2d26:	bd38      	pop	{r3, r4, r5, pc}

00002d28 <_swiopen>:
    2d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2d2c:	4b2a      	ldr	r3, [pc, #168]	; (2dd8 <_swiopen+0xb0>)
    2d2e:	b097      	sub	sp, #92	; 0x5c
    2d30:	4681      	mov	r9, r0
    2d32:	460f      	mov	r7, r1
    2d34:	2500      	movs	r5, #0
    2d36:	461e      	mov	r6, r3
    2d38:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
    2d3c:	1c61      	adds	r1, r4, #1
    2d3e:	d037      	beq.n	2db0 <_swiopen+0x88>
    2d40:	3501      	adds	r5, #1
    2d42:	2d14      	cmp	r5, #20
    2d44:	d1f8      	bne.n	2d38 <_swiopen+0x10>
    2d46:	f000 f8f5 	bl	2f34 <__errno>
    2d4a:	2318      	movs	r3, #24
    2d4c:	6003      	str	r3, [r0, #0]
    2d4e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2d52:	e03d      	b.n	2dd0 <_swiopen+0xa8>
    2d54:	f3c7 4400 	ubfx	r4, r7, #16, #1
    2d58:	f240 6301 	movw	r3, #1537	; 0x601
    2d5c:	07ba      	lsls	r2, r7, #30
    2d5e:	bf48      	it	mi
    2d60:	f044 0402 	orrmi.w	r4, r4, #2
    2d64:	421f      	tst	r7, r3
    2d66:	bf18      	it	ne
    2d68:	f044 0404 	orrne.w	r4, r4, #4
    2d6c:	073b      	lsls	r3, r7, #28
    2d6e:	bf48      	it	mi
    2d70:	f024 0404 	bicmi.w	r4, r4, #4
    2d74:	4648      	mov	r0, r9
    2d76:	bf48      	it	mi
    2d78:	f044 0408 	orrmi.w	r4, r4, #8
    2d7c:	f8cd 9000 	str.w	r9, [sp]
    2d80:	f000 fa16 	bl	31b0 <strlen>
    2d84:	e9cd 4001 	strd	r4, r0, [sp, #4]
    2d88:	2401      	movs	r4, #1
    2d8a:	4620      	mov	r0, r4
    2d8c:	4641      	mov	r1, r8
    2d8e:	beab      	bkpt	0x00ab
    2d90:	4604      	mov	r4, r0
    2d92:	2c00      	cmp	r4, #0
    2d94:	db07      	blt.n	2da6 <_swiopen+0x7e>
    2d96:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
    2d9a:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
    2d9e:	2300      	movs	r3, #0
    2da0:	6073      	str	r3, [r6, #4]
    2da2:	462c      	mov	r4, r5
    2da4:	e014      	b.n	2dd0 <_swiopen+0xa8>
    2da6:	4620      	mov	r0, r4
    2da8:	f7ff fe7a 	bl	2aa0 <error>
    2dac:	4604      	mov	r4, r0
    2dae:	e00f      	b.n	2dd0 <_swiopen+0xa8>
    2db0:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
    2db4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
    2db8:	46e8      	mov	r8, sp
    2dba:	d1cb      	bne.n	2d54 <_swiopen+0x2c>
    2dbc:	4641      	mov	r1, r8
    2dbe:	4648      	mov	r0, r9
    2dc0:	f7ff ff95 	bl	2cee <_stat>
    2dc4:	3001      	adds	r0, #1
    2dc6:	d0c5      	beq.n	2d54 <_swiopen+0x2c>
    2dc8:	f000 f8b4 	bl	2f34 <__errno>
    2dcc:	2311      	movs	r3, #17
    2dce:	6003      	str	r3, [r0, #0]
    2dd0:	4620      	mov	r0, r4
    2dd2:	b017      	add	sp, #92	; 0x5c
    2dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2dd8:	20000168 	.word	0x20000168

00002ddc <_get_semihosting_exts>:
    2ddc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2de0:	4606      	mov	r6, r0
    2de2:	460f      	mov	r7, r1
    2de4:	482a      	ldr	r0, [pc, #168]	; (2e90 <_get_semihosting_exts+0xb4>)
    2de6:	2100      	movs	r1, #0
    2de8:	4615      	mov	r5, r2
    2dea:	f7ff ff9d 	bl	2d28 <_swiopen>
    2dee:	462a      	mov	r2, r5
    2df0:	4604      	mov	r4, r0
    2df2:	2100      	movs	r1, #0
    2df4:	4630      	mov	r0, r6
    2df6:	f7ff fd13 	bl	2820 <memset>
    2dfa:	1c63      	adds	r3, r4, #1
    2dfc:	d016      	beq.n	2e2c <_get_semihosting_exts+0x50>
    2dfe:	4620      	mov	r0, r4
    2e00:	f7ff fe24 	bl	2a4c <findslot>
    2e04:	f04f 090c 	mov.w	r9, #12
    2e08:	4680      	mov	r8, r0
    2e0a:	4648      	mov	r0, r9
    2e0c:	4641      	mov	r1, r8
    2e0e:	beab      	bkpt	0x00ab
    2e10:	4680      	mov	r8, r0
    2e12:	4640      	mov	r0, r8
    2e14:	f7ff fe34 	bl	2a80 <checkerror>
    2e18:	2803      	cmp	r0, #3
    2e1a:	dd02      	ble.n	2e22 <_get_semihosting_exts+0x46>
    2e1c:	1ec3      	subs	r3, r0, #3
    2e1e:	42ab      	cmp	r3, r5
    2e20:	dc08      	bgt.n	2e34 <_get_semihosting_exts+0x58>
    2e22:	4620      	mov	r0, r4
    2e24:	f7ff fef6 	bl	2c14 <_close>
    2e28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2e2c:	4620      	mov	r0, r4
    2e2e:	b003      	add	sp, #12
    2e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2e34:	2204      	movs	r2, #4
    2e36:	eb0d 0102 	add.w	r1, sp, r2
    2e3a:	4620      	mov	r0, r4
    2e3c:	f7ff fe4e 	bl	2adc <_read>
    2e40:	2803      	cmp	r0, #3
    2e42:	ddee      	ble.n	2e22 <_get_semihosting_exts+0x46>
    2e44:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2e48:	2b53      	cmp	r3, #83	; 0x53
    2e4a:	d1ea      	bne.n	2e22 <_get_semihosting_exts+0x46>
    2e4c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2e50:	2b48      	cmp	r3, #72	; 0x48
    2e52:	d1e6      	bne.n	2e22 <_get_semihosting_exts+0x46>
    2e54:	f89d 3006 	ldrb.w	r3, [sp, #6]
    2e58:	2b46      	cmp	r3, #70	; 0x46
    2e5a:	d1e2      	bne.n	2e22 <_get_semihosting_exts+0x46>
    2e5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2e60:	2b42      	cmp	r3, #66	; 0x42
    2e62:	d1de      	bne.n	2e22 <_get_semihosting_exts+0x46>
    2e64:	2201      	movs	r2, #1
    2e66:	4639      	mov	r1, r7
    2e68:	4620      	mov	r0, r4
    2e6a:	f7ff fe53 	bl	2b14 <_swilseek>
    2e6e:	2800      	cmp	r0, #0
    2e70:	dbd7      	blt.n	2e22 <_get_semihosting_exts+0x46>
    2e72:	462a      	mov	r2, r5
    2e74:	4631      	mov	r1, r6
    2e76:	4620      	mov	r0, r4
    2e78:	f7ff fe30 	bl	2adc <_read>
    2e7c:	4605      	mov	r5, r0
    2e7e:	4620      	mov	r0, r4
    2e80:	f7ff fec8 	bl	2c14 <_close>
    2e84:	4628      	mov	r0, r5
    2e86:	f7ff fdfb 	bl	2a80 <checkerror>
    2e8a:	4604      	mov	r4, r0
    2e8c:	e7ce      	b.n	2e2c <_get_semihosting_exts+0x50>
    2e8e:	bf00      	nop
    2e90:	000034e0 	.word	0x000034e0

00002e94 <initialise_semihosting_exts>:
    2e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2e96:	4d0a      	ldr	r5, [pc, #40]	; (2ec0 <initialise_semihosting_exts+0x2c>)
    2e98:	4c0a      	ldr	r4, [pc, #40]	; (2ec4 <initialise_semihosting_exts+0x30>)
    2e9a:	2100      	movs	r1, #0
    2e9c:	2201      	movs	r2, #1
    2e9e:	a801      	add	r0, sp, #4
    2ea0:	6029      	str	r1, [r5, #0]
    2ea2:	6022      	str	r2, [r4, #0]
    2ea4:	f7ff ff9a 	bl	2ddc <_get_semihosting_exts>
    2ea8:	2800      	cmp	r0, #0
    2eaa:	dd07      	ble.n	2ebc <initialise_semihosting_exts+0x28>
    2eac:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2eb0:	f003 0201 	and.w	r2, r3, #1
    2eb4:	f003 0302 	and.w	r3, r3, #2
    2eb8:	602a      	str	r2, [r5, #0]
    2eba:	6023      	str	r3, [r4, #0]
    2ebc:	b003      	add	sp, #12
    2ebe:	bd30      	pop	{r4, r5, pc}
    2ec0:	20000074 	.word	0x20000074
    2ec4:	20000078 	.word	0x20000078

00002ec8 <_has_ext_exit_extended>:
    2ec8:	b510      	push	{r4, lr}
    2eca:	4c04      	ldr	r4, [pc, #16]	; (2edc <_has_ext_exit_extended+0x14>)
    2ecc:	6822      	ldr	r2, [r4, #0]
    2ece:	2a00      	cmp	r2, #0
    2ed0:	da01      	bge.n	2ed6 <_has_ext_exit_extended+0xe>
    2ed2:	f7ff ffdf 	bl	2e94 <initialise_semihosting_exts>
    2ed6:	6820      	ldr	r0, [r4, #0]
    2ed8:	bd10      	pop	{r4, pc}
    2eda:	bf00      	nop
    2edc:	20000074 	.word	0x20000074

00002ee0 <_exit>:
    2ee0:	4601      	mov	r1, r0
    2ee2:	b508      	push	{r3, lr}
    2ee4:	4a02      	ldr	r2, [pc, #8]	; (2ef0 <_exit+0x10>)
    2ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2eea:	f000 f803 	bl	2ef4 <_kill_shared>
    2eee:	bf00      	nop
    2ef0:	00020026 	.word	0x00020026

00002ef4 <_kill_shared>:
    2ef4:	b507      	push	{r0, r1, r2, lr}
    2ef6:	e9cd 2100 	strd	r2, r1, [sp]
    2efa:	f7ff ffe5 	bl	2ec8 <_has_ext_exit_extended>
    2efe:	2800      	cmp	r0, #0
    2f00:	bf14      	ite	ne
    2f02:	2420      	movne	r4, #32
    2f04:	2418      	moveq	r4, #24
    2f06:	f7ff ffdf 	bl	2ec8 <_has_ext_exit_extended>
    2f0a:	b120      	cbz	r0, 2f16 <_kill_shared+0x22>
    2f0c:	466d      	mov	r5, sp
    2f0e:	4620      	mov	r0, r4
    2f10:	4629      	mov	r1, r5
    2f12:	beab      	bkpt	0x00ab
    2f14:	4604      	mov	r4, r0
    2f16:	9d00      	ldr	r5, [sp, #0]
    2f18:	e7f9      	b.n	2f0e <_kill_shared+0x1a>
	...

00002f1c <_kill>:
    2f1c:	2906      	cmp	r1, #6
    2f1e:	b508      	push	{r3, lr}
    2f20:	bf0c      	ite	eq
    2f22:	4a02      	ldreq	r2, [pc, #8]	; (2f2c <_kill+0x10>)
    2f24:	4a02      	ldrne	r2, [pc, #8]	; (2f30 <_kill+0x14>)
    2f26:	f7ff ffe5 	bl	2ef4 <_kill_shared>
    2f2a:	bf00      	nop
    2f2c:	00020023 	.word	0x00020023
    2f30:	00020026 	.word	0x00020026

00002f34 <__errno>:
    2f34:	4b01      	ldr	r3, [pc, #4]	; (2f3c <__errno+0x8>)
    2f36:	6818      	ldr	r0, [r3, #0]
    2f38:	4770      	bx	lr
    2f3a:	bf00      	nop
    2f3c:	2000000c 	.word	0x2000000c

00002f40 <std>:
    2f40:	2300      	movs	r3, #0
    2f42:	b510      	push	{r4, lr}
    2f44:	4604      	mov	r4, r0
    2f46:	e9c0 3300 	strd	r3, r3, [r0]
    2f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    2f4e:	6083      	str	r3, [r0, #8]
    2f50:	8181      	strh	r1, [r0, #12]
    2f52:	6643      	str	r3, [r0, #100]	; 0x64
    2f54:	81c2      	strh	r2, [r0, #14]
    2f56:	6183      	str	r3, [r0, #24]
    2f58:	4619      	mov	r1, r3
    2f5a:	2208      	movs	r2, #8
    2f5c:	305c      	adds	r0, #92	; 0x5c
    2f5e:	f7ff fc5f 	bl	2820 <memset>
    2f62:	4b05      	ldr	r3, [pc, #20]	; (2f78 <std+0x38>)
    2f64:	6263      	str	r3, [r4, #36]	; 0x24
    2f66:	4b05      	ldr	r3, [pc, #20]	; (2f7c <std+0x3c>)
    2f68:	62a3      	str	r3, [r4, #40]	; 0x28
    2f6a:	4b05      	ldr	r3, [pc, #20]	; (2f80 <std+0x40>)
    2f6c:	62e3      	str	r3, [r4, #44]	; 0x2c
    2f6e:	4b05      	ldr	r3, [pc, #20]	; (2f84 <std+0x44>)
    2f70:	6224      	str	r4, [r4, #32]
    2f72:	6323      	str	r3, [r4, #48]	; 0x30
    2f74:	bd10      	pop	{r4, pc}
    2f76:	bf00      	nop
    2f78:	0000312b 	.word	0x0000312b
    2f7c:	0000314d 	.word	0x0000314d
    2f80:	00003185 	.word	0x00003185
    2f84:	000031a9 	.word	0x000031a9

00002f88 <_cleanup_r>:
    2f88:	4901      	ldr	r1, [pc, #4]	; (2f90 <_cleanup_r+0x8>)
    2f8a:	f000 b8af 	b.w	30ec <_fwalk_reent>
    2f8e:	bf00      	nop
    2f90:	00003311 	.word	0x00003311

00002f94 <__sfmoreglue>:
    2f94:	b570      	push	{r4, r5, r6, lr}
    2f96:	1e4a      	subs	r2, r1, #1
    2f98:	2568      	movs	r5, #104	; 0x68
    2f9a:	4355      	muls	r5, r2
    2f9c:	460e      	mov	r6, r1
    2f9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    2fa2:	f7ff fc95 	bl	28d0 <_malloc_r>
    2fa6:	4604      	mov	r4, r0
    2fa8:	b140      	cbz	r0, 2fbc <__sfmoreglue+0x28>
    2faa:	2100      	movs	r1, #0
    2fac:	e9c0 1600 	strd	r1, r6, [r0]
    2fb0:	300c      	adds	r0, #12
    2fb2:	60a0      	str	r0, [r4, #8]
    2fb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
    2fb8:	f7ff fc32 	bl	2820 <memset>
    2fbc:	4620      	mov	r0, r4
    2fbe:	bd70      	pop	{r4, r5, r6, pc}

00002fc0 <__sfp_lock_acquire>:
    2fc0:	4801      	ldr	r0, [pc, #4]	; (2fc8 <__sfp_lock_acquire+0x8>)
    2fc2:	f7ff bd40 	b.w	2a46 <__retarget_lock_acquire_recursive>
    2fc6:	bf00      	nop
    2fc8:	20000214 	.word	0x20000214

00002fcc <__sfp_lock_release>:
    2fcc:	4801      	ldr	r0, [pc, #4]	; (2fd4 <__sfp_lock_release+0x8>)
    2fce:	f7ff bd3b 	b.w	2a48 <__retarget_lock_release_recursive>
    2fd2:	bf00      	nop
    2fd4:	20000214 	.word	0x20000214

00002fd8 <__sinit_lock_acquire>:
    2fd8:	4801      	ldr	r0, [pc, #4]	; (2fe0 <__sinit_lock_acquire+0x8>)
    2fda:	f7ff bd34 	b.w	2a46 <__retarget_lock_acquire_recursive>
    2fde:	bf00      	nop
    2fe0:	2000020f 	.word	0x2000020f

00002fe4 <__sinit_lock_release>:
    2fe4:	4801      	ldr	r0, [pc, #4]	; (2fec <__sinit_lock_release+0x8>)
    2fe6:	f7ff bd2f 	b.w	2a48 <__retarget_lock_release_recursive>
    2fea:	bf00      	nop
    2fec:	2000020f 	.word	0x2000020f

00002ff0 <__sinit>:
    2ff0:	b510      	push	{r4, lr}
    2ff2:	4604      	mov	r4, r0
    2ff4:	f7ff fff0 	bl	2fd8 <__sinit_lock_acquire>
    2ff8:	69a3      	ldr	r3, [r4, #24]
    2ffa:	b11b      	cbz	r3, 3004 <__sinit+0x14>
    2ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3000:	f7ff bff0 	b.w	2fe4 <__sinit_lock_release>
    3004:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    3008:	6523      	str	r3, [r4, #80]	; 0x50
    300a:	4b13      	ldr	r3, [pc, #76]	; (3058 <__sinit+0x68>)
    300c:	4a13      	ldr	r2, [pc, #76]	; (305c <__sinit+0x6c>)
    300e:	681b      	ldr	r3, [r3, #0]
    3010:	62a2      	str	r2, [r4, #40]	; 0x28
    3012:	42a3      	cmp	r3, r4
    3014:	bf04      	itt	eq
    3016:	2301      	moveq	r3, #1
    3018:	61a3      	streq	r3, [r4, #24]
    301a:	4620      	mov	r0, r4
    301c:	f000 f820 	bl	3060 <__sfp>
    3020:	6060      	str	r0, [r4, #4]
    3022:	4620      	mov	r0, r4
    3024:	f000 f81c 	bl	3060 <__sfp>
    3028:	60a0      	str	r0, [r4, #8]
    302a:	4620      	mov	r0, r4
    302c:	f000 f818 	bl	3060 <__sfp>
    3030:	2200      	movs	r2, #0
    3032:	60e0      	str	r0, [r4, #12]
    3034:	2104      	movs	r1, #4
    3036:	6860      	ldr	r0, [r4, #4]
    3038:	f7ff ff82 	bl	2f40 <std>
    303c:	68a0      	ldr	r0, [r4, #8]
    303e:	2201      	movs	r2, #1
    3040:	2109      	movs	r1, #9
    3042:	f7ff ff7d 	bl	2f40 <std>
    3046:	68e0      	ldr	r0, [r4, #12]
    3048:	2202      	movs	r2, #2
    304a:	2112      	movs	r1, #18
    304c:	f7ff ff78 	bl	2f40 <std>
    3050:	2301      	movs	r3, #1
    3052:	61a3      	str	r3, [r4, #24]
    3054:	e7d2      	b.n	2ffc <__sinit+0xc>
    3056:	bf00      	nop
    3058:	000034dc 	.word	0x000034dc
    305c:	00002f89 	.word	0x00002f89

00003060 <__sfp>:
    3060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3062:	4607      	mov	r7, r0
    3064:	f7ff ffac 	bl	2fc0 <__sfp_lock_acquire>
    3068:	4b1e      	ldr	r3, [pc, #120]	; (30e4 <__sfp+0x84>)
    306a:	681e      	ldr	r6, [r3, #0]
    306c:	69b3      	ldr	r3, [r6, #24]
    306e:	b913      	cbnz	r3, 3076 <__sfp+0x16>
    3070:	4630      	mov	r0, r6
    3072:	f7ff ffbd 	bl	2ff0 <__sinit>
    3076:	3648      	adds	r6, #72	; 0x48
    3078:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    307c:	3b01      	subs	r3, #1
    307e:	d503      	bpl.n	3088 <__sfp+0x28>
    3080:	6833      	ldr	r3, [r6, #0]
    3082:	b30b      	cbz	r3, 30c8 <__sfp+0x68>
    3084:	6836      	ldr	r6, [r6, #0]
    3086:	e7f7      	b.n	3078 <__sfp+0x18>
    3088:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    308c:	b9d5      	cbnz	r5, 30c4 <__sfp+0x64>
    308e:	4b16      	ldr	r3, [pc, #88]	; (30e8 <__sfp+0x88>)
    3090:	60e3      	str	r3, [r4, #12]
    3092:	f104 0058 	add.w	r0, r4, #88	; 0x58
    3096:	6665      	str	r5, [r4, #100]	; 0x64
    3098:	f7ff fcd4 	bl	2a44 <__retarget_lock_init_recursive>
    309c:	f7ff ff96 	bl	2fcc <__sfp_lock_release>
    30a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
    30a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
    30a8:	6025      	str	r5, [r4, #0]
    30aa:	61a5      	str	r5, [r4, #24]
    30ac:	2208      	movs	r2, #8
    30ae:	4629      	mov	r1, r5
    30b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    30b4:	f7ff fbb4 	bl	2820 <memset>
    30b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    30bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    30c0:	4620      	mov	r0, r4
    30c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    30c4:	3468      	adds	r4, #104	; 0x68
    30c6:	e7d9      	b.n	307c <__sfp+0x1c>
    30c8:	2104      	movs	r1, #4
    30ca:	4638      	mov	r0, r7
    30cc:	f7ff ff62 	bl	2f94 <__sfmoreglue>
    30d0:	4604      	mov	r4, r0
    30d2:	6030      	str	r0, [r6, #0]
    30d4:	2800      	cmp	r0, #0
    30d6:	d1d5      	bne.n	3084 <__sfp+0x24>
    30d8:	f7ff ff78 	bl	2fcc <__sfp_lock_release>
    30dc:	230c      	movs	r3, #12
    30de:	603b      	str	r3, [r7, #0]
    30e0:	e7ee      	b.n	30c0 <__sfp+0x60>
    30e2:	bf00      	nop
    30e4:	000034dc 	.word	0x000034dc
    30e8:	ffff0001 	.word	0xffff0001

000030ec <_fwalk_reent>:
    30ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    30f0:	4606      	mov	r6, r0
    30f2:	4688      	mov	r8, r1
    30f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
    30f8:	2700      	movs	r7, #0
    30fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
    30fe:	f1b9 0901 	subs.w	r9, r9, #1
    3102:	d505      	bpl.n	3110 <_fwalk_reent+0x24>
    3104:	6824      	ldr	r4, [r4, #0]
    3106:	2c00      	cmp	r4, #0
    3108:	d1f7      	bne.n	30fa <_fwalk_reent+0xe>
    310a:	4638      	mov	r0, r7
    310c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3110:	89ab      	ldrh	r3, [r5, #12]
    3112:	2b01      	cmp	r3, #1
    3114:	d907      	bls.n	3126 <_fwalk_reent+0x3a>
    3116:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    311a:	3301      	adds	r3, #1
    311c:	d003      	beq.n	3126 <_fwalk_reent+0x3a>
    311e:	4629      	mov	r1, r5
    3120:	4630      	mov	r0, r6
    3122:	47c0      	blx	r8
    3124:	4307      	orrs	r7, r0
    3126:	3568      	adds	r5, #104	; 0x68
    3128:	e7e9      	b.n	30fe <_fwalk_reent+0x12>

0000312a <__sread>:
    312a:	b510      	push	{r4, lr}
    312c:	460c      	mov	r4, r1
    312e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3132:	f000 f93b 	bl	33ac <_read_r>
    3136:	2800      	cmp	r0, #0
    3138:	bfab      	itete	ge
    313a:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    313c:	89a3      	ldrhlt	r3, [r4, #12]
    313e:	181b      	addge	r3, r3, r0
    3140:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    3144:	bfac      	ite	ge
    3146:	6563      	strge	r3, [r4, #84]	; 0x54
    3148:	81a3      	strhlt	r3, [r4, #12]
    314a:	bd10      	pop	{r4, pc}

0000314c <__swrite>:
    314c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3150:	461f      	mov	r7, r3
    3152:	898b      	ldrh	r3, [r1, #12]
    3154:	05db      	lsls	r3, r3, #23
    3156:	4605      	mov	r5, r0
    3158:	460c      	mov	r4, r1
    315a:	4616      	mov	r6, r2
    315c:	d505      	bpl.n	316a <__swrite+0x1e>
    315e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    3162:	2302      	movs	r3, #2
    3164:	2200      	movs	r2, #0
    3166:	f000 f90f 	bl	3388 <_lseek_r>
    316a:	89a3      	ldrh	r3, [r4, #12]
    316c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    3170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    3174:	81a3      	strh	r3, [r4, #12]
    3176:	4632      	mov	r2, r6
    3178:	463b      	mov	r3, r7
    317a:	4628      	mov	r0, r5
    317c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3180:	f000 b81e 	b.w	31c0 <_write_r>

00003184 <__sseek>:
    3184:	b510      	push	{r4, lr}
    3186:	460c      	mov	r4, r1
    3188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    318c:	f000 f8fc 	bl	3388 <_lseek_r>
    3190:	1c43      	adds	r3, r0, #1
    3192:	89a3      	ldrh	r3, [r4, #12]
    3194:	bf15      	itete	ne
    3196:	6560      	strne	r0, [r4, #84]	; 0x54
    3198:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    319c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    31a0:	81a3      	strheq	r3, [r4, #12]
    31a2:	bf18      	it	ne
    31a4:	81a3      	strhne	r3, [r4, #12]
    31a6:	bd10      	pop	{r4, pc}

000031a8 <__sclose>:
    31a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    31ac:	f000 b81a 	b.w	31e4 <_close_r>

000031b0 <strlen>:
    31b0:	4603      	mov	r3, r0
    31b2:	f813 2b01 	ldrb.w	r2, [r3], #1
    31b6:	2a00      	cmp	r2, #0
    31b8:	d1fb      	bne.n	31b2 <strlen+0x2>
    31ba:	1a18      	subs	r0, r3, r0
    31bc:	3801      	subs	r0, #1
    31be:	4770      	bx	lr

000031c0 <_write_r>:
    31c0:	b538      	push	{r3, r4, r5, lr}
    31c2:	4d07      	ldr	r5, [pc, #28]	; (31e0 <_write_r+0x20>)
    31c4:	4604      	mov	r4, r0
    31c6:	4608      	mov	r0, r1
    31c8:	4611      	mov	r1, r2
    31ca:	2200      	movs	r2, #0
    31cc:	602a      	str	r2, [r5, #0]
    31ce:	461a      	mov	r2, r3
    31d0:	f7ff fcee 	bl	2bb0 <_write>
    31d4:	1c43      	adds	r3, r0, #1
    31d6:	d102      	bne.n	31de <_write_r+0x1e>
    31d8:	682b      	ldr	r3, [r5, #0]
    31da:	b103      	cbz	r3, 31de <_write_r+0x1e>
    31dc:	6023      	str	r3, [r4, #0]
    31de:	bd38      	pop	{r3, r4, r5, pc}
    31e0:	20000208 	.word	0x20000208

000031e4 <_close_r>:
    31e4:	b538      	push	{r3, r4, r5, lr}
    31e6:	4d06      	ldr	r5, [pc, #24]	; (3200 <_close_r+0x1c>)
    31e8:	2300      	movs	r3, #0
    31ea:	4604      	mov	r4, r0
    31ec:	4608      	mov	r0, r1
    31ee:	602b      	str	r3, [r5, #0]
    31f0:	f7ff fd10 	bl	2c14 <_close>
    31f4:	1c43      	adds	r3, r0, #1
    31f6:	d102      	bne.n	31fe <_close_r+0x1a>
    31f8:	682b      	ldr	r3, [r5, #0]
    31fa:	b103      	cbz	r3, 31fe <_close_r+0x1a>
    31fc:	6023      	str	r3, [r4, #0]
    31fe:	bd38      	pop	{r3, r4, r5, pc}
    3200:	20000208 	.word	0x20000208

00003204 <__sflush_r>:
    3204:	898a      	ldrh	r2, [r1, #12]
    3206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    320a:	4605      	mov	r5, r0
    320c:	0710      	lsls	r0, r2, #28
    320e:	460c      	mov	r4, r1
    3210:	d458      	bmi.n	32c4 <__sflush_r+0xc0>
    3212:	684b      	ldr	r3, [r1, #4]
    3214:	2b00      	cmp	r3, #0
    3216:	dc05      	bgt.n	3224 <__sflush_r+0x20>
    3218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    321a:	2b00      	cmp	r3, #0
    321c:	dc02      	bgt.n	3224 <__sflush_r+0x20>
    321e:	2000      	movs	r0, #0
    3220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    3226:	2e00      	cmp	r6, #0
    3228:	d0f9      	beq.n	321e <__sflush_r+0x1a>
    322a:	2300      	movs	r3, #0
    322c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    3230:	682f      	ldr	r7, [r5, #0]
    3232:	602b      	str	r3, [r5, #0]
    3234:	d032      	beq.n	329c <__sflush_r+0x98>
    3236:	6d60      	ldr	r0, [r4, #84]	; 0x54
    3238:	89a3      	ldrh	r3, [r4, #12]
    323a:	075a      	lsls	r2, r3, #29
    323c:	d505      	bpl.n	324a <__sflush_r+0x46>
    323e:	6863      	ldr	r3, [r4, #4]
    3240:	1ac0      	subs	r0, r0, r3
    3242:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3244:	b10b      	cbz	r3, 324a <__sflush_r+0x46>
    3246:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3248:	1ac0      	subs	r0, r0, r3
    324a:	2300      	movs	r3, #0
    324c:	4602      	mov	r2, r0
    324e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    3250:	6a21      	ldr	r1, [r4, #32]
    3252:	4628      	mov	r0, r5
    3254:	47b0      	blx	r6
    3256:	1c43      	adds	r3, r0, #1
    3258:	89a3      	ldrh	r3, [r4, #12]
    325a:	d106      	bne.n	326a <__sflush_r+0x66>
    325c:	6829      	ldr	r1, [r5, #0]
    325e:	291d      	cmp	r1, #29
    3260:	d82c      	bhi.n	32bc <__sflush_r+0xb8>
    3262:	4a2a      	ldr	r2, [pc, #168]	; (330c <__sflush_r+0x108>)
    3264:	40ca      	lsrs	r2, r1
    3266:	07d6      	lsls	r6, r2, #31
    3268:	d528      	bpl.n	32bc <__sflush_r+0xb8>
    326a:	2200      	movs	r2, #0
    326c:	6062      	str	r2, [r4, #4]
    326e:	04d9      	lsls	r1, r3, #19
    3270:	6922      	ldr	r2, [r4, #16]
    3272:	6022      	str	r2, [r4, #0]
    3274:	d504      	bpl.n	3280 <__sflush_r+0x7c>
    3276:	1c42      	adds	r2, r0, #1
    3278:	d101      	bne.n	327e <__sflush_r+0x7a>
    327a:	682b      	ldr	r3, [r5, #0]
    327c:	b903      	cbnz	r3, 3280 <__sflush_r+0x7c>
    327e:	6560      	str	r0, [r4, #84]	; 0x54
    3280:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3282:	602f      	str	r7, [r5, #0]
    3284:	2900      	cmp	r1, #0
    3286:	d0ca      	beq.n	321e <__sflush_r+0x1a>
    3288:	f104 0344 	add.w	r3, r4, #68	; 0x44
    328c:	4299      	cmp	r1, r3
    328e:	d002      	beq.n	3296 <__sflush_r+0x92>
    3290:	4628      	mov	r0, r5
    3292:	f7ff facd 	bl	2830 <_free_r>
    3296:	2000      	movs	r0, #0
    3298:	6360      	str	r0, [r4, #52]	; 0x34
    329a:	e7c1      	b.n	3220 <__sflush_r+0x1c>
    329c:	6a21      	ldr	r1, [r4, #32]
    329e:	2301      	movs	r3, #1
    32a0:	4628      	mov	r0, r5
    32a2:	47b0      	blx	r6
    32a4:	1c41      	adds	r1, r0, #1
    32a6:	d1c7      	bne.n	3238 <__sflush_r+0x34>
    32a8:	682b      	ldr	r3, [r5, #0]
    32aa:	2b00      	cmp	r3, #0
    32ac:	d0c4      	beq.n	3238 <__sflush_r+0x34>
    32ae:	2b1d      	cmp	r3, #29
    32b0:	d001      	beq.n	32b6 <__sflush_r+0xb2>
    32b2:	2b16      	cmp	r3, #22
    32b4:	d101      	bne.n	32ba <__sflush_r+0xb6>
    32b6:	602f      	str	r7, [r5, #0]
    32b8:	e7b1      	b.n	321e <__sflush_r+0x1a>
    32ba:	89a3      	ldrh	r3, [r4, #12]
    32bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    32c0:	81a3      	strh	r3, [r4, #12]
    32c2:	e7ad      	b.n	3220 <__sflush_r+0x1c>
    32c4:	690f      	ldr	r7, [r1, #16]
    32c6:	2f00      	cmp	r7, #0
    32c8:	d0a9      	beq.n	321e <__sflush_r+0x1a>
    32ca:	0793      	lsls	r3, r2, #30
    32cc:	680e      	ldr	r6, [r1, #0]
    32ce:	bf08      	it	eq
    32d0:	694b      	ldreq	r3, [r1, #20]
    32d2:	600f      	str	r7, [r1, #0]
    32d4:	bf18      	it	ne
    32d6:	2300      	movne	r3, #0
    32d8:	eba6 0807 	sub.w	r8, r6, r7
    32dc:	608b      	str	r3, [r1, #8]
    32de:	f1b8 0f00 	cmp.w	r8, #0
    32e2:	dd9c      	ble.n	321e <__sflush_r+0x1a>
    32e4:	6a21      	ldr	r1, [r4, #32]
    32e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    32e8:	4643      	mov	r3, r8
    32ea:	463a      	mov	r2, r7
    32ec:	4628      	mov	r0, r5
    32ee:	47b0      	blx	r6
    32f0:	2800      	cmp	r0, #0
    32f2:	dc06      	bgt.n	3302 <__sflush_r+0xfe>
    32f4:	89a3      	ldrh	r3, [r4, #12]
    32f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    32fa:	81a3      	strh	r3, [r4, #12]
    32fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3300:	e78e      	b.n	3220 <__sflush_r+0x1c>
    3302:	4407      	add	r7, r0
    3304:	eba8 0800 	sub.w	r8, r8, r0
    3308:	e7e9      	b.n	32de <__sflush_r+0xda>
    330a:	bf00      	nop
    330c:	20400001 	.word	0x20400001

00003310 <_fflush_r>:
    3310:	b538      	push	{r3, r4, r5, lr}
    3312:	690b      	ldr	r3, [r1, #16]
    3314:	4605      	mov	r5, r0
    3316:	460c      	mov	r4, r1
    3318:	b913      	cbnz	r3, 3320 <_fflush_r+0x10>
    331a:	2500      	movs	r5, #0
    331c:	4628      	mov	r0, r5
    331e:	bd38      	pop	{r3, r4, r5, pc}
    3320:	b118      	cbz	r0, 332a <_fflush_r+0x1a>
    3322:	6983      	ldr	r3, [r0, #24]
    3324:	b90b      	cbnz	r3, 332a <_fflush_r+0x1a>
    3326:	f7ff fe63 	bl	2ff0 <__sinit>
    332a:	4b14      	ldr	r3, [pc, #80]	; (337c <_fflush_r+0x6c>)
    332c:	429c      	cmp	r4, r3
    332e:	d11b      	bne.n	3368 <_fflush_r+0x58>
    3330:	686c      	ldr	r4, [r5, #4]
    3332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    3336:	2b00      	cmp	r3, #0
    3338:	d0ef      	beq.n	331a <_fflush_r+0xa>
    333a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    333c:	07d0      	lsls	r0, r2, #31
    333e:	d404      	bmi.n	334a <_fflush_r+0x3a>
    3340:	0599      	lsls	r1, r3, #22
    3342:	d402      	bmi.n	334a <_fflush_r+0x3a>
    3344:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3346:	f7ff fb7e 	bl	2a46 <__retarget_lock_acquire_recursive>
    334a:	4628      	mov	r0, r5
    334c:	4621      	mov	r1, r4
    334e:	f7ff ff59 	bl	3204 <__sflush_r>
    3352:	6e63      	ldr	r3, [r4, #100]	; 0x64
    3354:	07da      	lsls	r2, r3, #31
    3356:	4605      	mov	r5, r0
    3358:	d4e0      	bmi.n	331c <_fflush_r+0xc>
    335a:	89a3      	ldrh	r3, [r4, #12]
    335c:	059b      	lsls	r3, r3, #22
    335e:	d4dd      	bmi.n	331c <_fflush_r+0xc>
    3360:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3362:	f7ff fb71 	bl	2a48 <__retarget_lock_release_recursive>
    3366:	e7d9      	b.n	331c <_fflush_r+0xc>
    3368:	4b05      	ldr	r3, [pc, #20]	; (3380 <_fflush_r+0x70>)
    336a:	429c      	cmp	r4, r3
    336c:	d101      	bne.n	3372 <_fflush_r+0x62>
    336e:	68ac      	ldr	r4, [r5, #8]
    3370:	e7df      	b.n	3332 <_fflush_r+0x22>
    3372:	4b04      	ldr	r3, [pc, #16]	; (3384 <_fflush_r+0x74>)
    3374:	429c      	cmp	r4, r3
    3376:	bf08      	it	eq
    3378:	68ec      	ldreq	r4, [r5, #12]
    337a:	e7da      	b.n	3332 <_fflush_r+0x22>
    337c:	00003518 	.word	0x00003518
    3380:	00003538 	.word	0x00003538
    3384:	000034f8 	.word	0x000034f8

00003388 <_lseek_r>:
    3388:	b538      	push	{r3, r4, r5, lr}
    338a:	4d07      	ldr	r5, [pc, #28]	; (33a8 <_lseek_r+0x20>)
    338c:	4604      	mov	r4, r0
    338e:	4608      	mov	r0, r1
    3390:	4611      	mov	r1, r2
    3392:	2200      	movs	r2, #0
    3394:	602a      	str	r2, [r5, #0]
    3396:	461a      	mov	r2, r3
    3398:	f7ff fbf8 	bl	2b8c <_lseek>
    339c:	1c43      	adds	r3, r0, #1
    339e:	d102      	bne.n	33a6 <_lseek_r+0x1e>
    33a0:	682b      	ldr	r3, [r5, #0]
    33a2:	b103      	cbz	r3, 33a6 <_lseek_r+0x1e>
    33a4:	6023      	str	r3, [r4, #0]
    33a6:	bd38      	pop	{r3, r4, r5, pc}
    33a8:	20000208 	.word	0x20000208

000033ac <_read_r>:
    33ac:	b538      	push	{r3, r4, r5, lr}
    33ae:	4d07      	ldr	r5, [pc, #28]	; (33cc <_read_r+0x20>)
    33b0:	4604      	mov	r4, r0
    33b2:	4608      	mov	r0, r1
    33b4:	4611      	mov	r1, r2
    33b6:	2200      	movs	r2, #0
    33b8:	602a      	str	r2, [r5, #0]
    33ba:	461a      	mov	r2, r3
    33bc:	f7ff fb8e 	bl	2adc <_read>
    33c0:	1c43      	adds	r3, r0, #1
    33c2:	d102      	bne.n	33ca <_read_r+0x1e>
    33c4:	682b      	ldr	r3, [r5, #0]
    33c6:	b103      	cbz	r3, 33ca <_read_r+0x1e>
    33c8:	6023      	str	r3, [r4, #0]
    33ca:	bd38      	pop	{r3, r4, r5, pc}
    33cc:	20000208 	.word	0x20000208

000033d0 <_init>:
    33d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33d2:	bf00      	nop
    33d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    33d6:	bc08      	pop	{r3}
    33d8:	469e      	mov	lr, r3
    33da:	4770      	bx	lr

000033dc <_fini>:
    33dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33de:	bf00      	nop
    33e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    33e2:	bc08      	pop	{r3}
    33e4:	469e      	mov	lr, r3
    33e6:	4770      	bx	lr

000033e8 <_ZL18corePeripheralBase>:
    33e8:	e000 e000                                   ....

000033ec <_ZN4Nvic10ENn_OFFSETE>:
    33ec:	0100 0000 0104 0000 0108 0000 010c 0000     ................
    33fc:	0110 0000                                   ....

00003400 <_ZN4Nvic11DISn_OFFSETE>:
    3400:	0180 0000 0184 0000 0188 0000 018c 0000     ................
    3410:	0190 0000                                   ....

00003414 <_ZN4Nvic12PENDn_OFFSETE>:
    3414:	0200 0000 0204 0000 0208 0000 020c 0000     ................
    3424:	0210 0000                                   ....

00003428 <_ZN4Nvic14UNPENDn_OFFSETE>:
    3428:	0280 0000 0284 0000 0288 0000 028c 0000     ................
    3438:	0290 0000                                   ....

0000343c <_ZN4Nvic14ACTIVEn_OFFSETE>:
    343c:	0300 0000 0304 0000 0308 0000 030c 0000     ................
    344c:	0310 0000                                   ....

00003450 <_ZN4Nvic11PRIn_OFFSETE>:
    3450:	0400 0000 0404 0000 0408 0000 040c 0000     ................
    3460:	040c 0000 0414 0000 0418 0000 041c 0000     ................
    3470:	0420 0000 0424 0000 0428 0000 042c 0000      ...$...(...,...
    3480:	0430 0000 0434 0000 0438 0000 043c 0000     0...4...8...<...
    3490:	0440 0000 0444 0000 0448 0000 044c 0000     @...D...H...L...
    34a0:	0450 0000 0454 0000 0458 0000 045c 0000     P...T...X...\...
    34b0:	0460 0000 0464 0000 0468 0000 046c 0000     `...d...h...l...
    34c0:	0470 0000 0474 0000 0478 0000 047c 0000     p...t...x...|...
    34d0:	0480 0000 0484 0000 0488 0000               ............

000034dc <_global_impure_ptr>:
    34dc:	0010 2000 733a 6d65 6869 736f 6974 676e     ... :semihosting
    34ec:	662d 6165 7574 6572 0073 0000               -features...

000034f8 <__sf_fake_stderr>:
	...

00003518 <__sf_fake_stdin>:
	...

00003538 <__sf_fake_stdout>:
	...

00003558 <__EH_FRAME_BEGIN__>:
    3558:	0000 0000                                   ....
