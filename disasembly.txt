
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	00 80 00 20 ad 02 00 00 ed 02 00 00 ed 02 00 00     ... ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	00 00 00 00 ed 02 00 00 ed 02 00 00 fd 02 00 00     ................
	...
      c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	...
      ec:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      fc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     10c:	ed 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
     150:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	...
     1b0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
     258:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     268:	ed 02 00 00                                         ....

0000026c <__do_global_dtors_aux>:
     26c:	b510      	push	{r4, lr}
     26e:	4c05      	ldr	r4, [pc, #20]	; (284 <__do_global_dtors_aux+0x18>)
     270:	7823      	ldrb	r3, [r4, #0]
     272:	b933      	cbnz	r3, 282 <__do_global_dtors_aux+0x16>
     274:	4b04      	ldr	r3, [pc, #16]	; (288 <__do_global_dtors_aux+0x1c>)
     276:	b113      	cbz	r3, 27e <__do_global_dtors_aux+0x12>
     278:	4804      	ldr	r0, [pc, #16]	; (28c <__do_global_dtors_aux+0x20>)
     27a:	f3af 8000 	nop.w
     27e:	2301      	movs	r3, #1
     280:	7023      	strb	r3, [r4, #0]
     282:	bd10      	pop	{r4, pc}
     284:	20000080 	.word	0x20000080
     288:	00000000 	.word	0x00000000
     28c:	00002d08 	.word	0x00002d08

00000290 <frame_dummy>:
     290:	b508      	push	{r3, lr}
     292:	4b03      	ldr	r3, [pc, #12]	; (2a0 <frame_dummy+0x10>)
     294:	b11b      	cbz	r3, 29e <frame_dummy+0xe>
     296:	4903      	ldr	r1, [pc, #12]	; (2a4 <frame_dummy+0x14>)
     298:	4803      	ldr	r0, [pc, #12]	; (2a8 <frame_dummy+0x18>)
     29a:	f3af 8000 	nop.w
     29e:	bd08      	pop	{r3, pc}
     2a0:	00000000 	.word	0x00000000
     2a4:	20000084 	.word	0x20000084
     2a8:	00002d08 	.word	0x00002d08

000002ac <Reset_Handler>:
 *    __data_start__: VMA of start of the section to copy to
 *    __data_end__: VMA of end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r1, =__etext
     2ac:	490a      	ldr	r1, [pc, #40]	; (2d8 <Reset_Handler+0x2c>)
	ldr	r2, =__data_start__
     2ae:	4a0b      	ldr	r2, [pc, #44]	; (2dc <Reset_Handler+0x30>)
	ldr	r3, =__data_end__
     2b0:	4b0b      	ldr	r3, [pc, #44]	; (2e0 <Reset_Handler+0x34>)

.L_loop1:
	cmp	r2, r3
     2b2:	429a      	cmp	r2, r3
	ittt	lt
     2b4:	bfbe      	ittt	lt
	ldrlt	r0, [r1], #4
     2b6:	f851 0b04 	ldrlt.w	r0, [r1], #4
	strlt	r0, [r2], #4
     2ba:	f842 0b04 	strlt.w	r0, [r2], #4
	blt	.L_loop1
     2be:	e7f8      	blt.n	2b2 <Reset_Handler+0x6>
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
	ldr	r1, =__bss_start__
     2c0:	4908      	ldr	r1, [pc, #32]	; (2e4 <Reset_Handler+0x38>)
	ldr	r2, =__bss_end__
     2c2:	4a09      	ldr	r2, [pc, #36]	; (2e8 <Reset_Handler+0x3c>)

	movs	r0, 0
     2c4:	2000      	movs	r0, #0
.L_loop3:
	cmp	r1, r2
     2c6:	4291      	cmp	r1, r2
	itt	lt
     2c8:	bfbc      	itt	lt
	strlt	r0, [r1], #4
     2ca:	f841 0b04 	strlt.w	r0, [r1], #4
	blt	.L_loop3
     2ce:	e7fa      	blt.n	2c6 <Reset_Handler+0x1a>
#endif /* __STARTUP_CLEAR_BSS_MULTIPLE || __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
	bl	SystemInit
     2d0:	f000 f868 	bl	3a4 <SystemInit>
#endif

#ifndef __START
#define __START _start
#endif
	bl	__START
     2d4:	f000 f8a0 	bl	418 <main>
	ldr	r1, =__etext
     2d8:	00002edc 	.word	0x00002edc
	ldr	r2, =__data_start__
     2dc:	20000000 	.word	0x20000000
	ldr	r3, =__data_end__
     2e0:	20000080 	.word	0x20000080
	ldr	r1, =__bss_start__
     2e4:	20000080 	.word	0x20000080
	ldr	r2, =__bss_end__
     2e8:	200001d8 	.word	0x200001d8

000002ec <ADC_0_Sequence_0_Handler>:
	.align	1
	.thumb_func
	.weak	Default_Handler
	.type	Default_Handler, %function
Default_Handler:
	b	.
     2ec:	e7fe      	b.n	2ec <ADC_0_Sequence_0_Handler>
     2ee:	bf00      	nop

000002f0 <__cxa_pure_virtual>:
/**
 * These functions further help eliminate unwanted exceptions
 */

extern "C" void __cxa_pure_virtual() 
{ 
     2f0:	b480      	push	{r7}
     2f2:	af00      	add	r7, sp, #0
    while(1); 
     2f4:	e7fe      	b.n	2f4 <__cxa_pure_virtual+0x4>

000002f6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
}

void __gnu_cxx::__verbose_terminate_handler()
{
     2f6:	b480      	push	{r7}
     2f8:	af00      	add	r7, sp, #0
    while(1);
     2fa:	e7fe      	b.n	2fa <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x4>

000002fc <GPIO_Port_F_Handler>:
}

extern "C" void GPIO_Port_F_Handler(void)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	af00      	add	r7, sp, #0
    
    if(swtich1.read() == 1)
     300:	4824      	ldr	r0, [pc, #144]	; (394 <GPIO_Port_F_Handler+0x98>)
     302:	f000 fcf6 	bl	cf2 <_ZN4Gpio4readEv>
     306:	4603      	mov	r3, r0
     308:	2b01      	cmp	r3, #1
     30a:	bf0c      	ite	eq
     30c:	2301      	moveq	r3, #1
     30e:	2300      	movne	r3, #0
     310:	b2db      	uxtb	r3, r3
     312:	2b00      	cmp	r3, #0
     314:	d006      	beq.n	324 <GPIO_Port_F_Handler+0x28>
    {
        redLed.write(clear);
     316:	2100      	movs	r1, #0
     318:	481f      	ldr	r0, [pc, #124]	; (398 <GPIO_Port_F_Handler+0x9c>)
     31a:	f000 fccd 	bl	cb8 <_ZN4Gpio5writeE10setORClear>
        swtich1.interruptClear();
     31e:	481d      	ldr	r0, [pc, #116]	; (394 <GPIO_Port_F_Handler+0x98>)
     320:	f000 fcb5 	bl	c8e <_ZN4Gpio14interruptClearEv>
    }

    if(swtich1.read() == 0)
     324:	481b      	ldr	r0, [pc, #108]	; (394 <GPIO_Port_F_Handler+0x98>)
     326:	f000 fce4 	bl	cf2 <_ZN4Gpio4readEv>
     32a:	4603      	mov	r3, r0
     32c:	2b00      	cmp	r3, #0
     32e:	bf0c      	ite	eq
     330:	2301      	moveq	r3, #1
     332:	2300      	movne	r3, #0
     334:	b2db      	uxtb	r3, r3
     336:	2b00      	cmp	r3, #0
     338:	d006      	beq.n	348 <GPIO_Port_F_Handler+0x4c>
    {
        redLed.write(set);
     33a:	2101      	movs	r1, #1
     33c:	4816      	ldr	r0, [pc, #88]	; (398 <GPIO_Port_F_Handler+0x9c>)
     33e:	f000 fcbb 	bl	cb8 <_ZN4Gpio5writeE10setORClear>
        swtich1.interruptClear();
     342:	4814      	ldr	r0, [pc, #80]	; (394 <GPIO_Port_F_Handler+0x98>)
     344:	f000 fca3 	bl	c8e <_ZN4Gpio14interruptClearEv>
    }

    if(swtich2.read() == 1)
     348:	4814      	ldr	r0, [pc, #80]	; (39c <GPIO_Port_F_Handler+0xa0>)
     34a:	f000 fcd2 	bl	cf2 <_ZN4Gpio4readEv>
     34e:	4603      	mov	r3, r0
     350:	2b01      	cmp	r3, #1
     352:	bf0c      	ite	eq
     354:	2301      	moveq	r3, #1
     356:	2300      	movne	r3, #0
     358:	b2db      	uxtb	r3, r3
     35a:	2b00      	cmp	r3, #0
     35c:	d006      	beq.n	36c <GPIO_Port_F_Handler+0x70>
    {
        blueLed.write(clear);
     35e:	2100      	movs	r1, #0
     360:	480f      	ldr	r0, [pc, #60]	; (3a0 <GPIO_Port_F_Handler+0xa4>)
     362:	f000 fca9 	bl	cb8 <_ZN4Gpio5writeE10setORClear>
        swtich2.interruptClear();
     366:	480d      	ldr	r0, [pc, #52]	; (39c <GPIO_Port_F_Handler+0xa0>)
     368:	f000 fc91 	bl	c8e <_ZN4Gpio14interruptClearEv>
    }

    if(swtich2.read() == 0)
     36c:	480b      	ldr	r0, [pc, #44]	; (39c <GPIO_Port_F_Handler+0xa0>)
     36e:	f000 fcc0 	bl	cf2 <_ZN4Gpio4readEv>
     372:	4603      	mov	r3, r0
     374:	2b00      	cmp	r3, #0
     376:	bf0c      	ite	eq
     378:	2301      	moveq	r3, #1
     37a:	2300      	movne	r3, #0
     37c:	b2db      	uxtb	r3, r3
     37e:	2b00      	cmp	r3, #0
     380:	d006      	beq.n	390 <GPIO_Port_F_Handler+0x94>
    {
        blueLed.write(set);
     382:	2101      	movs	r1, #1
     384:	4806      	ldr	r0, [pc, #24]	; (3a0 <GPIO_Port_F_Handler+0xa4>)
     386:	f000 fc97 	bl	cb8 <_ZN4Gpio5writeE10setORClear>
        swtich2.interruptClear();
     38a:	4804      	ldr	r0, [pc, #16]	; (39c <GPIO_Port_F_Handler+0xa0>)
     38c:	f000 fc7f 	bl	c8e <_ZN4Gpio14interruptClearEv>
    }

}
     390:	bf00      	nop
     392:	bd80      	pop	{r7, pc}
     394:	200000e4 	.word	0x200000e4
     398:	200000cc 	.word	0x200000cc
     39c:	200000fc 	.word	0x200000fc
     3a0:	200000b4 	.word	0x200000b4

000003a4 <SystemInit>:
//         myTimer.interruptClear();
//     } 
// }

extern "C" void SystemInit(void)
{
     3a4:	b580      	push	{r7, lr}
     3a6:	b086      	sub	sp, #24
     3a8:	af06      	add	r7, sp, #24
    SystemControl::initializeGPIOHB();
     3aa:	f000 fa33 	bl	814 <_ZN13SystemControl16initializeGPIOHBEv>
    SystemControl::initializeClock(_80MHz);
     3ae:	2005      	movs	r0, #5
     3b0:	f000 fa68 	bl	884 <_ZN13SystemControl15initializeClockE7SYSDIV2>

    greenLed.initialize((uint32_t)PF3::M1PWM7, output);
     3b4:	2201      	movs	r2, #1
     3b6:	f241 01d2 	movw	r1, #4306	; 0x10d2
     3ba:	4813      	ldr	r0, [pc, #76]	; (408 <Stack_Size+0x8>)
     3bc:	f000 fae8 	bl	990 <_ZN4Gpio10initializeEm9direction>
    blueLed.initialize((uint32_t)PF2::GPIO, output); 
     3c0:	2201      	movs	r2, #1
     3c2:	f241 0168 	movw	r1, #4200	; 0x1068
     3c6:	4811      	ldr	r0, [pc, #68]	; (40c <Stack_Size+0xc>)
     3c8:	f000 fae2 	bl	990 <_ZN4Gpio10initializeEm9direction>
    redLed.initialize((uint32_t)PF1::GPIO, output);
     3cc:	2201      	movs	r2, #1
     3ce:	f241 0104 	movw	r1, #4100	; 0x1004
     3d2:	480f      	ldr	r0, [pc, #60]	; (410 <Stack_Size+0x10>)
     3d4:	f000 fadc 	bl	990 <_ZN4Gpio10initializeEm9direction>

    greenPwm.initializeSingle(7, module1, 0xFFFF, 0xFFFF/2, 0x1, countDirectionPwm::down, (uint32_t)ACTZERO::invertPwm, true, (uint32_t)pwmUnitClockDivisor::_64);
     3d8:	2305      	movs	r3, #5
     3da:	9305      	str	r3, [sp, #20]
     3dc:	2301      	movs	r3, #1
     3de:	9304      	str	r3, [sp, #16]
     3e0:	2301      	movs	r3, #1
     3e2:	9303      	str	r3, [sp, #12]
     3e4:	2300      	movs	r3, #0
     3e6:	9302      	str	r3, [sp, #8]
     3e8:	2301      	movs	r3, #1
     3ea:	9301      	str	r3, [sp, #4]
     3ec:	f647 73ff 	movw	r3, #32767	; 0x7fff
     3f0:	9300      	str	r3, [sp, #0]
     3f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
     3f6:	2201      	movs	r2, #1
     3f8:	2107      	movs	r1, #7
     3fa:	4806      	ldr	r0, [pc, #24]	; (414 <Stack_Size+0x14>)
     3fc:	f000 fca4 	bl	d48 <_ZN3Pwm16initializeSingleEm9pwmModulemmm17countDirectionPwmmbm>
    // greenPwm.initializeSingle(pwmGen2, module0, 0xFFFF, 0xFFFF/2, 0xFFFF/2, countDirectionPwm::down, 0x08C, pwmOutput::pwmA, false, 1);
}
     400:	bf00      	nop
     402:	46bd      	mov	sp, r7
     404:	bd80      	pop	{r7, pc}
     406:	bf00      	nop
     408:	2000009c 	.word	0x2000009c
     40c:	200000b4 	.word	0x200000b4
     410:	200000cc 	.word	0x200000cc
     414:	20000114 	.word	0x20000114

00000418 <main>:
 
int main(void)
{
     418:	b580      	push	{r7, lr}
     41a:	af00      	add	r7, sp, #0
    
    Nvic::disableInterrupts();
     41c:	f000 f9bc 	bl	798 <_ZN4Nvic17disableInterruptsEv>

    swtich1.initialize((uint32_t)PF4::GPIO, input, 3);
     420:	2303      	movs	r3, #3
     422:	2200      	movs	r2, #0
     424:	f241 1130 	movw	r1, #4400	; 0x1130
     428:	480b      	ldr	r0, [pc, #44]	; (458 <main+0x40>)
     42a:	f000 fbcb 	bl	bc4 <_ZN4Gpio10initializeEm9directionm>
    swtich2.initialize((uint32_t)PF0::GPIO, input, 3);
     42e:	2303      	movs	r3, #3
     430:	2200      	movs	r2, #0
     432:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
     436:	4809      	ldr	r0, [pc, #36]	; (45c <main+0x44>)
     438:	f000 fbc4 	bl	bc4 <_ZN4Gpio10initializeEm9directionm>

    // myTimer.initializeForInterupt(periodic, shortTimer0, 80000000, down, concatenated, 3);
    // myTimer.enableTimer();

    Nvic::enableInterrupts();
     43c:	f000 f9bb 	bl	7b6 <_ZN4Nvic16enableInterruptsEv>
    
    blueLed.write(set);
     440:	2101      	movs	r1, #1
     442:	4807      	ldr	r0, [pc, #28]	; (460 <main+0x48>)
     444:	f000 fc38 	bl	cb8 <_ZN4Gpio5writeE10setORClear>
    redLed.write(set);
     448:	2101      	movs	r1, #1
     44a:	4806      	ldr	r0, [pc, #24]	; (464 <main+0x4c>)
     44c:	f000 fc34 	bl	cb8 <_ZN4Gpio5writeE10setORClear>
        
    while(1)
    {
        Nvic::wfi();
     450:	f000 f9c0 	bl	7d4 <_ZN4Nvic3wfiEv>
     454:	e7fc      	b.n	450 <main+0x38>
     456:	bf00      	nop
     458:	200000e4 	.word	0x200000e4
     45c:	200000fc 	.word	0x200000fc
     460:	200000b4 	.word	0x200000b4
     464:	200000cc 	.word	0x200000cc

00000468 <_Z41__static_initialization_and_destruction_0ii>:
    }

}
     468:	b580      	push	{r7, lr}
     46a:	b082      	sub	sp, #8
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
     470:	6039      	str	r1, [r7, #0]
     472:	687b      	ldr	r3, [r7, #4]
     474:	2b01      	cmp	r3, #1
     476:	d134      	bne.n	4e2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
     478:	683b      	ldr	r3, [r7, #0]
     47a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     47e:	4293      	cmp	r3, r2
     480:	d12f      	bne.n	4e2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
Gpio greenLed;
     482:	481a      	ldr	r0, [pc, #104]	; (4ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
     484:	f000 fa6a 	bl	95c <_ZN4GpioC1Ev>
     488:	4a19      	ldr	r2, [pc, #100]	; (4f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     48a:	491a      	ldr	r1, [pc, #104]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     48c:	4817      	ldr	r0, [pc, #92]	; (4ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
     48e:	f000 fdf5 	bl	107c <__aeabi_atexit>
Gpio blueLed;
     492:	4819      	ldr	r0, [pc, #100]	; (4f8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
     494:	f000 fa62 	bl	95c <_ZN4GpioC1Ev>
     498:	4a15      	ldr	r2, [pc, #84]	; (4f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     49a:	4916      	ldr	r1, [pc, #88]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     49c:	4816      	ldr	r0, [pc, #88]	; (4f8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
     49e:	f000 fded 	bl	107c <__aeabi_atexit>
Gpio redLed;
     4a2:	4816      	ldr	r0, [pc, #88]	; (4fc <_Z41__static_initialization_and_destruction_0ii+0x94>)
     4a4:	f000 fa5a 	bl	95c <_ZN4GpioC1Ev>
     4a8:	4a11      	ldr	r2, [pc, #68]	; (4f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     4aa:	4912      	ldr	r1, [pc, #72]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     4ac:	4813      	ldr	r0, [pc, #76]	; (4fc <_Z41__static_initialization_and_destruction_0ii+0x94>)
     4ae:	f000 fde5 	bl	107c <__aeabi_atexit>
Gpio swtich1;
     4b2:	4813      	ldr	r0, [pc, #76]	; (500 <_Z41__static_initialization_and_destruction_0ii+0x98>)
     4b4:	f000 fa52 	bl	95c <_ZN4GpioC1Ev>
     4b8:	4a0d      	ldr	r2, [pc, #52]	; (4f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     4ba:	490e      	ldr	r1, [pc, #56]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     4bc:	4810      	ldr	r0, [pc, #64]	; (500 <_Z41__static_initialization_and_destruction_0ii+0x98>)
     4be:	f000 fddd 	bl	107c <__aeabi_atexit>
Gpio swtich2;
     4c2:	4810      	ldr	r0, [pc, #64]	; (504 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
     4c4:	f000 fa4a 	bl	95c <_ZN4GpioC1Ev>
     4c8:	4a09      	ldr	r2, [pc, #36]	; (4f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     4ca:	490a      	ldr	r1, [pc, #40]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     4cc:	480d      	ldr	r0, [pc, #52]	; (504 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
     4ce:	f000 fdd5 	bl	107c <__aeabi_atexit>
Pwm greenPwm;
     4d2:	480d      	ldr	r0, [pc, #52]	; (508 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
     4d4:	f000 fc22 	bl	d1c <_ZN3PwmC1Ev>
     4d8:	4a05      	ldr	r2, [pc, #20]	; (4f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     4da:	490c      	ldr	r1, [pc, #48]	; (50c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
     4dc:	480a      	ldr	r0, [pc, #40]	; (508 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
     4de:	f000 fdcd 	bl	107c <__aeabi_atexit>
}
     4e2:	bf00      	nop
     4e4:	3708      	adds	r7, #8
     4e6:	46bd      	mov	sp, r7
     4e8:	bd80      	pop	{r7, pc}
     4ea:	bf00      	nop
     4ec:	2000009c 	.word	0x2000009c
     4f0:	20000000 	.word	0x20000000
     4f4:	0000097b 	.word	0x0000097b
     4f8:	200000b4 	.word	0x200000b4
     4fc:	200000cc 	.word	0x200000cc
     500:	200000e4 	.word	0x200000e4
     504:	200000fc 	.word	0x200000fc
     508:	20000114 	.word	0x20000114
     50c:	00000d33 	.word	0x00000d33

00000510 <_GLOBAL__sub_I_greenLed>:
     510:	b580      	push	{r7, lr}
     512:	af00      	add	r7, sp, #0
     514:	f64f 71ff 	movw	r1, #65535	; 0xffff
     518:	2001      	movs	r0, #1
     51a:	f7ff ffa5 	bl	468 <_Z41__static_initialization_and_destruction_0ii>
     51e:	bd80      	pop	{r7, pc}

00000520 <_ZN8RegisterC1Ev>:
#include "register.h"

/**
 * @brief empty constructor placeholder
 */
Register::Register()
     520:	b480      	push	{r7}
     522:	b083      	sub	sp, #12
     524:	af00      	add	r7, sp, #0
     526:	6078      	str	r0, [r7, #4]
{
    
}
     528:	687b      	ldr	r3, [r7, #4]
     52a:	4618      	mov	r0, r3
     52c:	370c      	adds	r7, #12
     52e:	46bd      	mov	sp, r7
     530:	f85d 7b04 	ldr.w	r7, [sp], #4
     534:	4770      	bx	lr

00000536 <_ZN8RegisterD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Register::~Register()
     536:	b480      	push	{r7}
     538:	b083      	sub	sp, #12
     53a:	af00      	add	r7, sp, #0
     53c:	6078      	str	r0, [r7, #4]
{

}
     53e:	687b      	ldr	r3, [r7, #4]
     540:	4618      	mov	r0, r3
     542:	370c      	adds	r7, #12
     544:	46bd      	mov	sp, r7
     546:	f85d 7b04 	ldr.w	r7, [sp], #4
     54a:	4770      	bx	lr

0000054c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>:
 * @param permission of the bitfield, read-only, write-only, etc...
 * 
 * @return retrieved information in the bitfield
 */
uint32_t Register::getRegisterBitFieldStatus(volatile uint32_t* address, uint32_t bit, uint32_t bitWidth, bitFieldPermission permission)
{
     54c:	b480      	push	{r7}
     54e:	b087      	sub	sp, #28
     550:	af00      	add	r7, sp, #0
     552:	60f8      	str	r0, [r7, #12]
     554:	60b9      	str	r1, [r7, #8]
     556:	607a      	str	r2, [r7, #4]
     558:	70fb      	strb	r3, [r7, #3]
    if((permission == RW) || (permission == RO) || (permission == RW1C))
     55a:	78fb      	ldrb	r3, [r7, #3]
     55c:	2b00      	cmp	r3, #0
     55e:	d005      	beq.n	56c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x20>
     560:	78fb      	ldrb	r3, [r7, #3]
     562:	2b01      	cmp	r3, #1
     564:	d002      	beq.n	56c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x20>
     566:	78fb      	ldrb	r3, [r7, #3]
     568:	2b03      	cmp	r3, #3
     56a:	d111      	bne.n	590 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x44>
    {
        uint32_t select = ((((0xFFFFFFFF >> (32 - bitWidth)))) << bit);
     56c:	687b      	ldr	r3, [r7, #4]
     56e:	f1c3 0320 	rsb	r3, r3, #32
     572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     576:	40da      	lsrs	r2, r3
     578:	68bb      	ldr	r3, [r7, #8]
     57a:	fa02 f303 	lsl.w	r3, r2, r3
     57e:	617b      	str	r3, [r7, #20]
        return(((*address) & select) >> bit);
     580:	68fb      	ldr	r3, [r7, #12]
     582:	681a      	ldr	r2, [r3, #0]
     584:	697b      	ldr	r3, [r7, #20]
     586:	401a      	ands	r2, r3
     588:	68bb      	ldr	r3, [r7, #8]
     58a:	fa22 f303 	lsr.w	r3, r2, r3
     58e:	e001      	b.n	594 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x48>
    }

    else
    {
        return(UINT32_MAX);
     590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
     594:	4618      	mov	r0, r3
     596:	371c      	adds	r7, #28
     598:	46bd      	mov	sp, r7
     59a:	f85d 7b04 	ldr.w	r7, [sp], #4
     59e:	4770      	bx	lr

000005a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>:
 * @param bit to be set or the first bit of the bitfield to be set
 * @param width of the bitfield
 * @param permission of the bitfield, read-only, write-only, etc...
 */
void Register::setRegisterBitFieldStatus(volatile uint32_t* address, uint32_t value, uint32_t bit, uint32_t bitWidth, bitFieldPermission permission)
{
     5a0:	b480      	push	{r7}
     5a2:	b087      	sub	sp, #28
     5a4:	af00      	add	r7, sp, #0
     5a6:	60f8      	str	r0, [r7, #12]
     5a8:	60b9      	str	r1, [r7, #8]
     5aa:	607a      	str	r2, [r7, #4]
     5ac:	603b      	str	r3, [r7, #0]
    if((permission == RW1C) && (value != 1))
     5ae:	f897 3020 	ldrb.w	r3, [r7, #32]
     5b2:	2b03      	cmp	r3, #3
     5b4:	d102      	bne.n	5bc <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x1c>
     5b6:	68bb      	ldr	r3, [r7, #8]
     5b8:	2b01      	cmp	r3, #1
     5ba:	d12f      	bne.n	61c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x7c>
    {
        return;
    }
    
    else if((permission == RW) || (permission == WO) || (permission == RW1C))
     5bc:	f897 3020 	ldrb.w	r3, [r7, #32]
     5c0:	2b00      	cmp	r3, #0
     5c2:	d007      	beq.n	5d4 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x34>
     5c4:	f897 3020 	ldrb.w	r3, [r7, #32]
     5c8:	2b02      	cmp	r3, #2
     5ca:	d003      	beq.n	5d4 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x34>
     5cc:	f897 3020 	ldrb.w	r3, [r7, #32]
     5d0:	2b03      	cmp	r3, #3
     5d2:	d125      	bne.n	620 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x80>
    {
        uint32_t maxValue = (0xFFFFFFFF >> (32 - bitWidth));
     5d4:	683b      	ldr	r3, [r7, #0]
     5d6:	f1c3 0320 	rsb	r3, r3, #32
     5da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     5de:	fa22 f303 	lsr.w	r3, r2, r3
     5e2:	617b      	str	r3, [r7, #20]

        if((value <= maxValue))
     5e4:	68ba      	ldr	r2, [r7, #8]
     5e6:	697b      	ldr	r3, [r7, #20]
     5e8:	429a      	cmp	r2, r3
     5ea:	d81b      	bhi.n	624 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x84>
        {
            uint32_t clear = (~(maxValue << bit));
     5ec:	697a      	ldr	r2, [r7, #20]
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	fa02 f303 	lsl.w	r3, r2, r3
     5f4:	43db      	mvns	r3, r3
     5f6:	613b      	str	r3, [r7, #16]
            value = value << bit;
     5f8:	68ba      	ldr	r2, [r7, #8]
     5fa:	687b      	ldr	r3, [r7, #4]
     5fc:	fa02 f303 	lsl.w	r3, r2, r3
     600:	60bb      	str	r3, [r7, #8]
    
            (*address) &= clear;
     602:	68fb      	ldr	r3, [r7, #12]
     604:	681a      	ldr	r2, [r3, #0]
     606:	693b      	ldr	r3, [r7, #16]
     608:	401a      	ands	r2, r3
     60a:	68fb      	ldr	r3, [r7, #12]
     60c:	601a      	str	r2, [r3, #0]
            (*address) |= value;
     60e:	68fb      	ldr	r3, [r7, #12]
     610:	681a      	ldr	r2, [r3, #0]
     612:	68bb      	ldr	r3, [r7, #8]
     614:	431a      	orrs	r2, r3
     616:	68fb      	ldr	r3, [r7, #12]
     618:	601a      	str	r2, [r3, #0]
        }

        else
        {
            return;
        }
     61a:	e004      	b.n	626 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
        return;
     61c:	bf00      	nop
     61e:	e002      	b.n	626 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
        
    }

    else
    {
        return;
     620:	bf00      	nop
     622:	e000      	b.n	626 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
            return;
     624:	bf00      	nop
    }
}
     626:	371c      	adds	r7, #28
     628:	46bd      	mov	sp, r7
     62a:	f85d 7b04 	ldr.w	r7, [sp], #4
     62e:	4770      	bx	lr

00000630 <_Znwj>:


void* operator new(size_t size) noexcept 
{ 
     630:	b580      	push	{r7, lr}
     632:	b082      	sub	sp, #8
     634:	af00      	add	r7, sp, #0
     636:	6078      	str	r0, [r7, #4]
    return malloc(size); 
     638:	6878      	ldr	r0, [r7, #4]
     63a:	f001 fcb5 	bl	1fa8 <malloc>
     63e:	4603      	mov	r3, r0
} 
     640:	4618      	mov	r0, r3
     642:	3708      	adds	r7, #8
     644:	46bd      	mov	sp, r7
     646:	bd80      	pop	{r7, pc}

00000648 <_ZdlPv>:

void operator delete(void *p) noexcept 
{ 
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
    free(p); 
     650:	6878      	ldr	r0, [r7, #4]
     652:	f001 fcb1 	bl	1fb8 <free>
} 
     656:	bf00      	nop
     658:	3708      	adds	r7, #8
     65a:	46bd      	mov	sp, r7
     65c:	bd80      	pop	{r7, pc}

0000065e <_Znaj>:

void* operator new[](size_t size) noexcept 
{ 
     65e:	b580      	push	{r7, lr}
     660:	b082      	sub	sp, #8
     662:	af00      	add	r7, sp, #0
     664:	6078      	str	r0, [r7, #4]
    return operator new(size); // Same as regular new
     666:	6878      	ldr	r0, [r7, #4]
     668:	f7ff ffe2 	bl	630 <_Znwj>
     66c:	4603      	mov	r3, r0
} 
     66e:	4618      	mov	r0, r3
     670:	3708      	adds	r7, #8
     672:	46bd      	mov	sp, r7
     674:	bd80      	pop	{r7, pc}

00000676 <_ZdaPv>:

void operator delete[](void *p) noexcept 
{ 
     676:	b580      	push	{r7, lr}
     678:	b082      	sub	sp, #8
     67a:	af00      	add	r7, sp, #0
     67c:	6078      	str	r0, [r7, #4]
    operator delete(p); // Same as regular delete
     67e:	6878      	ldr	r0, [r7, #4]
     680:	f7ff ffe2 	bl	648 <_ZdlPv>
} 
     684:	bf00      	nop
     686:	3708      	adds	r7, #8
     688:	46bd      	mov	sp, r7
     68a:	bd80      	pop	{r7, pc}

0000068c <_ZnwjSt9nothrow_t>:

void* operator new(size_t size, std::nothrow_t) noexcept 
{ 
     68c:	b580      	push	{r7, lr}
     68e:	b082      	sub	sp, #8
     690:	af00      	add	r7, sp, #0
     692:	6078      	str	r0, [r7, #4]
     694:	7039      	strb	r1, [r7, #0]
    return operator new(size); // Same as regular new 
     696:	6878      	ldr	r0, [r7, #4]
     698:	f7ff ffca 	bl	630 <_Znwj>
     69c:	4603      	mov	r3, r0
} 
     69e:	4618      	mov	r0, r3
     6a0:	3708      	adds	r7, #8
     6a2:	46bd      	mov	sp, r7
     6a4:	bd80      	pop	{r7, pc}

000006a6 <_ZdlPvSt9nothrow_t>:

void operator delete(void *p,  std::nothrow_t) noexcept 
{ 
     6a6:	b580      	push	{r7, lr}
     6a8:	b082      	sub	sp, #8
     6aa:	af00      	add	r7, sp, #0
     6ac:	6078      	str	r0, [r7, #4]
     6ae:	7039      	strb	r1, [r7, #0]
    operator delete(p); // Same as regular delete
     6b0:	6878      	ldr	r0, [r7, #4]
     6b2:	f7ff ffc9 	bl	648 <_ZdlPv>
} 
     6b6:	bf00      	nop
     6b8:	3708      	adds	r7, #8
     6ba:	46bd      	mov	sp, r7
     6bc:	bd80      	pop	{r7, pc}

000006be <_ZnajSt9nothrow_t>:

void* operator new[](size_t size, std::nothrow_t) noexcept 
{ 
     6be:	b580      	push	{r7, lr}
     6c0:	b082      	sub	sp, #8
     6c2:	af00      	add	r7, sp, #0
     6c4:	6078      	str	r0, [r7, #4]
     6c6:	7039      	strb	r1, [r7, #0]
    return operator new(size); // Same as regular new
     6c8:	6878      	ldr	r0, [r7, #4]
     6ca:	f7ff ffb1 	bl	630 <_Znwj>
     6ce:	4603      	mov	r3, r0
} 
     6d0:	4618      	mov	r0, r3
     6d2:	3708      	adds	r7, #8
     6d4:	46bd      	mov	sp, r7
     6d6:	bd80      	pop	{r7, pc}

000006d8 <_ZdaPvSt9nothrow_t>:

void operator delete[](void *p,  std::nothrow_t) noexcept 
{ 
     6d8:	b580      	push	{r7, lr}
     6da:	b082      	sub	sp, #8
     6dc:	af00      	add	r7, sp, #0
     6de:	6078      	str	r0, [r7, #4]
     6e0:	7039      	strb	r1, [r7, #0]
    operator delete(p); // Same as regular delete
     6e2:	6878      	ldr	r0, [r7, #4]
     6e4:	f7ff ffb0 	bl	648 <_ZdlPv>
}
     6e8:	bf00      	nop
     6ea:	3708      	adds	r7, #8
     6ec:	46bd      	mov	sp, r7
     6ee:	bd80      	pop	{r7, pc}

000006f0 <_ZN4NvicC1Ev>:


/**
 * @brief empty constructor placeholder
 */
Nvic::Nvic()
     6f0:	b480      	push	{r7}
     6f2:	b083      	sub	sp, #12
     6f4:	af00      	add	r7, sp, #0
     6f6:	6078      	str	r0, [r7, #4]
{

}
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	4618      	mov	r0, r3
     6fc:	370c      	adds	r7, #12
     6fe:	46bd      	mov	sp, r7
     700:	f85d 7b04 	ldr.w	r7, [sp], #4
     704:	4770      	bx	lr

00000706 <_ZN4NvicD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Nvic::~Nvic()
     706:	b480      	push	{r7}
     708:	b083      	sub	sp, #12
     70a:	af00      	add	r7, sp, #0
     70c:	6078      	str	r0, [r7, #4]
{

}
     70e:	687b      	ldr	r3, [r7, #4]
     710:	4618      	mov	r0, r3
     712:	370c      	adds	r7, #12
     714:	46bd      	mov	sp, r7
     716:	f85d 7b04 	ldr.w	r7, [sp], #4
     71a:	4770      	bx	lr

0000071c <_ZN4Nvic17activateInterruptE9interruptm>:
 * @param myInterrupt coresponds to the interrupt number of the interrupt that 
 *        you want to activate.
 * @param priority of the interrput that you want to activate
 */
void Nvic::activateInterrupt(interrupt myInterrupt, uint32_t priority)
{
     71c:	b580      	push	{r7, lr}
     71e:	b084      	sub	sp, #16
     720:	af02      	add	r7, sp, #8
     722:	4603      	mov	r3, r0
     724:	6039      	str	r1, [r7, #0]
     726:	71fb      	strb	r3, [r7, #7]
    
    if((myInterrupt < 139) && (priority < 8))
     728:	79fb      	ldrb	r3, [r7, #7]
     72a:	2b8a      	cmp	r3, #138	; 0x8a
     72c:	d82b      	bhi.n	786 <_ZN4Nvic17activateInterruptE9interruptm+0x6a>
     72e:	683b      	ldr	r3, [r7, #0]
     730:	2b07      	cmp	r3, #7
     732:	d828      	bhi.n	786 <_ZN4Nvic17activateInterruptE9interruptm+0x6a>
    {   
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(corePeripheralBase + PRIn_OFFSET[myInterrupt/4])), priority, ((myInterrupt % nvicRegisterOffset) * 8) + 5, 3, RW);
     734:	79fb      	ldrb	r3, [r7, #7]
     736:	089b      	lsrs	r3, r3, #2
     738:	b2db      	uxtb	r3, r3
     73a:	461a      	mov	r2, r3
     73c:	4b14      	ldr	r3, [pc, #80]	; (790 <_ZN4Nvic17activateInterruptE9interruptm+0x74>)
     73e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     742:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
     746:	4618      	mov	r0, r3
     748:	79fb      	ldrb	r3, [r7, #7]
     74a:	f003 0303 	and.w	r3, r3, #3
     74e:	00db      	lsls	r3, r3, #3
     750:	1d5a      	adds	r2, r3, #5
     752:	2300      	movs	r3, #0
     754:	9300      	str	r3, [sp, #0]
     756:	2303      	movs	r3, #3
     758:	6839      	ldr	r1, [r7, #0]
     75a:	f7ff ff21 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(corePeripheralBase + ENn_OFFSET[myInterrupt/32])), (uint32_t)set, (uint32_t)(myInterrupt % 32), 1, RW);
     75e:	79fb      	ldrb	r3, [r7, #7]
     760:	095b      	lsrs	r3, r3, #5
     762:	b2db      	uxtb	r3, r3
     764:	461a      	mov	r2, r3
     766:	4b0b      	ldr	r3, [pc, #44]	; (794 <_ZN4Nvic17activateInterruptE9interruptm+0x78>)
     768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     76c:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
     770:	4618      	mov	r0, r3
     772:	79fb      	ldrb	r3, [r7, #7]
     774:	f003 021f 	and.w	r2, r3, #31
     778:	2300      	movs	r3, #0
     77a:	9300      	str	r3, [sp, #0]
     77c:	2301      	movs	r3, #1
     77e:	2101      	movs	r1, #1
     780:	f7ff ff0e 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
     784:	e000      	b.n	788 <_ZN4Nvic17activateInterruptE9interruptm+0x6c>

    }
    
    else
    {
        return;
     786:	bf00      	nop
    }
}
     788:	3708      	adds	r7, #8
     78a:	46bd      	mov	sp, r7
     78c:	bd80      	pop	{r7, pc}
     78e:	bf00      	nop
     790:	00002c00 	.word	0x00002c00
     794:	00002b9c 	.word	0x00002b9c

00000798 <_ZN4Nvic17disableInterruptsEv>:
 *         value to void.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
uint32_t Nvic::disableInterrupts(void)
{
     798:	b480      	push	{r7}
     79a:	b083      	sub	sp, #12
     79c:	af00      	add	r7, sp, #0

        "mrs     r0, PRIMASK\n"
        "cpsid   i\n"
        "bx      lr\n"
        : "=r" (ui32Ret)
    );
     79e:	f3ef 8010 	mrs	r0, PRIMASK
     7a2:	b672      	cpsid	i
     7a4:	4770      	bx	lr
     7a6:	607b      	str	r3, [r7, #4]

    return(ui32Ret);
     7a8:	687b      	ldr	r3, [r7, #4]
}
     7aa:	4618      	mov	r0, r3
     7ac:	370c      	adds	r7, #12
     7ae:	46bd      	mov	sp, r7
     7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     7b4:	4770      	bx	lr

000007b6 <_ZN4Nvic16enableInterruptsEv>:
 *         value to void.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
uint32_t Nvic::enableInterrupts(void)
{
     7b6:	b480      	push	{r7}
     7b8:	b083      	sub	sp, #12
     7ba:	af00      	add	r7, sp, #0

        "mrs     r0, PRIMASK\n"
        "cpsie   i\n"
        "bx      lr\n"
        : "=r" (ui32Ret)
    );
     7bc:	f3ef 8010 	mrs	r0, PRIMASK
     7c0:	b662      	cpsie	i
     7c2:	4770      	bx	lr
     7c4:	607b      	str	r3, [r7, #4]

    return(ui32Ret);
     7c6:	687b      	ldr	r3, [r7, #4]
}
     7c8:	4618      	mov	r0, r3
     7ca:	370c      	adds	r7, #12
     7cc:	46bd      	mov	sp, r7
     7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
     7d2:	4770      	bx	lr

000007d4 <_ZN4Nvic3wfiEv>:
 *        module and waits for another interrupt.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
void Nvic::wfi(void)
{
     7d4:	b480      	push	{r7}
     7d6:	af00      	add	r7, sp, #0
    //
    asm volatile(

        "wfi     \n"
        "bx    lr\n"
    );
     7d8:	bf30      	wfi
     7da:	4770      	bx	lr
    
}
     7dc:	bf00      	nop
     7de:	46bd      	mov	sp, r7
     7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     7e4:	4770      	bx	lr
     7e6:	bf00      	nop

000007e8 <_ZN13SystemControlC1Ev>:
#include "systemControl.h"

/**
 * @brief empty constructor placeholder
 */
SystemControl::SystemControl()
     7e8:	b480      	push	{r7}
     7ea:	b083      	sub	sp, #12
     7ec:	af00      	add	r7, sp, #0
     7ee:	6078      	str	r0, [r7, #4]
{
    
}
     7f0:	687b      	ldr	r3, [r7, #4]
     7f2:	4618      	mov	r0, r3
     7f4:	370c      	adds	r7, #12
     7f6:	46bd      	mov	sp, r7
     7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7fc:	4770      	bx	lr

000007fe <_ZN13SystemControlD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
SystemControl::~SystemControl()
     7fe:	b480      	push	{r7}
     800:	b083      	sub	sp, #12
     802:	af00      	add	r7, sp, #0
     804:	6078      	str	r0, [r7, #4]
{
	
}
     806:	687b      	ldr	r3, [r7, #4]
     808:	4618      	mov	r0, r3
     80a:	370c      	adds	r7, #12
     80c:	46bd      	mov	sp, r7
     80e:	f85d 7b04 	ldr.w	r7, [sp], #4
     812:	4770      	bx	lr

00000814 <_ZN13SystemControl16initializeGPIOHBEv>:

/**
 * @brief Initializes the system to use GPIO AHB for use instead of the APB
 */
void SystemControl::initializeGPIOHB(void)
{
     814:	b580      	push	{r7, lr}
     816:	b082      	sub	sp, #8
     818:	af02      	add	r7, sp, #8

	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 0, 1, RW);
     81a:	2300      	movs	r3, #0
     81c:	9300      	str	r3, [sp, #0]
     81e:	2301      	movs	r3, #1
     820:	2200      	movs	r2, #0
     822:	2101      	movs	r1, #1
     824:	4816      	ldr	r0, [pc, #88]	; (880 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     826:	f7ff febb 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 1, 1, RW);
     82a:	2300      	movs	r3, #0
     82c:	9300      	str	r3, [sp, #0]
     82e:	2301      	movs	r3, #1
     830:	2201      	movs	r2, #1
     832:	2101      	movs	r1, #1
     834:	4812      	ldr	r0, [pc, #72]	; (880 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     836:	f7ff feb3 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 2, 1, RW);
     83a:	2300      	movs	r3, #0
     83c:	9300      	str	r3, [sp, #0]
     83e:	2301      	movs	r3, #1
     840:	2202      	movs	r2, #2
     842:	2101      	movs	r1, #1
     844:	480e      	ldr	r0, [pc, #56]	; (880 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     846:	f7ff feab 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 3, 1, RW);
     84a:	2300      	movs	r3, #0
     84c:	9300      	str	r3, [sp, #0]
     84e:	2301      	movs	r3, #1
     850:	2203      	movs	r2, #3
     852:	2101      	movs	r1, #1
     854:	480a      	ldr	r0, [pc, #40]	; (880 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     856:	f7ff fea3 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 4, 1, RW);
     85a:	2300      	movs	r3, #0
     85c:	9300      	str	r3, [sp, #0]
     85e:	2301      	movs	r3, #1
     860:	2204      	movs	r2, #4
     862:	2101      	movs	r1, #1
     864:	4806      	ldr	r0, [pc, #24]	; (880 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     866:	f7ff fe9b 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 5, 1, RW);
     86a:	2300      	movs	r3, #0
     86c:	9300      	str	r3, [sp, #0]
     86e:	2301      	movs	r3, #1
     870:	2205      	movs	r2, #5
     872:	2101      	movs	r1, #1
     874:	4802      	ldr	r0, [pc, #8]	; (880 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     876:	f7ff fe93 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     87a:	bf00      	nop
     87c:	46bd      	mov	sp, r7
     87e:	bd80      	pop	{r7, pc}
     880:	400fe06c 	.word	0x400fe06c

00000884 <_ZN13SystemControl15initializeClockE7SYSDIV2>:
 * @brief Initializes the PLL for system clock use
 *
 * @param frequency of the new system clock.
 */ 
void SystemControl::initializeClock(SYSDIV2 frequency)
{
     884:	b580      	push	{r7, lr}
     886:	b084      	sub	sp, #16
     888:	af02      	add	r7, sp, #8
     88a:	4603      	mov	r3, r0
     88c:	71fb      	strb	r3, [r7, #7]
	
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), set, 31, 1, RW); //0. Use RCC2.
     88e:	2300      	movs	r3, #0
     890:	9300      	str	r3, [sp, #0]
     892:	2301      	movs	r3, #1
     894:	221f      	movs	r2, #31
     896:	2101      	movs	r1, #1
     898:	482d      	ldr	r0, [pc, #180]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     89a:	f7ff fe81 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), set, 11, 1, RW); //1. Bypass PLL while initiializing
     89e:	2300      	movs	r3, #0
     8a0:	9300      	str	r3, [sp, #0]
     8a2:	2301      	movs	r3, #1
     8a4:	220b      	movs	r2, #11
     8a6:	2101      	movs	r1, #1
     8a8:	4829      	ldr	r0, [pc, #164]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     8aa:	f7ff fe79 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC_OFFSET)), _16MHz_XTAL, 6, 5, RW); // 2. Select the crystal value and the oscillator source, configure for 16MHz crystal.
     8ae:	2300      	movs	r3, #0
     8b0:	9300      	str	r3, [sp, #0]
     8b2:	2305      	movs	r3, #5
     8b4:	2206      	movs	r2, #6
     8b6:	2115      	movs	r1, #21
     8b8:	4826      	ldr	r0, [pc, #152]	; (954 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xd0>)
     8ba:	f7ff fe71 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), MOSC, 4, 3, RW);  //Confgure for main oscillator source.
     8be:	2300      	movs	r3, #0
     8c0:	9300      	str	r3, [sp, #0]
     8c2:	2303      	movs	r3, #3
     8c4:	2204      	movs	r2, #4
     8c6:	2100      	movs	r1, #0
     8c8:	4821      	ldr	r0, [pc, #132]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     8ca:	f7ff fe69 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), clear, 13, 1, RW); // 3. Activate PLL by clearing PWRDN.
     8ce:	2300      	movs	r3, #0
     8d0:	9300      	str	r3, [sp, #0]
     8d2:	2301      	movs	r3, #1
     8d4:	220d      	movs	r2, #13
     8d6:	2100      	movs	r1, #0
     8d8:	481d      	ldr	r0, [pc, #116]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     8da:	f7ff fe61 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

	/*
	 * Append the SYSDIV2LSB bit to the SYSDIV2 field to create a 7 bit divisor 
	 * using the 400 MHz PLL output.
	 */
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), set, 30, 1, RW);
     8de:	2300      	movs	r3, #0
     8e0:	9300      	str	r3, [sp, #0]
     8e2:	2301      	movs	r3, #1
     8e4:	221e      	movs	r2, #30
     8e6:	2101      	movs	r1, #1
     8e8:	4819      	ldr	r0, [pc, #100]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     8ea:	f7ff fe59 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), ((frequency - 1) & 0x01), 22, 1, RW);
     8ee:	79fb      	ldrb	r3, [r7, #7]
     8f0:	3b01      	subs	r3, #1
     8f2:	f003 0101 	and.w	r1, r3, #1
     8f6:	2300      	movs	r3, #0
     8f8:	9300      	str	r3, [sp, #0]
     8fa:	2301      	movs	r3, #1
     8fc:	2216      	movs	r2, #22
     8fe:	4814      	ldr	r0, [pc, #80]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     900:	f7ff fe4e 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), ((frequency - 1) >> 1), 23, 6, RW);
     904:	79fb      	ldrb	r3, [r7, #7]
     906:	3b01      	subs	r3, #1
     908:	105b      	asrs	r3, r3, #1
     90a:	4619      	mov	r1, r3
     90c:	2300      	movs	r3, #0
     90e:	9300      	str	r3, [sp, #0]
     910:	2306      	movs	r3, #6
     912:	2217      	movs	r2, #23
     914:	480e      	ldr	r0, [pc, #56]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     916:	f7ff fe43 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

	while((Register::getRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RIS_OFFSET)), 6, 1, RO)) == 0)  // 5. Wait for the PLL to lock by polling PLLRIS.
     91a:	2301      	movs	r3, #1
     91c:	2201      	movs	r2, #1
     91e:	2106      	movs	r1, #6
     920:	480d      	ldr	r0, [pc, #52]	; (958 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xd4>)
     922:	f7ff fe13 	bl	54c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     926:	4603      	mov	r3, r0
     928:	2b00      	cmp	r3, #0
     92a:	bf0c      	ite	eq
     92c:	2301      	moveq	r3, #1
     92e:	2300      	movne	r3, #0
     930:	b2db      	uxtb	r3, r3
     932:	2b00      	cmp	r3, #0
     934:	d000      	beq.n	938 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xb4>
     936:	e7f0      	b.n	91a <_ZN13SystemControl15initializeClockE7SYSDIV2+0x96>
	{

	}
	
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), clear, 11, 1, RW); // 6. Enable use of the PLL by clearing BYPASS.
     938:	2300      	movs	r3, #0
     93a:	9300      	str	r3, [sp, #0]
     93c:	2301      	movs	r3, #1
     93e:	220b      	movs	r2, #11
     940:	2100      	movs	r1, #0
     942:	4803      	ldr	r0, [pc, #12]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     944:	f7ff fe2c 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     948:	bf00      	nop
     94a:	3708      	adds	r7, #8
     94c:	46bd      	mov	sp, r7
     94e:	bd80      	pop	{r7, pc}
     950:	400fe070 	.word	0x400fe070
     954:	400fe060 	.word	0x400fe060
     958:	400fe050 	.word	0x400fe050

0000095c <_ZN4GpioC1Ev>:
#include "gpio.h"

/**
 * @brief empty constructor placeholder
 */
Gpio::Gpio()
     95c:	b480      	push	{r7}
     95e:	b083      	sub	sp, #12
     960:	af00      	add	r7, sp, #0
     962:	6078      	str	r0, [r7, #4]
     964:	687b      	ldr	r3, [r7, #4]
     966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     96a:	60da      	str	r2, [r3, #12]
{

}
     96c:	687b      	ldr	r3, [r7, #4]
     96e:	4618      	mov	r0, r3
     970:	370c      	adds	r7, #12
     972:	46bd      	mov	sp, r7
     974:	f85d 7b04 	ldr.w	r7, [sp], #4
     978:	4770      	bx	lr

0000097a <_ZN4GpioD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Gpio::~Gpio()
     97a:	b480      	push	{r7}
     97c:	b083      	sub	sp, #12
     97e:	af00      	add	r7, sp, #0
     980:	6078      	str	r0, [r7, #4]
{   

}
     982:	687b      	ldr	r3, [r7, #4]
     984:	4618      	mov	r0, r3
     986:	370c      	adds	r7, #12
     988:	46bd      	mov	sp, r7
     98a:	f85d 7b04 	ldr.w	r7, [sp], #4
     98e:	4770      	bx	lr

00000990 <_ZN4Gpio10initializeEm9direction>:
 * @brief Simple gpio initializer constructor.
 * @param gpio pin to be initialized.
 * @param dir of the gpio, to be an output or input.
 */
void Gpio::initialize(uint32_t gpio, direction dir)
{  
     990:	b580      	push	{r7, lr}
     992:	b086      	sub	sp, #24
     994:	af02      	add	r7, sp, #8
     996:	60f8      	str	r0, [r7, #12]
     998:	60b9      	str	r1, [r7, #8]
     99a:	4613      	mov	r3, r2
     99c:	71fb      	strb	r3, [r7, #7]
    alternateFunction = gpio%100; //get encoding for alternate function
     99e:	68ba      	ldr	r2, [r7, #8]
     9a0:	4b84      	ldr	r3, [pc, #528]	; (bb4 <_ZN4Gpio10initializeEm9direction+0x224>)
     9a2:	fba3 1302 	umull	r1, r3, r3, r2
     9a6:	095b      	lsrs	r3, r3, #5
     9a8:	2164      	movs	r1, #100	; 0x64
     9aa:	fb01 f303 	mul.w	r3, r1, r3
     9ae:	1ad3      	subs	r3, r2, r3
     9b0:	461a      	mov	r2, r3
     9b2:	68fb      	ldr	r3, [r7, #12]
     9b4:	60da      	str	r2, [r3, #12]
    gpio = gpio/100; //get rid of gpio encoding
     9b6:	68bb      	ldr	r3, [r7, #8]
     9b8:	4a7e      	ldr	r2, [pc, #504]	; (bb4 <_ZN4Gpio10initializeEm9direction+0x224>)
     9ba:	fba2 2303 	umull	r2, r3, r2, r3
     9be:	095b      	lsrs	r3, r3, #5
     9c0:	60bb      	str	r3, [r7, #8]

    gpioPort = (gpio/8);
     9c2:	68bb      	ldr	r3, [r7, #8]
     9c4:	08da      	lsrs	r2, r3, #3
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	615a      	str	r2, [r3, #20]
    (*this).gpio = (gpio%8);
     9ca:	68bb      	ldr	r3, [r7, #8]
     9cc:	f003 0207 	and.w	r2, r3, #7
     9d0:	68fb      	ldr	r3, [r7, #12]
     9d2:	601a      	str	r2, [r3, #0]
    (*this).dir = dir;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	79fa      	ldrb	r2, [r7, #7]
     9d8:	711a      	strb	r2, [r3, #4]
    baseAddress = GPIO_Port_AHB_BASE + (gpioPort) * 0x1000;
     9da:	68fb      	ldr	r3, [r7, #12]
     9dc:	695b      	ldr	r3, [r3, #20]
     9de:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     9e2:	3358      	adds	r3, #88	; 0x58
     9e4:	031a      	lsls	r2, r3, #12
     9e6:	68fb      	ldr	r3, [r7, #12]
     9e8:	611a      	str	r2, [r3, #16]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCGPIO_OFFSET)), set, (uint32_t)(gpioPort), 1, RW);
     9ea:	68fb      	ldr	r3, [r7, #12]
     9ec:	695a      	ldr	r2, [r3, #20]
     9ee:	2300      	movs	r3, #0
     9f0:	9300      	str	r3, [sp, #0]
     9f2:	2301      	movs	r3, #1
     9f4:	2101      	movs	r1, #1
     9f6:	4870      	ldr	r0, [pc, #448]	; (bb8 <_ZN4Gpio10initializeEm9direction+0x228>)
     9f8:	f7ff fdd2 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + PRGPIO_OFFSET)), (uint32_t)(gpioPort), 1, RO) == 0)
     9fc:	68fb      	ldr	r3, [r7, #12]
     9fe:	6959      	ldr	r1, [r3, #20]
     a00:	2301      	movs	r3, #1
     a02:	2201      	movs	r2, #1
     a04:	486d      	ldr	r0, [pc, #436]	; (bbc <_ZN4Gpio10initializeEm9direction+0x22c>)
     a06:	f7ff fda1 	bl	54c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     a0a:	4603      	mov	r3, r0
     a0c:	2b00      	cmp	r3, #0
     a0e:	bf0c      	ite	eq
     a10:	2301      	moveq	r3, #1
     a12:	2300      	movne	r3, #0
     a14:	b2db      	uxtb	r3, r3
     a16:	2b00      	cmp	r3, #0
     a18:	d000      	beq.n	a1c <_ZN4Gpio10initializeEm9direction+0x8c>
     a1a:	e7ef      	b.n	9fc <_ZN4Gpio10initializeEm9direction+0x6c>
    {
        //Ready?
    }

    //Unlock NMI for use.
    if(gpio == ((uint32_t)PF0::GPIO)/100)
     a1c:	68bb      	ldr	r3, [r7, #8]
     a1e:	2b28      	cmp	r3, #40	; 0x28
     a20:	d11c      	bne.n	a5c <_ZN4Gpio10initializeEm9direction+0xcc>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOLOCK_OFFSET)), gpioKey, 0, 32, RW);
     a22:	68fb      	ldr	r3, [r7, #12]
     a24:	691b      	ldr	r3, [r3, #16]
     a26:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
     a2a:	4618      	mov	r0, r3
     a2c:	2300      	movs	r3, #0
     a2e:	9300      	str	r3, [sp, #0]
     a30:	2320      	movs	r3, #32
     a32:	2200      	movs	r2, #0
     a34:	4962      	ldr	r1, [pc, #392]	; (bc0 <_ZN4Gpio10initializeEm9direction+0x230>)
     a36:	f7ff fdb3 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        *(((volatile uint32_t*)(baseAddress + GPIOCR_OFFSET))) |= (0x1 << (*this).gpio);
     a3a:	68fb      	ldr	r3, [r7, #12]
     a3c:	691b      	ldr	r3, [r3, #16]
     a3e:	f203 5324 	addw	r3, r3, #1316	; 0x524
     a42:	681b      	ldr	r3, [r3, #0]
     a44:	68fa      	ldr	r2, [r7, #12]
     a46:	6812      	ldr	r2, [r2, #0]
     a48:	2101      	movs	r1, #1
     a4a:	fa01 f202 	lsl.w	r2, r1, r2
     a4e:	4611      	mov	r1, r2
     a50:	68fa      	ldr	r2, [r7, #12]
     a52:	6912      	ldr	r2, [r2, #16]
     a54:	f202 5224 	addw	r2, r2, #1316	; 0x524
     a58:	430b      	orrs	r3, r1
     a5a:	6013      	str	r3, [r2, #0]
    }

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODIR_OFFSET)), (*this).dir, (*this).gpio, 1, RW);
     a5c:	68fb      	ldr	r3, [r7, #12]
     a5e:	691b      	ldr	r3, [r3, #16]
     a60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     a64:	4618      	mov	r0, r3
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	791b      	ldrb	r3, [r3, #4]
     a6a:	4619      	mov	r1, r3
     a6c:	68fb      	ldr	r3, [r7, #12]
     a6e:	681a      	ldr	r2, [r3, #0]
     a70:	2300      	movs	r3, #0
     a72:	9300      	str	r3, [sp, #0]
     a74:	2301      	movs	r3, #1
     a76:	f7ff fd93 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    
    //If no alternate function encoding
    if(alternateFunction == 0)
     a7a:	68fb      	ldr	r3, [r7, #12]
     a7c:	68db      	ldr	r3, [r3, #12]
     a7e:	2b00      	cmp	r3, #0
     a80:	d138      	bne.n	af4 <_ZN4Gpio10initializeEm9direction+0x164>
    {
        if((*this).dir == input)
     a82:	68fb      	ldr	r3, [r7, #12]
     a84:	791b      	ldrb	r3, [r3, #4]
     a86:	2b00      	cmp	r3, #0
     a88:	d10c      	bne.n	aa4 <_ZN4Gpio10initializeEm9direction+0x114>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOPUR_OFFSET)), set, (*this).gpio, 1, RW);
     a8a:	68fb      	ldr	r3, [r7, #12]
     a8c:	691b      	ldr	r3, [r3, #16]
     a8e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
     a92:	4618      	mov	r0, r3
     a94:	68fb      	ldr	r3, [r7, #12]
     a96:	681a      	ldr	r2, [r3, #0]
     a98:	2300      	movs	r3, #0
     a9a:	9300      	str	r3, [sp, #0]
     a9c:	2301      	movs	r3, #1
     a9e:	2101      	movs	r1, #1
     aa0:	f7ff fd7e 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        }


        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAFSEl_OFFSET)), clear, (*this).gpio, 1, RW);
     aa4:	68fb      	ldr	r3, [r7, #12]
     aa6:	691b      	ldr	r3, [r3, #16]
     aa8:	f503 6384 	add.w	r3, r3, #1056	; 0x420
     aac:	4618      	mov	r0, r3
     aae:	68fb      	ldr	r3, [r7, #12]
     ab0:	681a      	ldr	r2, [r3, #0]
     ab2:	2300      	movs	r3, #0
     ab4:	9300      	str	r3, [sp, #0]
     ab6:	2301      	movs	r3, #1
     ab8:	2100      	movs	r1, #0
     aba:	f7ff fd71 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), set, (*this).gpio, 1, RW);
     abe:	68fb      	ldr	r3, [r7, #12]
     ac0:	691b      	ldr	r3, [r3, #16]
     ac2:	f203 531c 	addw	r3, r3, #1308	; 0x51c
     ac6:	4618      	mov	r0, r3
     ac8:	68fb      	ldr	r3, [r7, #12]
     aca:	681a      	ldr	r2, [r3, #0]
     acc:	2300      	movs	r3, #0
     ace:	9300      	str	r3, [sp, #0]
     ad0:	2301      	movs	r3, #1
     ad2:	2101      	movs	r1, #1
     ad4:	f7ff fd64 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), clear, (*this).gpio, 1, RW);
     ad8:	68fb      	ldr	r3, [r7, #12]
     ada:	691b      	ldr	r3, [r3, #16]
     adc:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
     ae0:	4618      	mov	r0, r3
     ae2:	68fb      	ldr	r3, [r7, #12]
     ae4:	681a      	ldr	r2, [r3, #0]
     ae6:	2300      	movs	r3, #0
     ae8:	9300      	str	r3, [sp, #0]
     aea:	2301      	movs	r3, #1
     aec:	2100      	movs	r1, #0
     aee:	f7ff fd57 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), clear, (*this).gpio, 1, RW);
        }


    }
}
     af2:	e05a      	b.n	baa <_ZN4Gpio10initializeEm9direction+0x21a>
        alternateFunction = alternateFunction - 1; //Get rid of encoding offset
     af4:	68fb      	ldr	r3, [r7, #12]
     af6:	68db      	ldr	r3, [r3, #12]
     af8:	1e5a      	subs	r2, r3, #1
     afa:	68fb      	ldr	r3, [r7, #12]
     afc:	60da      	str	r2, [r3, #12]
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAFSEl_OFFSET)), set, (*this).gpio, 1, RW); //Enable alternate function for GPIO pin
     afe:	68fb      	ldr	r3, [r7, #12]
     b00:	691b      	ldr	r3, [r3, #16]
     b02:	f503 6384 	add.w	r3, r3, #1056	; 0x420
     b06:	4618      	mov	r0, r3
     b08:	68fb      	ldr	r3, [r7, #12]
     b0a:	681a      	ldr	r2, [r3, #0]
     b0c:	2300      	movs	r3, #0
     b0e:	9300      	str	r3, [sp, #0]
     b10:	2301      	movs	r3, #1
     b12:	2101      	movs	r1, #1
     b14:	f7ff fd44 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        if(alternateFunction == 0)
     b18:	68fb      	ldr	r3, [r7, #12]
     b1a:	68db      	ldr	r3, [r3, #12]
     b1c:	2b00      	cmp	r3, #0
     b1e:	d11a      	bne.n	b56 <_ZN4Gpio10initializeEm9direction+0x1c6>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), clear, (*this).gpio, 1, RW);
     b20:	68fb      	ldr	r3, [r7, #12]
     b22:	691b      	ldr	r3, [r3, #16]
     b24:	f203 531c 	addw	r3, r3, #1308	; 0x51c
     b28:	4618      	mov	r0, r3
     b2a:	68fb      	ldr	r3, [r7, #12]
     b2c:	681a      	ldr	r2, [r3, #0]
     b2e:	2300      	movs	r3, #0
     b30:	9300      	str	r3, [sp, #0]
     b32:	2301      	movs	r3, #1
     b34:	2100      	movs	r1, #0
     b36:	f7ff fd33 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), set, (*this).gpio, 1, RW);
     b3a:	68fb      	ldr	r3, [r7, #12]
     b3c:	691b      	ldr	r3, [r3, #16]
     b3e:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
     b42:	4618      	mov	r0, r3
     b44:	68fb      	ldr	r3, [r7, #12]
     b46:	681a      	ldr	r2, [r3, #0]
     b48:	2300      	movs	r3, #0
     b4a:	9300      	str	r3, [sp, #0]
     b4c:	2301      	movs	r3, #1
     b4e:	2101      	movs	r1, #1
     b50:	f7ff fd26 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     b54:	e029      	b.n	baa <_ZN4Gpio10initializeEm9direction+0x21a>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOPCTL_OFFSET)), alternateFunction, ((*this).gpio) * 4, 4, RW);
     b56:	68fb      	ldr	r3, [r7, #12]
     b58:	691b      	ldr	r3, [r3, #16]
     b5a:	f203 532c 	addw	r3, r3, #1324	; 0x52c
     b5e:	4618      	mov	r0, r3
     b60:	68fb      	ldr	r3, [r7, #12]
     b62:	68db      	ldr	r3, [r3, #12]
     b64:	4619      	mov	r1, r3
     b66:	68fb      	ldr	r3, [r7, #12]
     b68:	681b      	ldr	r3, [r3, #0]
     b6a:	009a      	lsls	r2, r3, #2
     b6c:	2300      	movs	r3, #0
     b6e:	9300      	str	r3, [sp, #0]
     b70:	2304      	movs	r3, #4
     b72:	f7ff fd15 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), set, (*this).gpio, 1, RW);
     b76:	68fb      	ldr	r3, [r7, #12]
     b78:	691b      	ldr	r3, [r3, #16]
     b7a:	f203 531c 	addw	r3, r3, #1308	; 0x51c
     b7e:	4618      	mov	r0, r3
     b80:	68fb      	ldr	r3, [r7, #12]
     b82:	681a      	ldr	r2, [r3, #0]
     b84:	2300      	movs	r3, #0
     b86:	9300      	str	r3, [sp, #0]
     b88:	2301      	movs	r3, #1
     b8a:	2101      	movs	r1, #1
     b8c:	f7ff fd08 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), clear, (*this).gpio, 1, RW);
     b90:	68fb      	ldr	r3, [r7, #12]
     b92:	691b      	ldr	r3, [r3, #16]
     b94:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
     b98:	4618      	mov	r0, r3
     b9a:	68fb      	ldr	r3, [r7, #12]
     b9c:	681a      	ldr	r2, [r3, #0]
     b9e:	2300      	movs	r3, #0
     ba0:	9300      	str	r3, [sp, #0]
     ba2:	2301      	movs	r3, #1
     ba4:	2100      	movs	r1, #0
     ba6:	f7ff fcfb 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     baa:	bf00      	nop
     bac:	3710      	adds	r7, #16
     bae:	46bd      	mov	sp, r7
     bb0:	bd80      	pop	{r7, pc}
     bb2:	bf00      	nop
     bb4:	51eb851f 	.word	0x51eb851f
     bb8:	400fe608 	.word	0x400fe608
     bbc:	400fea08 	.word	0x400fea08
     bc0:	4c4f434b 	.word	0x4c4f434b

00000bc4 <_ZN4Gpio10initializeEm9directionm>:
 * @param dir of the gpio, to be an output or input.
 * @param interruptPriority of the gpio, 0 being the highest priority and 7
 *        being the lowest.
 */
void Gpio::initialize(uint32_t gpio, direction dir, uint32_t interruptPriority)
{
     bc4:	b580      	push	{r7, lr}
     bc6:	b086      	sub	sp, #24
     bc8:	af02      	add	r7, sp, #8
     bca:	60f8      	str	r0, [r7, #12]
     bcc:	60b9      	str	r1, [r7, #8]
     bce:	603b      	str	r3, [r7, #0]
     bd0:	4613      	mov	r3, r2
     bd2:	71fb      	strb	r3, [r7, #7]
    (*this).interruptPriority = interruptPriority;
     bd4:	68fb      	ldr	r3, [r7, #12]
     bd6:	683a      	ldr	r2, [r7, #0]
     bd8:	609a      	str	r2, [r3, #8]
    
    initialize(gpio, dir);
     bda:	79fb      	ldrb	r3, [r7, #7]
     bdc:	461a      	mov	r2, r3
     bde:	68b9      	ldr	r1, [r7, #8]
     be0:	68f8      	ldr	r0, [r7, #12]
     be2:	f7ff fed5 	bl	990 <_ZN4Gpio10initializeEm9direction>
    
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIM_OFFSET)), clear, (*this).gpio, 1, RW);
     be6:	68fb      	ldr	r3, [r7, #12]
     be8:	691b      	ldr	r3, [r3, #16]
     bea:	f503 6382 	add.w	r3, r3, #1040	; 0x410
     bee:	4618      	mov	r0, r3
     bf0:	68fb      	ldr	r3, [r7, #12]
     bf2:	681a      	ldr	r2, [r3, #0]
     bf4:	2300      	movs	r3, #0
     bf6:	9300      	str	r3, [sp, #0]
     bf8:	2301      	movs	r3, #1
     bfa:	2100      	movs	r1, #0
     bfc:	f7ff fcd0 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIS_OFFSET)), clear, (*this).gpio, 1, RW);
     c00:	68fb      	ldr	r3, [r7, #12]
     c02:	691b      	ldr	r3, [r3, #16]
     c04:	f203 4304 	addw	r3, r3, #1028	; 0x404
     c08:	4618      	mov	r0, r3
     c0a:	68fb      	ldr	r3, [r7, #12]
     c0c:	681a      	ldr	r2, [r3, #0]
     c0e:	2300      	movs	r3, #0
     c10:	9300      	str	r3, [sp, #0]
     c12:	2301      	movs	r3, #1
     c14:	2100      	movs	r1, #0
     c16:	f7ff fcc3 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIBE_OFFSET)), set, (*this).gpio, 1, RW);
     c1a:	68fb      	ldr	r3, [r7, #12]
     c1c:	691b      	ldr	r3, [r3, #16]
     c1e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
     c22:	4618      	mov	r0, r3
     c24:	68fb      	ldr	r3, [r7, #12]
     c26:	681a      	ldr	r2, [r3, #0]
     c28:	2300      	movs	r3, #0
     c2a:	9300      	str	r3, [sp, #0]
     c2c:	2301      	movs	r3, #1
     c2e:	2101      	movs	r1, #1
     c30:	f7ff fcb6 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOICR_OFFSET)), set, (*this).gpio, 1, RW);
     c34:	68fb      	ldr	r3, [r7, #12]
     c36:	691b      	ldr	r3, [r3, #16]
     c38:	f203 431c 	addw	r3, r3, #1052	; 0x41c
     c3c:	4618      	mov	r0, r3
     c3e:	68fb      	ldr	r3, [r7, #12]
     c40:	681a      	ldr	r2, [r3, #0]
     c42:	2300      	movs	r3, #0
     c44:	9300      	str	r3, [sp, #0]
     c46:	2301      	movs	r3, #1
     c48:	2101      	movs	r1, #1
     c4a:	f7ff fca9 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIM_OFFSET)), set, (*this).gpio, 1, RW);
     c4e:	68fb      	ldr	r3, [r7, #12]
     c50:	691b      	ldr	r3, [r3, #16]
     c52:	f503 6382 	add.w	r3, r3, #1040	; 0x410
     c56:	4618      	mov	r0, r3
     c58:	68fb      	ldr	r3, [r7, #12]
     c5a:	681a      	ldr	r2, [r3, #0]
     c5c:	2300      	movs	r3, #0
     c5e:	9300      	str	r3, [sp, #0]
     c60:	2301      	movs	r3, #1
     c62:	2101      	movs	r1, #1
     c64:	f7ff fc9c 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    /*
    * If gpio is == to Port F (Port number 5) use interrupt number 30 
    * (according to interrupt table), else use interrupt number 0 -> 4 
    * (corresponding to interrupt Port A through Port E)
    */
    Nvic::activateInterrupt((interrupt)((((gpioPort) == 5) ? 30 : (gpioPort))), (*this).interruptPriority);
     c68:	68fb      	ldr	r3, [r7, #12]
     c6a:	695b      	ldr	r3, [r3, #20]
     c6c:	2b05      	cmp	r3, #5
     c6e:	d003      	beq.n	c78 <_ZN4Gpio10initializeEm9directionm+0xb4>
     c70:	68fb      	ldr	r3, [r7, #12]
     c72:	695b      	ldr	r3, [r3, #20]
     c74:	b2da      	uxtb	r2, r3
     c76:	e000      	b.n	c7a <_ZN4Gpio10initializeEm9directionm+0xb6>
     c78:	221e      	movs	r2, #30
     c7a:	68fb      	ldr	r3, [r7, #12]
     c7c:	689b      	ldr	r3, [r3, #8]
     c7e:	4619      	mov	r1, r3
     c80:	4610      	mov	r0, r2
     c82:	f7ff fd4b 	bl	71c <_ZN4Nvic17activateInterruptE9interruptm>
}
     c86:	bf00      	nop
     c88:	3710      	adds	r7, #16
     c8a:	46bd      	mov	sp, r7
     c8c:	bd80      	pop	{r7, pc}

00000c8e <_ZN4Gpio14interruptClearEv>:

/**
 * @brief Clears the interrupt. Generally used in an ISR.
 */
void Gpio::interruptClear()
{
     c8e:	b580      	push	{r7, lr}
     c90:	b084      	sub	sp, #16
     c92:	af02      	add	r7, sp, #8
     c94:	6078      	str	r0, [r7, #4]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOICR_OFFSET)), set, gpio, 1, RW);
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	691b      	ldr	r3, [r3, #16]
     c9a:	f203 431c 	addw	r3, r3, #1052	; 0x41c
     c9e:	4618      	mov	r0, r3
     ca0:	687b      	ldr	r3, [r7, #4]
     ca2:	681a      	ldr	r2, [r3, #0]
     ca4:	2300      	movs	r3, #0
     ca6:	9300      	str	r3, [sp, #0]
     ca8:	2301      	movs	r3, #1
     caa:	2101      	movs	r1, #1
     cac:	f7ff fc78 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     cb0:	bf00      	nop
     cb2:	3708      	adds	r7, #8
     cb4:	46bd      	mov	sp, r7
     cb6:	bd80      	pop	{r7, pc}

00000cb8 <_ZN4Gpio5writeE10setORClear>:
/**
 * @brief Writes to the gpio pin.
 * @param value to write to pin. Accepted values are 1 or 0.
 */
void Gpio::write(setORClear value)
{
     cb8:	b580      	push	{r7, lr}
     cba:	b084      	sub	sp, #16
     cbc:	af02      	add	r7, sp, #8
     cbe:	6078      	str	r0, [r7, #4]
     cc0:	460b      	mov	r3, r1
     cc2:	70fb      	strb	r3, [r7, #3]
    if((value == 0x0) || (value == 0x1))
     cc4:	78fb      	ldrb	r3, [r7, #3]
     cc6:	2b00      	cmp	r3, #0
     cc8:	d002      	beq.n	cd0 <_ZN4Gpio5writeE10setORClear+0x18>
     cca:	78fb      	ldrb	r3, [r7, #3]
     ccc:	2b01      	cmp	r3, #1
     cce:	d10c      	bne.n	cea <_ZN4Gpio5writeE10setORClear+0x32>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODATA_OFFSET)), value, gpio, 1, RW);
     cd0:	687b      	ldr	r3, [r7, #4]
     cd2:	691b      	ldr	r3, [r3, #16]
     cd4:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
     cd8:	4618      	mov	r0, r3
     cda:	78f9      	ldrb	r1, [r7, #3]
     cdc:	687b      	ldr	r3, [r7, #4]
     cde:	681a      	ldr	r2, [r3, #0]
     ce0:	2300      	movs	r3, #0
     ce2:	9300      	str	r3, [sp, #0]
     ce4:	2301      	movs	r3, #1
     ce6:	f7ff fc5b 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    }
}
     cea:	bf00      	nop
     cec:	3708      	adds	r7, #8
     cee:	46bd      	mov	sp, r7
     cf0:	bd80      	pop	{r7, pc}

00000cf2 <_ZN4Gpio4readEv>:
/**
 * @brief Reads from a gpio pin.
 * @return Value of the gpio pin, either a 1 or 0.
 */
uint32_t Gpio::read()
{
     cf2:	b580      	push	{r7, lr}
     cf4:	b082      	sub	sp, #8
     cf6:	af00      	add	r7, sp, #0
     cf8:	6078      	str	r0, [r7, #4]
    return((Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODATA_OFFSET)), gpio, 1, RW)));
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	691b      	ldr	r3, [r3, #16]
     cfe:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
     d02:	4618      	mov	r0, r3
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	6819      	ldr	r1, [r3, #0]
     d08:	2300      	movs	r3, #0
     d0a:	2201      	movs	r2, #1
     d0c:	f7ff fc1e 	bl	54c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     d10:	4603      	mov	r3, r0
     d12:	4618      	mov	r0, r3
     d14:	3708      	adds	r7, #8
     d16:	46bd      	mov	sp, r7
     d18:	bd80      	pop	{r7, pc}
     d1a:	bf00      	nop

00000d1c <_ZN3PwmC1Ev>:
#include "pwm.h"

/**
 * @brief empty constructor placeholder
 */
Pwm::Pwm()
     d1c:	b480      	push	{r7}
     d1e:	b083      	sub	sp, #12
     d20:	af00      	add	r7, sp, #0
     d22:	6078      	str	r0, [r7, #4]
{

}
     d24:	687b      	ldr	r3, [r7, #4]
     d26:	4618      	mov	r0, r3
     d28:	370c      	adds	r7, #12
     d2a:	46bd      	mov	sp, r7
     d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
     d30:	4770      	bx	lr

00000d32 <_ZN3PwmD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Pwm::~Pwm()
     d32:	b480      	push	{r7}
     d34:	b083      	sub	sp, #12
     d36:	af00      	add	r7, sp, #0
     d38:	6078      	str	r0, [r7, #4]
{

}
     d3a:	687b      	ldr	r3, [r7, #4]
     d3c:	4618      	mov	r0, r3
     d3e:	370c      	adds	r7, #12
     d40:	46bd      	mov	sp, r7
     d42:	f85d 7b04 	ldr.w	r7, [sp], #4
     d46:	4770      	bx	lr

00000d48 <_ZN3Pwm16initializeSingleEm9pwmModulemmm17countDirectionPwmmbm>:
 *                     peripheral
 * @param divisor Binary divisor used to pre-divide the system clock. Must be
 *                enabled with the \c enablePwmDiv first
 */
void Pwm::initializeSingle(uint32_t pwmPin, pwmModule module, uint32_t period, uint32_t compA, uint32_t compB, countDirectionPwm countDir, uint32_t genOptions, bool enablePwmDiv, uint32_t divisor)
{
     d48:	b580      	push	{r7, lr}
     d4a:	b088      	sub	sp, #32
     d4c:	af04      	add	r7, sp, #16
     d4e:	60f8      	str	r0, [r7, #12]
     d50:	60b9      	str	r1, [r7, #8]
     d52:	603b      	str	r3, [r7, #0]
     d54:	4613      	mov	r3, r2
     d56:	71fb      	strb	r3, [r7, #7]
    initialize(pwmPin, module, period, countDir, enablePwmDiv, divisor);
     d58:	79fa      	ldrb	r2, [r7, #7]
     d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d5c:	9302      	str	r3, [sp, #8]
     d5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
     d62:	9301      	str	r3, [sp, #4]
     d64:	6a3b      	ldr	r3, [r7, #32]
     d66:	9300      	str	r3, [sp, #0]
     d68:	683b      	ldr	r3, [r7, #0]
     d6a:	68b9      	ldr	r1, [r7, #8]
     d6c:	68f8      	ldr	r0, [r7, #12]
     d6e:	f000 f8d5 	bl	f1c <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm>
    
    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.
    
    //2b. Write the PWMnGENn register. 
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENA_OFFSET + (0x40 * myPwmGen) + ((pwmPin%2) * 4))), genOptions, 0, 11+1, RW);
     d72:	68fb      	ldr	r3, [r7, #12]
     d74:	681a      	ldr	r2, [r3, #0]
     d76:	68fb      	ldr	r3, [r7, #12]
     d78:	685b      	ldr	r3, [r3, #4]
     d7a:	0119      	lsls	r1, r3, #4
     d7c:	68bb      	ldr	r3, [r7, #8]
     d7e:	f003 0301 	and.w	r3, r3, #1
     d82:	440b      	add	r3, r1
     d84:	3318      	adds	r3, #24
     d86:	009b      	lsls	r3, r3, #2
     d88:	4413      	add	r3, r2
     d8a:	4618      	mov	r0, r3
     d8c:	2300      	movs	r3, #0
     d8e:	9300      	str	r3, [sp, #0]
     d90:	230c      	movs	r3, #12
     d92:	2200      	movs	r2, #0
     d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
     d96:	f7ff fc03 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //4. Set timer comparators
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPA_OFFSET + (0x40 * myPwmGen))), compA, 0, 15+1, RW);
     d9a:	68fb      	ldr	r3, [r7, #12]
     d9c:	681a      	ldr	r2, [r3, #0]
     d9e:	68fb      	ldr	r3, [r7, #12]
     da0:	685b      	ldr	r3, [r3, #4]
     da2:	019b      	lsls	r3, r3, #6
     da4:	4413      	add	r3, r2
     da6:	3358      	adds	r3, #88	; 0x58
     da8:	4618      	mov	r0, r3
     daa:	2300      	movs	r3, #0
     dac:	9300      	str	r3, [sp, #0]
     dae:	2310      	movs	r3, #16
     db0:	2200      	movs	r2, #0
     db2:	69b9      	ldr	r1, [r7, #24]
     db4:	f7ff fbf4 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPB_OFFSET + (0x40 * myPwmGen))), compB, 0, 15+1, RW);
     db8:	68fb      	ldr	r3, [r7, #12]
     dba:	681a      	ldr	r2, [r3, #0]
     dbc:	68fb      	ldr	r3, [r7, #12]
     dbe:	685b      	ldr	r3, [r3, #4]
     dc0:	019b      	lsls	r3, r3, #6
     dc2:	4413      	add	r3, r2
     dc4:	335c      	adds	r3, #92	; 0x5c
     dc6:	4618      	mov	r0, r3
     dc8:	2300      	movs	r3, #0
     dca:	9300      	str	r3, [sp, #0]
     dcc:	2310      	movs	r3, #16
     dce:	2200      	movs	r2, #0
     dd0:	69f9      	ldr	r1, [r7, #28]
     dd2:	f7ff fbe5 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //6. Enable PWM
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), set, 0, 1, RW);
     dd6:	68fb      	ldr	r3, [r7, #12]
     dd8:	681a      	ldr	r2, [r3, #0]
     dda:	68fb      	ldr	r3, [r7, #12]
     ddc:	685b      	ldr	r3, [r3, #4]
     dde:	3301      	adds	r3, #1
     de0:	019b      	lsls	r3, r3, #6
     de2:	4413      	add	r3, r2
     de4:	4618      	mov	r0, r3
     de6:	2300      	movs	r3, #0
     de8:	9300      	str	r3, [sp, #0]
     dea:	2301      	movs	r3, #1
     dec:	2200      	movs	r2, #0
     dee:	2101      	movs	r1, #1
     df0:	f7ff fbd6 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //7. Enable PWM output.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + PWMENABLE_OFFSET), set, 0 + ((myPwmGen*2)+(((pwmPin%2) * 4)/4)), 1, RW); //(uint32_t)output >> 2
     df4:	68fb      	ldr	r3, [r7, #12]
     df6:	681b      	ldr	r3, [r3, #0]
     df8:	3308      	adds	r3, #8
     dfa:	4618      	mov	r0, r3
     dfc:	68fb      	ldr	r3, [r7, #12]
     dfe:	685b      	ldr	r3, [r3, #4]
     e00:	005a      	lsls	r2, r3, #1
     e02:	68bb      	ldr	r3, [r7, #8]
     e04:	f003 0301 	and.w	r3, r3, #1
     e08:	441a      	add	r2, r3
     e0a:	2300      	movs	r3, #0
     e0c:	9300      	str	r3, [sp, #0]
     e0e:	2301      	movs	r3, #1
     e10:	2101      	movs	r1, #1
     e12:	f7ff fbc5 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     e16:	bf00      	nop
     e18:	3710      	adds	r7, #16
     e1a:	46bd      	mov	sp, r7
     e1c:	bd80      	pop	{r7, pc}

00000e1e <_ZN3Pwm14initializePairEm9pwmModulemmm17countDirectionPwmmmbm>:
 * @param dutyCycle duty cycle of the PWM in clock ticks. Must be less than the
 *                  period
 */

void Pwm::initializePair(uint32_t pwmPin, pwmModule module, uint32_t period, uint32_t dutyCycleA, uint32_t dutyCycleB, countDirectionPwm countDir, uint32_t genAOptions, uint32_t genBOptions, bool enablePwmDiv, uint32_t divisor)
{
     e1e:	b580      	push	{r7, lr}
     e20:	b088      	sub	sp, #32
     e22:	af04      	add	r7, sp, #16
     e24:	60f8      	str	r0, [r7, #12]
     e26:	60b9      	str	r1, [r7, #8]
     e28:	603b      	str	r3, [r7, #0]
     e2a:	4613      	mov	r3, r2
     e2c:	71fb      	strb	r3, [r7, #7]

    initialize(pwmPin, module, period, countDir, enablePwmDiv, divisor);
     e2e:	79fa      	ldrb	r2, [r7, #7]
     e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e32:	9302      	str	r3, [sp, #8]
     e34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     e38:	9301      	str	r3, [sp, #4]
     e3a:	6a3b      	ldr	r3, [r7, #32]
     e3c:	9300      	str	r3, [sp, #0]
     e3e:	683b      	ldr	r3, [r7, #0]
     e40:	68b9      	ldr	r1, [r7, #8]
     e42:	68f8      	ldr	r0, [r7, #12]
     e44:	f000 f86a 	bl	f1c <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm>
    
    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.
    
    //2b. Write the PWMnGENA register.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENA_OFFSET + (0x40 * myPwmGen))), genAOptions, 0, 11+1, RW);
     e48:	68fb      	ldr	r3, [r7, #12]
     e4a:	681a      	ldr	r2, [r3, #0]
     e4c:	68fb      	ldr	r3, [r7, #12]
     e4e:	685b      	ldr	r3, [r3, #4]
     e50:	019b      	lsls	r3, r3, #6
     e52:	4413      	add	r3, r2
     e54:	3360      	adds	r3, #96	; 0x60
     e56:	4618      	mov	r0, r3
     e58:	2300      	movs	r3, #0
     e5a:	9300      	str	r3, [sp, #0]
     e5c:	230c      	movs	r3, #12
     e5e:	2200      	movs	r2, #0
     e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
     e62:	f7ff fb9d 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //2c. Write the PWMnGENB register.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENB_OFFSET + (0x40 * myPwmGen))), genBOptions, 0, 11+1, RW);
     e66:	68fb      	ldr	r3, [r7, #12]
     e68:	681a      	ldr	r2, [r3, #0]
     e6a:	68fb      	ldr	r3, [r7, #12]
     e6c:	685b      	ldr	r3, [r3, #4]
     e6e:	019b      	lsls	r3, r3, #6
     e70:	4413      	add	r3, r2
     e72:	3364      	adds	r3, #100	; 0x64
     e74:	4618      	mov	r0, r3
     e76:	2300      	movs	r3, #0
     e78:	9300      	str	r3, [sp, #0]
     e7a:	230c      	movs	r3, #12
     e7c:	2200      	movs	r2, #0
     e7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
     e80:	f7ff fb8e 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //4. Set pulse width for pwmA
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPA_OFFSET + (0x40 * myPwmGen))), dutyCycleA, 0, 15+1, RW);
     e84:	68fb      	ldr	r3, [r7, #12]
     e86:	681a      	ldr	r2, [r3, #0]
     e88:	68fb      	ldr	r3, [r7, #12]
     e8a:	685b      	ldr	r3, [r3, #4]
     e8c:	019b      	lsls	r3, r3, #6
     e8e:	4413      	add	r3, r2
     e90:	3358      	adds	r3, #88	; 0x58
     e92:	4618      	mov	r0, r3
     e94:	2300      	movs	r3, #0
     e96:	9300      	str	r3, [sp, #0]
     e98:	2310      	movs	r3, #16
     e9a:	2200      	movs	r2, #0
     e9c:	69b9      	ldr	r1, [r7, #24]
     e9e:	f7ff fb7f 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //5. Set pulse width for pwmB
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPB_OFFSET + (0x40 * myPwmGen))), dutyCycleB, 0, 15+1, RW);
     ea2:	68fb      	ldr	r3, [r7, #12]
     ea4:	681a      	ldr	r2, [r3, #0]
     ea6:	68fb      	ldr	r3, [r7, #12]
     ea8:	685b      	ldr	r3, [r3, #4]
     eaa:	019b      	lsls	r3, r3, #6
     eac:	4413      	add	r3, r2
     eae:	335c      	adds	r3, #92	; 0x5c
     eb0:	4618      	mov	r0, r3
     eb2:	2300      	movs	r3, #0
     eb4:	9300      	str	r3, [sp, #0]
     eb6:	2310      	movs	r3, #16
     eb8:	2200      	movs	r2, #0
     eba:	69f9      	ldr	r1, [r7, #28]
     ebc:	f7ff fb70 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //6. Enable PWM
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + SRPWM_OFFSET), set, module, 1, RW);
     ec0:	79fa      	ldrb	r2, [r7, #7]
     ec2:	2300      	movs	r3, #0
     ec4:	9300      	str	r3, [sp, #0]
     ec6:	2301      	movs	r3, #1
     ec8:	2101      	movs	r1, #1
     eca:	4813      	ldr	r0, [pc, #76]	; (f18 <_ZN3Pwm14initializePairEm9pwmModulemmm17countDirectionPwmmmbm+0xfa>)
     ecc:	f7ff fb68 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), 0x00001, 0, 1, RW);
     ed0:	68fb      	ldr	r3, [r7, #12]
     ed2:	681a      	ldr	r2, [r3, #0]
     ed4:	68fb      	ldr	r3, [r7, #12]
     ed6:	685b      	ldr	r3, [r3, #4]
     ed8:	3301      	adds	r3, #1
     eda:	019b      	lsls	r3, r3, #6
     edc:	4413      	add	r3, r2
     ede:	4618      	mov	r0, r3
     ee0:	2300      	movs	r3, #0
     ee2:	9300      	str	r3, [sp, #0]
     ee4:	2301      	movs	r3, #1
     ee6:	2200      	movs	r2, #0
     ee8:	2101      	movs	r1, #1
     eea:	f7ff fb59 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //7. Enable PWM output.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWMENABLE_OFFSET + (0x40 * myPwmGen))), 0x3, 0 + (2*myPwmGen), 2, RW); 
     eee:	68fb      	ldr	r3, [r7, #12]
     ef0:	681a      	ldr	r2, [r3, #0]
     ef2:	68fb      	ldr	r3, [r7, #12]
     ef4:	685b      	ldr	r3, [r3, #4]
     ef6:	019b      	lsls	r3, r3, #6
     ef8:	4413      	add	r3, r2
     efa:	3308      	adds	r3, #8
     efc:	4618      	mov	r0, r3
     efe:	68fb      	ldr	r3, [r7, #12]
     f00:	685b      	ldr	r3, [r3, #4]
     f02:	005a      	lsls	r2, r3, #1
     f04:	2300      	movs	r3, #0
     f06:	9300      	str	r3, [sp, #0]
     f08:	2302      	movs	r3, #2
     f0a:	2103      	movs	r1, #3
     f0c:	f7ff fb48 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     f10:	bf00      	nop
     f12:	3710      	adds	r7, #16
     f14:	46bd      	mov	sp, r7
     f16:	bd80      	pop	{r7, pc}
     f18:	400fe540 	.word	0x400fe540

00000f1c <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm>:

//clean up, add count direction option

void Pwm::initialize(uint32_t pwmPin, pwmModule module, uint32_t period, countDirectionPwm countDir, bool enablePwmDiv, uint32_t divisor)
{    
     f1c:	b580      	push	{r7, lr}
     f1e:	b088      	sub	sp, #32
     f20:	af02      	add	r7, sp, #8
     f22:	60f8      	str	r0, [r7, #12]
     f24:	60b9      	str	r1, [r7, #8]
     f26:	603b      	str	r3, [r7, #0]
     f28:	4613      	mov	r3, r2
     f2a:	71fb      	strb	r3, [r7, #7]
    baseAddress = pwm0BaseAddress + (module * 0x1000);
     f2c:	79fb      	ldrb	r3, [r7, #7]
     f2e:	031b      	lsls	r3, r3, #12
     f30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     f34:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
     f38:	68fa      	ldr	r2, [r7, #12]
     f3a:	6013      	str	r3, [r2, #0]
    myPwmGen = pwmPin/2;
     f3c:	68bb      	ldr	r3, [r7, #8]
     f3e:	085a      	lsrs	r2, r3, #1
     f40:	68fb      	ldr	r3, [r7, #12]
     f42:	605a      	str	r2, [r3, #4]
    
    //0. Enable the clock for PWM
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCPWM_OFFSET)), set, module, 1, RW);
     f44:	79fa      	ldrb	r2, [r7, #7]
     f46:	2300      	movs	r3, #0
     f48:	9300      	str	r3, [sp, #0]
     f4a:	2301      	movs	r3, #1
     f4c:	2101      	movs	r1, #1
     f4e:	4847      	ldr	r0, [pc, #284]	; (106c <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm+0x150>)
     f50:	f7ff fb26 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRPWM_OFFSET), module, 1, RO) == 0)
     f54:	79f9      	ldrb	r1, [r7, #7]
     f56:	2301      	movs	r3, #1
     f58:	2201      	movs	r2, #1
     f5a:	4845      	ldr	r0, [pc, #276]	; (1070 <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm+0x154>)
     f5c:	f7ff faf6 	bl	54c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     f60:	4603      	mov	r3, r0
     f62:	2b00      	cmp	r3, #0
     f64:	bf0c      	ite	eq
     f66:	2301      	moveq	r3, #1
     f68:	2300      	movne	r3, #0
     f6a:	b2db      	uxtb	r3, r3
     f6c:	2b00      	cmp	r3, #0
     f6e:	d000      	beq.n	f72 <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm+0x56>
     f70:	e7f0      	b.n	f54 <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm+0x38>
        //Ready??
    }

    // Clear count register by reseting PWM

    Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + SRPWM_OFFSET), set, module, 1, RW);
     f72:	79fa      	ldrb	r2, [r7, #7]
     f74:	2300      	movs	r3, #0
     f76:	9300      	str	r3, [sp, #0]
     f78:	2301      	movs	r3, #1
     f7a:	2101      	movs	r1, #1
     f7c:	483d      	ldr	r0, [pc, #244]	; (1074 <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm+0x158>)
     f7e:	f7ff fb0f 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    for(uint32_t i = 0; i < 100; i++)
     f82:	2300      	movs	r3, #0
     f84:	617b      	str	r3, [r7, #20]
     f86:	697b      	ldr	r3, [r7, #20]
     f88:	2b63      	cmp	r3, #99	; 0x63
     f8a:	d803      	bhi.n	f94 <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm+0x78>
     f8c:	697b      	ldr	r3, [r7, #20]
     f8e:	3301      	adds	r3, #1
     f90:	617b      	str	r3, [r7, #20]
     f92:	e7f8      	b.n	f86 <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm+0x6a>
    {
        //wait
    }

    Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + SRPWM_OFFSET), clear, module, 1, RW);
     f94:	79fa      	ldrb	r2, [r7, #7]
     f96:	2300      	movs	r3, #0
     f98:	9300      	str	r3, [sp, #0]
     f9a:	2301      	movs	r3, #1
     f9c:	2100      	movs	r1, #0
     f9e:	4835      	ldr	r0, [pc, #212]	; (1074 <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm+0x158>)
     fa0:	f7ff fafe 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRPWM_OFFSET), module, 1, RO) == 0)
     fa4:	79f9      	ldrb	r1, [r7, #7]
     fa6:	2301      	movs	r3, #1
     fa8:	2201      	movs	r2, #1
     faa:	4831      	ldr	r0, [pc, #196]	; (1070 <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm+0x154>)
     fac:	f7ff face 	bl	54c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     fb0:	4603      	mov	r3, r0
     fb2:	2b00      	cmp	r3, #0
     fb4:	bf0c      	ite	eq
     fb6:	2301      	moveq	r3, #1
     fb8:	2300      	movne	r3, #0
     fba:	b2db      	uxtb	r3, r3
     fbc:	2b00      	cmp	r3, #0
     fbe:	d000      	beq.n	fc2 <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm+0xa6>
     fc0:	e7f0      	b.n	fa4 <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm+0x88>
    {
        //Ready??
    }

    if(enablePwmDiv == true)
     fc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
     fc6:	2b00      	cmp	r3, #0
     fc8:	d00f      	beq.n	fea <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm+0xce>
    {
        //1a. Configure the Run-Mode Clock Configuration (RCC) register in the System Control module to use the PWM divide (USEPWMDIV).
        Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + RCC_OFFSET), set, 20, 1, RW);
     fca:	2300      	movs	r3, #0
     fcc:	9300      	str	r3, [sp, #0]
     fce:	2301      	movs	r3, #1
     fd0:	2214      	movs	r2, #20
     fd2:	2101      	movs	r1, #1
     fd4:	4828      	ldr	r0, [pc, #160]	; (1078 <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm+0x15c>)
     fd6:	f7ff fae3 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        //1b. Set the divider (PWMDIV).
        Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + RCC_OFFSET), divisor, 17, (19-17)+1, RW);
     fda:	2300      	movs	r3, #0
     fdc:	9300      	str	r3, [sp, #0]
     fde:	2303      	movs	r3, #3
     fe0:	2211      	movs	r2, #17
     fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
     fe4:	4824      	ldr	r0, [pc, #144]	; (1078 <_ZN3Pwm10initializeEm9pwmModulem17countDirectionPwmbm+0x15c>)
     fe6:	f7ff fadb 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    }

    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.

    //2a. Write the PWMnCTL register with a value of 0x0000.0000 to clear it.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), clear, 0, 1, RW);
     fea:	68fb      	ldr	r3, [r7, #12]
     fec:	681a      	ldr	r2, [r3, #0]
     fee:	68fb      	ldr	r3, [r7, #12]
     ff0:	685b      	ldr	r3, [r3, #4]
     ff2:	3301      	adds	r3, #1
     ff4:	019b      	lsls	r3, r3, #6
     ff6:	4413      	add	r3, r2
     ff8:	4618      	mov	r0, r3
     ffa:	2300      	movs	r3, #0
     ffc:	9300      	str	r3, [sp, #0]
     ffe:	2301      	movs	r3, #1
    1000:	2200      	movs	r2, #0
    1002:	2100      	movs	r1, #0
    1004:	f7ff facc 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), set, 2, 1, RW);
    1008:	68fb      	ldr	r3, [r7, #12]
    100a:	681a      	ldr	r2, [r3, #0]
    100c:	68fb      	ldr	r3, [r7, #12]
    100e:	685b      	ldr	r3, [r3, #4]
    1010:	3301      	adds	r3, #1
    1012:	019b      	lsls	r3, r3, #6
    1014:	4413      	add	r3, r2
    1016:	4618      	mov	r0, r3
    1018:	2300      	movs	r3, #0
    101a:	9300      	str	r3, [sp, #0]
    101c:	2301      	movs	r3, #1
    101e:	2202      	movs	r2, #2
    1020:	2101      	movs	r1, #1
    1022:	f7ff fabd 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //Set count direction
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)countDir, 3, 1, RW);
    1026:	68fb      	ldr	r3, [r7, #12]
    1028:	681a      	ldr	r2, [r3, #0]
    102a:	68fb      	ldr	r3, [r7, #12]
    102c:	685b      	ldr	r3, [r3, #4]
    102e:	3301      	adds	r3, #1
    1030:	019b      	lsls	r3, r3, #6
    1032:	4413      	add	r3, r2
    1034:	4618      	mov	r0, r3
    1036:	6a39      	ldr	r1, [r7, #32]
    1038:	2300      	movs	r3, #0
    103a:	9300      	str	r3, [sp, #0]
    103c:	2301      	movs	r3, #1
    103e:	2203      	movs	r2, #3
    1040:	f7ff faae 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //3. Set the period
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0LOAD_OFFSET + (0x40 * myPwmGen))), period, 0, 15+1, RW);
    1044:	68fb      	ldr	r3, [r7, #12]
    1046:	681a      	ldr	r2, [r3, #0]
    1048:	68fb      	ldr	r3, [r7, #12]
    104a:	685b      	ldr	r3, [r3, #4]
    104c:	019b      	lsls	r3, r3, #6
    104e:	4413      	add	r3, r2
    1050:	3350      	adds	r3, #80	; 0x50
    1052:	4618      	mov	r0, r3
    1054:	2300      	movs	r3, #0
    1056:	9300      	str	r3, [sp, #0]
    1058:	2310      	movs	r3, #16
    105a:	2200      	movs	r2, #0
    105c:	6839      	ldr	r1, [r7, #0]
    105e:	f7ff fa9f 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    1062:	bf00      	nop
    1064:	3718      	adds	r7, #24
    1066:	46bd      	mov	sp, r7
    1068:	bd80      	pop	{r7, pc}
    106a:	bf00      	nop
    106c:	400fe640 	.word	0x400fe640
    1070:	400fea40 	.word	0x400fea40
    1074:	400fe540 	.word	0x400fe540
    1078:	400fe060 	.word	0x400fe060

0000107c <__aeabi_atexit>:
    107c:	460b      	mov	r3, r1
    107e:	4601      	mov	r1, r0
    1080:	4618      	mov	r0, r3
    1082:	f000 bf83 	b.w	1f8c <__cxa_atexit>
	...

00001088 <selfrel_offset31>:
    1088:	6803      	ldr	r3, [r0, #0]
    108a:	005a      	lsls	r2, r3, #1
    108c:	bf4c      	ite	mi
    108e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    1092:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    1096:	4418      	add	r0, r3
    1098:	4770      	bx	lr
    109a:	bf00      	nop

0000109c <search_EIT_table>:
    109c:	b369      	cbz	r1, 10fa <search_EIT_table+0x5e>
    109e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    10a2:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
    10a6:	4617      	mov	r7, r2
    10a8:	4606      	mov	r6, r0
    10aa:	46c8      	mov	r8, r9
    10ac:	f04f 0a00 	mov.w	sl, #0
    10b0:	eb0a 0408 	add.w	r4, sl, r8
    10b4:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    10b8:	1064      	asrs	r4, r4, #1
    10ba:	00e5      	lsls	r5, r4, #3
    10bc:	1971      	adds	r1, r6, r5
    10be:	4608      	mov	r0, r1
    10c0:	f7ff ffe2 	bl	1088 <selfrel_offset31>
    10c4:	45a1      	cmp	r9, r4
    10c6:	4603      	mov	r3, r0
    10c8:	f105 0008 	add.w	r0, r5, #8
    10cc:	4430      	add	r0, r6
    10ce:	d009      	beq.n	10e4 <search_EIT_table+0x48>
    10d0:	42bb      	cmp	r3, r7
    10d2:	d809      	bhi.n	10e8 <search_EIT_table+0x4c>
    10d4:	f7ff ffd8 	bl	1088 <selfrel_offset31>
    10d8:	3801      	subs	r0, #1
    10da:	42b8      	cmp	r0, r7
    10dc:	d20a      	bcs.n	10f4 <search_EIT_table+0x58>
    10de:	f104 0a01 	add.w	sl, r4, #1
    10e2:	e7e5      	b.n	10b0 <search_EIT_table+0x14>
    10e4:	42bb      	cmp	r3, r7
    10e6:	d905      	bls.n	10f4 <search_EIT_table+0x58>
    10e8:	45a2      	cmp	sl, r4
    10ea:	d002      	beq.n	10f2 <search_EIT_table+0x56>
    10ec:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    10f0:	e7de      	b.n	10b0 <search_EIT_table+0x14>
    10f2:	2100      	movs	r1, #0
    10f4:	4608      	mov	r0, r1
    10f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    10fa:	4608      	mov	r0, r1
    10fc:	4770      	bx	lr
    10fe:	bf00      	nop

00001100 <__gnu_unwind_get_pr_addr>:
    1100:	2801      	cmp	r0, #1
    1102:	d007      	beq.n	1114 <__gnu_unwind_get_pr_addr+0x14>
    1104:	2802      	cmp	r0, #2
    1106:	d007      	beq.n	1118 <__gnu_unwind_get_pr_addr+0x18>
    1108:	4b04      	ldr	r3, [pc, #16]	; (111c <__gnu_unwind_get_pr_addr+0x1c>)
    110a:	2800      	cmp	r0, #0
    110c:	bf0c      	ite	eq
    110e:	4618      	moveq	r0, r3
    1110:	2000      	movne	r0, #0
    1112:	4770      	bx	lr
    1114:	4802      	ldr	r0, [pc, #8]	; (1120 <__gnu_unwind_get_pr_addr+0x20>)
    1116:	4770      	bx	lr
    1118:	4802      	ldr	r0, [pc, #8]	; (1124 <__gnu_unwind_get_pr_addr+0x24>)
    111a:	4770      	bx	lr
    111c:	000017dd 	.word	0x000017dd
    1120:	000017e1 	.word	0x000017e1
    1124:	000017e5 	.word	0x000017e5

00001128 <get_eit_entry>:
    1128:	b530      	push	{r4, r5, lr}
    112a:	4b24      	ldr	r3, [pc, #144]	; (11bc <get_eit_entry+0x94>)
    112c:	b083      	sub	sp, #12
    112e:	4604      	mov	r4, r0
    1130:	1e8d      	subs	r5, r1, #2
    1132:	b34b      	cbz	r3, 1188 <get_eit_entry+0x60>
    1134:	a901      	add	r1, sp, #4
    1136:	4628      	mov	r0, r5
    1138:	f3af 8000 	nop.w
    113c:	b1f0      	cbz	r0, 117c <get_eit_entry+0x54>
    113e:	9901      	ldr	r1, [sp, #4]
    1140:	462a      	mov	r2, r5
    1142:	f7ff ffab 	bl	109c <search_EIT_table>
    1146:	4601      	mov	r1, r0
    1148:	b1c0      	cbz	r0, 117c <get_eit_entry+0x54>
    114a:	f7ff ff9d 	bl	1088 <selfrel_offset31>
    114e:	684b      	ldr	r3, [r1, #4]
    1150:	64a0      	str	r0, [r4, #72]	; 0x48
    1152:	2b01      	cmp	r3, #1
    1154:	d02e      	beq.n	11b4 <get_eit_entry+0x8c>
    1156:	2b00      	cmp	r3, #0
    1158:	f101 0004 	add.w	r0, r1, #4
    115c:	db26      	blt.n	11ac <get_eit_entry+0x84>
    115e:	f7ff ff93 	bl	1088 <selfrel_offset31>
    1162:	2300      	movs	r3, #0
    1164:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    1168:	6803      	ldr	r3, [r0, #0]
    116a:	2b00      	cmp	r3, #0
    116c:	db12      	blt.n	1194 <get_eit_entry+0x6c>
    116e:	f7ff ff8b 	bl	1088 <selfrel_offset31>
    1172:	2300      	movs	r3, #0
    1174:	6120      	str	r0, [r4, #16]
    1176:	4618      	mov	r0, r3
    1178:	b003      	add	sp, #12
    117a:	bd30      	pop	{r4, r5, pc}
    117c:	2300      	movs	r3, #0
    117e:	6123      	str	r3, [r4, #16]
    1180:	2309      	movs	r3, #9
    1182:	4618      	mov	r0, r3
    1184:	b003      	add	sp, #12
    1186:	bd30      	pop	{r4, r5, pc}
    1188:	490d      	ldr	r1, [pc, #52]	; (11c0 <get_eit_entry+0x98>)
    118a:	480e      	ldr	r0, [pc, #56]	; (11c4 <get_eit_entry+0x9c>)
    118c:	1a09      	subs	r1, r1, r0
    118e:	10c9      	asrs	r1, r1, #3
    1190:	9101      	str	r1, [sp, #4]
    1192:	e7d5      	b.n	1140 <get_eit_entry+0x18>
    1194:	f3c3 6003 	ubfx	r0, r3, #24, #4
    1198:	f7ff ffb2 	bl	1100 <__gnu_unwind_get_pr_addr>
    119c:	2800      	cmp	r0, #0
    119e:	bf14      	ite	ne
    11a0:	2300      	movne	r3, #0
    11a2:	2309      	moveq	r3, #9
    11a4:	6120      	str	r0, [r4, #16]
    11a6:	4618      	mov	r0, r3
    11a8:	b003      	add	sp, #12
    11aa:	bd30      	pop	{r4, r5, pc}
    11ac:	2301      	movs	r3, #1
    11ae:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    11b2:	e7d9      	b.n	1168 <get_eit_entry+0x40>
    11b4:	2300      	movs	r3, #0
    11b6:	6123      	str	r3, [r4, #16]
    11b8:	2305      	movs	r3, #5
    11ba:	e7dc      	b.n	1176 <get_eit_entry+0x4e>
    11bc:	00000000 	.word	0x00000000
    11c0:	00002edc 	.word	0x00002edc
    11c4:	00002d9c 	.word	0x00002d9c

000011c8 <restore_non_core_regs>:
    11c8:	6803      	ldr	r3, [r0, #0]
    11ca:	07da      	lsls	r2, r3, #31
    11cc:	b510      	push	{r4, lr}
    11ce:	4604      	mov	r4, r0
    11d0:	d406      	bmi.n	11e0 <restore_non_core_regs+0x18>
    11d2:	079b      	lsls	r3, r3, #30
    11d4:	f100 0048 	add.w	r0, r0, #72	; 0x48
    11d8:	d509      	bpl.n	11ee <restore_non_core_regs+0x26>
    11da:	f000 fc59 	bl	1a90 <__gnu_Unwind_Restore_VFP_D>
    11de:	6823      	ldr	r3, [r4, #0]
    11e0:	0759      	lsls	r1, r3, #29
    11e2:	d509      	bpl.n	11f8 <restore_non_core_regs+0x30>
    11e4:	071a      	lsls	r2, r3, #28
    11e6:	d50e      	bpl.n	1206 <restore_non_core_regs+0x3e>
    11e8:	06db      	lsls	r3, r3, #27
    11ea:	d513      	bpl.n	1214 <restore_non_core_regs+0x4c>
    11ec:	bd10      	pop	{r4, pc}
    11ee:	f000 fc47 	bl	1a80 <__gnu_Unwind_Restore_VFP>
    11f2:	6823      	ldr	r3, [r4, #0]
    11f4:	0759      	lsls	r1, r3, #29
    11f6:	d4f5      	bmi.n	11e4 <restore_non_core_regs+0x1c>
    11f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    11fc:	f000 fc50 	bl	1aa0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    1200:	6823      	ldr	r3, [r4, #0]
    1202:	071a      	lsls	r2, r3, #28
    1204:	d4f0      	bmi.n	11e8 <restore_non_core_regs+0x20>
    1206:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    120a:	f000 fc51 	bl	1ab0 <__gnu_Unwind_Restore_WMMXD>
    120e:	6823      	ldr	r3, [r4, #0]
    1210:	06db      	lsls	r3, r3, #27
    1212:	d4eb      	bmi.n	11ec <restore_non_core_regs+0x24>
    1214:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    1218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    121c:	f000 bc8c 	b.w	1b38 <__gnu_Unwind_Restore_WMMXC>

00001220 <_Unwind_decode_typeinfo_ptr.isra.0>:
    1220:	6803      	ldr	r3, [r0, #0]
    1222:	b103      	cbz	r3, 1226 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    1224:	4403      	add	r3, r0
    1226:	4618      	mov	r0, r3
    1228:	4770      	bx	lr
    122a:	bf00      	nop

0000122c <__gnu_unwind_24bit.isra.1>:
    122c:	2009      	movs	r0, #9
    122e:	4770      	bx	lr

00001230 <_Unwind_DebugHook>:
    1230:	4770      	bx	lr
    1232:	bf00      	nop

00001234 <unwind_phase2>:
    1234:	b570      	push	{r4, r5, r6, lr}
    1236:	4604      	mov	r4, r0
    1238:	460d      	mov	r5, r1
    123a:	6c29      	ldr	r1, [r5, #64]	; 0x40
    123c:	4620      	mov	r0, r4
    123e:	f7ff ff73 	bl	1128 <get_eit_entry>
    1242:	4606      	mov	r6, r0
    1244:	b988      	cbnz	r0, 126a <unwind_phase2+0x36>
    1246:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    1248:	6163      	str	r3, [r4, #20]
    124a:	462a      	mov	r2, r5
    124c:	6923      	ldr	r3, [r4, #16]
    124e:	4621      	mov	r1, r4
    1250:	2001      	movs	r0, #1
    1252:	4798      	blx	r3
    1254:	2808      	cmp	r0, #8
    1256:	d0f0      	beq.n	123a <unwind_phase2+0x6>
    1258:	2807      	cmp	r0, #7
    125a:	d106      	bne.n	126a <unwind_phase2+0x36>
    125c:	4630      	mov	r0, r6
    125e:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1260:	f7ff ffe6 	bl	1230 <_Unwind_DebugHook>
    1264:	1d28      	adds	r0, r5, #4
    1266:	f000 fbff 	bl	1a68 <__restore_core_regs>
    126a:	f000 fe87 	bl	1f7c <abort>
    126e:	bf00      	nop

00001270 <unwind_phase2_forced>:
    1270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1274:	1d0c      	adds	r4, r1, #4
    1276:	4605      	mov	r5, r0
    1278:	4617      	mov	r7, r2
    127a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    127c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    1280:	ae03      	add	r6, sp, #12
    1282:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    1286:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    1288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    128a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    128c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    1290:	ac02      	add	r4, sp, #8
    1292:	f8d5 800c 	ldr.w	r8, [r5, #12]
    1296:	f8d5 9018 	ldr.w	r9, [r5, #24]
    129a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    129e:	2300      	movs	r3, #0
    12a0:	4628      	mov	r0, r5
    12a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
    12a4:	6023      	str	r3, [r4, #0]
    12a6:	f7ff ff3f 	bl	1128 <get_eit_entry>
    12aa:	2f00      	cmp	r7, #0
    12ac:	4606      	mov	r6, r0
    12ae:	bf14      	ite	ne
    12b0:	270a      	movne	r7, #10
    12b2:	2709      	moveq	r7, #9
    12b4:	bb46      	cbnz	r6, 1308 <unwind_phase2_forced+0x98>
    12b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    12b8:	616b      	str	r3, [r5, #20]
    12ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    12be:	4621      	mov	r1, r4
    12c0:	a87a      	add	r0, sp, #488	; 0x1e8
    12c2:	f000 fe81 	bl	1fc8 <memcpy>
    12c6:	692b      	ldr	r3, [r5, #16]
    12c8:	aa7a      	add	r2, sp, #488	; 0x1e8
    12ca:	4629      	mov	r1, r5
    12cc:	4638      	mov	r0, r7
    12ce:	4798      	blx	r3
    12d0:	9b88      	ldr	r3, [sp, #544]	; 0x220
    12d2:	4682      	mov	sl, r0
    12d4:	e9cd 4900 	strd	r4, r9, [sp]
    12d8:	4639      	mov	r1, r7
    12da:	6463      	str	r3, [r4, #68]	; 0x44
    12dc:	462a      	mov	r2, r5
    12de:	462b      	mov	r3, r5
    12e0:	2001      	movs	r0, #1
    12e2:	47c0      	blx	r8
    12e4:	b9d8      	cbnz	r0, 131e <unwind_phase2_forced+0xae>
    12e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    12ea:	a97a      	add	r1, sp, #488	; 0x1e8
    12ec:	4620      	mov	r0, r4
    12ee:	f000 fe6b 	bl	1fc8 <memcpy>
    12f2:	f1ba 0f08 	cmp.w	sl, #8
    12f6:	d118      	bne.n	132a <unwind_phase2_forced+0xba>
    12f8:	6c21      	ldr	r1, [r4, #64]	; 0x40
    12fa:	4628      	mov	r0, r5
    12fc:	f7ff ff14 	bl	1128 <get_eit_entry>
    1300:	4606      	mov	r6, r0
    1302:	2709      	movs	r7, #9
    1304:	2e00      	cmp	r6, #0
    1306:	d0d6      	beq.n	12b6 <unwind_phase2_forced+0x46>
    1308:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    130a:	f047 0110 	orr.w	r1, r7, #16
    130e:	e9cd 4900 	strd	r4, r9, [sp]
    1312:	462a      	mov	r2, r5
    1314:	6463      	str	r3, [r4, #68]	; 0x44
    1316:	2001      	movs	r0, #1
    1318:	462b      	mov	r3, r5
    131a:	47c0      	blx	r8
    131c:	b100      	cbz	r0, 1320 <unwind_phase2_forced+0xb0>
    131e:	2609      	movs	r6, #9
    1320:	4630      	mov	r0, r6
    1322:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    1326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    132a:	f1ba 0f07 	cmp.w	sl, #7
    132e:	d1f6      	bne.n	131e <unwind_phase2_forced+0xae>
    1330:	4630      	mov	r0, r6
    1332:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1334:	f7ff ff7c 	bl	1230 <_Unwind_DebugHook>
    1338:	a803      	add	r0, sp, #12
    133a:	f000 fb95 	bl	1a68 <__restore_core_regs>
    133e:	bf00      	nop

00001340 <_Unwind_GetCFA>:
    1340:	6c40      	ldr	r0, [r0, #68]	; 0x44
    1342:	4770      	bx	lr

00001344 <__gnu_Unwind_RaiseException>:
    1344:	b5f0      	push	{r4, r5, r6, r7, lr}
    1346:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    1348:	640b      	str	r3, [r1, #64]	; 0x40
    134a:	1d0e      	adds	r6, r1, #4
    134c:	460f      	mov	r7, r1
    134e:	4604      	mov	r4, r0
    1350:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1352:	b0f9      	sub	sp, #484	; 0x1e4
    1354:	ad01      	add	r5, sp, #4
    1356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1358:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    135a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    135c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    135e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    1360:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    1364:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    1368:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    136c:	9600      	str	r6, [sp, #0]
    136e:	e006      	b.n	137e <__gnu_Unwind_RaiseException+0x3a>
    1370:	6923      	ldr	r3, [r4, #16]
    1372:	466a      	mov	r2, sp
    1374:	4621      	mov	r1, r4
    1376:	4798      	blx	r3
    1378:	2808      	cmp	r0, #8
    137a:	4605      	mov	r5, r0
    137c:	d108      	bne.n	1390 <__gnu_Unwind_RaiseException+0x4c>
    137e:	9910      	ldr	r1, [sp, #64]	; 0x40
    1380:	4620      	mov	r0, r4
    1382:	f7ff fed1 	bl	1128 <get_eit_entry>
    1386:	2800      	cmp	r0, #0
    1388:	d0f2      	beq.n	1370 <__gnu_Unwind_RaiseException+0x2c>
    138a:	2009      	movs	r0, #9
    138c:	b079      	add	sp, #484	; 0x1e4
    138e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1390:	4668      	mov	r0, sp
    1392:	f7ff ff19 	bl	11c8 <restore_non_core_regs>
    1396:	2d06      	cmp	r5, #6
    1398:	d1f7      	bne.n	138a <__gnu_Unwind_RaiseException+0x46>
    139a:	4639      	mov	r1, r7
    139c:	4620      	mov	r0, r4
    139e:	f7ff ff49 	bl	1234 <unwind_phase2>
    13a2:	bf00      	nop

000013a4 <__gnu_Unwind_ForcedUnwind>:
    13a4:	b430      	push	{r4, r5}
    13a6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    13a8:	60c1      	str	r1, [r0, #12]
    13aa:	6182      	str	r2, [r0, #24]
    13ac:	4619      	mov	r1, r3
    13ae:	641d      	str	r5, [r3, #64]	; 0x40
    13b0:	2200      	movs	r2, #0
    13b2:	bc30      	pop	{r4, r5}
    13b4:	e75c      	b.n	1270 <unwind_phase2_forced>
    13b6:	bf00      	nop

000013b8 <__gnu_Unwind_Resume>:
    13b8:	b570      	push	{r4, r5, r6, lr}
    13ba:	68c6      	ldr	r6, [r0, #12]
    13bc:	6943      	ldr	r3, [r0, #20]
    13be:	640b      	str	r3, [r1, #64]	; 0x40
    13c0:	b9ae      	cbnz	r6, 13ee <__gnu_Unwind_Resume+0x36>
    13c2:	6903      	ldr	r3, [r0, #16]
    13c4:	460a      	mov	r2, r1
    13c6:	4604      	mov	r4, r0
    13c8:	460d      	mov	r5, r1
    13ca:	4601      	mov	r1, r0
    13cc:	2002      	movs	r0, #2
    13ce:	4798      	blx	r3
    13d0:	2807      	cmp	r0, #7
    13d2:	d005      	beq.n	13e0 <__gnu_Unwind_Resume+0x28>
    13d4:	2808      	cmp	r0, #8
    13d6:	d10f      	bne.n	13f8 <__gnu_Unwind_Resume+0x40>
    13d8:	4629      	mov	r1, r5
    13da:	4620      	mov	r0, r4
    13dc:	f7ff ff2a 	bl	1234 <unwind_phase2>
    13e0:	4630      	mov	r0, r6
    13e2:	6c29      	ldr	r1, [r5, #64]	; 0x40
    13e4:	f7ff ff24 	bl	1230 <_Unwind_DebugHook>
    13e8:	1d28      	adds	r0, r5, #4
    13ea:	f000 fb3d 	bl	1a68 <__restore_core_regs>
    13ee:	2201      	movs	r2, #1
    13f0:	f7ff ff3e 	bl	1270 <unwind_phase2_forced>
    13f4:	f000 fdc2 	bl	1f7c <abort>
    13f8:	f000 fdc0 	bl	1f7c <abort>

000013fc <__gnu_Unwind_Resume_or_Rethrow>:
    13fc:	68c2      	ldr	r2, [r0, #12]
    13fe:	b11a      	cbz	r2, 1408 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    1400:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    1402:	640a      	str	r2, [r1, #64]	; 0x40
    1404:	2200      	movs	r2, #0
    1406:	e733      	b.n	1270 <unwind_phase2_forced>
    1408:	e79c      	b.n	1344 <__gnu_Unwind_RaiseException>
    140a:	bf00      	nop

0000140c <_Unwind_Complete>:
    140c:	4770      	bx	lr
    140e:	bf00      	nop

00001410 <_Unwind_DeleteException>:
    1410:	6883      	ldr	r3, [r0, #8]
    1412:	b113      	cbz	r3, 141a <_Unwind_DeleteException+0xa>
    1414:	4601      	mov	r1, r0
    1416:	2001      	movs	r0, #1
    1418:	4718      	bx	r3
    141a:	4770      	bx	lr

0000141c <_Unwind_VRS_Get>:
    141c:	2904      	cmp	r1, #4
    141e:	d810      	bhi.n	1442 <_Unwind_VRS_Get+0x26>
    1420:	e8df f001 	tbb	[pc, r1]
    1424:	030f0305 	.word	0x030f0305
    1428:	03          	.byte	0x03
    1429:	00          	.byte	0x00
    142a:	2001      	movs	r0, #1
    142c:	4770      	bx	lr
    142e:	b943      	cbnz	r3, 1442 <_Unwind_VRS_Get+0x26>
    1430:	2a0f      	cmp	r2, #15
    1432:	d806      	bhi.n	1442 <_Unwind_VRS_Get+0x26>
    1434:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    1438:	4618      	mov	r0, r3
    143a:	6853      	ldr	r3, [r2, #4]
    143c:	9a00      	ldr	r2, [sp, #0]
    143e:	6013      	str	r3, [r2, #0]
    1440:	4770      	bx	lr
    1442:	2002      	movs	r0, #2
    1444:	4770      	bx	lr
    1446:	bf00      	nop

00001448 <_Unwind_GetGR>:
    1448:	b510      	push	{r4, lr}
    144a:	b084      	sub	sp, #16
    144c:	2300      	movs	r3, #0
    144e:	ac03      	add	r4, sp, #12
    1450:	460a      	mov	r2, r1
    1452:	9400      	str	r4, [sp, #0]
    1454:	4619      	mov	r1, r3
    1456:	f7ff ffe1 	bl	141c <_Unwind_VRS_Get>
    145a:	9803      	ldr	r0, [sp, #12]
    145c:	b004      	add	sp, #16
    145e:	bd10      	pop	{r4, pc}

00001460 <_Unwind_VRS_Set>:
    1460:	2904      	cmp	r1, #4
    1462:	d810      	bhi.n	1486 <_Unwind_VRS_Set+0x26>
    1464:	e8df f001 	tbb	[pc, r1]
    1468:	030f0305 	.word	0x030f0305
    146c:	03          	.byte	0x03
    146d:	00          	.byte	0x00
    146e:	2001      	movs	r0, #1
    1470:	4770      	bx	lr
    1472:	b943      	cbnz	r3, 1486 <_Unwind_VRS_Set+0x26>
    1474:	2a0f      	cmp	r2, #15
    1476:	d806      	bhi.n	1486 <_Unwind_VRS_Set+0x26>
    1478:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    147c:	9a00      	ldr	r2, [sp, #0]
    147e:	6812      	ldr	r2, [r2, #0]
    1480:	6042      	str	r2, [r0, #4]
    1482:	4618      	mov	r0, r3
    1484:	4770      	bx	lr
    1486:	2002      	movs	r0, #2
    1488:	4770      	bx	lr
    148a:	bf00      	nop

0000148c <_Unwind_SetGR>:
    148c:	b510      	push	{r4, lr}
    148e:	b084      	sub	sp, #16
    1490:	2300      	movs	r3, #0
    1492:	ac03      	add	r4, sp, #12
    1494:	9203      	str	r2, [sp, #12]
    1496:	9400      	str	r4, [sp, #0]
    1498:	460a      	mov	r2, r1
    149a:	4619      	mov	r1, r3
    149c:	f7ff ffe0 	bl	1460 <_Unwind_VRS_Set>
    14a0:	b004      	add	sp, #16
    14a2:	bd10      	pop	{r4, pc}

000014a4 <__gnu_Unwind_Backtrace>:
    14a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14a6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    14a8:	6413      	str	r3, [r2, #64]	; 0x40
    14aa:	1d15      	adds	r5, r2, #4
    14ac:	4607      	mov	r7, r0
    14ae:	460e      	mov	r6, r1
    14b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    14b2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    14b6:	ac17      	add	r4, sp, #92	; 0x5c
    14b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    14ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    14bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    14be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    14c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    14c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    14c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    14ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    14ce:	9516      	str	r5, [sp, #88]	; 0x58
    14d0:	e010      	b.n	14f4 <__gnu_Unwind_Backtrace+0x50>
    14d2:	a816      	add	r0, sp, #88	; 0x58
    14d4:	f7ff ffda 	bl	148c <_Unwind_SetGR>
    14d8:	4631      	mov	r1, r6
    14da:	a816      	add	r0, sp, #88	; 0x58
    14dc:	47b8      	blx	r7
    14de:	aa16      	add	r2, sp, #88	; 0x58
    14e0:	4669      	mov	r1, sp
    14e2:	b978      	cbnz	r0, 1504 <__gnu_Unwind_Backtrace+0x60>
    14e4:	9b04      	ldr	r3, [sp, #16]
    14e6:	2008      	movs	r0, #8
    14e8:	4798      	blx	r3
    14ea:	2805      	cmp	r0, #5
    14ec:	4604      	mov	r4, r0
    14ee:	d00a      	beq.n	1506 <__gnu_Unwind_Backtrace+0x62>
    14f0:	2809      	cmp	r0, #9
    14f2:	d007      	beq.n	1504 <__gnu_Unwind_Backtrace+0x60>
    14f4:	9926      	ldr	r1, [sp, #152]	; 0x98
    14f6:	4668      	mov	r0, sp
    14f8:	f7ff fe16 	bl	1128 <get_eit_entry>
    14fc:	466a      	mov	r2, sp
    14fe:	210c      	movs	r1, #12
    1500:	2800      	cmp	r0, #0
    1502:	d0e6      	beq.n	14d2 <__gnu_Unwind_Backtrace+0x2e>
    1504:	2409      	movs	r4, #9
    1506:	a816      	add	r0, sp, #88	; 0x58
    1508:	f7ff fe5e 	bl	11c8 <restore_non_core_regs>
    150c:	4620      	mov	r0, r4
    150e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    1512:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001514 <__gnu_unwind_pr_common>:
    1514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1518:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
    151a:	b089      	sub	sp, #36	; 0x24
    151c:	460d      	mov	r5, r1
    151e:	f854 1b04 	ldr.w	r1, [r4], #4
    1522:	9406      	str	r4, [sp, #24]
    1524:	4617      	mov	r7, r2
    1526:	f000 0803 	and.w	r8, r0, #3
    152a:	461e      	mov	r6, r3
    152c:	2b00      	cmp	r3, #0
    152e:	d061      	beq.n	15f4 <__gnu_unwind_pr_common+0xe0>
    1530:	0c0b      	lsrs	r3, r1, #16
    1532:	b2da      	uxtb	r2, r3
    1534:	0409      	lsls	r1, r1, #16
    1536:	f88d 301d 	strb.w	r3, [sp, #29]
    153a:	2302      	movs	r3, #2
    153c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    1540:	9105      	str	r1, [sp, #20]
    1542:	f88d 301c 	strb.w	r3, [sp, #28]
    1546:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    1548:	f1b8 0f02 	cmp.w	r8, #2
    154c:	bf08      	it	eq
    154e:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    1550:	f013 0301 	ands.w	r3, r3, #1
    1554:	d178      	bne.n	1648 <__gnu_unwind_pr_common+0x134>
    1556:	9301      	str	r3, [sp, #4]
    1558:	f000 0308 	and.w	r3, r0, #8
    155c:	9302      	str	r3, [sp, #8]
    155e:	f8d4 a000 	ldr.w	sl, [r4]
    1562:	f1ba 0f00 	cmp.w	sl, #0
    1566:	f000 811b 	beq.w	17a0 <__gnu_unwind_pr_common+0x28c>
    156a:	2e02      	cmp	r6, #2
    156c:	d03e      	beq.n	15ec <__gnu_unwind_pr_common+0xd8>
    156e:	f8b4 a000 	ldrh.w	sl, [r4]
    1572:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    1576:	3404      	adds	r4, #4
    1578:	6caa      	ldr	r2, [r5, #72]	; 0x48
    157a:	f029 0b01 	bic.w	fp, r9, #1
    157e:	210f      	movs	r1, #15
    1580:	4638      	mov	r0, r7
    1582:	4493      	add	fp, r2
    1584:	f7ff ff60 	bl	1448 <_Unwind_GetGR>
    1588:	4583      	cmp	fp, r0
    158a:	d82d      	bhi.n	15e8 <__gnu_unwind_pr_common+0xd4>
    158c:	f02a 0201 	bic.w	r2, sl, #1
    1590:	445a      	add	r2, fp
    1592:	4282      	cmp	r2, r0
    1594:	bf94      	ite	ls
    1596:	2000      	movls	r0, #0
    1598:	2001      	movhi	r0, #1
    159a:	ea4f 0349 	mov.w	r3, r9, lsl #1
    159e:	f003 0302 	and.w	r3, r3, #2
    15a2:	f00a 0a01 	and.w	sl, sl, #1
    15a6:	ea43 030a 	orr.w	r3, r3, sl
    15aa:	2b01      	cmp	r3, #1
    15ac:	d030      	beq.n	1610 <__gnu_unwind_pr_common+0xfc>
    15ae:	b33b      	cbz	r3, 1600 <__gnu_unwind_pr_common+0xec>
    15b0:	2b02      	cmp	r3, #2
    15b2:	d115      	bne.n	15e0 <__gnu_unwind_pr_common+0xcc>
    15b4:	6823      	ldr	r3, [r4, #0]
    15b6:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
    15ba:	f1b8 0f00 	cmp.w	r8, #0
    15be:	d14d      	bne.n	165c <__gnu_unwind_pr_common+0x148>
    15c0:	b130      	cbz	r0, 15d0 <__gnu_unwind_pr_common+0xbc>
    15c2:	9a02      	ldr	r2, [sp, #8]
    15c4:	2a00      	cmp	r2, #0
    15c6:	d06d      	beq.n	16a4 <__gnu_unwind_pr_common+0x190>
    15c8:	f1bb 0f00 	cmp.w	fp, #0
    15cc:	f000 80a0 	beq.w	1710 <__gnu_unwind_pr_common+0x1fc>
    15d0:	2b00      	cmp	r3, #0
    15d2:	da00      	bge.n	15d6 <__gnu_unwind_pr_common+0xc2>
    15d4:	3404      	adds	r4, #4
    15d6:	f10b 0b01 	add.w	fp, fp, #1
    15da:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    15de:	e7be      	b.n	155e <__gnu_unwind_pr_common+0x4a>
    15e0:	2009      	movs	r0, #9
    15e2:	b009      	add	sp, #36	; 0x24
    15e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15e8:	2000      	movs	r0, #0
    15ea:	e7d6      	b.n	159a <__gnu_unwind_pr_common+0x86>
    15ec:	f8d4 9004 	ldr.w	r9, [r4, #4]
    15f0:	3408      	adds	r4, #8
    15f2:	e7c1      	b.n	1578 <__gnu_unwind_pr_common+0x64>
    15f4:	0209      	lsls	r1, r1, #8
    15f6:	2303      	movs	r3, #3
    15f8:	9105      	str	r1, [sp, #20]
    15fa:	f8ad 301c 	strh.w	r3, [sp, #28]
    15fe:	e7a2      	b.n	1546 <__gnu_unwind_pr_common+0x32>
    1600:	f1b8 0f00 	cmp.w	r8, #0
    1604:	d002      	beq.n	160c <__gnu_unwind_pr_common+0xf8>
    1606:	2800      	cmp	r0, #0
    1608:	f040 809d 	bne.w	1746 <__gnu_unwind_pr_common+0x232>
    160c:	3404      	adds	r4, #4
    160e:	e7a6      	b.n	155e <__gnu_unwind_pr_common+0x4a>
    1610:	f1b8 0f00 	cmp.w	r8, #0
    1614:	d12c      	bne.n	1670 <__gnu_unwind_pr_common+0x15c>
    1616:	b1a8      	cbz	r0, 1644 <__gnu_unwind_pr_common+0x130>
    1618:	e9d4 2300 	ldrd	r2, r3, [r4]
    161c:	1c99      	adds	r1, r3, #2
    161e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    1622:	d0dd      	beq.n	15e0 <__gnu_unwind_pr_common+0xcc>
    1624:	f105 0158 	add.w	r1, r5, #88	; 0x58
    1628:	3301      	adds	r3, #1
    162a:	9104      	str	r1, [sp, #16]
    162c:	f000 809e 	beq.w	176c <__gnu_unwind_pr_common+0x258>
    1630:	1d20      	adds	r0, r4, #4
    1632:	f7ff fdf5 	bl	1220 <_Unwind_decode_typeinfo_ptr.isra.0>
    1636:	ab04      	add	r3, sp, #16
    1638:	4601      	mov	r1, r0
    163a:	4628      	mov	r0, r5
    163c:	f3af 8000 	nop.w
    1640:	2800      	cmp	r0, #0
    1642:	d16f      	bne.n	1724 <__gnu_unwind_pr_common+0x210>
    1644:	3408      	adds	r4, #8
    1646:	e78a      	b.n	155e <__gnu_unwind_pr_common+0x4a>
    1648:	4638      	mov	r0, r7
    164a:	a905      	add	r1, sp, #20
    164c:	f000 fb0e 	bl	1c6c <__gnu_unwind_execute>
    1650:	2800      	cmp	r0, #0
    1652:	d1c5      	bne.n	15e0 <__gnu_unwind_pr_common+0xcc>
    1654:	2008      	movs	r0, #8
    1656:	b009      	add	sp, #36	; 0x24
    1658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    165c:	210d      	movs	r1, #13
    165e:	4638      	mov	r0, r7
    1660:	f8d5 9020 	ldr.w	r9, [r5, #32]
    1664:	f7ff fef0 	bl	1448 <_Unwind_GetGR>
    1668:	4581      	cmp	r9, r0
    166a:	d040      	beq.n	16ee <__gnu_unwind_pr_common+0x1da>
    166c:	6823      	ldr	r3, [r4, #0]
    166e:	e7af      	b.n	15d0 <__gnu_unwind_pr_common+0xbc>
    1670:	210d      	movs	r1, #13
    1672:	4638      	mov	r0, r7
    1674:	f8d5 9020 	ldr.w	r9, [r5, #32]
    1678:	f7ff fee6 	bl	1448 <_Unwind_GetGR>
    167c:	4581      	cmp	r9, r0
    167e:	d1e1      	bne.n	1644 <__gnu_unwind_pr_common+0x130>
    1680:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1682:	429c      	cmp	r4, r3
    1684:	d1de      	bne.n	1644 <__gnu_unwind_pr_common+0x130>
    1686:	4620      	mov	r0, r4
    1688:	f7ff fcfe 	bl	1088 <selfrel_offset31>
    168c:	210f      	movs	r1, #15
    168e:	4602      	mov	r2, r0
    1690:	4638      	mov	r0, r7
    1692:	f7ff fefb 	bl	148c <_Unwind_SetGR>
    1696:	4638      	mov	r0, r7
    1698:	462a      	mov	r2, r5
    169a:	2100      	movs	r1, #0
    169c:	f7ff fef6 	bl	148c <_Unwind_SetGR>
    16a0:	2007      	movs	r0, #7
    16a2:	e79e      	b.n	15e2 <__gnu_unwind_pr_common+0xce>
    16a4:	f1bb 0f00 	cmp.w	fp, #0
    16a8:	d032      	beq.n	1710 <__gnu_unwind_pr_common+0x1fc>
    16aa:	f105 0358 	add.w	r3, r5, #88	; 0x58
    16ae:	f8cd 800c 	str.w	r8, [sp, #12]
    16b2:	f104 0904 	add.w	r9, r4, #4
    16b6:	46b0      	mov	r8, r6
    16b8:	f8dd a008 	ldr.w	sl, [sp, #8]
    16bc:	461e      	mov	r6, r3
    16be:	e001      	b.n	16c4 <__gnu_unwind_pr_common+0x1b0>
    16c0:	45da      	cmp	sl, fp
    16c2:	d025      	beq.n	1710 <__gnu_unwind_pr_common+0x1fc>
    16c4:	4648      	mov	r0, r9
    16c6:	9604      	str	r6, [sp, #16]
    16c8:	f7ff fdaa 	bl	1220 <_Unwind_decode_typeinfo_ptr.isra.0>
    16cc:	ab04      	add	r3, sp, #16
    16ce:	4601      	mov	r1, r0
    16d0:	2200      	movs	r2, #0
    16d2:	4628      	mov	r0, r5
    16d4:	f3af 8000 	nop.w
    16d8:	f10a 0a01 	add.w	sl, sl, #1
    16dc:	f109 0904 	add.w	r9, r9, #4
    16e0:	2800      	cmp	r0, #0
    16e2:	d0ed      	beq.n	16c0 <__gnu_unwind_pr_common+0x1ac>
    16e4:	4646      	mov	r6, r8
    16e6:	6823      	ldr	r3, [r4, #0]
    16e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
    16ec:	e770      	b.n	15d0 <__gnu_unwind_pr_common+0xbc>
    16ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    16f0:	429c      	cmp	r4, r3
    16f2:	d1bb      	bne.n	166c <__gnu_unwind_pr_common+0x158>
    16f4:	2204      	movs	r2, #4
    16f6:	f04f 0900 	mov.w	r9, #0
    16fa:	18a3      	adds	r3, r4, r2
    16fc:	e9c5 b90a 	strd	fp, r9, [r5, #40]	; 0x28
    1700:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    1704:	6823      	ldr	r3, [r4, #0]
    1706:	454b      	cmp	r3, r9
    1708:	db38      	blt.n	177c <__gnu_unwind_pr_common+0x268>
    170a:	2301      	movs	r3, #1
    170c:	9301      	str	r3, [sp, #4]
    170e:	e762      	b.n	15d6 <__gnu_unwind_pr_common+0xc2>
    1710:	4638      	mov	r0, r7
    1712:	210d      	movs	r1, #13
    1714:	f7ff fe98 	bl	1448 <_Unwind_GetGR>
    1718:	9b04      	ldr	r3, [sp, #16]
    171a:	6228      	str	r0, [r5, #32]
    171c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    1720:	2006      	movs	r0, #6
    1722:	e75e      	b.n	15e2 <__gnu_unwind_pr_common+0xce>
    1724:	4681      	mov	r9, r0
    1726:	210d      	movs	r1, #13
    1728:	4638      	mov	r0, r7
    172a:	f7ff fe8d 	bl	1448 <_Unwind_GetGR>
    172e:	f1b9 0f02 	cmp.w	r9, #2
    1732:	6228      	str	r0, [r5, #32]
    1734:	d11f      	bne.n	1776 <__gnu_unwind_pr_common+0x262>
    1736:	462b      	mov	r3, r5
    1738:	9a04      	ldr	r2, [sp, #16]
    173a:	f843 2f2c 	str.w	r2, [r3, #44]!
    173e:	626b      	str	r3, [r5, #36]	; 0x24
    1740:	62ac      	str	r4, [r5, #40]	; 0x28
    1742:	2006      	movs	r0, #6
    1744:	e74d      	b.n	15e2 <__gnu_unwind_pr_common+0xce>
    1746:	4620      	mov	r0, r4
    1748:	f7ff fc9e 	bl	1088 <selfrel_offset31>
    174c:	3404      	adds	r4, #4
    174e:	4606      	mov	r6, r0
    1750:	63ac      	str	r4, [r5, #56]	; 0x38
    1752:	4628      	mov	r0, r5
    1754:	f3af 8000 	nop.w
    1758:	2800      	cmp	r0, #0
    175a:	f43f af41 	beq.w	15e0 <__gnu_unwind_pr_common+0xcc>
    175e:	4638      	mov	r0, r7
    1760:	4632      	mov	r2, r6
    1762:	210f      	movs	r1, #15
    1764:	f7ff fe92 	bl	148c <_Unwind_SetGR>
    1768:	2007      	movs	r0, #7
    176a:	e73a      	b.n	15e2 <__gnu_unwind_pr_common+0xce>
    176c:	4638      	mov	r0, r7
    176e:	210d      	movs	r1, #13
    1770:	f7ff fe6a 	bl	1448 <_Unwind_GetGR>
    1774:	6228      	str	r0, [r5, #32]
    1776:	9b04      	ldr	r3, [sp, #16]
    1778:	626b      	str	r3, [r5, #36]	; 0x24
    177a:	e7e1      	b.n	1740 <__gnu_unwind_pr_common+0x22c>
    177c:	f10b 0001 	add.w	r0, fp, #1
    1780:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    1784:	f7ff fc80 	bl	1088 <selfrel_offset31>
    1788:	210f      	movs	r1, #15
    178a:	4602      	mov	r2, r0
    178c:	4638      	mov	r0, r7
    178e:	f7ff fe7d 	bl	148c <_Unwind_SetGR>
    1792:	4638      	mov	r0, r7
    1794:	462a      	mov	r2, r5
    1796:	4649      	mov	r1, r9
    1798:	f7ff fe78 	bl	148c <_Unwind_SetGR>
    179c:	2007      	movs	r0, #7
    179e:	e720      	b.n	15e2 <__gnu_unwind_pr_common+0xce>
    17a0:	a905      	add	r1, sp, #20
    17a2:	4638      	mov	r0, r7
    17a4:	f000 fa62 	bl	1c6c <__gnu_unwind_execute>
    17a8:	2800      	cmp	r0, #0
    17aa:	f47f af19 	bne.w	15e0 <__gnu_unwind_pr_common+0xcc>
    17ae:	9b01      	ldr	r3, [sp, #4]
    17b0:	2b00      	cmp	r3, #0
    17b2:	f43f af4f 	beq.w	1654 <__gnu_unwind_pr_common+0x140>
    17b6:	210f      	movs	r1, #15
    17b8:	4638      	mov	r0, r7
    17ba:	f7ff fe45 	bl	1448 <_Unwind_GetGR>
    17be:	210e      	movs	r1, #14
    17c0:	4602      	mov	r2, r0
    17c2:	4638      	mov	r0, r7
    17c4:	f7ff fe62 	bl	148c <_Unwind_SetGR>
    17c8:	4638      	mov	r0, r7
    17ca:	4a03      	ldr	r2, [pc, #12]	; (17d8 <__gnu_unwind_pr_common+0x2c4>)
    17cc:	210f      	movs	r1, #15
    17ce:	f7ff fe5d 	bl	148c <_Unwind_SetGR>
    17d2:	2007      	movs	r0, #7
    17d4:	e705      	b.n	15e2 <__gnu_unwind_pr_common+0xce>
    17d6:	bf00      	nop
    17d8:	00000000 	.word	0x00000000

000017dc <__aeabi_unwind_cpp_pr0>:
    17dc:	2300      	movs	r3, #0
    17de:	e699      	b.n	1514 <__gnu_unwind_pr_common>

000017e0 <__aeabi_unwind_cpp_pr1>:
    17e0:	2301      	movs	r3, #1
    17e2:	e697      	b.n	1514 <__gnu_unwind_pr_common>

000017e4 <__aeabi_unwind_cpp_pr2>:
    17e4:	2302      	movs	r3, #2
    17e6:	e695      	b.n	1514 <__gnu_unwind_pr_common>

000017e8 <_Unwind_VRS_Pop>:
    17e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    17ec:	4605      	mov	r5, r0
    17ee:	b0c4      	sub	sp, #272	; 0x110
    17f0:	2904      	cmp	r1, #4
    17f2:	f200 80b3 	bhi.w	195c <_Unwind_VRS_Pop+0x174>
    17f6:	e8df f001 	tbb	[pc, r1]
    17fa:	5195      	.short	0x5195
    17fc:	2bb1      	.short	0x2bb1
    17fe:	03          	.byte	0x03
    17ff:	00          	.byte	0x00
    1800:	2b00      	cmp	r3, #0
    1802:	f040 80ab 	bne.w	195c <_Unwind_VRS_Pop+0x174>
    1806:	2a10      	cmp	r2, #16
    1808:	f200 80a8 	bhi.w	195c <_Unwind_VRS_Pop+0x174>
    180c:	682b      	ldr	r3, [r5, #0]
    180e:	06dc      	lsls	r4, r3, #27
    1810:	f100 8100 	bmi.w	1a14 <_Unwind_VRS_Pop+0x22c>
    1814:	ac22      	add	r4, sp, #136	; 0x88
    1816:	4620      	mov	r0, r4
    1818:	9201      	str	r2, [sp, #4]
    181a:	f000 f997 	bl	1b4c <__gnu_Unwind_Save_WMMXC>
    181e:	6bae      	ldr	r6, [r5, #56]	; 0x38
    1820:	9a01      	ldr	r2, [sp, #4]
    1822:	2300      	movs	r3, #0
    1824:	2701      	movs	r7, #1
    1826:	fa07 f103 	lsl.w	r1, r7, r3
    182a:	4211      	tst	r1, r2
    182c:	4630      	mov	r0, r6
    182e:	d004      	beq.n	183a <_Unwind_VRS_Pop+0x52>
    1830:	f850 1b04 	ldr.w	r1, [r0], #4
    1834:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    1838:	4606      	mov	r6, r0
    183a:	3301      	adds	r3, #1
    183c:	2b04      	cmp	r3, #4
    183e:	d1f2      	bne.n	1826 <_Unwind_VRS_Pop+0x3e>
    1840:	4620      	mov	r0, r4
    1842:	63ae      	str	r6, [r5, #56]	; 0x38
    1844:	f000 f978 	bl	1b38 <__gnu_Unwind_Restore_WMMXC>
    1848:	2000      	movs	r0, #0
    184a:	b044      	add	sp, #272	; 0x110
    184c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1850:	2b03      	cmp	r3, #3
    1852:	f040 8083 	bne.w	195c <_Unwind_VRS_Pop+0x174>
    1856:	0c16      	lsrs	r6, r2, #16
    1858:	b297      	uxth	r7, r2
    185a:	19f3      	adds	r3, r6, r7
    185c:	2b10      	cmp	r3, #16
    185e:	d87d      	bhi.n	195c <_Unwind_VRS_Pop+0x174>
    1860:	682b      	ldr	r3, [r5, #0]
    1862:	071a      	lsls	r2, r3, #28
    1864:	f100 80e0 	bmi.w	1a28 <_Unwind_VRS_Pop+0x240>
    1868:	ac22      	add	r4, sp, #136	; 0x88
    186a:	4620      	mov	r0, r4
    186c:	f000 f942 	bl	1af4 <__gnu_Unwind_Save_WMMXD>
    1870:	eb04 00c6 	add.w	r0, r4, r6, lsl #3
    1874:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    1876:	b14f      	cbz	r7, 188c <_Unwind_VRS_Pop+0xa4>
    1878:	4603      	mov	r3, r0
    187a:	00fa      	lsls	r2, r7, #3
    187c:	4410      	add	r0, r2
    187e:	1ace      	subs	r6, r1, r3
    1880:	599f      	ldr	r7, [r3, r6]
    1882:	f843 7b04 	str.w	r7, [r3], #4
    1886:	4283      	cmp	r3, r0
    1888:	d1fa      	bne.n	1880 <_Unwind_VRS_Pop+0x98>
    188a:	4411      	add	r1, r2
    188c:	4620      	mov	r0, r4
    188e:	63a9      	str	r1, [r5, #56]	; 0x38
    1890:	f000 f90e 	bl	1ab0 <__gnu_Unwind_Restore_WMMXD>
    1894:	2000      	movs	r0, #0
    1896:	b044      	add	sp, #272	; 0x110
    1898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    189c:	2b01      	cmp	r3, #1
    189e:	ea4f 4612 	mov.w	r6, r2, lsr #16
    18a2:	fa1f f882 	uxth.w	r8, r2
    18a6:	d055      	beq.n	1954 <_Unwind_VRS_Pop+0x16c>
    18a8:	2b05      	cmp	r3, #5
    18aa:	d157      	bne.n	195c <_Unwind_VRS_Pop+0x174>
    18ac:	eb06 0708 	add.w	r7, r6, r8
    18b0:	2f20      	cmp	r7, #32
    18b2:	d853      	bhi.n	195c <_Unwind_VRS_Pop+0x174>
    18b4:	2e0f      	cmp	r6, #15
    18b6:	d955      	bls.n	1964 <_Unwind_VRS_Pop+0x17c>
    18b8:	4647      	mov	r7, r8
    18ba:	f1b8 0f00 	cmp.w	r8, #0
    18be:	d164      	bne.n	198a <_Unwind_VRS_Pop+0x1a2>
    18c0:	4640      	mov	r0, r8
    18c2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    18c4:	f1b8 0f00 	cmp.w	r8, #0
    18c8:	f000 80ba 	beq.w	1a40 <_Unwind_VRS_Pop+0x258>
    18cc:	ac22      	add	r4, sp, #136	; 0x88
    18ce:	2700      	movs	r7, #0
    18d0:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    18d4:	3c04      	subs	r4, #4
    18d6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
    18da:	f851 0b04 	ldr.w	r0, [r1], #4
    18de:	f844 0f04 	str.w	r0, [r4, #4]!
    18e2:	4291      	cmp	r1, r2
    18e4:	d1f9      	bne.n	18da <_Unwind_VRS_Pop+0xf2>
    18e6:	b17f      	cbz	r7, 1908 <_Unwind_VRS_Pop+0x120>
    18e8:	ac02      	add	r4, sp, #8
    18ea:	2e10      	cmp	r6, #16
    18ec:	4630      	mov	r0, r6
    18ee:	bf38      	it	cc
    18f0:	2010      	movcc	r0, #16
    18f2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    18f6:	3884      	subs	r0, #132	; 0x84
    18f8:	eb02 01c7 	add.w	r1, r2, r7, lsl #3
    18fc:	f852 4b04 	ldr.w	r4, [r2], #4
    1900:	f840 4f04 	str.w	r4, [r0, #4]!
    1904:	4291      	cmp	r1, r2
    1906:	d1f9      	bne.n	18fc <_Unwind_VRS_Pop+0x114>
    1908:	2b01      	cmp	r3, #1
    190a:	f000 8095 	beq.w	1a38 <_Unwind_VRS_Pop+0x250>
    190e:	2e0f      	cmp	r6, #15
    1910:	63a9      	str	r1, [r5, #56]	; 0x38
    1912:	d96b      	bls.n	19ec <_Unwind_VRS_Pop+0x204>
    1914:	b117      	cbz	r7, 191c <_Unwind_VRS_Pop+0x134>
    1916:	a802      	add	r0, sp, #8
    1918:	f000 f8c2 	bl	1aa0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    191c:	2000      	movs	r0, #0
    191e:	b044      	add	sp, #272	; 0x110
    1920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1924:	b9d3      	cbnz	r3, 195c <_Unwind_VRS_Pop+0x174>
    1926:	6bac      	ldr	r4, [r5, #56]	; 0x38
    1928:	b297      	uxth	r7, r2
    192a:	2601      	movs	r6, #1
    192c:	f105 0c04 	add.w	ip, r5, #4
    1930:	fa06 f103 	lsl.w	r1, r6, r3
    1934:	4239      	tst	r1, r7
    1936:	4620      	mov	r0, r4
    1938:	d004      	beq.n	1944 <_Unwind_VRS_Pop+0x15c>
    193a:	f850 1b04 	ldr.w	r1, [r0], #4
    193e:	f84c 1023 	str.w	r1, [ip, r3, lsl #2]
    1942:	4604      	mov	r4, r0
    1944:	3301      	adds	r3, #1
    1946:	2b10      	cmp	r3, #16
    1948:	d1f2      	bne.n	1930 <_Unwind_VRS_Pop+0x148>
    194a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    194e:	d1e5      	bne.n	191c <_Unwind_VRS_Pop+0x134>
    1950:	63ac      	str	r4, [r5, #56]	; 0x38
    1952:	e004      	b.n	195e <_Unwind_VRS_Pop+0x176>
    1954:	eb06 0208 	add.w	r2, r6, r8
    1958:	2a10      	cmp	r2, #16
    195a:	d928      	bls.n	19ae <_Unwind_VRS_Pop+0x1c6>
    195c:	2002      	movs	r0, #2
    195e:	b044      	add	sp, #272	; 0x110
    1960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1964:	2f10      	cmp	r7, #16
    1966:	d97c      	bls.n	1a62 <_Unwind_VRS_Pop+0x27a>
    1968:	3f10      	subs	r7, #16
    196a:	682a      	ldr	r2, [r5, #0]
    196c:	07d0      	lsls	r0, r2, #31
    196e:	d50a      	bpl.n	1986 <_Unwind_VRS_Pop+0x19e>
    1970:	4628      	mov	r0, r5
    1972:	f022 0201 	bic.w	r2, r2, #1
    1976:	f042 0202 	orr.w	r2, r2, #2
    197a:	f840 2b48 	str.w	r2, [r0], #72
    197e:	9301      	str	r3, [sp, #4]
    1980:	f000 f88a 	bl	1a98 <__gnu_Unwind_Save_VFP_D>
    1984:	9b01      	ldr	r3, [sp, #4]
    1986:	2f00      	cmp	r7, #0
    1988:	d05c      	beq.n	1a44 <_Unwind_VRS_Pop+0x25c>
    198a:	682a      	ldr	r2, [r5, #0]
    198c:	0751      	lsls	r1, r2, #29
    198e:	d437      	bmi.n	1a00 <_Unwind_VRS_Pop+0x218>
    1990:	2e0f      	cmp	r6, #15
    1992:	d92f      	bls.n	19f4 <_Unwind_VRS_Pop+0x20c>
    1994:	ac02      	add	r4, sp, #8
    1996:	4620      	mov	r0, r4
    1998:	9301      	str	r3, [sp, #4]
    199a:	f000 f885 	bl	1aa8 <__gnu_Unwind_Save_VFP_D_16_to_31>
    199e:	f1c6 0010 	rsb	r0, r6, #16
    19a2:	2800      	cmp	r0, #0
    19a4:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    19a6:	9b01      	ldr	r3, [sp, #4]
    19a8:	dd48      	ble.n	1a3c <_Unwind_VRS_Pop+0x254>
    19aa:	ac22      	add	r4, sp, #136	; 0x88
    19ac:	e790      	b.n	18d0 <_Unwind_VRS_Pop+0xe8>
    19ae:	2e0f      	cmp	r6, #15
    19b0:	d8d4      	bhi.n	195c <_Unwind_VRS_Pop+0x174>
    19b2:	682a      	ldr	r2, [r5, #0]
    19b4:	07d1      	lsls	r1, r2, #31
    19b6:	d508      	bpl.n	19ca <_Unwind_VRS_Pop+0x1e2>
    19b8:	4628      	mov	r0, r5
    19ba:	f022 0203 	bic.w	r2, r2, #3
    19be:	f840 2b48 	str.w	r2, [r0], #72
    19c2:	9301      	str	r3, [sp, #4]
    19c4:	f000 f860 	bl	1a88 <__gnu_Unwind_Save_VFP>
    19c8:	9b01      	ldr	r3, [sp, #4]
    19ca:	9301      	str	r3, [sp, #4]
    19cc:	ac22      	add	r4, sp, #136	; 0x88
    19ce:	4620      	mov	r0, r4
    19d0:	f000 f85a 	bl	1a88 <__gnu_Unwind_Save_VFP>
    19d4:	4640      	mov	r0, r8
    19d6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    19d8:	9b01      	ldr	r3, [sp, #4]
    19da:	2800      	cmp	r0, #0
    19dc:	f47f af77 	bne.w	18ce <_Unwind_VRS_Pop+0xe6>
    19e0:	3104      	adds	r1, #4
    19e2:	63a9      	str	r1, [r5, #56]	; 0x38
    19e4:	4620      	mov	r0, r4
    19e6:	f000 f84b 	bl	1a80 <__gnu_Unwind_Restore_VFP>
    19ea:	e797      	b.n	191c <_Unwind_VRS_Pop+0x134>
    19ec:	a822      	add	r0, sp, #136	; 0x88
    19ee:	f000 f84f 	bl	1a90 <__gnu_Unwind_Restore_VFP_D>
    19f2:	e78f      	b.n	1914 <_Unwind_VRS_Pop+0x12c>
    19f4:	a822      	add	r0, sp, #136	; 0x88
    19f6:	9301      	str	r3, [sp, #4]
    19f8:	f000 f84e 	bl	1a98 <__gnu_Unwind_Save_VFP_D>
    19fc:	9b01      	ldr	r3, [sp, #4]
    19fe:	e7c9      	b.n	1994 <_Unwind_VRS_Pop+0x1ac>
    1a00:	4628      	mov	r0, r5
    1a02:	f022 0204 	bic.w	r2, r2, #4
    1a06:	f840 2bd0 	str.w	r2, [r0], #208
    1a0a:	9301      	str	r3, [sp, #4]
    1a0c:	f000 f84c 	bl	1aa8 <__gnu_Unwind_Save_VFP_D_16_to_31>
    1a10:	9b01      	ldr	r3, [sp, #4]
    1a12:	e7bd      	b.n	1990 <_Unwind_VRS_Pop+0x1a8>
    1a14:	f023 0310 	bic.w	r3, r3, #16
    1a18:	602b      	str	r3, [r5, #0]
    1a1a:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    1a1e:	9201      	str	r2, [sp, #4]
    1a20:	f000 f894 	bl	1b4c <__gnu_Unwind_Save_WMMXC>
    1a24:	9a01      	ldr	r2, [sp, #4]
    1a26:	e6f5      	b.n	1814 <_Unwind_VRS_Pop+0x2c>
    1a28:	f023 0308 	bic.w	r3, r3, #8
    1a2c:	602b      	str	r3, [r5, #0]
    1a2e:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    1a32:	f000 f85f 	bl	1af4 <__gnu_Unwind_Save_WMMXD>
    1a36:	e717      	b.n	1868 <_Unwind_VRS_Pop+0x80>
    1a38:	ac22      	add	r4, sp, #136	; 0x88
    1a3a:	e7d1      	b.n	19e0 <_Unwind_VRS_Pop+0x1f8>
    1a3c:	460a      	mov	r2, r1
    1a3e:	e754      	b.n	18ea <_Unwind_VRS_Pop+0x102>
    1a40:	4647      	mov	r7, r8
    1a42:	e764      	b.n	190e <_Unwind_VRS_Pop+0x126>
    1a44:	2e0f      	cmp	r6, #15
    1a46:	f63f af3b 	bhi.w	18c0 <_Unwind_VRS_Pop+0xd8>
    1a4a:	ac22      	add	r4, sp, #136	; 0x88
    1a4c:	4620      	mov	r0, r4
    1a4e:	9301      	str	r3, [sp, #4]
    1a50:	f000 f822 	bl	1a98 <__gnu_Unwind_Save_VFP_D>
    1a54:	4640      	mov	r0, r8
    1a56:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    1a58:	9b01      	ldr	r3, [sp, #4]
    1a5a:	2800      	cmp	r0, #0
    1a5c:	f47f af37 	bne.w	18ce <_Unwind_VRS_Pop+0xe6>
    1a60:	e755      	b.n	190e <_Unwind_VRS_Pop+0x126>
    1a62:	2700      	movs	r7, #0
    1a64:	e781      	b.n	196a <_Unwind_VRS_Pop+0x182>
    1a66:	bf00      	nop

00001a68 <__restore_core_regs>:
    1a68:	f100 0134 	add.w	r1, r0, #52	; 0x34
    1a6c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    1a70:	469c      	mov	ip, r3
    1a72:	46a6      	mov	lr, r4
    1a74:	f84c 5d04 	str.w	r5, [ip, #-4]!
    1a78:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    1a7c:	46e5      	mov	sp, ip
    1a7e:	bd00      	pop	{pc}

00001a80 <__gnu_Unwind_Restore_VFP>:
    1a80:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    1a84:	4770      	bx	lr
    1a86:	bf00      	nop

00001a88 <__gnu_Unwind_Save_VFP>:
    1a88:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    1a8c:	4770      	bx	lr
    1a8e:	bf00      	nop

00001a90 <__gnu_Unwind_Restore_VFP_D>:
    1a90:	ec90 0b20 	vldmia	r0, {d0-d15}
    1a94:	4770      	bx	lr
    1a96:	bf00      	nop

00001a98 <__gnu_Unwind_Save_VFP_D>:
    1a98:	ec80 0b20 	vstmia	r0, {d0-d15}
    1a9c:	4770      	bx	lr
    1a9e:	bf00      	nop

00001aa0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    1aa0:	ecd0 0b20 	vldmia	r0, {d16-d31}
    1aa4:	4770      	bx	lr
    1aa6:	bf00      	nop

00001aa8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
    1aa8:	ecc0 0b20 	vstmia	r0, {d16-d31}
    1aac:	4770      	bx	lr
    1aae:	bf00      	nop

00001ab0 <__gnu_Unwind_Restore_WMMXD>:
    1ab0:	ecf0 0102 	ldfe	f0, [r0], #8
    1ab4:	ecf0 1102 	ldfe	f1, [r0], #8
    1ab8:	ecf0 2102 	ldfe	f2, [r0], #8
    1abc:	ecf0 3102 	ldfe	f3, [r0], #8
    1ac0:	ecf0 4102 	ldfe	f4, [r0], #8
    1ac4:	ecf0 5102 	ldfe	f5, [r0], #8
    1ac8:	ecf0 6102 	ldfe	f6, [r0], #8
    1acc:	ecf0 7102 	ldfe	f7, [r0], #8
    1ad0:	ecf0 8102 	ldfp	f0, [r0], #8
    1ad4:	ecf0 9102 	ldfp	f1, [r0], #8
    1ad8:	ecf0 a102 	ldfp	f2, [r0], #8
    1adc:	ecf0 b102 	ldfp	f3, [r0], #8
    1ae0:	ecf0 c102 	ldfp	f4, [r0], #8
    1ae4:	ecf0 d102 	ldfp	f5, [r0], #8
    1ae8:	ecf0 e102 	ldfp	f6, [r0], #8
    1aec:	ecf0 f102 	ldfp	f7, [r0], #8
    1af0:	4770      	bx	lr
    1af2:	bf00      	nop

00001af4 <__gnu_Unwind_Save_WMMXD>:
    1af4:	ece0 0102 	stfe	f0, [r0], #8
    1af8:	ece0 1102 	stfe	f1, [r0], #8
    1afc:	ece0 2102 	stfe	f2, [r0], #8
    1b00:	ece0 3102 	stfe	f3, [r0], #8
    1b04:	ece0 4102 	stfe	f4, [r0], #8
    1b08:	ece0 5102 	stfe	f5, [r0], #8
    1b0c:	ece0 6102 	stfe	f6, [r0], #8
    1b10:	ece0 7102 	stfe	f7, [r0], #8
    1b14:	ece0 8102 	stfp	f0, [r0], #8
    1b18:	ece0 9102 	stfp	f1, [r0], #8
    1b1c:	ece0 a102 	stfp	f2, [r0], #8
    1b20:	ece0 b102 	stfp	f3, [r0], #8
    1b24:	ece0 c102 	stfp	f4, [r0], #8
    1b28:	ece0 d102 	stfp	f5, [r0], #8
    1b2c:	ece0 e102 	stfp	f6, [r0], #8
    1b30:	ece0 f102 	stfp	f7, [r0], #8
    1b34:	4770      	bx	lr
    1b36:	bf00      	nop

00001b38 <__gnu_Unwind_Restore_WMMXC>:
    1b38:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    1b3c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    1b40:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    1b44:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    1b48:	4770      	bx	lr
    1b4a:	bf00      	nop

00001b4c <__gnu_Unwind_Save_WMMXC>:
    1b4c:	fca0 8101 	stc2	1, cr8, [r0], #4
    1b50:	fca0 9101 	stc2	1, cr9, [r0], #4
    1b54:	fca0 a101 	stc2	1, cr10, [r0], #4
    1b58:	fca0 b101 	stc2	1, cr11, [r0], #4
    1b5c:	4770      	bx	lr
    1b5e:	bf00      	nop

00001b60 <_Unwind_RaiseException>:
    1b60:	46ec      	mov	ip, sp
    1b62:	b500      	push	{lr}
    1b64:	e92d 5000 	stmdb	sp!, {ip, lr}
    1b68:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1b6c:	f04f 0300 	mov.w	r3, #0
    1b70:	e92d 000c 	stmdb	sp!, {r2, r3}
    1b74:	a901      	add	r1, sp, #4
    1b76:	f7ff fbe5 	bl	1344 <__gnu_Unwind_RaiseException>
    1b7a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    1b7e:	b012      	add	sp, #72	; 0x48
    1b80:	4770      	bx	lr
    1b82:	bf00      	nop

00001b84 <_Unwind_Resume>:
    1b84:	46ec      	mov	ip, sp
    1b86:	b500      	push	{lr}
    1b88:	e92d 5000 	stmdb	sp!, {ip, lr}
    1b8c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1b90:	f04f 0300 	mov.w	r3, #0
    1b94:	e92d 000c 	stmdb	sp!, {r2, r3}
    1b98:	a901      	add	r1, sp, #4
    1b9a:	f7ff fc0d 	bl	13b8 <__gnu_Unwind_Resume>
    1b9e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    1ba2:	b012      	add	sp, #72	; 0x48
    1ba4:	4770      	bx	lr
    1ba6:	bf00      	nop

00001ba8 <_Unwind_Resume_or_Rethrow>:
    1ba8:	46ec      	mov	ip, sp
    1baa:	b500      	push	{lr}
    1bac:	e92d 5000 	stmdb	sp!, {ip, lr}
    1bb0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1bb4:	f04f 0300 	mov.w	r3, #0
    1bb8:	e92d 000c 	stmdb	sp!, {r2, r3}
    1bbc:	a901      	add	r1, sp, #4
    1bbe:	f7ff fc1d 	bl	13fc <__gnu_Unwind_Resume_or_Rethrow>
    1bc2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    1bc6:	b012      	add	sp, #72	; 0x48
    1bc8:	4770      	bx	lr
    1bca:	bf00      	nop

00001bcc <_Unwind_ForcedUnwind>:
    1bcc:	46ec      	mov	ip, sp
    1bce:	b500      	push	{lr}
    1bd0:	e92d 5000 	stmdb	sp!, {ip, lr}
    1bd4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1bd8:	f04f 0300 	mov.w	r3, #0
    1bdc:	e92d 000c 	stmdb	sp!, {r2, r3}
    1be0:	ab01      	add	r3, sp, #4
    1be2:	f7ff fbdf 	bl	13a4 <__gnu_Unwind_ForcedUnwind>
    1be6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    1bea:	b012      	add	sp, #72	; 0x48
    1bec:	4770      	bx	lr
    1bee:	bf00      	nop

00001bf0 <_Unwind_Backtrace>:
    1bf0:	46ec      	mov	ip, sp
    1bf2:	b500      	push	{lr}
    1bf4:	e92d 5000 	stmdb	sp!, {ip, lr}
    1bf8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1bfc:	f04f 0300 	mov.w	r3, #0
    1c00:	e92d 000c 	stmdb	sp!, {r2, r3}
    1c04:	aa01      	add	r2, sp, #4
    1c06:	f7ff fc4d 	bl	14a4 <__gnu_Unwind_Backtrace>
    1c0a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    1c0e:	b012      	add	sp, #72	; 0x48
    1c10:	4770      	bx	lr
    1c12:	bf00      	nop

00001c14 <next_unwind_byte>:
    1c14:	7a02      	ldrb	r2, [r0, #8]
    1c16:	b982      	cbnz	r2, 1c3a <next_unwind_byte+0x26>
    1c18:	7a43      	ldrb	r3, [r0, #9]
    1c1a:	b1ab      	cbz	r3, 1c48 <next_unwind_byte+0x34>
    1c1c:	6842      	ldr	r2, [r0, #4]
    1c1e:	3b01      	subs	r3, #1
    1c20:	b410      	push	{r4}
    1c22:	7243      	strb	r3, [r0, #9]
    1c24:	6813      	ldr	r3, [r2, #0]
    1c26:	2103      	movs	r1, #3
    1c28:	1d14      	adds	r4, r2, #4
    1c2a:	7201      	strb	r1, [r0, #8]
    1c2c:	021a      	lsls	r2, r3, #8
    1c2e:	6044      	str	r4, [r0, #4]
    1c30:	6002      	str	r2, [r0, #0]
    1c32:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c36:	0e18      	lsrs	r0, r3, #24
    1c38:	4770      	bx	lr
    1c3a:	6803      	ldr	r3, [r0, #0]
    1c3c:	3a01      	subs	r2, #1
    1c3e:	7202      	strb	r2, [r0, #8]
    1c40:	021a      	lsls	r2, r3, #8
    1c42:	6002      	str	r2, [r0, #0]
    1c44:	0e18      	lsrs	r0, r3, #24
    1c46:	4770      	bx	lr
    1c48:	20b0      	movs	r0, #176	; 0xb0
    1c4a:	4770      	bx	lr

00001c4c <_Unwind_GetGR.constprop.0>:
    1c4c:	b500      	push	{lr}
    1c4e:	b085      	sub	sp, #20
    1c50:	aa03      	add	r2, sp, #12
    1c52:	2300      	movs	r3, #0
    1c54:	9200      	str	r2, [sp, #0]
    1c56:	4619      	mov	r1, r3
    1c58:	220c      	movs	r2, #12
    1c5a:	f7ff fbdf 	bl	141c <_Unwind_VRS_Get>
    1c5e:	9803      	ldr	r0, [sp, #12]
    1c60:	b005      	add	sp, #20
    1c62:	f85d fb04 	ldr.w	pc, [sp], #4
    1c66:	bf00      	nop

00001c68 <unwind_UCB_from_context>:
    1c68:	e7f0      	b.n	1c4c <_Unwind_GetGR.constprop.0>
    1c6a:	bf00      	nop

00001c6c <__gnu_unwind_execute>:
    1c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1c70:	4605      	mov	r5, r0
    1c72:	b085      	sub	sp, #20
    1c74:	460e      	mov	r6, r1
    1c76:	f04f 0800 	mov.w	r8, #0
    1c7a:	4630      	mov	r0, r6
    1c7c:	f7ff ffca 	bl	1c14 <next_unwind_byte>
    1c80:	28b0      	cmp	r0, #176	; 0xb0
    1c82:	4604      	mov	r4, r0
    1c84:	f000 80b2 	beq.w	1dec <__gnu_unwind_execute+0x180>
    1c88:	0607      	lsls	r7, r0, #24
    1c8a:	d520      	bpl.n	1cce <__gnu_unwind_execute+0x62>
    1c8c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    1c90:	2b80      	cmp	r3, #128	; 0x80
    1c92:	d04d      	beq.n	1d30 <__gnu_unwind_execute+0xc4>
    1c94:	2b90      	cmp	r3, #144	; 0x90
    1c96:	d036      	beq.n	1d06 <__gnu_unwind_execute+0x9a>
    1c98:	2ba0      	cmp	r3, #160	; 0xa0
    1c9a:	d060      	beq.n	1d5e <__gnu_unwind_execute+0xf2>
    1c9c:	2bb0      	cmp	r3, #176	; 0xb0
    1c9e:	d074      	beq.n	1d8a <__gnu_unwind_execute+0x11e>
    1ca0:	2bc0      	cmp	r3, #192	; 0xc0
    1ca2:	f000 808b 	beq.w	1dbc <__gnu_unwind_execute+0x150>
    1ca6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    1caa:	2bd0      	cmp	r3, #208	; 0xd0
    1cac:	d10b      	bne.n	1cc6 <__gnu_unwind_execute+0x5a>
    1cae:	f000 0207 	and.w	r2, r0, #7
    1cb2:	3201      	adds	r2, #1
    1cb4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    1cb8:	2305      	movs	r3, #5
    1cba:	2101      	movs	r1, #1
    1cbc:	4628      	mov	r0, r5
    1cbe:	f7ff fd93 	bl	17e8 <_Unwind_VRS_Pop>
    1cc2:	2800      	cmp	r0, #0
    1cc4:	d0d9      	beq.n	1c7a <__gnu_unwind_execute+0xe>
    1cc6:	2009      	movs	r0, #9
    1cc8:	b005      	add	sp, #20
    1cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1cce:	f10d 090c 	add.w	r9, sp, #12
    1cd2:	2300      	movs	r3, #0
    1cd4:	4619      	mov	r1, r3
    1cd6:	0087      	lsls	r7, r0, #2
    1cd8:	f8cd 9000 	str.w	r9, [sp]
    1cdc:	220d      	movs	r2, #13
    1cde:	4628      	mov	r0, r5
    1ce0:	f7ff fb9c 	bl	141c <_Unwind_VRS_Get>
    1ce4:	b2ff      	uxtb	r7, r7
    1ce6:	9b03      	ldr	r3, [sp, #12]
    1ce8:	f8cd 9000 	str.w	r9, [sp]
    1cec:	3704      	adds	r7, #4
    1cee:	0660      	lsls	r0, r4, #25
    1cf0:	bf4c      	ite	mi
    1cf2:	1bdf      	submi	r7, r3, r7
    1cf4:	18ff      	addpl	r7, r7, r3
    1cf6:	2300      	movs	r3, #0
    1cf8:	4619      	mov	r1, r3
    1cfa:	220d      	movs	r2, #13
    1cfc:	4628      	mov	r0, r5
    1cfe:	9703      	str	r7, [sp, #12]
    1d00:	f7ff fbae 	bl	1460 <_Unwind_VRS_Set>
    1d04:	e7b9      	b.n	1c7a <__gnu_unwind_execute+0xe>
    1d06:	f000 030d 	and.w	r3, r0, #13
    1d0a:	2b0d      	cmp	r3, #13
    1d0c:	d0db      	beq.n	1cc6 <__gnu_unwind_execute+0x5a>
    1d0e:	af03      	add	r7, sp, #12
    1d10:	2300      	movs	r3, #0
    1d12:	f000 020f 	and.w	r2, r0, #15
    1d16:	4619      	mov	r1, r3
    1d18:	9700      	str	r7, [sp, #0]
    1d1a:	4628      	mov	r0, r5
    1d1c:	f7ff fb7e 	bl	141c <_Unwind_VRS_Get>
    1d20:	2300      	movs	r3, #0
    1d22:	9700      	str	r7, [sp, #0]
    1d24:	4619      	mov	r1, r3
    1d26:	220d      	movs	r2, #13
    1d28:	4628      	mov	r0, r5
    1d2a:	f7ff fb99 	bl	1460 <_Unwind_VRS_Set>
    1d2e:	e7a4      	b.n	1c7a <__gnu_unwind_execute+0xe>
    1d30:	4630      	mov	r0, r6
    1d32:	f7ff ff6f 	bl	1c14 <next_unwind_byte>
    1d36:	0224      	lsls	r4, r4, #8
    1d38:	4304      	orrs	r4, r0
    1d3a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    1d3e:	d0c2      	beq.n	1cc6 <__gnu_unwind_execute+0x5a>
    1d40:	0124      	lsls	r4, r4, #4
    1d42:	2300      	movs	r3, #0
    1d44:	b2a2      	uxth	r2, r4
    1d46:	4619      	mov	r1, r3
    1d48:	4628      	mov	r0, r5
    1d4a:	f7ff fd4d 	bl	17e8 <_Unwind_VRS_Pop>
    1d4e:	2800      	cmp	r0, #0
    1d50:	d1b9      	bne.n	1cc6 <__gnu_unwind_execute+0x5a>
    1d52:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    1d56:	bf18      	it	ne
    1d58:	f04f 0801 	movne.w	r8, #1
    1d5c:	e78d      	b.n	1c7a <__gnu_unwind_execute+0xe>
    1d5e:	43c2      	mvns	r2, r0
    1d60:	f002 0307 	and.w	r3, r2, #7
    1d64:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    1d68:	411a      	asrs	r2, r3
    1d6a:	0701      	lsls	r1, r0, #28
    1d6c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    1d70:	f04f 0300 	mov.w	r3, #0
    1d74:	bf48      	it	mi
    1d76:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    1d7a:	4619      	mov	r1, r3
    1d7c:	4628      	mov	r0, r5
    1d7e:	f7ff fd33 	bl	17e8 <_Unwind_VRS_Pop>
    1d82:	2800      	cmp	r0, #0
    1d84:	f43f af79 	beq.w	1c7a <__gnu_unwind_execute+0xe>
    1d88:	e79d      	b.n	1cc6 <__gnu_unwind_execute+0x5a>
    1d8a:	28b1      	cmp	r0, #177	; 0xb1
    1d8c:	d033      	beq.n	1df6 <__gnu_unwind_execute+0x18a>
    1d8e:	28b2      	cmp	r0, #178	; 0xb2
    1d90:	f000 80a0 	beq.w	1ed4 <__gnu_unwind_execute+0x268>
    1d94:	28b3      	cmp	r0, #179	; 0xb3
    1d96:	d041      	beq.n	1e1c <__gnu_unwind_execute+0x1b0>
    1d98:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    1d9c:	2bb4      	cmp	r3, #180	; 0xb4
    1d9e:	d092      	beq.n	1cc6 <__gnu_unwind_execute+0x5a>
    1da0:	f000 0207 	and.w	r2, r0, #7
    1da4:	3201      	adds	r2, #1
    1da6:	2301      	movs	r3, #1
    1da8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    1dac:	4619      	mov	r1, r3
    1dae:	4628      	mov	r0, r5
    1db0:	f7ff fd1a 	bl	17e8 <_Unwind_VRS_Pop>
    1db4:	2800      	cmp	r0, #0
    1db6:	f43f af60 	beq.w	1c7a <__gnu_unwind_execute+0xe>
    1dba:	e784      	b.n	1cc6 <__gnu_unwind_execute+0x5a>
    1dbc:	28c6      	cmp	r0, #198	; 0xc6
    1dbe:	d051      	beq.n	1e64 <__gnu_unwind_execute+0x1f8>
    1dc0:	28c7      	cmp	r0, #199	; 0xc7
    1dc2:	d05a      	beq.n	1e7a <__gnu_unwind_execute+0x20e>
    1dc4:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    1dc8:	2bc0      	cmp	r3, #192	; 0xc0
    1dca:	d069      	beq.n	1ea0 <__gnu_unwind_execute+0x234>
    1dcc:	28c8      	cmp	r0, #200	; 0xc8
    1dce:	d075      	beq.n	1ebc <__gnu_unwind_execute+0x250>
    1dd0:	28c9      	cmp	r0, #201	; 0xc9
    1dd2:	f47f af78 	bne.w	1cc6 <__gnu_unwind_execute+0x5a>
    1dd6:	4630      	mov	r0, r6
    1dd8:	f7ff ff1c 	bl	1c14 <next_unwind_byte>
    1ddc:	0302      	lsls	r2, r0, #12
    1dde:	f000 000f 	and.w	r0, r0, #15
    1de2:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    1de6:	3001      	adds	r0, #1
    1de8:	4302      	orrs	r2, r0
    1dea:	e765      	b.n	1cb8 <__gnu_unwind_execute+0x4c>
    1dec:	f1b8 0f00 	cmp.w	r8, #0
    1df0:	d027      	beq.n	1e42 <__gnu_unwind_execute+0x1d6>
    1df2:	2000      	movs	r0, #0
    1df4:	e768      	b.n	1cc8 <__gnu_unwind_execute+0x5c>
    1df6:	4630      	mov	r0, r6
    1df8:	f7ff ff0c 	bl	1c14 <next_unwind_byte>
    1dfc:	2800      	cmp	r0, #0
    1dfe:	f43f af62 	beq.w	1cc6 <__gnu_unwind_execute+0x5a>
    1e02:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    1e06:	f47f af5e 	bne.w	1cc6 <__gnu_unwind_execute+0x5a>
    1e0a:	4602      	mov	r2, r0
    1e0c:	4619      	mov	r1, r3
    1e0e:	4628      	mov	r0, r5
    1e10:	f7ff fcea 	bl	17e8 <_Unwind_VRS_Pop>
    1e14:	2800      	cmp	r0, #0
    1e16:	f43f af30 	beq.w	1c7a <__gnu_unwind_execute+0xe>
    1e1a:	e754      	b.n	1cc6 <__gnu_unwind_execute+0x5a>
    1e1c:	4630      	mov	r0, r6
    1e1e:	f7ff fef9 	bl	1c14 <next_unwind_byte>
    1e22:	0301      	lsls	r1, r0, #12
    1e24:	f000 000f 	and.w	r0, r0, #15
    1e28:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    1e2c:	1c42      	adds	r2, r0, #1
    1e2e:	2301      	movs	r3, #1
    1e30:	430a      	orrs	r2, r1
    1e32:	4628      	mov	r0, r5
    1e34:	4619      	mov	r1, r3
    1e36:	f7ff fcd7 	bl	17e8 <_Unwind_VRS_Pop>
    1e3a:	2800      	cmp	r0, #0
    1e3c:	f43f af1d 	beq.w	1c7a <__gnu_unwind_execute+0xe>
    1e40:	e741      	b.n	1cc6 <__gnu_unwind_execute+0x5a>
    1e42:	ac03      	add	r4, sp, #12
    1e44:	4643      	mov	r3, r8
    1e46:	220e      	movs	r2, #14
    1e48:	4641      	mov	r1, r8
    1e4a:	9400      	str	r4, [sp, #0]
    1e4c:	4628      	mov	r0, r5
    1e4e:	f7ff fae5 	bl	141c <_Unwind_VRS_Get>
    1e52:	9400      	str	r4, [sp, #0]
    1e54:	4628      	mov	r0, r5
    1e56:	4643      	mov	r3, r8
    1e58:	220f      	movs	r2, #15
    1e5a:	4641      	mov	r1, r8
    1e5c:	f7ff fb00 	bl	1460 <_Unwind_VRS_Set>
    1e60:	4640      	mov	r0, r8
    1e62:	e731      	b.n	1cc8 <__gnu_unwind_execute+0x5c>
    1e64:	4630      	mov	r0, r6
    1e66:	f7ff fed5 	bl	1c14 <next_unwind_byte>
    1e6a:	0301      	lsls	r1, r0, #12
    1e6c:	f000 000f 	and.w	r0, r0, #15
    1e70:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    1e74:	1c42      	adds	r2, r0, #1
    1e76:	2303      	movs	r3, #3
    1e78:	e7da      	b.n	1e30 <__gnu_unwind_execute+0x1c4>
    1e7a:	4630      	mov	r0, r6
    1e7c:	f7ff feca 	bl	1c14 <next_unwind_byte>
    1e80:	2800      	cmp	r0, #0
    1e82:	f43f af20 	beq.w	1cc6 <__gnu_unwind_execute+0x5a>
    1e86:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    1e8a:	f47f af1c 	bne.w	1cc6 <__gnu_unwind_execute+0x5a>
    1e8e:	4602      	mov	r2, r0
    1e90:	2104      	movs	r1, #4
    1e92:	4628      	mov	r0, r5
    1e94:	f7ff fca8 	bl	17e8 <_Unwind_VRS_Pop>
    1e98:	2800      	cmp	r0, #0
    1e9a:	f43f aeee 	beq.w	1c7a <__gnu_unwind_execute+0xe>
    1e9e:	e712      	b.n	1cc6 <__gnu_unwind_execute+0x5a>
    1ea0:	f000 020f 	and.w	r2, r0, #15
    1ea4:	3201      	adds	r2, #1
    1ea6:	2303      	movs	r3, #3
    1ea8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    1eac:	4619      	mov	r1, r3
    1eae:	4628      	mov	r0, r5
    1eb0:	f7ff fc9a 	bl	17e8 <_Unwind_VRS_Pop>
    1eb4:	2800      	cmp	r0, #0
    1eb6:	f43f aee0 	beq.w	1c7a <__gnu_unwind_execute+0xe>
    1eba:	e704      	b.n	1cc6 <__gnu_unwind_execute+0x5a>
    1ebc:	4630      	mov	r0, r6
    1ebe:	f7ff fea9 	bl	1c14 <next_unwind_byte>
    1ec2:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    1ec6:	f000 030f 	and.w	r3, r0, #15
    1eca:	3210      	adds	r2, #16
    1ecc:	3301      	adds	r3, #1
    1ece:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    1ed2:	e6f1      	b.n	1cb8 <__gnu_unwind_execute+0x4c>
    1ed4:	2300      	movs	r3, #0
    1ed6:	f10d 090c 	add.w	r9, sp, #12
    1eda:	220d      	movs	r2, #13
    1edc:	4619      	mov	r1, r3
    1ede:	f8cd 9000 	str.w	r9, [sp]
    1ee2:	4628      	mov	r0, r5
    1ee4:	f7ff fa9a 	bl	141c <_Unwind_VRS_Get>
    1ee8:	4630      	mov	r0, r6
    1eea:	f7ff fe93 	bl	1c14 <next_unwind_byte>
    1eee:	0602      	lsls	r2, r0, #24
    1ef0:	f04f 0702 	mov.w	r7, #2
    1ef4:	d50c      	bpl.n	1f10 <__gnu_unwind_execute+0x2a4>
    1ef6:	9b03      	ldr	r3, [sp, #12]
    1ef8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    1efc:	40b8      	lsls	r0, r7
    1efe:	4403      	add	r3, r0
    1f00:	4630      	mov	r0, r6
    1f02:	9303      	str	r3, [sp, #12]
    1f04:	f7ff fe86 	bl	1c14 <next_unwind_byte>
    1f08:	0603      	lsls	r3, r0, #24
    1f0a:	f107 0707 	add.w	r7, r7, #7
    1f0e:	d4f2      	bmi.n	1ef6 <__gnu_unwind_execute+0x28a>
    1f10:	9b03      	ldr	r3, [sp, #12]
    1f12:	f8cd 9000 	str.w	r9, [sp]
    1f16:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    1f1a:	f503 7201 	add.w	r2, r3, #516	; 0x204
    1f1e:	40bc      	lsls	r4, r7
    1f20:	2300      	movs	r3, #0
    1f22:	4414      	add	r4, r2
    1f24:	4619      	mov	r1, r3
    1f26:	220d      	movs	r2, #13
    1f28:	4628      	mov	r0, r5
    1f2a:	9403      	str	r4, [sp, #12]
    1f2c:	f7ff fa98 	bl	1460 <_Unwind_VRS_Set>
    1f30:	e6a3      	b.n	1c7a <__gnu_unwind_execute+0xe>
    1f32:	bf00      	nop

00001f34 <__gnu_unwind_frame>:
    1f34:	b510      	push	{r4, lr}
    1f36:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    1f38:	b084      	sub	sp, #16
    1f3a:	685a      	ldr	r2, [r3, #4]
    1f3c:	2003      	movs	r0, #3
    1f3e:	f88d 000c 	strb.w	r0, [sp, #12]
    1f42:	79dc      	ldrb	r4, [r3, #7]
    1f44:	f88d 400d 	strb.w	r4, [sp, #13]
    1f48:	0212      	lsls	r2, r2, #8
    1f4a:	3308      	adds	r3, #8
    1f4c:	4608      	mov	r0, r1
    1f4e:	a901      	add	r1, sp, #4
    1f50:	9201      	str	r2, [sp, #4]
    1f52:	9302      	str	r3, [sp, #8]
    1f54:	f7ff fe8a 	bl	1c6c <__gnu_unwind_execute>
    1f58:	b004      	add	sp, #16
    1f5a:	bd10      	pop	{r4, pc}

00001f5c <_Unwind_GetRegionStart>:
    1f5c:	b508      	push	{r3, lr}
    1f5e:	f7ff fe83 	bl	1c68 <unwind_UCB_from_context>
    1f62:	6c80      	ldr	r0, [r0, #72]	; 0x48
    1f64:	bd08      	pop	{r3, pc}
    1f66:	bf00      	nop

00001f68 <_Unwind_GetLanguageSpecificData>:
    1f68:	b508      	push	{r3, lr}
    1f6a:	f7ff fe7d 	bl	1c68 <unwind_UCB_from_context>
    1f6e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    1f70:	79c3      	ldrb	r3, [r0, #7]
    1f72:	3302      	adds	r3, #2
    1f74:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    1f78:	bd08      	pop	{r3, pc}
    1f7a:	bf00      	nop

00001f7c <abort>:
    1f7c:	b508      	push	{r3, lr}
    1f7e:	2006      	movs	r0, #6
    1f80:	f000 f918 	bl	21b4 <raise>
    1f84:	2001      	movs	r0, #1
    1f86:	f000 fb83 	bl	2690 <_exit>
	...

00001f8c <__cxa_atexit>:
    1f8c:	b510      	push	{r4, lr}
    1f8e:	4c05      	ldr	r4, [pc, #20]	; (1fa4 <__cxa_atexit+0x18>)
    1f90:	4613      	mov	r3, r2
    1f92:	b12c      	cbz	r4, 1fa0 <__cxa_atexit+0x14>
    1f94:	460a      	mov	r2, r1
    1f96:	4601      	mov	r1, r0
    1f98:	2002      	movs	r0, #2
    1f9a:	f3af 8000 	nop.w
    1f9e:	bd10      	pop	{r4, pc}
    1fa0:	4620      	mov	r0, r4
    1fa2:	e7fc      	b.n	1f9e <__cxa_atexit+0x12>
    1fa4:	00000000 	.word	0x00000000

00001fa8 <malloc>:
    1fa8:	4b02      	ldr	r3, [pc, #8]	; (1fb4 <malloc+0xc>)
    1faa:	4601      	mov	r1, r0
    1fac:	6818      	ldr	r0, [r3, #0]
    1fae:	f000 b86f 	b.w	2090 <_malloc_r>
    1fb2:	bf00      	nop
    1fb4:	20000004 	.word	0x20000004

00001fb8 <free>:
    1fb8:	4b02      	ldr	r3, [pc, #8]	; (1fc4 <free+0xc>)
    1fba:	4601      	mov	r1, r0
    1fbc:	6818      	ldr	r0, [r3, #0]
    1fbe:	f000 b819 	b.w	1ff4 <_free_r>
    1fc2:	bf00      	nop
    1fc4:	20000004 	.word	0x20000004

00001fc8 <memcpy>:
    1fc8:	440a      	add	r2, r1
    1fca:	4291      	cmp	r1, r2
    1fcc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    1fd0:	d100      	bne.n	1fd4 <memcpy+0xc>
    1fd2:	4770      	bx	lr
    1fd4:	b510      	push	{r4, lr}
    1fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
    1fda:	f803 4f01 	strb.w	r4, [r3, #1]!
    1fde:	4291      	cmp	r1, r2
    1fe0:	d1f9      	bne.n	1fd6 <memcpy+0xe>
    1fe2:	bd10      	pop	{r4, pc}

00001fe4 <memset>:
    1fe4:	4402      	add	r2, r0
    1fe6:	4603      	mov	r3, r0
    1fe8:	4293      	cmp	r3, r2
    1fea:	d100      	bne.n	1fee <memset+0xa>
    1fec:	4770      	bx	lr
    1fee:	f803 1b01 	strb.w	r1, [r3], #1
    1ff2:	e7f9      	b.n	1fe8 <memset+0x4>

00001ff4 <_free_r>:
    1ff4:	b538      	push	{r3, r4, r5, lr}
    1ff6:	4605      	mov	r5, r0
    1ff8:	2900      	cmp	r1, #0
    1ffa:	d045      	beq.n	2088 <_free_r+0x94>
    1ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2000:	1f0c      	subs	r4, r1, #4
    2002:	2b00      	cmp	r3, #0
    2004:	bfb8      	it	lt
    2006:	18e4      	addlt	r4, r4, r3
    2008:	f000 f8f0 	bl	21ec <__malloc_lock>
    200c:	4a1f      	ldr	r2, [pc, #124]	; (208c <_free_r+0x98>)
    200e:	6813      	ldr	r3, [r2, #0]
    2010:	4610      	mov	r0, r2
    2012:	b933      	cbnz	r3, 2022 <_free_r+0x2e>
    2014:	6063      	str	r3, [r4, #4]
    2016:	6014      	str	r4, [r2, #0]
    2018:	4628      	mov	r0, r5
    201a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    201e:	f000 b8eb 	b.w	21f8 <__malloc_unlock>
    2022:	42a3      	cmp	r3, r4
    2024:	d90c      	bls.n	2040 <_free_r+0x4c>
    2026:	6821      	ldr	r1, [r4, #0]
    2028:	1862      	adds	r2, r4, r1
    202a:	4293      	cmp	r3, r2
    202c:	bf04      	itt	eq
    202e:	681a      	ldreq	r2, [r3, #0]
    2030:	685b      	ldreq	r3, [r3, #4]
    2032:	6063      	str	r3, [r4, #4]
    2034:	bf04      	itt	eq
    2036:	1852      	addeq	r2, r2, r1
    2038:	6022      	streq	r2, [r4, #0]
    203a:	6004      	str	r4, [r0, #0]
    203c:	e7ec      	b.n	2018 <_free_r+0x24>
    203e:	4613      	mov	r3, r2
    2040:	685a      	ldr	r2, [r3, #4]
    2042:	b10a      	cbz	r2, 2048 <_free_r+0x54>
    2044:	42a2      	cmp	r2, r4
    2046:	d9fa      	bls.n	203e <_free_r+0x4a>
    2048:	6819      	ldr	r1, [r3, #0]
    204a:	1858      	adds	r0, r3, r1
    204c:	42a0      	cmp	r0, r4
    204e:	d10b      	bne.n	2068 <_free_r+0x74>
    2050:	6820      	ldr	r0, [r4, #0]
    2052:	4401      	add	r1, r0
    2054:	1858      	adds	r0, r3, r1
    2056:	4282      	cmp	r2, r0
    2058:	6019      	str	r1, [r3, #0]
    205a:	d1dd      	bne.n	2018 <_free_r+0x24>
    205c:	6810      	ldr	r0, [r2, #0]
    205e:	6852      	ldr	r2, [r2, #4]
    2060:	605a      	str	r2, [r3, #4]
    2062:	4401      	add	r1, r0
    2064:	6019      	str	r1, [r3, #0]
    2066:	e7d7      	b.n	2018 <_free_r+0x24>
    2068:	d902      	bls.n	2070 <_free_r+0x7c>
    206a:	230c      	movs	r3, #12
    206c:	602b      	str	r3, [r5, #0]
    206e:	e7d3      	b.n	2018 <_free_r+0x24>
    2070:	6820      	ldr	r0, [r4, #0]
    2072:	1821      	adds	r1, r4, r0
    2074:	428a      	cmp	r2, r1
    2076:	bf04      	itt	eq
    2078:	6811      	ldreq	r1, [r2, #0]
    207a:	6852      	ldreq	r2, [r2, #4]
    207c:	6062      	str	r2, [r4, #4]
    207e:	bf04      	itt	eq
    2080:	1809      	addeq	r1, r1, r0
    2082:	6021      	streq	r1, [r4, #0]
    2084:	605c      	str	r4, [r3, #4]
    2086:	e7c7      	b.n	2018 <_free_r+0x24>
    2088:	bd38      	pop	{r3, r4, r5, pc}
    208a:	bf00      	nop
    208c:	2000011c 	.word	0x2000011c

00002090 <_malloc_r>:
    2090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2092:	1ccd      	adds	r5, r1, #3
    2094:	f025 0503 	bic.w	r5, r5, #3
    2098:	3508      	adds	r5, #8
    209a:	2d0c      	cmp	r5, #12
    209c:	bf38      	it	cc
    209e:	250c      	movcc	r5, #12
    20a0:	2d00      	cmp	r5, #0
    20a2:	4606      	mov	r6, r0
    20a4:	db01      	blt.n	20aa <_malloc_r+0x1a>
    20a6:	42a9      	cmp	r1, r5
    20a8:	d903      	bls.n	20b2 <_malloc_r+0x22>
    20aa:	230c      	movs	r3, #12
    20ac:	6033      	str	r3, [r6, #0]
    20ae:	2000      	movs	r0, #0
    20b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20b2:	f000 f89b 	bl	21ec <__malloc_lock>
    20b6:	4921      	ldr	r1, [pc, #132]	; (213c <_malloc_r+0xac>)
    20b8:	680a      	ldr	r2, [r1, #0]
    20ba:	4614      	mov	r4, r2
    20bc:	b99c      	cbnz	r4, 20e6 <_malloc_r+0x56>
    20be:	4f20      	ldr	r7, [pc, #128]	; (2140 <_malloc_r+0xb0>)
    20c0:	683b      	ldr	r3, [r7, #0]
    20c2:	b923      	cbnz	r3, 20ce <_malloc_r+0x3e>
    20c4:	4621      	mov	r1, r4
    20c6:	4630      	mov	r0, r6
    20c8:	f000 f83c 	bl	2144 <_sbrk_r>
    20cc:	6038      	str	r0, [r7, #0]
    20ce:	4629      	mov	r1, r5
    20d0:	4630      	mov	r0, r6
    20d2:	f000 f837 	bl	2144 <_sbrk_r>
    20d6:	1c43      	adds	r3, r0, #1
    20d8:	d123      	bne.n	2122 <_malloc_r+0x92>
    20da:	230c      	movs	r3, #12
    20dc:	6033      	str	r3, [r6, #0]
    20de:	4630      	mov	r0, r6
    20e0:	f000 f88a 	bl	21f8 <__malloc_unlock>
    20e4:	e7e3      	b.n	20ae <_malloc_r+0x1e>
    20e6:	6823      	ldr	r3, [r4, #0]
    20e8:	1b5b      	subs	r3, r3, r5
    20ea:	d417      	bmi.n	211c <_malloc_r+0x8c>
    20ec:	2b0b      	cmp	r3, #11
    20ee:	d903      	bls.n	20f8 <_malloc_r+0x68>
    20f0:	6023      	str	r3, [r4, #0]
    20f2:	441c      	add	r4, r3
    20f4:	6025      	str	r5, [r4, #0]
    20f6:	e004      	b.n	2102 <_malloc_r+0x72>
    20f8:	6863      	ldr	r3, [r4, #4]
    20fa:	42a2      	cmp	r2, r4
    20fc:	bf0c      	ite	eq
    20fe:	600b      	streq	r3, [r1, #0]
    2100:	6053      	strne	r3, [r2, #4]
    2102:	4630      	mov	r0, r6
    2104:	f000 f878 	bl	21f8 <__malloc_unlock>
    2108:	f104 000b 	add.w	r0, r4, #11
    210c:	1d23      	adds	r3, r4, #4
    210e:	f020 0007 	bic.w	r0, r0, #7
    2112:	1ac2      	subs	r2, r0, r3
    2114:	d0cc      	beq.n	20b0 <_malloc_r+0x20>
    2116:	1a1b      	subs	r3, r3, r0
    2118:	50a3      	str	r3, [r4, r2]
    211a:	e7c9      	b.n	20b0 <_malloc_r+0x20>
    211c:	4622      	mov	r2, r4
    211e:	6864      	ldr	r4, [r4, #4]
    2120:	e7cc      	b.n	20bc <_malloc_r+0x2c>
    2122:	1cc4      	adds	r4, r0, #3
    2124:	f024 0403 	bic.w	r4, r4, #3
    2128:	42a0      	cmp	r0, r4
    212a:	d0e3      	beq.n	20f4 <_malloc_r+0x64>
    212c:	1a21      	subs	r1, r4, r0
    212e:	4630      	mov	r0, r6
    2130:	f000 f808 	bl	2144 <_sbrk_r>
    2134:	3001      	adds	r0, #1
    2136:	d1dd      	bne.n	20f4 <_malloc_r+0x64>
    2138:	e7cf      	b.n	20da <_malloc_r+0x4a>
    213a:	bf00      	nop
    213c:	2000011c 	.word	0x2000011c
    2140:	20000120 	.word	0x20000120

00002144 <_sbrk_r>:
    2144:	b538      	push	{r3, r4, r5, lr}
    2146:	4c06      	ldr	r4, [pc, #24]	; (2160 <_sbrk_r+0x1c>)
    2148:	2300      	movs	r3, #0
    214a:	4605      	mov	r5, r0
    214c:	4608      	mov	r0, r1
    214e:	6023      	str	r3, [r4, #0]
    2150:	f000 f962 	bl	2418 <_sbrk>
    2154:	1c43      	adds	r3, r0, #1
    2156:	d102      	bne.n	215e <_sbrk_r+0x1a>
    2158:	6823      	ldr	r3, [r4, #0]
    215a:	b103      	cbz	r3, 215e <_sbrk_r+0x1a>
    215c:	602b      	str	r3, [r5, #0]
    215e:	bd38      	pop	{r3, r4, r5, pc}
    2160:	200001c8 	.word	0x200001c8

00002164 <_raise_r>:
    2164:	291f      	cmp	r1, #31
    2166:	b538      	push	{r3, r4, r5, lr}
    2168:	4604      	mov	r4, r0
    216a:	460d      	mov	r5, r1
    216c:	d904      	bls.n	2178 <_raise_r+0x14>
    216e:	2316      	movs	r3, #22
    2170:	6003      	str	r3, [r0, #0]
    2172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2176:	bd38      	pop	{r3, r4, r5, pc}
    2178:	6c42      	ldr	r2, [r0, #68]	; 0x44
    217a:	b112      	cbz	r2, 2182 <_raise_r+0x1e>
    217c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    2180:	b94b      	cbnz	r3, 2196 <_raise_r+0x32>
    2182:	4620      	mov	r0, r4
    2184:	f000 f830 	bl	21e8 <_getpid_r>
    2188:	462a      	mov	r2, r5
    218a:	4601      	mov	r1, r0
    218c:	4620      	mov	r0, r4
    218e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2192:	f000 b817 	b.w	21c4 <_kill_r>
    2196:	2b01      	cmp	r3, #1
    2198:	d00a      	beq.n	21b0 <_raise_r+0x4c>
    219a:	1c59      	adds	r1, r3, #1
    219c:	d103      	bne.n	21a6 <_raise_r+0x42>
    219e:	2316      	movs	r3, #22
    21a0:	6003      	str	r3, [r0, #0]
    21a2:	2001      	movs	r0, #1
    21a4:	e7e7      	b.n	2176 <_raise_r+0x12>
    21a6:	2400      	movs	r4, #0
    21a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    21ac:	4628      	mov	r0, r5
    21ae:	4798      	blx	r3
    21b0:	2000      	movs	r0, #0
    21b2:	e7e0      	b.n	2176 <_raise_r+0x12>

000021b4 <raise>:
    21b4:	4b02      	ldr	r3, [pc, #8]	; (21c0 <raise+0xc>)
    21b6:	4601      	mov	r1, r0
    21b8:	6818      	ldr	r0, [r3, #0]
    21ba:	f7ff bfd3 	b.w	2164 <_raise_r>
    21be:	bf00      	nop
    21c0:	20000004 	.word	0x20000004

000021c4 <_kill_r>:
    21c4:	b538      	push	{r3, r4, r5, lr}
    21c6:	4c07      	ldr	r4, [pc, #28]	; (21e4 <_kill_r+0x20>)
    21c8:	2300      	movs	r3, #0
    21ca:	4605      	mov	r5, r0
    21cc:	4608      	mov	r0, r1
    21ce:	4611      	mov	r1, r2
    21d0:	6023      	str	r3, [r4, #0]
    21d2:	f000 fa7b 	bl	26cc <_kill>
    21d6:	1c43      	adds	r3, r0, #1
    21d8:	d102      	bne.n	21e0 <_kill_r+0x1c>
    21da:	6823      	ldr	r3, [r4, #0]
    21dc:	b103      	cbz	r3, 21e0 <_kill_r+0x1c>
    21de:	602b      	str	r3, [r5, #0]
    21e0:	bd38      	pop	{r3, r4, r5, pc}
    21e2:	bf00      	nop
    21e4:	200001c8 	.word	0x200001c8

000021e8 <_getpid_r>:
    21e8:	f000 b914 	b.w	2414 <_getpid>

000021ec <__malloc_lock>:
    21ec:	4801      	ldr	r0, [pc, #4]	; (21f4 <__malloc_lock+0x8>)
    21ee:	f000 b80a 	b.w	2206 <__retarget_lock_acquire_recursive>
    21f2:	bf00      	nop
    21f4:	200001d0 	.word	0x200001d0

000021f8 <__malloc_unlock>:
    21f8:	4801      	ldr	r0, [pc, #4]	; (2200 <__malloc_unlock+0x8>)
    21fa:	f000 b805 	b.w	2208 <__retarget_lock_release_recursive>
    21fe:	bf00      	nop
    2200:	200001d0 	.word	0x200001d0

00002204 <__retarget_lock_init_recursive>:
    2204:	4770      	bx	lr

00002206 <__retarget_lock_acquire_recursive>:
    2206:	4770      	bx	lr

00002208 <__retarget_lock_release_recursive>:
    2208:	4770      	bx	lr
	...

0000220c <findslot>:
    220c:	4b0a      	ldr	r3, [pc, #40]	; (2238 <findslot+0x2c>)
    220e:	b510      	push	{r4, lr}
    2210:	4604      	mov	r4, r0
    2212:	6818      	ldr	r0, [r3, #0]
    2214:	b118      	cbz	r0, 221e <findslot+0x12>
    2216:	6983      	ldr	r3, [r0, #24]
    2218:	b90b      	cbnz	r3, 221e <findslot+0x12>
    221a:	f000 fac1 	bl	27a0 <__sinit>
    221e:	2c13      	cmp	r4, #19
    2220:	d807      	bhi.n	2232 <findslot+0x26>
    2222:	4806      	ldr	r0, [pc, #24]	; (223c <findslot+0x30>)
    2224:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
    2228:	3301      	adds	r3, #1
    222a:	d002      	beq.n	2232 <findslot+0x26>
    222c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    2230:	bd10      	pop	{r4, pc}
    2232:	2000      	movs	r0, #0
    2234:	e7fc      	b.n	2230 <findslot+0x24>
    2236:	bf00      	nop
    2238:	20000004 	.word	0x20000004
    223c:	20000128 	.word	0x20000128

00002240 <checkerror>:
    2240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2242:	1c43      	adds	r3, r0, #1
    2244:	4605      	mov	r5, r0
    2246:	d109      	bne.n	225c <checkerror+0x1c>
    2248:	f000 fa4c 	bl	26e4 <__errno>
    224c:	2413      	movs	r4, #19
    224e:	4606      	mov	r6, r0
    2250:	2700      	movs	r7, #0
    2252:	4620      	mov	r0, r4
    2254:	4639      	mov	r1, r7
    2256:	beab      	bkpt	0x00ab
    2258:	4604      	mov	r4, r0
    225a:	6034      	str	r4, [r6, #0]
    225c:	4628      	mov	r0, r5
    225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002260 <error>:
    2260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2262:	4605      	mov	r5, r0
    2264:	f000 fa3e 	bl	26e4 <__errno>
    2268:	2413      	movs	r4, #19
    226a:	4606      	mov	r6, r0
    226c:	2700      	movs	r7, #0
    226e:	4620      	mov	r0, r4
    2270:	4639      	mov	r1, r7
    2272:	beab      	bkpt	0x00ab
    2274:	4604      	mov	r4, r0
    2276:	6034      	str	r4, [r6, #0]
    2278:	4628      	mov	r0, r5
    227a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000227c <_swiread>:
    227c:	b530      	push	{r4, r5, lr}
    227e:	b085      	sub	sp, #20
    2280:	e9cd 0101 	strd	r0, r1, [sp, #4]
    2284:	9203      	str	r2, [sp, #12]
    2286:	2406      	movs	r4, #6
    2288:	ad01      	add	r5, sp, #4
    228a:	4620      	mov	r0, r4
    228c:	4629      	mov	r1, r5
    228e:	beab      	bkpt	0x00ab
    2290:	4604      	mov	r4, r0
    2292:	4620      	mov	r0, r4
    2294:	f7ff ffd4 	bl	2240 <checkerror>
    2298:	b005      	add	sp, #20
    229a:	bd30      	pop	{r4, r5, pc}

0000229c <_read>:
    229c:	b570      	push	{r4, r5, r6, lr}
    229e:	460e      	mov	r6, r1
    22a0:	4615      	mov	r5, r2
    22a2:	f7ff ffb3 	bl	220c <findslot>
    22a6:	4604      	mov	r4, r0
    22a8:	b930      	cbnz	r0, 22b8 <_read+0x1c>
    22aa:	f000 fa1b 	bl	26e4 <__errno>
    22ae:	2309      	movs	r3, #9
    22b0:	6003      	str	r3, [r0, #0]
    22b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    22b6:	bd70      	pop	{r4, r5, r6, pc}
    22b8:	462a      	mov	r2, r5
    22ba:	4631      	mov	r1, r6
    22bc:	6800      	ldr	r0, [r0, #0]
    22be:	f7ff ffdd 	bl	227c <_swiread>
    22c2:	1c43      	adds	r3, r0, #1
    22c4:	bf1f      	itttt	ne
    22c6:	6863      	ldrne	r3, [r4, #4]
    22c8:	1a28      	subne	r0, r5, r0
    22ca:	181b      	addne	r3, r3, r0
    22cc:	6063      	strne	r3, [r4, #4]
    22ce:	e7f2      	b.n	22b6 <_read+0x1a>

000022d0 <_swilseek>:
    22d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    22d2:	460c      	mov	r4, r1
    22d4:	4616      	mov	r6, r2
    22d6:	f7ff ff99 	bl	220c <findslot>
    22da:	4605      	mov	r5, r0
    22dc:	b940      	cbnz	r0, 22f0 <_swilseek+0x20>
    22de:	f000 fa01 	bl	26e4 <__errno>
    22e2:	2309      	movs	r3, #9
    22e4:	6003      	str	r3, [r0, #0]
    22e6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    22ea:	4620      	mov	r0, r4
    22ec:	b003      	add	sp, #12
    22ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22f0:	2e02      	cmp	r6, #2
    22f2:	d903      	bls.n	22fc <_swilseek+0x2c>
    22f4:	f000 f9f6 	bl	26e4 <__errno>
    22f8:	2316      	movs	r3, #22
    22fa:	e7f3      	b.n	22e4 <_swilseek+0x14>
    22fc:	2e01      	cmp	r6, #1
    22fe:	d112      	bne.n	2326 <_swilseek+0x56>
    2300:	6843      	ldr	r3, [r0, #4]
    2302:	18e4      	adds	r4, r4, r3
    2304:	d4f6      	bmi.n	22f4 <_swilseek+0x24>
    2306:	682b      	ldr	r3, [r5, #0]
    2308:	260a      	movs	r6, #10
    230a:	e9cd 3400 	strd	r3, r4, [sp]
    230e:	466f      	mov	r7, sp
    2310:	4630      	mov	r0, r6
    2312:	4639      	mov	r1, r7
    2314:	beab      	bkpt	0x00ab
    2316:	4606      	mov	r6, r0
    2318:	4630      	mov	r0, r6
    231a:	f7ff ff91 	bl	2240 <checkerror>
    231e:	2800      	cmp	r0, #0
    2320:	dbe1      	blt.n	22e6 <_swilseek+0x16>
    2322:	606c      	str	r4, [r5, #4]
    2324:	e7e1      	b.n	22ea <_swilseek+0x1a>
    2326:	2e02      	cmp	r6, #2
    2328:	d1ed      	bne.n	2306 <_swilseek+0x36>
    232a:	6803      	ldr	r3, [r0, #0]
    232c:	9300      	str	r3, [sp, #0]
    232e:	260c      	movs	r6, #12
    2330:	466f      	mov	r7, sp
    2332:	4630      	mov	r0, r6
    2334:	4639      	mov	r1, r7
    2336:	beab      	bkpt	0x00ab
    2338:	4606      	mov	r6, r0
    233a:	4630      	mov	r0, r6
    233c:	f7ff ff80 	bl	2240 <checkerror>
    2340:	1c43      	adds	r3, r0, #1
    2342:	d0d0      	beq.n	22e6 <_swilseek+0x16>
    2344:	4404      	add	r4, r0
    2346:	e7de      	b.n	2306 <_swilseek+0x36>

00002348 <_lseek>:
    2348:	f7ff bfc2 	b.w	22d0 <_swilseek>

0000234c <_swiwrite>:
    234c:	b530      	push	{r4, r5, lr}
    234e:	b085      	sub	sp, #20
    2350:	e9cd 0101 	strd	r0, r1, [sp, #4]
    2354:	9203      	str	r2, [sp, #12]
    2356:	2405      	movs	r4, #5
    2358:	ad01      	add	r5, sp, #4
    235a:	4620      	mov	r0, r4
    235c:	4629      	mov	r1, r5
    235e:	beab      	bkpt	0x00ab
    2360:	4604      	mov	r4, r0
    2362:	4620      	mov	r0, r4
    2364:	f7ff ff6c 	bl	2240 <checkerror>
    2368:	b005      	add	sp, #20
    236a:	bd30      	pop	{r4, r5, pc}

0000236c <_write>:
    236c:	b570      	push	{r4, r5, r6, lr}
    236e:	460e      	mov	r6, r1
    2370:	4615      	mov	r5, r2
    2372:	f7ff ff4b 	bl	220c <findslot>
    2376:	4604      	mov	r4, r0
    2378:	b930      	cbnz	r0, 2388 <_write+0x1c>
    237a:	f000 f9b3 	bl	26e4 <__errno>
    237e:	2309      	movs	r3, #9
    2380:	6003      	str	r3, [r0, #0]
    2382:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2386:	bd70      	pop	{r4, r5, r6, pc}
    2388:	462a      	mov	r2, r5
    238a:	4631      	mov	r1, r6
    238c:	6800      	ldr	r0, [r0, #0]
    238e:	f7ff ffdd 	bl	234c <_swiwrite>
    2392:	1e02      	subs	r2, r0, #0
    2394:	dbf5      	blt.n	2382 <_write+0x16>
    2396:	6863      	ldr	r3, [r4, #4]
    2398:	1aa8      	subs	r0, r5, r2
    239a:	4403      	add	r3, r0
    239c:	42aa      	cmp	r2, r5
    239e:	6063      	str	r3, [r4, #4]
    23a0:	d1f1      	bne.n	2386 <_write+0x1a>
    23a2:	2000      	movs	r0, #0
    23a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    23a8:	f7ff bf5a 	b.w	2260 <error>

000023ac <_swiclose>:
    23ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    23ae:	2402      	movs	r4, #2
    23b0:	9001      	str	r0, [sp, #4]
    23b2:	ad01      	add	r5, sp, #4
    23b4:	4620      	mov	r0, r4
    23b6:	4629      	mov	r1, r5
    23b8:	beab      	bkpt	0x00ab
    23ba:	4604      	mov	r4, r0
    23bc:	4620      	mov	r0, r4
    23be:	f7ff ff3f 	bl	2240 <checkerror>
    23c2:	b003      	add	sp, #12
    23c4:	bd30      	pop	{r4, r5, pc}
	...

000023c8 <_close>:
    23c8:	b538      	push	{r3, r4, r5, lr}
    23ca:	4605      	mov	r5, r0
    23cc:	f7ff ff1e 	bl	220c <findslot>
    23d0:	4604      	mov	r4, r0
    23d2:	b930      	cbnz	r0, 23e2 <_close+0x1a>
    23d4:	f000 f986 	bl	26e4 <__errno>
    23d8:	2309      	movs	r3, #9
    23da:	6003      	str	r3, [r0, #0]
    23dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    23e0:	bd38      	pop	{r3, r4, r5, pc}
    23e2:	3d01      	subs	r5, #1
    23e4:	2d01      	cmp	r5, #1
    23e6:	d809      	bhi.n	23fc <_close+0x34>
    23e8:	4b09      	ldr	r3, [pc, #36]	; (2410 <_close+0x48>)
    23ea:	689a      	ldr	r2, [r3, #8]
    23ec:	691b      	ldr	r3, [r3, #16]
    23ee:	429a      	cmp	r2, r3
    23f0:	d104      	bne.n	23fc <_close+0x34>
    23f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    23f6:	6003      	str	r3, [r0, #0]
    23f8:	2000      	movs	r0, #0
    23fa:	e7f1      	b.n	23e0 <_close+0x18>
    23fc:	6820      	ldr	r0, [r4, #0]
    23fe:	f7ff ffd5 	bl	23ac <_swiclose>
    2402:	2800      	cmp	r0, #0
    2404:	d1ec      	bne.n	23e0 <_close+0x18>
    2406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    240a:	6023      	str	r3, [r4, #0]
    240c:	e7e8      	b.n	23e0 <_close+0x18>
    240e:	bf00      	nop
    2410:	20000128 	.word	0x20000128

00002414 <_getpid>:
    2414:	2001      	movs	r0, #1
    2416:	4770      	bx	lr

00002418 <_sbrk>:
    2418:	4b0d      	ldr	r3, [pc, #52]	; (2450 <_sbrk+0x38>)
    241a:	6819      	ldr	r1, [r3, #0]
    241c:	b510      	push	{r4, lr}
    241e:	4602      	mov	r2, r0
    2420:	b909      	cbnz	r1, 2426 <_sbrk+0xe>
    2422:	490c      	ldr	r1, [pc, #48]	; (2454 <_sbrk+0x3c>)
    2424:	6019      	str	r1, [r3, #0]
    2426:	6818      	ldr	r0, [r3, #0]
    2428:	4669      	mov	r1, sp
    242a:	4402      	add	r2, r0
    242c:	428a      	cmp	r2, r1
    242e:	d806      	bhi.n	243e <_sbrk+0x26>
    2430:	4909      	ldr	r1, [pc, #36]	; (2458 <_sbrk+0x40>)
    2432:	4c0a      	ldr	r4, [pc, #40]	; (245c <_sbrk+0x44>)
    2434:	6809      	ldr	r1, [r1, #0]
    2436:	42a1      	cmp	r1, r4
    2438:	d008      	beq.n	244c <_sbrk+0x34>
    243a:	428a      	cmp	r2, r1
    243c:	d906      	bls.n	244c <_sbrk+0x34>
    243e:	f000 f951 	bl	26e4 <__errno>
    2442:	230c      	movs	r3, #12
    2444:	6003      	str	r3, [r0, #0]
    2446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    244a:	bd10      	pop	{r4, pc}
    244c:	601a      	str	r2, [r3, #0]
    244e:	e7fc      	b.n	244a <_sbrk+0x32>
    2450:	20000124 	.word	0x20000124
    2454:	200001d8 	.word	0x200001d8
    2458:	20000068 	.word	0x20000068
    245c:	cafedead 	.word	0xcafedead

00002460 <_swistat>:
    2460:	b570      	push	{r4, r5, r6, lr}
    2462:	460c      	mov	r4, r1
    2464:	f7ff fed2 	bl	220c <findslot>
    2468:	4606      	mov	r6, r0
    246a:	b930      	cbnz	r0, 247a <_swistat+0x1a>
    246c:	f000 f93a 	bl	26e4 <__errno>
    2470:	2309      	movs	r3, #9
    2472:	6003      	str	r3, [r0, #0]
    2474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2478:	bd70      	pop	{r4, r5, r6, pc}
    247a:	6863      	ldr	r3, [r4, #4]
    247c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    2480:	6063      	str	r3, [r4, #4]
    2482:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2486:	6463      	str	r3, [r4, #68]	; 0x44
    2488:	250c      	movs	r5, #12
    248a:	4628      	mov	r0, r5
    248c:	4631      	mov	r1, r6
    248e:	beab      	bkpt	0x00ab
    2490:	4605      	mov	r5, r0
    2492:	4628      	mov	r0, r5
    2494:	f7ff fed4 	bl	2240 <checkerror>
    2498:	1c43      	adds	r3, r0, #1
    249a:	bf1c      	itt	ne
    249c:	6120      	strne	r0, [r4, #16]
    249e:	2000      	movne	r0, #0
    24a0:	e7ea      	b.n	2478 <_swistat+0x18>

000024a2 <_stat>:
    24a2:	b538      	push	{r3, r4, r5, lr}
    24a4:	460d      	mov	r5, r1
    24a6:	4604      	mov	r4, r0
    24a8:	2258      	movs	r2, #88	; 0x58
    24aa:	2100      	movs	r1, #0
    24ac:	4628      	mov	r0, r5
    24ae:	f7ff fd99 	bl	1fe4 <memset>
    24b2:	4620      	mov	r0, r4
    24b4:	2100      	movs	r1, #0
    24b6:	f000 f811 	bl	24dc <_swiopen>
    24ba:	1c43      	adds	r3, r0, #1
    24bc:	4604      	mov	r4, r0
    24be:	d00b      	beq.n	24d8 <_stat+0x36>
    24c0:	686b      	ldr	r3, [r5, #4]
    24c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
    24c6:	606b      	str	r3, [r5, #4]
    24c8:	4629      	mov	r1, r5
    24ca:	f7ff ffc9 	bl	2460 <_swistat>
    24ce:	4605      	mov	r5, r0
    24d0:	4620      	mov	r0, r4
    24d2:	f7ff ff79 	bl	23c8 <_close>
    24d6:	462c      	mov	r4, r5
    24d8:	4620      	mov	r0, r4
    24da:	bd38      	pop	{r3, r4, r5, pc}

000024dc <_swiopen>:
    24dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    24e0:	4b2a      	ldr	r3, [pc, #168]	; (258c <_swiopen+0xb0>)
    24e2:	b097      	sub	sp, #92	; 0x5c
    24e4:	4681      	mov	r9, r0
    24e6:	460e      	mov	r6, r1
    24e8:	2500      	movs	r5, #0
    24ea:	461f      	mov	r7, r3
    24ec:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
    24f0:	1c61      	adds	r1, r4, #1
    24f2:	d037      	beq.n	2564 <_swiopen+0x88>
    24f4:	3501      	adds	r5, #1
    24f6:	2d14      	cmp	r5, #20
    24f8:	d1f8      	bne.n	24ec <_swiopen+0x10>
    24fa:	f000 f8f3 	bl	26e4 <__errno>
    24fe:	2318      	movs	r3, #24
    2500:	6003      	str	r3, [r0, #0]
    2502:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    2506:	e03d      	b.n	2584 <_swiopen+0xa8>
    2508:	f3c6 4400 	ubfx	r4, r6, #16, #1
    250c:	f240 6301 	movw	r3, #1537	; 0x601
    2510:	07b2      	lsls	r2, r6, #30
    2512:	bf48      	it	mi
    2514:	f044 0402 	orrmi.w	r4, r4, #2
    2518:	421e      	tst	r6, r3
    251a:	bf18      	it	ne
    251c:	f044 0404 	orrne.w	r4, r4, #4
    2520:	0733      	lsls	r3, r6, #28
    2522:	bf48      	it	mi
    2524:	f024 0404 	bicmi.w	r4, r4, #4
    2528:	4648      	mov	r0, r9
    252a:	bf48      	it	mi
    252c:	f044 0408 	orrmi.w	r4, r4, #8
    2530:	f8cd 9000 	str.w	r9, [sp]
    2534:	f000 fa13 	bl	295e <strlen>
    2538:	e9cd 4001 	strd	r4, r0, [sp, #4]
    253c:	2401      	movs	r4, #1
    253e:	4620      	mov	r0, r4
    2540:	4641      	mov	r1, r8
    2542:	beab      	bkpt	0x00ab
    2544:	4604      	mov	r4, r0
    2546:	2c00      	cmp	r4, #0
    2548:	db07      	blt.n	255a <_swiopen+0x7e>
    254a:	f847 4035 	str.w	r4, [r7, r5, lsl #3]
    254e:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
    2552:	2300      	movs	r3, #0
    2554:	607b      	str	r3, [r7, #4]
    2556:	462c      	mov	r4, r5
    2558:	e014      	b.n	2584 <_swiopen+0xa8>
    255a:	4620      	mov	r0, r4
    255c:	f7ff fe80 	bl	2260 <error>
    2560:	4604      	mov	r4, r0
    2562:	e00f      	b.n	2584 <_swiopen+0xa8>
    2564:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
    2568:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
    256c:	46e8      	mov	r8, sp
    256e:	d1cb      	bne.n	2508 <_swiopen+0x2c>
    2570:	4641      	mov	r1, r8
    2572:	4648      	mov	r0, r9
    2574:	f7ff ff95 	bl	24a2 <_stat>
    2578:	3001      	adds	r0, #1
    257a:	d0c5      	beq.n	2508 <_swiopen+0x2c>
    257c:	f000 f8b2 	bl	26e4 <__errno>
    2580:	2311      	movs	r3, #17
    2582:	6003      	str	r3, [r0, #0]
    2584:	4620      	mov	r0, r4
    2586:	b017      	add	sp, #92	; 0x5c
    2588:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    258c:	20000128 	.word	0x20000128

00002590 <_get_semihosting_exts>:
    2590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2594:	4607      	mov	r7, r0
    2596:	4688      	mov	r8, r1
    2598:	4829      	ldr	r0, [pc, #164]	; (2640 <_get_semihosting_exts+0xb0>)
    259a:	2100      	movs	r1, #0
    259c:	4615      	mov	r5, r2
    259e:	f7ff ff9d 	bl	24dc <_swiopen>
    25a2:	462a      	mov	r2, r5
    25a4:	4604      	mov	r4, r0
    25a6:	2100      	movs	r1, #0
    25a8:	4638      	mov	r0, r7
    25aa:	f7ff fd1b 	bl	1fe4 <memset>
    25ae:	1c63      	adds	r3, r4, #1
    25b0:	d015      	beq.n	25de <_get_semihosting_exts+0x4e>
    25b2:	4620      	mov	r0, r4
    25b4:	f7ff fe2a 	bl	220c <findslot>
    25b8:	260c      	movs	r6, #12
    25ba:	4681      	mov	r9, r0
    25bc:	4630      	mov	r0, r6
    25be:	4649      	mov	r1, r9
    25c0:	beab      	bkpt	0x00ab
    25c2:	4606      	mov	r6, r0
    25c4:	4630      	mov	r0, r6
    25c6:	f7ff fe3b 	bl	2240 <checkerror>
    25ca:	2803      	cmp	r0, #3
    25cc:	dd02      	ble.n	25d4 <_get_semihosting_exts+0x44>
    25ce:	3803      	subs	r0, #3
    25d0:	42a8      	cmp	r0, r5
    25d2:	dc08      	bgt.n	25e6 <_get_semihosting_exts+0x56>
    25d4:	4620      	mov	r0, r4
    25d6:	f7ff fef7 	bl	23c8 <_close>
    25da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    25de:	4620      	mov	r0, r4
    25e0:	b003      	add	sp, #12
    25e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    25e6:	2204      	movs	r2, #4
    25e8:	eb0d 0102 	add.w	r1, sp, r2
    25ec:	4620      	mov	r0, r4
    25ee:	f7ff fe55 	bl	229c <_read>
    25f2:	2803      	cmp	r0, #3
    25f4:	ddee      	ble.n	25d4 <_get_semihosting_exts+0x44>
    25f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    25fa:	2b53      	cmp	r3, #83	; 0x53
    25fc:	d1ea      	bne.n	25d4 <_get_semihosting_exts+0x44>
    25fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
    2602:	2b48      	cmp	r3, #72	; 0x48
    2604:	d1e6      	bne.n	25d4 <_get_semihosting_exts+0x44>
    2606:	f89d 3006 	ldrb.w	r3, [sp, #6]
    260a:	2b46      	cmp	r3, #70	; 0x46
    260c:	d1e2      	bne.n	25d4 <_get_semihosting_exts+0x44>
    260e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2612:	2b42      	cmp	r3, #66	; 0x42
    2614:	d1de      	bne.n	25d4 <_get_semihosting_exts+0x44>
    2616:	2201      	movs	r2, #1
    2618:	4641      	mov	r1, r8
    261a:	4620      	mov	r0, r4
    261c:	f7ff fe58 	bl	22d0 <_swilseek>
    2620:	2800      	cmp	r0, #0
    2622:	dbd7      	blt.n	25d4 <_get_semihosting_exts+0x44>
    2624:	462a      	mov	r2, r5
    2626:	4639      	mov	r1, r7
    2628:	4620      	mov	r0, r4
    262a:	f7ff fe37 	bl	229c <_read>
    262e:	4605      	mov	r5, r0
    2630:	4620      	mov	r0, r4
    2632:	f7ff fec9 	bl	23c8 <_close>
    2636:	4628      	mov	r0, r5
    2638:	f7ff fe02 	bl	2240 <checkerror>
    263c:	4604      	mov	r4, r0
    263e:	e7ce      	b.n	25de <_get_semihosting_exts+0x4e>
    2640:	00002c90 	.word	0x00002c90

00002644 <initialise_semihosting_exts>:
    2644:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2646:	4d0a      	ldr	r5, [pc, #40]	; (2670 <initialise_semihosting_exts+0x2c>)
    2648:	4c0a      	ldr	r4, [pc, #40]	; (2674 <initialise_semihosting_exts+0x30>)
    264a:	2100      	movs	r1, #0
    264c:	2201      	movs	r2, #1
    264e:	a801      	add	r0, sp, #4
    2650:	6029      	str	r1, [r5, #0]
    2652:	6022      	str	r2, [r4, #0]
    2654:	f7ff ff9c 	bl	2590 <_get_semihosting_exts>
    2658:	2800      	cmp	r0, #0
    265a:	dd07      	ble.n	266c <initialise_semihosting_exts+0x28>
    265c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2660:	f003 0201 	and.w	r2, r3, #1
    2664:	f003 0302 	and.w	r3, r3, #2
    2668:	602a      	str	r2, [r5, #0]
    266a:	6023      	str	r3, [r4, #0]
    266c:	b003      	add	sp, #12
    266e:	bd30      	pop	{r4, r5, pc}
    2670:	2000006c 	.word	0x2000006c
    2674:	20000070 	.word	0x20000070

00002678 <_has_ext_exit_extended>:
    2678:	b510      	push	{r4, lr}
    267a:	4c04      	ldr	r4, [pc, #16]	; (268c <_has_ext_exit_extended+0x14>)
    267c:	6822      	ldr	r2, [r4, #0]
    267e:	2a00      	cmp	r2, #0
    2680:	da01      	bge.n	2686 <_has_ext_exit_extended+0xe>
    2682:	f7ff ffdf 	bl	2644 <initialise_semihosting_exts>
    2686:	6820      	ldr	r0, [r4, #0]
    2688:	bd10      	pop	{r4, pc}
    268a:	bf00      	nop
    268c:	2000006c 	.word	0x2000006c

00002690 <_exit>:
    2690:	4601      	mov	r1, r0
    2692:	b508      	push	{r3, lr}
    2694:	4a02      	ldr	r2, [pc, #8]	; (26a0 <_exit+0x10>)
    2696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    269a:	f000 f803 	bl	26a4 <_kill_shared>
    269e:	bf00      	nop
    26a0:	00020026 	.word	0x00020026

000026a4 <_kill_shared>:
    26a4:	b507      	push	{r0, r1, r2, lr}
    26a6:	e9cd 2100 	strd	r2, r1, [sp]
    26aa:	f7ff ffe5 	bl	2678 <_has_ext_exit_extended>
    26ae:	2800      	cmp	r0, #0
    26b0:	bf14      	ite	ne
    26b2:	2420      	movne	r4, #32
    26b4:	2418      	moveq	r4, #24
    26b6:	f7ff ffdf 	bl	2678 <_has_ext_exit_extended>
    26ba:	b120      	cbz	r0, 26c6 <_kill_shared+0x22>
    26bc:	466d      	mov	r5, sp
    26be:	4620      	mov	r0, r4
    26c0:	4629      	mov	r1, r5
    26c2:	beab      	bkpt	0x00ab
    26c4:	4604      	mov	r4, r0
    26c6:	9d00      	ldr	r5, [sp, #0]
    26c8:	e7f9      	b.n	26be <_kill_shared+0x1a>
	...

000026cc <_kill>:
    26cc:	2906      	cmp	r1, #6
    26ce:	b508      	push	{r3, lr}
    26d0:	bf0c      	ite	eq
    26d2:	4a02      	ldreq	r2, [pc, #8]	; (26dc <_kill+0x10>)
    26d4:	4a02      	ldrne	r2, [pc, #8]	; (26e0 <_kill+0x14>)
    26d6:	f7ff ffe5 	bl	26a4 <_kill_shared>
    26da:	bf00      	nop
    26dc:	00020023 	.word	0x00020023
    26e0:	00020026 	.word	0x00020026

000026e4 <__errno>:
    26e4:	4b01      	ldr	r3, [pc, #4]	; (26ec <__errno+0x8>)
    26e6:	6818      	ldr	r0, [r3, #0]
    26e8:	4770      	bx	lr
    26ea:	bf00      	nop
    26ec:	20000004 	.word	0x20000004

000026f0 <std>:
    26f0:	2300      	movs	r3, #0
    26f2:	b510      	push	{r4, lr}
    26f4:	4604      	mov	r4, r0
    26f6:	e9c0 3300 	strd	r3, r3, [r0]
    26fa:	6083      	str	r3, [r0, #8]
    26fc:	8181      	strh	r1, [r0, #12]
    26fe:	6643      	str	r3, [r0, #100]	; 0x64
    2700:	81c2      	strh	r2, [r0, #14]
    2702:	e9c0 3304 	strd	r3, r3, [r0, #16]
    2706:	6183      	str	r3, [r0, #24]
    2708:	4619      	mov	r1, r3
    270a:	2208      	movs	r2, #8
    270c:	305c      	adds	r0, #92	; 0x5c
    270e:	f7ff fc69 	bl	1fe4 <memset>
    2712:	4b05      	ldr	r3, [pc, #20]	; (2728 <std+0x38>)
    2714:	6263      	str	r3, [r4, #36]	; 0x24
    2716:	4b05      	ldr	r3, [pc, #20]	; (272c <std+0x3c>)
    2718:	62a3      	str	r3, [r4, #40]	; 0x28
    271a:	4b05      	ldr	r3, [pc, #20]	; (2730 <std+0x40>)
    271c:	62e3      	str	r3, [r4, #44]	; 0x2c
    271e:	4b05      	ldr	r3, [pc, #20]	; (2734 <std+0x44>)
    2720:	6224      	str	r4, [r4, #32]
    2722:	6323      	str	r3, [r4, #48]	; 0x30
    2724:	bd10      	pop	{r4, pc}
    2726:	bf00      	nop
    2728:	000028d9 	.word	0x000028d9
    272c:	000028fb 	.word	0x000028fb
    2730:	00002933 	.word	0x00002933
    2734:	00002957 	.word	0x00002957

00002738 <_cleanup_r>:
    2738:	4901      	ldr	r1, [pc, #4]	; (2740 <_cleanup_r+0x8>)
    273a:	f000 b8af 	b.w	289c <_fwalk_reent>
    273e:	bf00      	nop
    2740:	00002ac1 	.word	0x00002ac1

00002744 <__sfmoreglue>:
    2744:	b570      	push	{r4, r5, r6, lr}
    2746:	1e4a      	subs	r2, r1, #1
    2748:	2568      	movs	r5, #104	; 0x68
    274a:	4355      	muls	r5, r2
    274c:	460e      	mov	r6, r1
    274e:	f105 0174 	add.w	r1, r5, #116	; 0x74
    2752:	f7ff fc9d 	bl	2090 <_malloc_r>
    2756:	4604      	mov	r4, r0
    2758:	b140      	cbz	r0, 276c <__sfmoreglue+0x28>
    275a:	2100      	movs	r1, #0
    275c:	e9c0 1600 	strd	r1, r6, [r0]
    2760:	300c      	adds	r0, #12
    2762:	60a0      	str	r0, [r4, #8]
    2764:	f105 0268 	add.w	r2, r5, #104	; 0x68
    2768:	f7ff fc3c 	bl	1fe4 <memset>
    276c:	4620      	mov	r0, r4
    276e:	bd70      	pop	{r4, r5, r6, pc}

00002770 <__sfp_lock_acquire>:
    2770:	4801      	ldr	r0, [pc, #4]	; (2778 <__sfp_lock_acquire+0x8>)
    2772:	f7ff bd48 	b.w	2206 <__retarget_lock_acquire_recursive>
    2776:	bf00      	nop
    2778:	200001d4 	.word	0x200001d4

0000277c <__sfp_lock_release>:
    277c:	4801      	ldr	r0, [pc, #4]	; (2784 <__sfp_lock_release+0x8>)
    277e:	f7ff bd43 	b.w	2208 <__retarget_lock_release_recursive>
    2782:	bf00      	nop
    2784:	200001d4 	.word	0x200001d4

00002788 <__sinit_lock_acquire>:
    2788:	4801      	ldr	r0, [pc, #4]	; (2790 <__sinit_lock_acquire+0x8>)
    278a:	f7ff bd3c 	b.w	2206 <__retarget_lock_acquire_recursive>
    278e:	bf00      	nop
    2790:	200001cf 	.word	0x200001cf

00002794 <__sinit_lock_release>:
    2794:	4801      	ldr	r0, [pc, #4]	; (279c <__sinit_lock_release+0x8>)
    2796:	f7ff bd37 	b.w	2208 <__retarget_lock_release_recursive>
    279a:	bf00      	nop
    279c:	200001cf 	.word	0x200001cf

000027a0 <__sinit>:
    27a0:	b510      	push	{r4, lr}
    27a2:	4604      	mov	r4, r0
    27a4:	f7ff fff0 	bl	2788 <__sinit_lock_acquire>
    27a8:	69a3      	ldr	r3, [r4, #24]
    27aa:	b11b      	cbz	r3, 27b4 <__sinit+0x14>
    27ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    27b0:	f7ff bff0 	b.w	2794 <__sinit_lock_release>
    27b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    27b8:	6523      	str	r3, [r4, #80]	; 0x50
    27ba:	4b13      	ldr	r3, [pc, #76]	; (2808 <__sinit+0x68>)
    27bc:	4a13      	ldr	r2, [pc, #76]	; (280c <__sinit+0x6c>)
    27be:	681b      	ldr	r3, [r3, #0]
    27c0:	62a2      	str	r2, [r4, #40]	; 0x28
    27c2:	42a3      	cmp	r3, r4
    27c4:	bf04      	itt	eq
    27c6:	2301      	moveq	r3, #1
    27c8:	61a3      	streq	r3, [r4, #24]
    27ca:	4620      	mov	r0, r4
    27cc:	f000 f820 	bl	2810 <__sfp>
    27d0:	6060      	str	r0, [r4, #4]
    27d2:	4620      	mov	r0, r4
    27d4:	f000 f81c 	bl	2810 <__sfp>
    27d8:	60a0      	str	r0, [r4, #8]
    27da:	4620      	mov	r0, r4
    27dc:	f000 f818 	bl	2810 <__sfp>
    27e0:	2200      	movs	r2, #0
    27e2:	60e0      	str	r0, [r4, #12]
    27e4:	2104      	movs	r1, #4
    27e6:	6860      	ldr	r0, [r4, #4]
    27e8:	f7ff ff82 	bl	26f0 <std>
    27ec:	2201      	movs	r2, #1
    27ee:	2109      	movs	r1, #9
    27f0:	68a0      	ldr	r0, [r4, #8]
    27f2:	f7ff ff7d 	bl	26f0 <std>
    27f6:	2202      	movs	r2, #2
    27f8:	2112      	movs	r1, #18
    27fa:	68e0      	ldr	r0, [r4, #12]
    27fc:	f7ff ff78 	bl	26f0 <std>
    2800:	2301      	movs	r3, #1
    2802:	61a3      	str	r3, [r4, #24]
    2804:	e7d2      	b.n	27ac <__sinit+0xc>
    2806:	bf00      	nop
    2808:	00002c8c 	.word	0x00002c8c
    280c:	00002739 	.word	0x00002739

00002810 <__sfp>:
    2810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2812:	4607      	mov	r7, r0
    2814:	f7ff ffac 	bl	2770 <__sfp_lock_acquire>
    2818:	4b1e      	ldr	r3, [pc, #120]	; (2894 <__sfp+0x84>)
    281a:	681e      	ldr	r6, [r3, #0]
    281c:	69b3      	ldr	r3, [r6, #24]
    281e:	b913      	cbnz	r3, 2826 <__sfp+0x16>
    2820:	4630      	mov	r0, r6
    2822:	f7ff ffbd 	bl	27a0 <__sinit>
    2826:	3648      	adds	r6, #72	; 0x48
    2828:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    282c:	3b01      	subs	r3, #1
    282e:	d503      	bpl.n	2838 <__sfp+0x28>
    2830:	6833      	ldr	r3, [r6, #0]
    2832:	b30b      	cbz	r3, 2878 <__sfp+0x68>
    2834:	6836      	ldr	r6, [r6, #0]
    2836:	e7f7      	b.n	2828 <__sfp+0x18>
    2838:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    283c:	b9d5      	cbnz	r5, 2874 <__sfp+0x64>
    283e:	4b16      	ldr	r3, [pc, #88]	; (2898 <__sfp+0x88>)
    2840:	60e3      	str	r3, [r4, #12]
    2842:	f104 0058 	add.w	r0, r4, #88	; 0x58
    2846:	6665      	str	r5, [r4, #100]	; 0x64
    2848:	f7ff fcdc 	bl	2204 <__retarget_lock_init_recursive>
    284c:	f7ff ff96 	bl	277c <__sfp_lock_release>
    2850:	6025      	str	r5, [r4, #0]
    2852:	e9c4 5501 	strd	r5, r5, [r4, #4]
    2856:	e9c4 5504 	strd	r5, r5, [r4, #16]
    285a:	61a5      	str	r5, [r4, #24]
    285c:	2208      	movs	r2, #8
    285e:	4629      	mov	r1, r5
    2860:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    2864:	f7ff fbbe 	bl	1fe4 <memset>
    2868:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    286c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    2870:	4620      	mov	r0, r4
    2872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2874:	3468      	adds	r4, #104	; 0x68
    2876:	e7d9      	b.n	282c <__sfp+0x1c>
    2878:	2104      	movs	r1, #4
    287a:	4638      	mov	r0, r7
    287c:	f7ff ff62 	bl	2744 <__sfmoreglue>
    2880:	4604      	mov	r4, r0
    2882:	6030      	str	r0, [r6, #0]
    2884:	2800      	cmp	r0, #0
    2886:	d1d5      	bne.n	2834 <__sfp+0x24>
    2888:	f7ff ff78 	bl	277c <__sfp_lock_release>
    288c:	230c      	movs	r3, #12
    288e:	603b      	str	r3, [r7, #0]
    2890:	e7ee      	b.n	2870 <__sfp+0x60>
    2892:	bf00      	nop
    2894:	00002c8c 	.word	0x00002c8c
    2898:	ffff0001 	.word	0xffff0001

0000289c <_fwalk_reent>:
    289c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    28a0:	4680      	mov	r8, r0
    28a2:	4689      	mov	r9, r1
    28a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
    28a8:	2600      	movs	r6, #0
    28aa:	b914      	cbnz	r4, 28b2 <_fwalk_reent+0x16>
    28ac:	4630      	mov	r0, r6
    28ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    28b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
    28b6:	3f01      	subs	r7, #1
    28b8:	d501      	bpl.n	28be <_fwalk_reent+0x22>
    28ba:	6824      	ldr	r4, [r4, #0]
    28bc:	e7f5      	b.n	28aa <_fwalk_reent+0xe>
    28be:	89ab      	ldrh	r3, [r5, #12]
    28c0:	2b01      	cmp	r3, #1
    28c2:	d907      	bls.n	28d4 <_fwalk_reent+0x38>
    28c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    28c8:	3301      	adds	r3, #1
    28ca:	d003      	beq.n	28d4 <_fwalk_reent+0x38>
    28cc:	4629      	mov	r1, r5
    28ce:	4640      	mov	r0, r8
    28d0:	47c8      	blx	r9
    28d2:	4306      	orrs	r6, r0
    28d4:	3568      	adds	r5, #104	; 0x68
    28d6:	e7ee      	b.n	28b6 <_fwalk_reent+0x1a>

000028d8 <__sread>:
    28d8:	b510      	push	{r4, lr}
    28da:	460c      	mov	r4, r1
    28dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    28e0:	f000 f93c 	bl	2b5c <_read_r>
    28e4:	2800      	cmp	r0, #0
    28e6:	bfab      	itete	ge
    28e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    28ea:	89a3      	ldrhlt	r3, [r4, #12]
    28ec:	181b      	addge	r3, r3, r0
    28ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    28f2:	bfac      	ite	ge
    28f4:	6563      	strge	r3, [r4, #84]	; 0x54
    28f6:	81a3      	strhlt	r3, [r4, #12]
    28f8:	bd10      	pop	{r4, pc}

000028fa <__swrite>:
    28fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28fe:	461f      	mov	r7, r3
    2900:	898b      	ldrh	r3, [r1, #12]
    2902:	05db      	lsls	r3, r3, #23
    2904:	4605      	mov	r5, r0
    2906:	460c      	mov	r4, r1
    2908:	4616      	mov	r6, r2
    290a:	d505      	bpl.n	2918 <__swrite+0x1e>
    290c:	2302      	movs	r3, #2
    290e:	2200      	movs	r2, #0
    2910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2914:	f000 f910 	bl	2b38 <_lseek_r>
    2918:	89a3      	ldrh	r3, [r4, #12]
    291a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    291e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    2922:	81a3      	strh	r3, [r4, #12]
    2924:	4632      	mov	r2, r6
    2926:	463b      	mov	r3, r7
    2928:	4628      	mov	r0, r5
    292a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    292e:	f000 b81f 	b.w	2970 <_write_r>

00002932 <__sseek>:
    2932:	b510      	push	{r4, lr}
    2934:	460c      	mov	r4, r1
    2936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    293a:	f000 f8fd 	bl	2b38 <_lseek_r>
    293e:	1c43      	adds	r3, r0, #1
    2940:	89a3      	ldrh	r3, [r4, #12]
    2942:	bf15      	itete	ne
    2944:	6560      	strne	r0, [r4, #84]	; 0x54
    2946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    294a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    294e:	81a3      	strheq	r3, [r4, #12]
    2950:	bf18      	it	ne
    2952:	81a3      	strhne	r3, [r4, #12]
    2954:	bd10      	pop	{r4, pc}

00002956 <__sclose>:
    2956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    295a:	f000 b81b 	b.w	2994 <_close_r>

0000295e <strlen>:
    295e:	4603      	mov	r3, r0
    2960:	f813 2b01 	ldrb.w	r2, [r3], #1
    2964:	2a00      	cmp	r2, #0
    2966:	d1fb      	bne.n	2960 <strlen+0x2>
    2968:	1a18      	subs	r0, r3, r0
    296a:	3801      	subs	r0, #1
    296c:	4770      	bx	lr
	...

00002970 <_write_r>:
    2970:	b538      	push	{r3, r4, r5, lr}
    2972:	4c07      	ldr	r4, [pc, #28]	; (2990 <_write_r+0x20>)
    2974:	4605      	mov	r5, r0
    2976:	4608      	mov	r0, r1
    2978:	4611      	mov	r1, r2
    297a:	2200      	movs	r2, #0
    297c:	6022      	str	r2, [r4, #0]
    297e:	461a      	mov	r2, r3
    2980:	f7ff fcf4 	bl	236c <_write>
    2984:	1c43      	adds	r3, r0, #1
    2986:	d102      	bne.n	298e <_write_r+0x1e>
    2988:	6823      	ldr	r3, [r4, #0]
    298a:	b103      	cbz	r3, 298e <_write_r+0x1e>
    298c:	602b      	str	r3, [r5, #0]
    298e:	bd38      	pop	{r3, r4, r5, pc}
    2990:	200001c8 	.word	0x200001c8

00002994 <_close_r>:
    2994:	b538      	push	{r3, r4, r5, lr}
    2996:	4c06      	ldr	r4, [pc, #24]	; (29b0 <_close_r+0x1c>)
    2998:	2300      	movs	r3, #0
    299a:	4605      	mov	r5, r0
    299c:	4608      	mov	r0, r1
    299e:	6023      	str	r3, [r4, #0]
    29a0:	f7ff fd12 	bl	23c8 <_close>
    29a4:	1c43      	adds	r3, r0, #1
    29a6:	d102      	bne.n	29ae <_close_r+0x1a>
    29a8:	6823      	ldr	r3, [r4, #0]
    29aa:	b103      	cbz	r3, 29ae <_close_r+0x1a>
    29ac:	602b      	str	r3, [r5, #0]
    29ae:	bd38      	pop	{r3, r4, r5, pc}
    29b0:	200001c8 	.word	0x200001c8

000029b4 <__sflush_r>:
    29b4:	898a      	ldrh	r2, [r1, #12]
    29b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29ba:	4605      	mov	r5, r0
    29bc:	0710      	lsls	r0, r2, #28
    29be:	460c      	mov	r4, r1
    29c0:	d458      	bmi.n	2a74 <__sflush_r+0xc0>
    29c2:	684b      	ldr	r3, [r1, #4]
    29c4:	2b00      	cmp	r3, #0
    29c6:	dc05      	bgt.n	29d4 <__sflush_r+0x20>
    29c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    29ca:	2b00      	cmp	r3, #0
    29cc:	dc02      	bgt.n	29d4 <__sflush_r+0x20>
    29ce:	2000      	movs	r0, #0
    29d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    29d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    29d6:	2e00      	cmp	r6, #0
    29d8:	d0f9      	beq.n	29ce <__sflush_r+0x1a>
    29da:	2300      	movs	r3, #0
    29dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    29e0:	682f      	ldr	r7, [r5, #0]
    29e2:	602b      	str	r3, [r5, #0]
    29e4:	d032      	beq.n	2a4c <__sflush_r+0x98>
    29e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    29e8:	89a3      	ldrh	r3, [r4, #12]
    29ea:	075a      	lsls	r2, r3, #29
    29ec:	d505      	bpl.n	29fa <__sflush_r+0x46>
    29ee:	6863      	ldr	r3, [r4, #4]
    29f0:	1ac0      	subs	r0, r0, r3
    29f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    29f4:	b10b      	cbz	r3, 29fa <__sflush_r+0x46>
    29f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    29f8:	1ac0      	subs	r0, r0, r3
    29fa:	2300      	movs	r3, #0
    29fc:	4602      	mov	r2, r0
    29fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    2a00:	6a21      	ldr	r1, [r4, #32]
    2a02:	4628      	mov	r0, r5
    2a04:	47b0      	blx	r6
    2a06:	1c43      	adds	r3, r0, #1
    2a08:	89a3      	ldrh	r3, [r4, #12]
    2a0a:	d106      	bne.n	2a1a <__sflush_r+0x66>
    2a0c:	6829      	ldr	r1, [r5, #0]
    2a0e:	291d      	cmp	r1, #29
    2a10:	d82c      	bhi.n	2a6c <__sflush_r+0xb8>
    2a12:	4a2a      	ldr	r2, [pc, #168]	; (2abc <__sflush_r+0x108>)
    2a14:	40ca      	lsrs	r2, r1
    2a16:	07d6      	lsls	r6, r2, #31
    2a18:	d528      	bpl.n	2a6c <__sflush_r+0xb8>
    2a1a:	2200      	movs	r2, #0
    2a1c:	6062      	str	r2, [r4, #4]
    2a1e:	04d9      	lsls	r1, r3, #19
    2a20:	6922      	ldr	r2, [r4, #16]
    2a22:	6022      	str	r2, [r4, #0]
    2a24:	d504      	bpl.n	2a30 <__sflush_r+0x7c>
    2a26:	1c42      	adds	r2, r0, #1
    2a28:	d101      	bne.n	2a2e <__sflush_r+0x7a>
    2a2a:	682b      	ldr	r3, [r5, #0]
    2a2c:	b903      	cbnz	r3, 2a30 <__sflush_r+0x7c>
    2a2e:	6560      	str	r0, [r4, #84]	; 0x54
    2a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
    2a32:	602f      	str	r7, [r5, #0]
    2a34:	2900      	cmp	r1, #0
    2a36:	d0ca      	beq.n	29ce <__sflush_r+0x1a>
    2a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
    2a3c:	4299      	cmp	r1, r3
    2a3e:	d002      	beq.n	2a46 <__sflush_r+0x92>
    2a40:	4628      	mov	r0, r5
    2a42:	f7ff fad7 	bl	1ff4 <_free_r>
    2a46:	2000      	movs	r0, #0
    2a48:	6360      	str	r0, [r4, #52]	; 0x34
    2a4a:	e7c1      	b.n	29d0 <__sflush_r+0x1c>
    2a4c:	6a21      	ldr	r1, [r4, #32]
    2a4e:	2301      	movs	r3, #1
    2a50:	4628      	mov	r0, r5
    2a52:	47b0      	blx	r6
    2a54:	1c41      	adds	r1, r0, #1
    2a56:	d1c7      	bne.n	29e8 <__sflush_r+0x34>
    2a58:	682b      	ldr	r3, [r5, #0]
    2a5a:	2b00      	cmp	r3, #0
    2a5c:	d0c4      	beq.n	29e8 <__sflush_r+0x34>
    2a5e:	2b1d      	cmp	r3, #29
    2a60:	d001      	beq.n	2a66 <__sflush_r+0xb2>
    2a62:	2b16      	cmp	r3, #22
    2a64:	d101      	bne.n	2a6a <__sflush_r+0xb6>
    2a66:	602f      	str	r7, [r5, #0]
    2a68:	e7b1      	b.n	29ce <__sflush_r+0x1a>
    2a6a:	89a3      	ldrh	r3, [r4, #12]
    2a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a70:	81a3      	strh	r3, [r4, #12]
    2a72:	e7ad      	b.n	29d0 <__sflush_r+0x1c>
    2a74:	690f      	ldr	r7, [r1, #16]
    2a76:	2f00      	cmp	r7, #0
    2a78:	d0a9      	beq.n	29ce <__sflush_r+0x1a>
    2a7a:	0793      	lsls	r3, r2, #30
    2a7c:	680e      	ldr	r6, [r1, #0]
    2a7e:	bf08      	it	eq
    2a80:	694b      	ldreq	r3, [r1, #20]
    2a82:	600f      	str	r7, [r1, #0]
    2a84:	bf18      	it	ne
    2a86:	2300      	movne	r3, #0
    2a88:	eba6 0807 	sub.w	r8, r6, r7
    2a8c:	608b      	str	r3, [r1, #8]
    2a8e:	f1b8 0f00 	cmp.w	r8, #0
    2a92:	dd9c      	ble.n	29ce <__sflush_r+0x1a>
    2a94:	4643      	mov	r3, r8
    2a96:	463a      	mov	r2, r7
    2a98:	6a21      	ldr	r1, [r4, #32]
    2a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2a9c:	4628      	mov	r0, r5
    2a9e:	47b0      	blx	r6
    2aa0:	2800      	cmp	r0, #0
    2aa2:	dc06      	bgt.n	2ab2 <__sflush_r+0xfe>
    2aa4:	89a3      	ldrh	r3, [r4, #12]
    2aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2aaa:	81a3      	strh	r3, [r4, #12]
    2aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2ab0:	e78e      	b.n	29d0 <__sflush_r+0x1c>
    2ab2:	4407      	add	r7, r0
    2ab4:	eba8 0800 	sub.w	r8, r8, r0
    2ab8:	e7e9      	b.n	2a8e <__sflush_r+0xda>
    2aba:	bf00      	nop
    2abc:	20400001 	.word	0x20400001

00002ac0 <_fflush_r>:
    2ac0:	b538      	push	{r3, r4, r5, lr}
    2ac2:	690b      	ldr	r3, [r1, #16]
    2ac4:	4605      	mov	r5, r0
    2ac6:	460c      	mov	r4, r1
    2ac8:	b913      	cbnz	r3, 2ad0 <_fflush_r+0x10>
    2aca:	2500      	movs	r5, #0
    2acc:	4628      	mov	r0, r5
    2ace:	bd38      	pop	{r3, r4, r5, pc}
    2ad0:	b118      	cbz	r0, 2ada <_fflush_r+0x1a>
    2ad2:	6983      	ldr	r3, [r0, #24]
    2ad4:	b90b      	cbnz	r3, 2ada <_fflush_r+0x1a>
    2ad6:	f7ff fe63 	bl	27a0 <__sinit>
    2ada:	4b14      	ldr	r3, [pc, #80]	; (2b2c <_fflush_r+0x6c>)
    2adc:	429c      	cmp	r4, r3
    2ade:	d11b      	bne.n	2b18 <_fflush_r+0x58>
    2ae0:	686c      	ldr	r4, [r5, #4]
    2ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2ae6:	2b00      	cmp	r3, #0
    2ae8:	d0ef      	beq.n	2aca <_fflush_r+0xa>
    2aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
    2aec:	07d0      	lsls	r0, r2, #31
    2aee:	d404      	bmi.n	2afa <_fflush_r+0x3a>
    2af0:	0599      	lsls	r1, r3, #22
    2af2:	d402      	bmi.n	2afa <_fflush_r+0x3a>
    2af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2af6:	f7ff fb86 	bl	2206 <__retarget_lock_acquire_recursive>
    2afa:	4628      	mov	r0, r5
    2afc:	4621      	mov	r1, r4
    2afe:	f7ff ff59 	bl	29b4 <__sflush_r>
    2b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
    2b04:	07da      	lsls	r2, r3, #31
    2b06:	4605      	mov	r5, r0
    2b08:	d4e0      	bmi.n	2acc <_fflush_r+0xc>
    2b0a:	89a3      	ldrh	r3, [r4, #12]
    2b0c:	059b      	lsls	r3, r3, #22
    2b0e:	d4dd      	bmi.n	2acc <_fflush_r+0xc>
    2b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2b12:	f7ff fb79 	bl	2208 <__retarget_lock_release_recursive>
    2b16:	e7d9      	b.n	2acc <_fflush_r+0xc>
    2b18:	4b05      	ldr	r3, [pc, #20]	; (2b30 <_fflush_r+0x70>)
    2b1a:	429c      	cmp	r4, r3
    2b1c:	d101      	bne.n	2b22 <_fflush_r+0x62>
    2b1e:	68ac      	ldr	r4, [r5, #8]
    2b20:	e7df      	b.n	2ae2 <_fflush_r+0x22>
    2b22:	4b04      	ldr	r3, [pc, #16]	; (2b34 <_fflush_r+0x74>)
    2b24:	429c      	cmp	r4, r3
    2b26:	bf08      	it	eq
    2b28:	68ec      	ldreq	r4, [r5, #12]
    2b2a:	e7da      	b.n	2ae2 <_fflush_r+0x22>
    2b2c:	00002cc8 	.word	0x00002cc8
    2b30:	00002ce8 	.word	0x00002ce8
    2b34:	00002ca8 	.word	0x00002ca8

00002b38 <_lseek_r>:
    2b38:	b538      	push	{r3, r4, r5, lr}
    2b3a:	4c07      	ldr	r4, [pc, #28]	; (2b58 <_lseek_r+0x20>)
    2b3c:	4605      	mov	r5, r0
    2b3e:	4608      	mov	r0, r1
    2b40:	4611      	mov	r1, r2
    2b42:	2200      	movs	r2, #0
    2b44:	6022      	str	r2, [r4, #0]
    2b46:	461a      	mov	r2, r3
    2b48:	f7ff fbfe 	bl	2348 <_lseek>
    2b4c:	1c43      	adds	r3, r0, #1
    2b4e:	d102      	bne.n	2b56 <_lseek_r+0x1e>
    2b50:	6823      	ldr	r3, [r4, #0]
    2b52:	b103      	cbz	r3, 2b56 <_lseek_r+0x1e>
    2b54:	602b      	str	r3, [r5, #0]
    2b56:	bd38      	pop	{r3, r4, r5, pc}
    2b58:	200001c8 	.word	0x200001c8

00002b5c <_read_r>:
    2b5c:	b538      	push	{r3, r4, r5, lr}
    2b5e:	4c07      	ldr	r4, [pc, #28]	; (2b7c <_read_r+0x20>)
    2b60:	4605      	mov	r5, r0
    2b62:	4608      	mov	r0, r1
    2b64:	4611      	mov	r1, r2
    2b66:	2200      	movs	r2, #0
    2b68:	6022      	str	r2, [r4, #0]
    2b6a:	461a      	mov	r2, r3
    2b6c:	f7ff fb96 	bl	229c <_read>
    2b70:	1c43      	adds	r3, r0, #1
    2b72:	d102      	bne.n	2b7a <_read_r+0x1e>
    2b74:	6823      	ldr	r3, [r4, #0]
    2b76:	b103      	cbz	r3, 2b7a <_read_r+0x1e>
    2b78:	602b      	str	r3, [r5, #0]
    2b7a:	bd38      	pop	{r3, r4, r5, pc}
    2b7c:	200001c8 	.word	0x200001c8

00002b80 <_init>:
    2b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b82:	bf00      	nop
    2b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b86:	bc08      	pop	{r3}
    2b88:	469e      	mov	lr, r3
    2b8a:	4770      	bx	lr

00002b8c <_fini>:
    2b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b8e:	bf00      	nop
    2b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b92:	bc08      	pop	{r3}
    2b94:	469e      	mov	lr, r3
    2b96:	4770      	bx	lr

00002b98 <_ZL18corePeripheralBase>:
    2b98:	e000 e000                                   ....

00002b9c <_ZN4Nvic10ENn_OFFSETE>:
    2b9c:	0100 0000 0104 0000 0108 0000 010c 0000     ................
    2bac:	0110 0000                                   ....

00002bb0 <_ZN4Nvic11DISn_OFFSETE>:
    2bb0:	0180 0000 0184 0000 0188 0000 018c 0000     ................
    2bc0:	0190 0000                                   ....

00002bc4 <_ZN4Nvic12PENDn_OFFSETE>:
    2bc4:	0200 0000 0204 0000 0208 0000 020c 0000     ................
    2bd4:	0210 0000                                   ....

00002bd8 <_ZN4Nvic14UNPENDn_OFFSETE>:
    2bd8:	0280 0000 0284 0000 0288 0000 028c 0000     ................
    2be8:	0290 0000                                   ....

00002bec <_ZN4Nvic14ACTIVEn_OFFSETE>:
    2bec:	0300 0000 0304 0000 0308 0000 030c 0000     ................
    2bfc:	0310 0000                                   ....

00002c00 <_ZN4Nvic11PRIn_OFFSETE>:
    2c00:	0400 0000 0404 0000 0408 0000 040c 0000     ................
    2c10:	040c 0000 0414 0000 0418 0000 041c 0000     ................
    2c20:	0420 0000 0424 0000 0428 0000 042c 0000      ...$...(...,...
    2c30:	0430 0000 0434 0000 0438 0000 043c 0000     0...4...8...<...
    2c40:	0440 0000 0444 0000 0448 0000 044c 0000     @...D...H...L...
    2c50:	0450 0000 0454 0000 0458 0000 045c 0000     P...T...X...\...
    2c60:	0460 0000 0464 0000 0468 0000 046c 0000     `...d...h...l...
    2c70:	0470 0000 0474 0000 0478 0000 047c 0000     p...t...x...|...
    2c80:	0480 0000 0484 0000 0488 0000               ............

00002c8c <_global_impure_ptr>:
    2c8c:	0008 2000 733a 6d65 6869 736f 6974 676e     ... :semihosting
    2c9c:	662d 6165 7574 6572 0073 0000               -features...

00002ca8 <__sf_fake_stderr>:
	...

00002cc8 <__sf_fake_stdin>:
	...

00002ce8 <__sf_fake_stdout>:
	...

00002d08 <__EH_FRAME_BEGIN__>:
    2d08:	0000 0000                                   ....
