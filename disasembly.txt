
main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__isr_vector>:
       0:	00 80 00 20 ad 02 00 00 ed 02 00 00 ed 02 00 00     ... ............
      10:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
      2c:	ed 02 00 00 ed 02 00 00 00 00 00 00 ed 02 00 00     ................
      3c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      4c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      5c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      6c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      7c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      8c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      9c:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      ac:	00 00 00 00 ed 02 00 00 ed 02 00 00 fd 02 00 00     ................
	...
      c4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      d4:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	...
      ec:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
      fc:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     10c:	ed 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     124:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     134:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
     150:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
	...
     1b0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1c0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1d0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     1e0:	ed 02 00 00 ed 02 00 00 ed 02 00 00 00 00 00 00     ................
	...
     258:	ed 02 00 00 ed 02 00 00 ed 02 00 00 ed 02 00 00     ................
     268:	ed 02 00 00                                         ....

0000026c <__do_global_dtors_aux>:
     26c:	b510      	push	{r4, lr}
     26e:	4c05      	ldr	r4, [pc, #20]	; (284 <__do_global_dtors_aux+0x18>)
     270:	7823      	ldrb	r3, [r4, #0]
     272:	b933      	cbnz	r3, 282 <__do_global_dtors_aux+0x16>
     274:	4b04      	ldr	r3, [pc, #16]	; (288 <__do_global_dtors_aux+0x1c>)
     276:	b113      	cbz	r3, 27e <__do_global_dtors_aux+0x12>
     278:	4804      	ldr	r0, [pc, #16]	; (28c <__do_global_dtors_aux+0x20>)
     27a:	f3af 8000 	nop.w
     27e:	2301      	movs	r3, #1
     280:	7023      	strb	r3, [r4, #0]
     282:	bd10      	pop	{r4, pc}
     284:	20000080 	.word	0x20000080
     288:	00000000 	.word	0x00000000
     28c:	00002ca8 	.word	0x00002ca8

00000290 <frame_dummy>:
     290:	b508      	push	{r3, lr}
     292:	4b03      	ldr	r3, [pc, #12]	; (2a0 <frame_dummy+0x10>)
     294:	b11b      	cbz	r3, 29e <frame_dummy+0xe>
     296:	4903      	ldr	r1, [pc, #12]	; (2a4 <frame_dummy+0x14>)
     298:	4803      	ldr	r0, [pc, #12]	; (2a8 <frame_dummy+0x18>)
     29a:	f3af 8000 	nop.w
     29e:	bd08      	pop	{r3, pc}
     2a0:	00000000 	.word	0x00000000
     2a4:	20000084 	.word	0x20000084
     2a8:	00002ca8 	.word	0x00002ca8

000002ac <Reset_Handler>:
 *    __data_start__: VMA of start of the section to copy to
 *    __data_end__: VMA of end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r1, =__etext
     2ac:	490a      	ldr	r1, [pc, #40]	; (2d8 <Reset_Handler+0x2c>)
	ldr	r2, =__data_start__
     2ae:	4a0b      	ldr	r2, [pc, #44]	; (2dc <Reset_Handler+0x30>)
	ldr	r3, =__data_end__
     2b0:	4b0b      	ldr	r3, [pc, #44]	; (2e0 <Reset_Handler+0x34>)

.L_loop1:
	cmp	r2, r3
     2b2:	429a      	cmp	r2, r3
	ittt	lt
     2b4:	bfbe      	ittt	lt
	ldrlt	r0, [r1], #4
     2b6:	f851 0b04 	ldrlt.w	r0, [r1], #4
	strlt	r0, [r2], #4
     2ba:	f842 0b04 	strlt.w	r0, [r2], #4
	blt	.L_loop1
     2be:	e7f8      	blt.n	2b2 <Reset_Handler+0x6>
 *    __bss_start__: start of the BSS section.
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
	ldr	r1, =__bss_start__
     2c0:	4908      	ldr	r1, [pc, #32]	; (2e4 <Reset_Handler+0x38>)
	ldr	r2, =__bss_end__
     2c2:	4a09      	ldr	r2, [pc, #36]	; (2e8 <Reset_Handler+0x3c>)

	movs	r0, 0
     2c4:	2000      	movs	r0, #0
.L_loop3:
	cmp	r1, r2
     2c6:	4291      	cmp	r1, r2
	itt	lt
     2c8:	bfbc      	itt	lt
	strlt	r0, [r1], #4
     2ca:	f841 0b04 	strlt.w	r0, [r1], #4
	blt	.L_loop3
     2ce:	e7fa      	blt.n	2c6 <Reset_Handler+0x1a>
#endif /* __STARTUP_CLEAR_BSS_MULTIPLE || __STARTUP_CLEAR_BSS */

#ifndef __NO_SYSTEM_INIT
	bl	SystemInit
     2d0:	f000 f868 	bl	3a4 <SystemInit>
#endif

#ifndef __START
#define __START _start
#endif
	bl	__START
     2d4:	f000 f8a0 	bl	418 <main>
	ldr	r1, =__etext
     2d8:	00002e7c 	.word	0x00002e7c
	ldr	r2, =__data_start__
     2dc:	20000000 	.word	0x20000000
	ldr	r3, =__data_end__
     2e0:	20000080 	.word	0x20000080
	ldr	r1, =__bss_start__
     2e4:	20000080 	.word	0x20000080
	ldr	r2, =__bss_end__
     2e8:	200001d8 	.word	0x200001d8

000002ec <ADC_0_Sequence_0_Handler>:
	.align	1
	.thumb_func
	.weak	Default_Handler
	.type	Default_Handler, %function
Default_Handler:
	b	.
     2ec:	e7fe      	b.n	2ec <ADC_0_Sequence_0_Handler>
     2ee:	bf00      	nop

000002f0 <__cxa_pure_virtual>:
/**
 * These functions further help eliminate unwanted exceptions
 */

extern "C" void __cxa_pure_virtual() 
{ 
     2f0:	b480      	push	{r7}
     2f2:	af00      	add	r7, sp, #0
    while(1); 
     2f4:	e7fe      	b.n	2f4 <__cxa_pure_virtual+0x4>

000002f6 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
}

void __gnu_cxx::__verbose_terminate_handler()
{
     2f6:	b480      	push	{r7}
     2f8:	af00      	add	r7, sp, #0
    while(1);
     2fa:	e7fe      	b.n	2fa <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x4>

000002fc <GPIO_Port_F_Handler>:
}

extern "C" void GPIO_Port_F_Handler(void)
{
     2fc:	b580      	push	{r7, lr}
     2fe:	af00      	add	r7, sp, #0
    
    if(swtich1.read() == 1)
     300:	4824      	ldr	r0, [pc, #144]	; (394 <GPIO_Port_F_Handler+0x98>)
     302:	f000 fcf6 	bl	cf2 <_ZN4Gpio4readEv>
     306:	4603      	mov	r3, r0
     308:	2b01      	cmp	r3, #1
     30a:	bf0c      	ite	eq
     30c:	2301      	moveq	r3, #1
     30e:	2300      	movne	r3, #0
     310:	b2db      	uxtb	r3, r3
     312:	2b00      	cmp	r3, #0
     314:	d006      	beq.n	324 <GPIO_Port_F_Handler+0x28>
    {
        redLed.write(clear);
     316:	2100      	movs	r1, #0
     318:	481f      	ldr	r0, [pc, #124]	; (398 <GPIO_Port_F_Handler+0x9c>)
     31a:	f000 fccd 	bl	cb8 <_ZN4Gpio5writeE10setORClear>
        swtich1.interruptClear();
     31e:	481d      	ldr	r0, [pc, #116]	; (394 <GPIO_Port_F_Handler+0x98>)
     320:	f000 fcb5 	bl	c8e <_ZN4Gpio14interruptClearEv>
    }

    if(swtich1.read() == 0)
     324:	481b      	ldr	r0, [pc, #108]	; (394 <GPIO_Port_F_Handler+0x98>)
     326:	f000 fce4 	bl	cf2 <_ZN4Gpio4readEv>
     32a:	4603      	mov	r3, r0
     32c:	2b00      	cmp	r3, #0
     32e:	bf0c      	ite	eq
     330:	2301      	moveq	r3, #1
     332:	2300      	movne	r3, #0
     334:	b2db      	uxtb	r3, r3
     336:	2b00      	cmp	r3, #0
     338:	d006      	beq.n	348 <GPIO_Port_F_Handler+0x4c>
    {
        redLed.write(set);
     33a:	2101      	movs	r1, #1
     33c:	4816      	ldr	r0, [pc, #88]	; (398 <GPIO_Port_F_Handler+0x9c>)
     33e:	f000 fcbb 	bl	cb8 <_ZN4Gpio5writeE10setORClear>
        swtich1.interruptClear();
     342:	4814      	ldr	r0, [pc, #80]	; (394 <GPIO_Port_F_Handler+0x98>)
     344:	f000 fca3 	bl	c8e <_ZN4Gpio14interruptClearEv>
    }

    if(swtich2.read() == 1)
     348:	4814      	ldr	r0, [pc, #80]	; (39c <GPIO_Port_F_Handler+0xa0>)
     34a:	f000 fcd2 	bl	cf2 <_ZN4Gpio4readEv>
     34e:	4603      	mov	r3, r0
     350:	2b01      	cmp	r3, #1
     352:	bf0c      	ite	eq
     354:	2301      	moveq	r3, #1
     356:	2300      	movne	r3, #0
     358:	b2db      	uxtb	r3, r3
     35a:	2b00      	cmp	r3, #0
     35c:	d006      	beq.n	36c <GPIO_Port_F_Handler+0x70>
    {
        blueLed.write(clear);
     35e:	2100      	movs	r1, #0
     360:	480f      	ldr	r0, [pc, #60]	; (3a0 <GPIO_Port_F_Handler+0xa4>)
     362:	f000 fca9 	bl	cb8 <_ZN4Gpio5writeE10setORClear>
        swtich2.interruptClear();
     366:	480d      	ldr	r0, [pc, #52]	; (39c <GPIO_Port_F_Handler+0xa0>)
     368:	f000 fc91 	bl	c8e <_ZN4Gpio14interruptClearEv>
    }

    if(swtich2.read() == 0)
     36c:	480b      	ldr	r0, [pc, #44]	; (39c <GPIO_Port_F_Handler+0xa0>)
     36e:	f000 fcc0 	bl	cf2 <_ZN4Gpio4readEv>
     372:	4603      	mov	r3, r0
     374:	2b00      	cmp	r3, #0
     376:	bf0c      	ite	eq
     378:	2301      	moveq	r3, #1
     37a:	2300      	movne	r3, #0
     37c:	b2db      	uxtb	r3, r3
     37e:	2b00      	cmp	r3, #0
     380:	d006      	beq.n	390 <GPIO_Port_F_Handler+0x94>
    {
        blueLed.write(set);
     382:	2101      	movs	r1, #1
     384:	4806      	ldr	r0, [pc, #24]	; (3a0 <GPIO_Port_F_Handler+0xa4>)
     386:	f000 fc97 	bl	cb8 <_ZN4Gpio5writeE10setORClear>
        swtich2.interruptClear();
     38a:	4804      	ldr	r0, [pc, #16]	; (39c <GPIO_Port_F_Handler+0xa0>)
     38c:	f000 fc7f 	bl	c8e <_ZN4Gpio14interruptClearEv>
    }

}
     390:	bf00      	nop
     392:	bd80      	pop	{r7, pc}
     394:	200000e4 	.word	0x200000e4
     398:	200000cc 	.word	0x200000cc
     39c:	200000fc 	.word	0x200000fc
     3a0:	200000b4 	.word	0x200000b4

000003a4 <SystemInit>:
//         myTimer.interruptClear();
//     } 
// }

extern "C" void SystemInit(void)
{
     3a4:	b580      	push	{r7, lr}
     3a6:	b086      	sub	sp, #24
     3a8:	af06      	add	r7, sp, #24
    SystemControl::initializeGPIOHB();
     3aa:	f000 fa33 	bl	814 <_ZN13SystemControl16initializeGPIOHBEv>
    SystemControl::initializeClock(_80MHz);
     3ae:	2005      	movs	r0, #5
     3b0:	f000 fa68 	bl	884 <_ZN13SystemControl15initializeClockE7SYSDIV2>

    greenLed.initialize((uint32_t)PF3::M1PWM7, output);
     3b4:	2201      	movs	r2, #1
     3b6:	f241 01d2 	movw	r1, #4306	; 0x10d2
     3ba:	4813      	ldr	r0, [pc, #76]	; (408 <Stack_Size+0x8>)
     3bc:	f000 fae8 	bl	990 <_ZN4Gpio10initializeEm9direction>
    blueLed.initialize((uint32_t)PF2::GPIO, output); 
     3c0:	2201      	movs	r2, #1
     3c2:	f241 0168 	movw	r1, #4200	; 0x1068
     3c6:	4811      	ldr	r0, [pc, #68]	; (40c <Stack_Size+0xc>)
     3c8:	f000 fae2 	bl	990 <_ZN4Gpio10initializeEm9direction>
    redLed.initialize((uint32_t)PF1::GPIO, output);
     3cc:	2201      	movs	r2, #1
     3ce:	f241 0104 	movw	r1, #4100	; 0x1004
     3d2:	480f      	ldr	r0, [pc, #60]	; (410 <Stack_Size+0x10>)
     3d4:	f000 fadc 	bl	990 <_ZN4Gpio10initializeEm9direction>

    greenPwm.initializeSingle(7, module1, 0xFFFF, 0xFFFF/2, 0x1, countDirectionPwm::down, (uint32_t)ACTZERO::invertPwm, true, (uint32_t)pwmUnitClockDivisor::_64);
     3d8:	2305      	movs	r3, #5
     3da:	9305      	str	r3, [sp, #20]
     3dc:	2301      	movs	r3, #1
     3de:	9304      	str	r3, [sp, #16]
     3e0:	2301      	movs	r3, #1
     3e2:	9303      	str	r3, [sp, #12]
     3e4:	2300      	movs	r3, #0
     3e6:	9302      	str	r3, [sp, #8]
     3e8:	2301      	movs	r3, #1
     3ea:	9301      	str	r3, [sp, #4]
     3ec:	f647 73ff 	movw	r3, #32767	; 0x7fff
     3f0:	9300      	str	r3, [sp, #0]
     3f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
     3f6:	2201      	movs	r2, #1
     3f8:	2107      	movs	r1, #7
     3fa:	4806      	ldr	r0, [pc, #24]	; (414 <Stack_Size+0x14>)
     3fc:	f000 fca4 	bl	d48 <_ZN3Pwm16initializeSingleEm9pwmModulemmm17countDirectionPwmmbm>
    // greenPwm.initializeSingle(pwmGen2, module0, 0xFFFF, 0xFFFF/2, 0xFFFF/2, countDirectionPwm::down, 0x08C, pwmOutput::pwmA, false, 1);
}
     400:	bf00      	nop
     402:	46bd      	mov	sp, r7
     404:	bd80      	pop	{r7, pc}
     406:	bf00      	nop
     408:	2000009c 	.word	0x2000009c
     40c:	200000b4 	.word	0x200000b4
     410:	200000cc 	.word	0x200000cc
     414:	20000114 	.word	0x20000114

00000418 <main>:
 
int main(void)
{
     418:	b580      	push	{r7, lr}
     41a:	af00      	add	r7, sp, #0
    
    Nvic::disableInterrupts();
     41c:	f000 f9bc 	bl	798 <_ZN4Nvic17disableInterruptsEv>

    swtich1.initialize((uint32_t)PF4::GPIO, input, 3);
     420:	2303      	movs	r3, #3
     422:	2200      	movs	r2, #0
     424:	f241 1130 	movw	r1, #4400	; 0x1130
     428:	480b      	ldr	r0, [pc, #44]	; (458 <main+0x40>)
     42a:	f000 fbcb 	bl	bc4 <_ZN4Gpio10initializeEm9directionm>
    swtich2.initialize((uint32_t)PF0::GPIO, input, 3);
     42e:	2303      	movs	r3, #3
     430:	2200      	movs	r2, #0
     432:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
     436:	4809      	ldr	r0, [pc, #36]	; (45c <main+0x44>)
     438:	f000 fbc4 	bl	bc4 <_ZN4Gpio10initializeEm9directionm>

    // myTimer.initializeForInterupt(periodic, shortTimer0, 80000000, down, concatenated, 3);
    // myTimer.enableTimer();

    Nvic::enableInterrupts();
     43c:	f000 f9bb 	bl	7b6 <_ZN4Nvic16enableInterruptsEv>
    
    blueLed.write(set);
     440:	2101      	movs	r1, #1
     442:	4807      	ldr	r0, [pc, #28]	; (460 <main+0x48>)
     444:	f000 fc38 	bl	cb8 <_ZN4Gpio5writeE10setORClear>
    redLed.write(set);
     448:	2101      	movs	r1, #1
     44a:	4806      	ldr	r0, [pc, #24]	; (464 <main+0x4c>)
     44c:	f000 fc34 	bl	cb8 <_ZN4Gpio5writeE10setORClear>
        
    while(1)
    {
        Nvic::wfi();
     450:	f000 f9c0 	bl	7d4 <_ZN4Nvic3wfiEv>
     454:	e7fc      	b.n	450 <main+0x38>
     456:	bf00      	nop
     458:	200000e4 	.word	0x200000e4
     45c:	200000fc 	.word	0x200000fc
     460:	200000b4 	.word	0x200000b4
     464:	200000cc 	.word	0x200000cc

00000468 <_Z41__static_initialization_and_destruction_0ii>:
    }

}
     468:	b580      	push	{r7, lr}
     46a:	b082      	sub	sp, #8
     46c:	af00      	add	r7, sp, #0
     46e:	6078      	str	r0, [r7, #4]
     470:	6039      	str	r1, [r7, #0]
     472:	687b      	ldr	r3, [r7, #4]
     474:	2b01      	cmp	r3, #1
     476:	d134      	bne.n	4e2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
     478:	683b      	ldr	r3, [r7, #0]
     47a:	f64f 72ff 	movw	r2, #65535	; 0xffff
     47e:	4293      	cmp	r3, r2
     480:	d12f      	bne.n	4e2 <_Z41__static_initialization_and_destruction_0ii+0x7a>
Gpio greenLed;
     482:	481a      	ldr	r0, [pc, #104]	; (4ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
     484:	f000 fa6a 	bl	95c <_ZN4GpioC1Ev>
     488:	4a19      	ldr	r2, [pc, #100]	; (4f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     48a:	491a      	ldr	r1, [pc, #104]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     48c:	4817      	ldr	r0, [pc, #92]	; (4ec <_Z41__static_initialization_and_destruction_0ii+0x84>)
     48e:	f000 fde3 	bl	1058 <__aeabi_atexit>
Gpio blueLed;
     492:	4819      	ldr	r0, [pc, #100]	; (4f8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
     494:	f000 fa62 	bl	95c <_ZN4GpioC1Ev>
     498:	4a15      	ldr	r2, [pc, #84]	; (4f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     49a:	4916      	ldr	r1, [pc, #88]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     49c:	4816      	ldr	r0, [pc, #88]	; (4f8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
     49e:	f000 fddb 	bl	1058 <__aeabi_atexit>
Gpio redLed;
     4a2:	4816      	ldr	r0, [pc, #88]	; (4fc <_Z41__static_initialization_and_destruction_0ii+0x94>)
     4a4:	f000 fa5a 	bl	95c <_ZN4GpioC1Ev>
     4a8:	4a11      	ldr	r2, [pc, #68]	; (4f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     4aa:	4912      	ldr	r1, [pc, #72]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     4ac:	4813      	ldr	r0, [pc, #76]	; (4fc <_Z41__static_initialization_and_destruction_0ii+0x94>)
     4ae:	f000 fdd3 	bl	1058 <__aeabi_atexit>
Gpio swtich1;
     4b2:	4813      	ldr	r0, [pc, #76]	; (500 <_Z41__static_initialization_and_destruction_0ii+0x98>)
     4b4:	f000 fa52 	bl	95c <_ZN4GpioC1Ev>
     4b8:	4a0d      	ldr	r2, [pc, #52]	; (4f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     4ba:	490e      	ldr	r1, [pc, #56]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     4bc:	4810      	ldr	r0, [pc, #64]	; (500 <_Z41__static_initialization_and_destruction_0ii+0x98>)
     4be:	f000 fdcb 	bl	1058 <__aeabi_atexit>
Gpio swtich2;
     4c2:	4810      	ldr	r0, [pc, #64]	; (504 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
     4c4:	f000 fa4a 	bl	95c <_ZN4GpioC1Ev>
     4c8:	4a09      	ldr	r2, [pc, #36]	; (4f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     4ca:	490a      	ldr	r1, [pc, #40]	; (4f4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
     4cc:	480d      	ldr	r0, [pc, #52]	; (504 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
     4ce:	f000 fdc3 	bl	1058 <__aeabi_atexit>
Pwm greenPwm;
     4d2:	480d      	ldr	r0, [pc, #52]	; (508 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
     4d4:	f000 fc22 	bl	d1c <_ZN3PwmC1Ev>
     4d8:	4a05      	ldr	r2, [pc, #20]	; (4f0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
     4da:	490c      	ldr	r1, [pc, #48]	; (50c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
     4dc:	480a      	ldr	r0, [pc, #40]	; (508 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
     4de:	f000 fdbb 	bl	1058 <__aeabi_atexit>
}
     4e2:	bf00      	nop
     4e4:	3708      	adds	r7, #8
     4e6:	46bd      	mov	sp, r7
     4e8:	bd80      	pop	{r7, pc}
     4ea:	bf00      	nop
     4ec:	2000009c 	.word	0x2000009c
     4f0:	20000000 	.word	0x20000000
     4f4:	0000097b 	.word	0x0000097b
     4f8:	200000b4 	.word	0x200000b4
     4fc:	200000cc 	.word	0x200000cc
     500:	200000e4 	.word	0x200000e4
     504:	200000fc 	.word	0x200000fc
     508:	20000114 	.word	0x20000114
     50c:	00000d33 	.word	0x00000d33

00000510 <_GLOBAL__sub_I_greenLed>:
     510:	b580      	push	{r7, lr}
     512:	af00      	add	r7, sp, #0
     514:	f64f 71ff 	movw	r1, #65535	; 0xffff
     518:	2001      	movs	r0, #1
     51a:	f7ff ffa5 	bl	468 <_Z41__static_initialization_and_destruction_0ii>
     51e:	bd80      	pop	{r7, pc}

00000520 <_ZN8RegisterC1Ev>:
#include "register.h"

/**
 * @brief empty constructor placeholder
 */
Register::Register()
     520:	b480      	push	{r7}
     522:	b083      	sub	sp, #12
     524:	af00      	add	r7, sp, #0
     526:	6078      	str	r0, [r7, #4]
{
    
}
     528:	687b      	ldr	r3, [r7, #4]
     52a:	4618      	mov	r0, r3
     52c:	370c      	adds	r7, #12
     52e:	46bd      	mov	sp, r7
     530:	f85d 7b04 	ldr.w	r7, [sp], #4
     534:	4770      	bx	lr

00000536 <_ZN8RegisterD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Register::~Register()
     536:	b480      	push	{r7}
     538:	b083      	sub	sp, #12
     53a:	af00      	add	r7, sp, #0
     53c:	6078      	str	r0, [r7, #4]
{

}
     53e:	687b      	ldr	r3, [r7, #4]
     540:	4618      	mov	r0, r3
     542:	370c      	adds	r7, #12
     544:	46bd      	mov	sp, r7
     546:	f85d 7b04 	ldr.w	r7, [sp], #4
     54a:	4770      	bx	lr

0000054c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>:
 * @param permission of the bitfield, read-only, write-only, etc...
 * 
 * @return retrieved information in the bitfield
 */
uint32_t Register::getRegisterBitFieldStatus(volatile uint32_t* address, uint32_t bit, uint32_t bitWidth, bitFieldPermission permission)
{
     54c:	b480      	push	{r7}
     54e:	b087      	sub	sp, #28
     550:	af00      	add	r7, sp, #0
     552:	60f8      	str	r0, [r7, #12]
     554:	60b9      	str	r1, [r7, #8]
     556:	607a      	str	r2, [r7, #4]
     558:	70fb      	strb	r3, [r7, #3]
    if((permission == RW) || (permission == RO) || (permission == RW1C))
     55a:	78fb      	ldrb	r3, [r7, #3]
     55c:	2b00      	cmp	r3, #0
     55e:	d005      	beq.n	56c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x20>
     560:	78fb      	ldrb	r3, [r7, #3]
     562:	2b01      	cmp	r3, #1
     564:	d002      	beq.n	56c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x20>
     566:	78fb      	ldrb	r3, [r7, #3]
     568:	2b03      	cmp	r3, #3
     56a:	d111      	bne.n	590 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x44>
    {
        uint32_t select = ((((0xFFFFFFFF >> (32 - bitWidth)))) << bit);
     56c:	687b      	ldr	r3, [r7, #4]
     56e:	f1c3 0320 	rsb	r3, r3, #32
     572:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     576:	40da      	lsrs	r2, r3
     578:	68bb      	ldr	r3, [r7, #8]
     57a:	fa02 f303 	lsl.w	r3, r2, r3
     57e:	617b      	str	r3, [r7, #20]
        return(((*address) & select) >> bit);
     580:	68fb      	ldr	r3, [r7, #12]
     582:	681a      	ldr	r2, [r3, #0]
     584:	697b      	ldr	r3, [r7, #20]
     586:	401a      	ands	r2, r3
     588:	68bb      	ldr	r3, [r7, #8]
     58a:	fa22 f303 	lsr.w	r3, r2, r3
     58e:	e001      	b.n	594 <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission+0x48>
    }

    else
    {
        return(UINT32_MAX);
     590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
     594:	4618      	mov	r0, r3
     596:	371c      	adds	r7, #28
     598:	46bd      	mov	sp, r7
     59a:	f85d 7b04 	ldr.w	r7, [sp], #4
     59e:	4770      	bx	lr

000005a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>:
 * @param bit to be set or the first bit of the bitfield to be set
 * @param width of the bitfield
 * @param permission of the bitfield, read-only, write-only, etc...
 */
void Register::setRegisterBitFieldStatus(volatile uint32_t* address, uint32_t value, uint32_t bit, uint32_t bitWidth, bitFieldPermission permission)
{
     5a0:	b480      	push	{r7}
     5a2:	b087      	sub	sp, #28
     5a4:	af00      	add	r7, sp, #0
     5a6:	60f8      	str	r0, [r7, #12]
     5a8:	60b9      	str	r1, [r7, #8]
     5aa:	607a      	str	r2, [r7, #4]
     5ac:	603b      	str	r3, [r7, #0]
    if((permission == RW1C) && (value != 1))
     5ae:	f897 3020 	ldrb.w	r3, [r7, #32]
     5b2:	2b03      	cmp	r3, #3
     5b4:	d102      	bne.n	5bc <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x1c>
     5b6:	68bb      	ldr	r3, [r7, #8]
     5b8:	2b01      	cmp	r3, #1
     5ba:	d12f      	bne.n	61c <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x7c>
    {
        return;
    }
    
    else if((permission == RW) || (permission == WO) || (permission == RW1C))
     5bc:	f897 3020 	ldrb.w	r3, [r7, #32]
     5c0:	2b00      	cmp	r3, #0
     5c2:	d007      	beq.n	5d4 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x34>
     5c4:	f897 3020 	ldrb.w	r3, [r7, #32]
     5c8:	2b02      	cmp	r3, #2
     5ca:	d003      	beq.n	5d4 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x34>
     5cc:	f897 3020 	ldrb.w	r3, [r7, #32]
     5d0:	2b03      	cmp	r3, #3
     5d2:	d125      	bne.n	620 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x80>
    {
        uint32_t maxValue = (0xFFFFFFFF >> (32 - bitWidth));
     5d4:	683b      	ldr	r3, [r7, #0]
     5d6:	f1c3 0320 	rsb	r3, r3, #32
     5da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     5de:	fa22 f303 	lsr.w	r3, r2, r3
     5e2:	617b      	str	r3, [r7, #20]

        if((value <= maxValue))
     5e4:	68ba      	ldr	r2, [r7, #8]
     5e6:	697b      	ldr	r3, [r7, #20]
     5e8:	429a      	cmp	r2, r3
     5ea:	d81b      	bhi.n	624 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x84>
        {
            uint32_t clear = (~(maxValue << bit));
     5ec:	697a      	ldr	r2, [r7, #20]
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	fa02 f303 	lsl.w	r3, r2, r3
     5f4:	43db      	mvns	r3, r3
     5f6:	613b      	str	r3, [r7, #16]
            value = value << bit;
     5f8:	68ba      	ldr	r2, [r7, #8]
     5fa:	687b      	ldr	r3, [r7, #4]
     5fc:	fa02 f303 	lsl.w	r3, r2, r3
     600:	60bb      	str	r3, [r7, #8]
    
            (*address) &= clear;
     602:	68fb      	ldr	r3, [r7, #12]
     604:	681a      	ldr	r2, [r3, #0]
     606:	693b      	ldr	r3, [r7, #16]
     608:	401a      	ands	r2, r3
     60a:	68fb      	ldr	r3, [r7, #12]
     60c:	601a      	str	r2, [r3, #0]
            (*address) |= value;
     60e:	68fb      	ldr	r3, [r7, #12]
     610:	681a      	ldr	r2, [r3, #0]
     612:	68bb      	ldr	r3, [r7, #8]
     614:	431a      	orrs	r2, r3
     616:	68fb      	ldr	r3, [r7, #12]
     618:	601a      	str	r2, [r3, #0]
        }

        else
        {
            return;
        }
     61a:	e004      	b.n	626 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
        return;
     61c:	bf00      	nop
     61e:	e002      	b.n	626 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
        
    }

    else
    {
        return;
     620:	bf00      	nop
     622:	e000      	b.n	626 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission+0x86>
            return;
     624:	bf00      	nop
    }
}
     626:	371c      	adds	r7, #28
     628:	46bd      	mov	sp, r7
     62a:	f85d 7b04 	ldr.w	r7, [sp], #4
     62e:	4770      	bx	lr

00000630 <_Znwj>:


void* operator new(size_t size) noexcept 
{ 
     630:	b580      	push	{r7, lr}
     632:	b082      	sub	sp, #8
     634:	af00      	add	r7, sp, #0
     636:	6078      	str	r0, [r7, #4]
    return malloc(size); 
     638:	6878      	ldr	r0, [r7, #4]
     63a:	f001 fc7b 	bl	1f34 <malloc>
     63e:	4603      	mov	r3, r0
} 
     640:	4618      	mov	r0, r3
     642:	3708      	adds	r7, #8
     644:	46bd      	mov	sp, r7
     646:	bd80      	pop	{r7, pc}

00000648 <_ZdlPv>:

void operator delete(void *p) noexcept 
{ 
     648:	b580      	push	{r7, lr}
     64a:	b082      	sub	sp, #8
     64c:	af00      	add	r7, sp, #0
     64e:	6078      	str	r0, [r7, #4]
    free(p); 
     650:	6878      	ldr	r0, [r7, #4]
     652:	f001 fc77 	bl	1f44 <free>
} 
     656:	bf00      	nop
     658:	3708      	adds	r7, #8
     65a:	46bd      	mov	sp, r7
     65c:	bd80      	pop	{r7, pc}

0000065e <_Znaj>:

void* operator new[](size_t size) noexcept 
{ 
     65e:	b580      	push	{r7, lr}
     660:	b082      	sub	sp, #8
     662:	af00      	add	r7, sp, #0
     664:	6078      	str	r0, [r7, #4]
    return operator new(size); // Same as regular new
     666:	6878      	ldr	r0, [r7, #4]
     668:	f7ff ffe2 	bl	630 <_Znwj>
     66c:	4603      	mov	r3, r0
} 
     66e:	4618      	mov	r0, r3
     670:	3708      	adds	r7, #8
     672:	46bd      	mov	sp, r7
     674:	bd80      	pop	{r7, pc}

00000676 <_ZdaPv>:

void operator delete[](void *p) noexcept 
{ 
     676:	b580      	push	{r7, lr}
     678:	b082      	sub	sp, #8
     67a:	af00      	add	r7, sp, #0
     67c:	6078      	str	r0, [r7, #4]
    operator delete(p); // Same as regular delete
     67e:	6878      	ldr	r0, [r7, #4]
     680:	f7ff ffe2 	bl	648 <_ZdlPv>
} 
     684:	bf00      	nop
     686:	3708      	adds	r7, #8
     688:	46bd      	mov	sp, r7
     68a:	bd80      	pop	{r7, pc}

0000068c <_ZnwjSt9nothrow_t>:

void* operator new(size_t size, std::nothrow_t) noexcept 
{ 
     68c:	b580      	push	{r7, lr}
     68e:	b082      	sub	sp, #8
     690:	af00      	add	r7, sp, #0
     692:	6078      	str	r0, [r7, #4]
     694:	7039      	strb	r1, [r7, #0]
    return operator new(size); // Same as regular new 
     696:	6878      	ldr	r0, [r7, #4]
     698:	f7ff ffca 	bl	630 <_Znwj>
     69c:	4603      	mov	r3, r0
} 
     69e:	4618      	mov	r0, r3
     6a0:	3708      	adds	r7, #8
     6a2:	46bd      	mov	sp, r7
     6a4:	bd80      	pop	{r7, pc}

000006a6 <_ZdlPvSt9nothrow_t>:

void operator delete(void *p,  std::nothrow_t) noexcept 
{ 
     6a6:	b580      	push	{r7, lr}
     6a8:	b082      	sub	sp, #8
     6aa:	af00      	add	r7, sp, #0
     6ac:	6078      	str	r0, [r7, #4]
     6ae:	7039      	strb	r1, [r7, #0]
    operator delete(p); // Same as regular delete
     6b0:	6878      	ldr	r0, [r7, #4]
     6b2:	f7ff ffc9 	bl	648 <_ZdlPv>
} 
     6b6:	bf00      	nop
     6b8:	3708      	adds	r7, #8
     6ba:	46bd      	mov	sp, r7
     6bc:	bd80      	pop	{r7, pc}

000006be <_ZnajSt9nothrow_t>:

void* operator new[](size_t size, std::nothrow_t) noexcept 
{ 
     6be:	b580      	push	{r7, lr}
     6c0:	b082      	sub	sp, #8
     6c2:	af00      	add	r7, sp, #0
     6c4:	6078      	str	r0, [r7, #4]
     6c6:	7039      	strb	r1, [r7, #0]
    return operator new(size); // Same as regular new
     6c8:	6878      	ldr	r0, [r7, #4]
     6ca:	f7ff ffb1 	bl	630 <_Znwj>
     6ce:	4603      	mov	r3, r0
} 
     6d0:	4618      	mov	r0, r3
     6d2:	3708      	adds	r7, #8
     6d4:	46bd      	mov	sp, r7
     6d6:	bd80      	pop	{r7, pc}

000006d8 <_ZdaPvSt9nothrow_t>:

void operator delete[](void *p,  std::nothrow_t) noexcept 
{ 
     6d8:	b580      	push	{r7, lr}
     6da:	b082      	sub	sp, #8
     6dc:	af00      	add	r7, sp, #0
     6de:	6078      	str	r0, [r7, #4]
     6e0:	7039      	strb	r1, [r7, #0]
    operator delete(p); // Same as regular delete
     6e2:	6878      	ldr	r0, [r7, #4]
     6e4:	f7ff ffb0 	bl	648 <_ZdlPv>
}
     6e8:	bf00      	nop
     6ea:	3708      	adds	r7, #8
     6ec:	46bd      	mov	sp, r7
     6ee:	bd80      	pop	{r7, pc}

000006f0 <_ZN4NvicC1Ev>:


/**
 * @brief empty constructor placeholder
 */
Nvic::Nvic()
     6f0:	b480      	push	{r7}
     6f2:	b083      	sub	sp, #12
     6f4:	af00      	add	r7, sp, #0
     6f6:	6078      	str	r0, [r7, #4]
{

}
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	4618      	mov	r0, r3
     6fc:	370c      	adds	r7, #12
     6fe:	46bd      	mov	sp, r7
     700:	f85d 7b04 	ldr.w	r7, [sp], #4
     704:	4770      	bx	lr

00000706 <_ZN4NvicD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Nvic::~Nvic()
     706:	b480      	push	{r7}
     708:	b083      	sub	sp, #12
     70a:	af00      	add	r7, sp, #0
     70c:	6078      	str	r0, [r7, #4]
{

}
     70e:	687b      	ldr	r3, [r7, #4]
     710:	4618      	mov	r0, r3
     712:	370c      	adds	r7, #12
     714:	46bd      	mov	sp, r7
     716:	f85d 7b04 	ldr.w	r7, [sp], #4
     71a:	4770      	bx	lr

0000071c <_ZN4Nvic17activateInterruptE9interruptm>:
 * @param myInterrupt coresponds to the interrupt number of the interrupt that 
 *        you want to activate.
 * @param priority of the interrput that you want to activate
 */
void Nvic::activateInterrupt(interrupt myInterrupt, uint32_t priority)
{
     71c:	b580      	push	{r7, lr}
     71e:	b084      	sub	sp, #16
     720:	af02      	add	r7, sp, #8
     722:	4603      	mov	r3, r0
     724:	6039      	str	r1, [r7, #0]
     726:	71fb      	strb	r3, [r7, #7]
    
    if((myInterrupt < 139) && (priority < 8))
     728:	79fb      	ldrb	r3, [r7, #7]
     72a:	2b8a      	cmp	r3, #138	; 0x8a
     72c:	d82b      	bhi.n	786 <_ZN4Nvic17activateInterruptE9interruptm+0x6a>
     72e:	683b      	ldr	r3, [r7, #0]
     730:	2b07      	cmp	r3, #7
     732:	d828      	bhi.n	786 <_ZN4Nvic17activateInterruptE9interruptm+0x6a>
    {   
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(corePeripheralBase + PRIn_OFFSET[myInterrupt/4])), priority, ((myInterrupt % nvicRegisterOffset) * 8) + 5, 3, RW);
     734:	79fb      	ldrb	r3, [r7, #7]
     736:	089b      	lsrs	r3, r3, #2
     738:	b2db      	uxtb	r3, r3
     73a:	461a      	mov	r2, r3
     73c:	4b14      	ldr	r3, [pc, #80]	; (790 <_ZN4Nvic17activateInterruptE9interruptm+0x74>)
     73e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     742:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
     746:	4618      	mov	r0, r3
     748:	79fb      	ldrb	r3, [r7, #7]
     74a:	f003 0303 	and.w	r3, r3, #3
     74e:	00db      	lsls	r3, r3, #3
     750:	1d5a      	adds	r2, r3, #5
     752:	2300      	movs	r3, #0
     754:	9300      	str	r3, [sp, #0]
     756:	2303      	movs	r3, #3
     758:	6839      	ldr	r1, [r7, #0]
     75a:	f7ff ff21 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(corePeripheralBase + ENn_OFFSET[myInterrupt/32])), (uint32_t)set, (uint32_t)(myInterrupt % 32), 1, RW);
     75e:	79fb      	ldrb	r3, [r7, #7]
     760:	095b      	lsrs	r3, r3, #5
     762:	b2db      	uxtb	r3, r3
     764:	461a      	mov	r2, r3
     766:	4b0b      	ldr	r3, [pc, #44]	; (794 <_ZN4Nvic17activateInterruptE9interruptm+0x78>)
     768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     76c:	f103 23e0 	add.w	r3, r3, #3758153728	; 0xe000e000
     770:	4618      	mov	r0, r3
     772:	79fb      	ldrb	r3, [r7, #7]
     774:	f003 021f 	and.w	r2, r3, #31
     778:	2300      	movs	r3, #0
     77a:	9300      	str	r3, [sp, #0]
     77c:	2301      	movs	r3, #1
     77e:	2101      	movs	r1, #1
     780:	f7ff ff0e 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
     784:	e000      	b.n	788 <_ZN4Nvic17activateInterruptE9interruptm+0x6c>

    }
    
    else
    {
        return;
     786:	bf00      	nop
    }
}
     788:	3708      	adds	r7, #8
     78a:	46bd      	mov	sp, r7
     78c:	bd80      	pop	{r7, pc}
     78e:	bf00      	nop
     790:	00002ba0 	.word	0x00002ba0
     794:	00002b3c 	.word	0x00002b3c

00000798 <_ZN4Nvic17disableInterruptsEv>:
 *         value to void.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
uint32_t Nvic::disableInterrupts(void)
{
     798:	b480      	push	{r7}
     79a:	b083      	sub	sp, #12
     79c:	af00      	add	r7, sp, #0

        "mrs     r0, PRIMASK\n"
        "cpsid   i\n"
        "bx      lr\n"
        : "=r" (ui32Ret)
    );
     79e:	f3ef 8010 	mrs	r0, PRIMASK
     7a2:	b672      	cpsid	i
     7a4:	4770      	bx	lr
     7a6:	607b      	str	r3, [r7, #4]

    return(ui32Ret);
     7a8:	687b      	ldr	r3, [r7, #4]
}
     7aa:	4618      	mov	r0, r3
     7ac:	370c      	adds	r7, #12
     7ae:	46bd      	mov	sp, r7
     7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
     7b4:	4770      	bx	lr

000007b6 <_ZN4Nvic16enableInterruptsEv>:
 *         value to void.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
uint32_t Nvic::enableInterrupts(void)
{
     7b6:	b480      	push	{r7}
     7b8:	b083      	sub	sp, #12
     7ba:	af00      	add	r7, sp, #0

        "mrs     r0, PRIMASK\n"
        "cpsie   i\n"
        "bx      lr\n"
        : "=r" (ui32Ret)
    );
     7bc:	f3ef 8010 	mrs	r0, PRIMASK
     7c0:	b662      	cpsie	i
     7c2:	4770      	bx	lr
     7c4:	607b      	str	r3, [r7, #4]

    return(ui32Ret);
     7c6:	687b      	ldr	r3, [r7, #4]
}
     7c8:	4618      	mov	r0, r3
     7ca:	370c      	adds	r7, #12
     7cc:	46bd      	mov	sp, r7
     7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
     7d2:	4770      	bx	lr

000007d4 <_ZN4Nvic3wfiEv>:
 *        module and waits for another interrupt.
 */
#pragma GCC push_options
#pragma GCC optimize("O0")
void Nvic::wfi(void)
{
     7d4:	b480      	push	{r7}
     7d6:	af00      	add	r7, sp, #0
    //
    asm volatile(

        "wfi     \n"
        "bx    lr\n"
    );
     7d8:	bf30      	wfi
     7da:	4770      	bx	lr
    
}
     7dc:	bf00      	nop
     7de:	46bd      	mov	sp, r7
     7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
     7e4:	4770      	bx	lr
     7e6:	bf00      	nop

000007e8 <_ZN13SystemControlC1Ev>:
#include "systemControl.h"

/**
 * @brief empty constructor placeholder
 */
SystemControl::SystemControl()
     7e8:	b480      	push	{r7}
     7ea:	b083      	sub	sp, #12
     7ec:	af00      	add	r7, sp, #0
     7ee:	6078      	str	r0, [r7, #4]
{
    
}
     7f0:	687b      	ldr	r3, [r7, #4]
     7f2:	4618      	mov	r0, r3
     7f4:	370c      	adds	r7, #12
     7f6:	46bd      	mov	sp, r7
     7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7fc:	4770      	bx	lr

000007fe <_ZN13SystemControlD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
SystemControl::~SystemControl()
     7fe:	b480      	push	{r7}
     800:	b083      	sub	sp, #12
     802:	af00      	add	r7, sp, #0
     804:	6078      	str	r0, [r7, #4]
{
	
}
     806:	687b      	ldr	r3, [r7, #4]
     808:	4618      	mov	r0, r3
     80a:	370c      	adds	r7, #12
     80c:	46bd      	mov	sp, r7
     80e:	f85d 7b04 	ldr.w	r7, [sp], #4
     812:	4770      	bx	lr

00000814 <_ZN13SystemControl16initializeGPIOHBEv>:

/**
 * @brief Initializes the system to use GPIO AHB for use instead of the APB
 */
void SystemControl::initializeGPIOHB(void)
{
     814:	b580      	push	{r7, lr}
     816:	b082      	sub	sp, #8
     818:	af02      	add	r7, sp, #8

	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 0, 1, RW);
     81a:	2300      	movs	r3, #0
     81c:	9300      	str	r3, [sp, #0]
     81e:	2301      	movs	r3, #1
     820:	2200      	movs	r2, #0
     822:	2101      	movs	r1, #1
     824:	4816      	ldr	r0, [pc, #88]	; (880 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     826:	f7ff febb 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 1, 1, RW);
     82a:	2300      	movs	r3, #0
     82c:	9300      	str	r3, [sp, #0]
     82e:	2301      	movs	r3, #1
     830:	2201      	movs	r2, #1
     832:	2101      	movs	r1, #1
     834:	4812      	ldr	r0, [pc, #72]	; (880 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     836:	f7ff feb3 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 2, 1, RW);
     83a:	2300      	movs	r3, #0
     83c:	9300      	str	r3, [sp, #0]
     83e:	2301      	movs	r3, #1
     840:	2202      	movs	r2, #2
     842:	2101      	movs	r1, #1
     844:	480e      	ldr	r0, [pc, #56]	; (880 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     846:	f7ff feab 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 3, 1, RW);
     84a:	2300      	movs	r3, #0
     84c:	9300      	str	r3, [sp, #0]
     84e:	2301      	movs	r3, #1
     850:	2203      	movs	r2, #3
     852:	2101      	movs	r1, #1
     854:	480a      	ldr	r0, [pc, #40]	; (880 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     856:	f7ff fea3 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 4, 1, RW);
     85a:	2300      	movs	r3, #0
     85c:	9300      	str	r3, [sp, #0]
     85e:	2301      	movs	r3, #1
     860:	2204      	movs	r2, #4
     862:	2101      	movs	r1, #1
     864:	4806      	ldr	r0, [pc, #24]	; (880 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     866:	f7ff fe9b 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + GPIOHBCTL_OFFSET)), set, 5, 1, RW);
     86a:	2300      	movs	r3, #0
     86c:	9300      	str	r3, [sp, #0]
     86e:	2301      	movs	r3, #1
     870:	2205      	movs	r2, #5
     872:	2101      	movs	r1, #1
     874:	4802      	ldr	r0, [pc, #8]	; (880 <_ZN13SystemControl16initializeGPIOHBEv+0x6c>)
     876:	f7ff fe93 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     87a:	bf00      	nop
     87c:	46bd      	mov	sp, r7
     87e:	bd80      	pop	{r7, pc}
     880:	400fe06c 	.word	0x400fe06c

00000884 <_ZN13SystemControl15initializeClockE7SYSDIV2>:
 * @brief Initializes the PLL for system clock use
 *
 * @param frequency of the new system clock.
 */ 
void SystemControl::initializeClock(SYSDIV2 frequency)
{
     884:	b580      	push	{r7, lr}
     886:	b084      	sub	sp, #16
     888:	af02      	add	r7, sp, #8
     88a:	4603      	mov	r3, r0
     88c:	71fb      	strb	r3, [r7, #7]
	
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), set, 31, 1, RW); //0. Use RCC2.
     88e:	2300      	movs	r3, #0
     890:	9300      	str	r3, [sp, #0]
     892:	2301      	movs	r3, #1
     894:	221f      	movs	r2, #31
     896:	2101      	movs	r1, #1
     898:	482d      	ldr	r0, [pc, #180]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     89a:	f7ff fe81 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), set, 11, 1, RW); //1. Bypass PLL while initiializing
     89e:	2300      	movs	r3, #0
     8a0:	9300      	str	r3, [sp, #0]
     8a2:	2301      	movs	r3, #1
     8a4:	220b      	movs	r2, #11
     8a6:	2101      	movs	r1, #1
     8a8:	4829      	ldr	r0, [pc, #164]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     8aa:	f7ff fe79 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC_OFFSET)), _16MHz_XTAL, 6, 5, RW); // 2. Select the crystal value and the oscillator source, configure for 16MHz crystal.
     8ae:	2300      	movs	r3, #0
     8b0:	9300      	str	r3, [sp, #0]
     8b2:	2305      	movs	r3, #5
     8b4:	2206      	movs	r2, #6
     8b6:	2115      	movs	r1, #21
     8b8:	4826      	ldr	r0, [pc, #152]	; (954 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xd0>)
     8ba:	f7ff fe71 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), MOSC, 4, 3, RW);  //Confgure for main oscillator source.
     8be:	2300      	movs	r3, #0
     8c0:	9300      	str	r3, [sp, #0]
     8c2:	2303      	movs	r3, #3
     8c4:	2204      	movs	r2, #4
     8c6:	2100      	movs	r1, #0
     8c8:	4821      	ldr	r0, [pc, #132]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     8ca:	f7ff fe69 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), clear, 13, 1, RW); // 3. Activate PLL by clearing PWRDN.
     8ce:	2300      	movs	r3, #0
     8d0:	9300      	str	r3, [sp, #0]
     8d2:	2301      	movs	r3, #1
     8d4:	220d      	movs	r2, #13
     8d6:	2100      	movs	r1, #0
     8d8:	481d      	ldr	r0, [pc, #116]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     8da:	f7ff fe61 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

	/*
	 * Append the SYSDIV2LSB bit to the SYSDIV2 field to create a 7 bit divisor 
	 * using the 400 MHz PLL output.
	 */
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), set, 30, 1, RW);
     8de:	2300      	movs	r3, #0
     8e0:	9300      	str	r3, [sp, #0]
     8e2:	2301      	movs	r3, #1
     8e4:	221e      	movs	r2, #30
     8e6:	2101      	movs	r1, #1
     8e8:	4819      	ldr	r0, [pc, #100]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     8ea:	f7ff fe59 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), ((frequency - 1) & 0x01), 22, 1, RW);
     8ee:	79fb      	ldrb	r3, [r7, #7]
     8f0:	3b01      	subs	r3, #1
     8f2:	f003 0101 	and.w	r1, r3, #1
     8f6:	2300      	movs	r3, #0
     8f8:	9300      	str	r3, [sp, #0]
     8fa:	2301      	movs	r3, #1
     8fc:	2216      	movs	r2, #22
     8fe:	4814      	ldr	r0, [pc, #80]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     900:	f7ff fe4e 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), ((frequency - 1) >> 1), 23, 6, RW);
     904:	79fb      	ldrb	r3, [r7, #7]
     906:	3b01      	subs	r3, #1
     908:	105b      	asrs	r3, r3, #1
     90a:	4619      	mov	r1, r3
     90c:	2300      	movs	r3, #0
     90e:	9300      	str	r3, [sp, #0]
     910:	2306      	movs	r3, #6
     912:	2217      	movs	r2, #23
     914:	480e      	ldr	r0, [pc, #56]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     916:	f7ff fe43 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

	while((Register::getRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RIS_OFFSET)), 6, 1, RO)) == 0)  // 5. Wait for the PLL to lock by polling PLLRIS.
     91a:	2301      	movs	r3, #1
     91c:	2201      	movs	r2, #1
     91e:	2106      	movs	r1, #6
     920:	480d      	ldr	r0, [pc, #52]	; (958 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xd4>)
     922:	f7ff fe13 	bl	54c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     926:	4603      	mov	r3, r0
     928:	2b00      	cmp	r3, #0
     92a:	bf0c      	ite	eq
     92c:	2301      	moveq	r3, #1
     92e:	2300      	movne	r3, #0
     930:	b2db      	uxtb	r3, r3
     932:	2b00      	cmp	r3, #0
     934:	d000      	beq.n	938 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xb4>
     936:	e7f0      	b.n	91a <_ZN13SystemControl15initializeClockE7SYSDIV2+0x96>
	{

	}
	
	Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCC2_OFFSET)), clear, 11, 1, RW); // 6. Enable use of the PLL by clearing BYPASS.
     938:	2300      	movs	r3, #0
     93a:	9300      	str	r3, [sp, #0]
     93c:	2301      	movs	r3, #1
     93e:	220b      	movs	r2, #11
     940:	2100      	movs	r1, #0
     942:	4803      	ldr	r0, [pc, #12]	; (950 <_ZN13SystemControl15initializeClockE7SYSDIV2+0xcc>)
     944:	f7ff fe2c 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     948:	bf00      	nop
     94a:	3708      	adds	r7, #8
     94c:	46bd      	mov	sp, r7
     94e:	bd80      	pop	{r7, pc}
     950:	400fe070 	.word	0x400fe070
     954:	400fe060 	.word	0x400fe060
     958:	400fe050 	.word	0x400fe050

0000095c <_ZN4GpioC1Ev>:
#include "gpio.h"

/**
 * @brief empty constructor placeholder
 */
Gpio::Gpio()
     95c:	b480      	push	{r7}
     95e:	b083      	sub	sp, #12
     960:	af00      	add	r7, sp, #0
     962:	6078      	str	r0, [r7, #4]
     964:	687b      	ldr	r3, [r7, #4]
     966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     96a:	60da      	str	r2, [r3, #12]
{

}
     96c:	687b      	ldr	r3, [r7, #4]
     96e:	4618      	mov	r0, r3
     970:	370c      	adds	r7, #12
     972:	46bd      	mov	sp, r7
     974:	f85d 7b04 	ldr.w	r7, [sp], #4
     978:	4770      	bx	lr

0000097a <_ZN4GpioD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Gpio::~Gpio()
     97a:	b480      	push	{r7}
     97c:	b083      	sub	sp, #12
     97e:	af00      	add	r7, sp, #0
     980:	6078      	str	r0, [r7, #4]
{   

}
     982:	687b      	ldr	r3, [r7, #4]
     984:	4618      	mov	r0, r3
     986:	370c      	adds	r7, #12
     988:	46bd      	mov	sp, r7
     98a:	f85d 7b04 	ldr.w	r7, [sp], #4
     98e:	4770      	bx	lr

00000990 <_ZN4Gpio10initializeEm9direction>:
 * @brief Simple gpio initializer constructor.
 * @param gpio pin to be initialized.
 * @param dir of the gpio, to be an output or input.
 */
void Gpio::initialize(uint32_t gpio, direction dir)
{  
     990:	b580      	push	{r7, lr}
     992:	b086      	sub	sp, #24
     994:	af02      	add	r7, sp, #8
     996:	60f8      	str	r0, [r7, #12]
     998:	60b9      	str	r1, [r7, #8]
     99a:	4613      	mov	r3, r2
     99c:	71fb      	strb	r3, [r7, #7]
    alternateFunction = gpio%100; //get encoding for alternate function
     99e:	68ba      	ldr	r2, [r7, #8]
     9a0:	4b84      	ldr	r3, [pc, #528]	; (bb4 <_ZN4Gpio10initializeEm9direction+0x224>)
     9a2:	fba3 1302 	umull	r1, r3, r3, r2
     9a6:	095b      	lsrs	r3, r3, #5
     9a8:	2164      	movs	r1, #100	; 0x64
     9aa:	fb01 f303 	mul.w	r3, r1, r3
     9ae:	1ad3      	subs	r3, r2, r3
     9b0:	461a      	mov	r2, r3
     9b2:	68fb      	ldr	r3, [r7, #12]
     9b4:	60da      	str	r2, [r3, #12]
    gpio = gpio/100; //get rid of gpio encoding
     9b6:	68bb      	ldr	r3, [r7, #8]
     9b8:	4a7e      	ldr	r2, [pc, #504]	; (bb4 <_ZN4Gpio10initializeEm9direction+0x224>)
     9ba:	fba2 2303 	umull	r2, r3, r2, r3
     9be:	095b      	lsrs	r3, r3, #5
     9c0:	60bb      	str	r3, [r7, #8]

    gpioPort = (gpio/8);
     9c2:	68bb      	ldr	r3, [r7, #8]
     9c4:	08da      	lsrs	r2, r3, #3
     9c6:	68fb      	ldr	r3, [r7, #12]
     9c8:	615a      	str	r2, [r3, #20]
    (*this).gpio = (gpio%8);
     9ca:	68bb      	ldr	r3, [r7, #8]
     9cc:	f003 0207 	and.w	r2, r3, #7
     9d0:	68fb      	ldr	r3, [r7, #12]
     9d2:	601a      	str	r2, [r3, #0]
    (*this).dir = dir;
     9d4:	68fb      	ldr	r3, [r7, #12]
     9d6:	79fa      	ldrb	r2, [r7, #7]
     9d8:	711a      	strb	r2, [r3, #4]
    baseAddress = GPIO_Port_AHB_BASE + (gpioPort) * 0x1000;
     9da:	68fb      	ldr	r3, [r7, #12]
     9dc:	695b      	ldr	r3, [r3, #20]
     9de:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
     9e2:	3358      	adds	r3, #88	; 0x58
     9e4:	031a      	lsls	r2, r3, #12
     9e6:	68fb      	ldr	r3, [r7, #12]
     9e8:	611a      	str	r2, [r3, #16]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCGPIO_OFFSET)), set, (uint32_t)(gpioPort), 1, RW);
     9ea:	68fb      	ldr	r3, [r7, #12]
     9ec:	695a      	ldr	r2, [r3, #20]
     9ee:	2300      	movs	r3, #0
     9f0:	9300      	str	r3, [sp, #0]
     9f2:	2301      	movs	r3, #1
     9f4:	2101      	movs	r1, #1
     9f6:	4870      	ldr	r0, [pc, #448]	; (bb8 <_ZN4Gpio10initializeEm9direction+0x228>)
     9f8:	f7ff fdd2 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + PRGPIO_OFFSET)), (uint32_t)(gpioPort), 1, RO) == 0)
     9fc:	68fb      	ldr	r3, [r7, #12]
     9fe:	6959      	ldr	r1, [r3, #20]
     a00:	2301      	movs	r3, #1
     a02:	2201      	movs	r2, #1
     a04:	486d      	ldr	r0, [pc, #436]	; (bbc <_ZN4Gpio10initializeEm9direction+0x22c>)
     a06:	f7ff fda1 	bl	54c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     a0a:	4603      	mov	r3, r0
     a0c:	2b00      	cmp	r3, #0
     a0e:	bf0c      	ite	eq
     a10:	2301      	moveq	r3, #1
     a12:	2300      	movne	r3, #0
     a14:	b2db      	uxtb	r3, r3
     a16:	2b00      	cmp	r3, #0
     a18:	d000      	beq.n	a1c <_ZN4Gpio10initializeEm9direction+0x8c>
     a1a:	e7ef      	b.n	9fc <_ZN4Gpio10initializeEm9direction+0x6c>
    {
        //Ready?
    }

    //Unlock NMI for use.
    if(gpio == ((uint32_t)PF0::GPIO)/100)
     a1c:	68bb      	ldr	r3, [r7, #8]
     a1e:	2b28      	cmp	r3, #40	; 0x28
     a20:	d11c      	bne.n	a5c <_ZN4Gpio10initializeEm9direction+0xcc>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOLOCK_OFFSET)), gpioKey, 0, 32, RW);
     a22:	68fb      	ldr	r3, [r7, #12]
     a24:	691b      	ldr	r3, [r3, #16]
     a26:	f503 63a4 	add.w	r3, r3, #1312	; 0x520
     a2a:	4618      	mov	r0, r3
     a2c:	2300      	movs	r3, #0
     a2e:	9300      	str	r3, [sp, #0]
     a30:	2320      	movs	r3, #32
     a32:	2200      	movs	r2, #0
     a34:	4962      	ldr	r1, [pc, #392]	; (bc0 <_ZN4Gpio10initializeEm9direction+0x230>)
     a36:	f7ff fdb3 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        *(((volatile uint32_t*)(baseAddress + GPIOCR_OFFSET))) |= (0x1 << (*this).gpio);
     a3a:	68fb      	ldr	r3, [r7, #12]
     a3c:	691b      	ldr	r3, [r3, #16]
     a3e:	f203 5324 	addw	r3, r3, #1316	; 0x524
     a42:	681b      	ldr	r3, [r3, #0]
     a44:	68fa      	ldr	r2, [r7, #12]
     a46:	6812      	ldr	r2, [r2, #0]
     a48:	2101      	movs	r1, #1
     a4a:	fa01 f202 	lsl.w	r2, r1, r2
     a4e:	4611      	mov	r1, r2
     a50:	68fa      	ldr	r2, [r7, #12]
     a52:	6912      	ldr	r2, [r2, #16]
     a54:	f202 5224 	addw	r2, r2, #1316	; 0x524
     a58:	430b      	orrs	r3, r1
     a5a:	6013      	str	r3, [r2, #0]
    }

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODIR_OFFSET)), (*this).dir, (*this).gpio, 1, RW);
     a5c:	68fb      	ldr	r3, [r7, #12]
     a5e:	691b      	ldr	r3, [r3, #16]
     a60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
     a64:	4618      	mov	r0, r3
     a66:	68fb      	ldr	r3, [r7, #12]
     a68:	791b      	ldrb	r3, [r3, #4]
     a6a:	4619      	mov	r1, r3
     a6c:	68fb      	ldr	r3, [r7, #12]
     a6e:	681a      	ldr	r2, [r3, #0]
     a70:	2300      	movs	r3, #0
     a72:	9300      	str	r3, [sp, #0]
     a74:	2301      	movs	r3, #1
     a76:	f7ff fd93 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    
    //If no alternate function encoding
    if(alternateFunction == 0)
     a7a:	68fb      	ldr	r3, [r7, #12]
     a7c:	68db      	ldr	r3, [r3, #12]
     a7e:	2b00      	cmp	r3, #0
     a80:	d138      	bne.n	af4 <_ZN4Gpio10initializeEm9direction+0x164>
    {
        if((*this).dir == input)
     a82:	68fb      	ldr	r3, [r7, #12]
     a84:	791b      	ldrb	r3, [r3, #4]
     a86:	2b00      	cmp	r3, #0
     a88:	d10c      	bne.n	aa4 <_ZN4Gpio10initializeEm9direction+0x114>
        {
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOPUR_OFFSET)), set, (*this).gpio, 1, RW);
     a8a:	68fb      	ldr	r3, [r7, #12]
     a8c:	691b      	ldr	r3, [r3, #16]
     a8e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
     a92:	4618      	mov	r0, r3
     a94:	68fb      	ldr	r3, [r7, #12]
     a96:	681a      	ldr	r2, [r3, #0]
     a98:	2300      	movs	r3, #0
     a9a:	9300      	str	r3, [sp, #0]
     a9c:	2301      	movs	r3, #1
     a9e:	2101      	movs	r1, #1
     aa0:	f7ff fd7e 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        }


        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAFSEl_OFFSET)), clear, (*this).gpio, 1, RW);
     aa4:	68fb      	ldr	r3, [r7, #12]
     aa6:	691b      	ldr	r3, [r3, #16]
     aa8:	f503 6384 	add.w	r3, r3, #1056	; 0x420
     aac:	4618      	mov	r0, r3
     aae:	68fb      	ldr	r3, [r7, #12]
     ab0:	681a      	ldr	r2, [r3, #0]
     ab2:	2300      	movs	r3, #0
     ab4:	9300      	str	r3, [sp, #0]
     ab6:	2301      	movs	r3, #1
     ab8:	2100      	movs	r1, #0
     aba:	f7ff fd71 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), set, (*this).gpio, 1, RW);
     abe:	68fb      	ldr	r3, [r7, #12]
     ac0:	691b      	ldr	r3, [r3, #16]
     ac2:	f203 531c 	addw	r3, r3, #1308	; 0x51c
     ac6:	4618      	mov	r0, r3
     ac8:	68fb      	ldr	r3, [r7, #12]
     aca:	681a      	ldr	r2, [r3, #0]
     acc:	2300      	movs	r3, #0
     ace:	9300      	str	r3, [sp, #0]
     ad0:	2301      	movs	r3, #1
     ad2:	2101      	movs	r1, #1
     ad4:	f7ff fd64 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), clear, (*this).gpio, 1, RW);
     ad8:	68fb      	ldr	r3, [r7, #12]
     ada:	691b      	ldr	r3, [r3, #16]
     adc:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
     ae0:	4618      	mov	r0, r3
     ae2:	68fb      	ldr	r3, [r7, #12]
     ae4:	681a      	ldr	r2, [r3, #0]
     ae6:	2300      	movs	r3, #0
     ae8:	9300      	str	r3, [sp, #0]
     aea:	2301      	movs	r3, #1
     aec:	2100      	movs	r1, #0
     aee:	f7ff fd57 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), clear, (*this).gpio, 1, RW);
        }


    }
}
     af2:	e05a      	b.n	baa <_ZN4Gpio10initializeEm9direction+0x21a>
        alternateFunction = alternateFunction - 1; //Get rid of encoding offset
     af4:	68fb      	ldr	r3, [r7, #12]
     af6:	68db      	ldr	r3, [r3, #12]
     af8:	1e5a      	subs	r2, r3, #1
     afa:	68fb      	ldr	r3, [r7, #12]
     afc:	60da      	str	r2, [r3, #12]
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAFSEl_OFFSET)), set, (*this).gpio, 1, RW); //Enable alternate function for GPIO pin
     afe:	68fb      	ldr	r3, [r7, #12]
     b00:	691b      	ldr	r3, [r3, #16]
     b02:	f503 6384 	add.w	r3, r3, #1056	; 0x420
     b06:	4618      	mov	r0, r3
     b08:	68fb      	ldr	r3, [r7, #12]
     b0a:	681a      	ldr	r2, [r3, #0]
     b0c:	2300      	movs	r3, #0
     b0e:	9300      	str	r3, [sp, #0]
     b10:	2301      	movs	r3, #1
     b12:	2101      	movs	r1, #1
     b14:	f7ff fd44 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        if(alternateFunction == 0)
     b18:	68fb      	ldr	r3, [r7, #12]
     b1a:	68db      	ldr	r3, [r3, #12]
     b1c:	2b00      	cmp	r3, #0
     b1e:	d11a      	bne.n	b56 <_ZN4Gpio10initializeEm9direction+0x1c6>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), clear, (*this).gpio, 1, RW);
     b20:	68fb      	ldr	r3, [r7, #12]
     b22:	691b      	ldr	r3, [r3, #16]
     b24:	f203 531c 	addw	r3, r3, #1308	; 0x51c
     b28:	4618      	mov	r0, r3
     b2a:	68fb      	ldr	r3, [r7, #12]
     b2c:	681a      	ldr	r2, [r3, #0]
     b2e:	2300      	movs	r3, #0
     b30:	9300      	str	r3, [sp, #0]
     b32:	2301      	movs	r3, #1
     b34:	2100      	movs	r1, #0
     b36:	f7ff fd33 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), set, (*this).gpio, 1, RW);
     b3a:	68fb      	ldr	r3, [r7, #12]
     b3c:	691b      	ldr	r3, [r3, #16]
     b3e:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
     b42:	4618      	mov	r0, r3
     b44:	68fb      	ldr	r3, [r7, #12]
     b46:	681a      	ldr	r2, [r3, #0]
     b48:	2300      	movs	r3, #0
     b4a:	9300      	str	r3, [sp, #0]
     b4c:	2301      	movs	r3, #1
     b4e:	2101      	movs	r1, #1
     b50:	f7ff fd26 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     b54:	e029      	b.n	baa <_ZN4Gpio10initializeEm9direction+0x21a>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOPCTL_OFFSET)), alternateFunction, ((*this).gpio) * 4, 4, RW);
     b56:	68fb      	ldr	r3, [r7, #12]
     b58:	691b      	ldr	r3, [r3, #16]
     b5a:	f203 532c 	addw	r3, r3, #1324	; 0x52c
     b5e:	4618      	mov	r0, r3
     b60:	68fb      	ldr	r3, [r7, #12]
     b62:	68db      	ldr	r3, [r3, #12]
     b64:	4619      	mov	r1, r3
     b66:	68fb      	ldr	r3, [r7, #12]
     b68:	681b      	ldr	r3, [r3, #0]
     b6a:	009a      	lsls	r2, r3, #2
     b6c:	2300      	movs	r3, #0
     b6e:	9300      	str	r3, [sp, #0]
     b70:	2304      	movs	r3, #4
     b72:	f7ff fd15 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODEN_OFFSET)), set, (*this).gpio, 1, RW);
     b76:	68fb      	ldr	r3, [r7, #12]
     b78:	691b      	ldr	r3, [r3, #16]
     b7a:	f203 531c 	addw	r3, r3, #1308	; 0x51c
     b7e:	4618      	mov	r0, r3
     b80:	68fb      	ldr	r3, [r7, #12]
     b82:	681a      	ldr	r2, [r3, #0]
     b84:	2300      	movs	r3, #0
     b86:	9300      	str	r3, [sp, #0]
     b88:	2301      	movs	r3, #1
     b8a:	2101      	movs	r1, #1
     b8c:	f7ff fd08 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
            Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOAMSEL_OFFSET)), clear, (*this).gpio, 1, RW);
     b90:	68fb      	ldr	r3, [r7, #12]
     b92:	691b      	ldr	r3, [r3, #16]
     b94:	f503 63a5 	add.w	r3, r3, #1320	; 0x528
     b98:	4618      	mov	r0, r3
     b9a:	68fb      	ldr	r3, [r7, #12]
     b9c:	681a      	ldr	r2, [r3, #0]
     b9e:	2300      	movs	r3, #0
     ba0:	9300      	str	r3, [sp, #0]
     ba2:	2301      	movs	r3, #1
     ba4:	2100      	movs	r1, #0
     ba6:	f7ff fcfb 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     baa:	bf00      	nop
     bac:	3710      	adds	r7, #16
     bae:	46bd      	mov	sp, r7
     bb0:	bd80      	pop	{r7, pc}
     bb2:	bf00      	nop
     bb4:	51eb851f 	.word	0x51eb851f
     bb8:	400fe608 	.word	0x400fe608
     bbc:	400fea08 	.word	0x400fea08
     bc0:	4c4f434b 	.word	0x4c4f434b

00000bc4 <_ZN4Gpio10initializeEm9directionm>:
 * @param dir of the gpio, to be an output or input.
 * @param interruptPriority of the gpio, 0 being the highest priority and 7
 *        being the lowest.
 */
void Gpio::initialize(uint32_t gpio, direction dir, uint32_t interruptPriority)
{
     bc4:	b580      	push	{r7, lr}
     bc6:	b086      	sub	sp, #24
     bc8:	af02      	add	r7, sp, #8
     bca:	60f8      	str	r0, [r7, #12]
     bcc:	60b9      	str	r1, [r7, #8]
     bce:	603b      	str	r3, [r7, #0]
     bd0:	4613      	mov	r3, r2
     bd2:	71fb      	strb	r3, [r7, #7]
    (*this).interruptPriority = interruptPriority;
     bd4:	68fb      	ldr	r3, [r7, #12]
     bd6:	683a      	ldr	r2, [r7, #0]
     bd8:	609a      	str	r2, [r3, #8]
    
    initialize(gpio, dir);
     bda:	79fb      	ldrb	r3, [r7, #7]
     bdc:	461a      	mov	r2, r3
     bde:	68b9      	ldr	r1, [r7, #8]
     be0:	68f8      	ldr	r0, [r7, #12]
     be2:	f7ff fed5 	bl	990 <_ZN4Gpio10initializeEm9direction>
    
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIM_OFFSET)), clear, (*this).gpio, 1, RW);
     be6:	68fb      	ldr	r3, [r7, #12]
     be8:	691b      	ldr	r3, [r3, #16]
     bea:	f503 6382 	add.w	r3, r3, #1040	; 0x410
     bee:	4618      	mov	r0, r3
     bf0:	68fb      	ldr	r3, [r7, #12]
     bf2:	681a      	ldr	r2, [r3, #0]
     bf4:	2300      	movs	r3, #0
     bf6:	9300      	str	r3, [sp, #0]
     bf8:	2301      	movs	r3, #1
     bfa:	2100      	movs	r1, #0
     bfc:	f7ff fcd0 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIS_OFFSET)), clear, (*this).gpio, 1, RW);
     c00:	68fb      	ldr	r3, [r7, #12]
     c02:	691b      	ldr	r3, [r3, #16]
     c04:	f203 4304 	addw	r3, r3, #1028	; 0x404
     c08:	4618      	mov	r0, r3
     c0a:	68fb      	ldr	r3, [r7, #12]
     c0c:	681a      	ldr	r2, [r3, #0]
     c0e:	2300      	movs	r3, #0
     c10:	9300      	str	r3, [sp, #0]
     c12:	2301      	movs	r3, #1
     c14:	2100      	movs	r1, #0
     c16:	f7ff fcc3 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIBE_OFFSET)), set, (*this).gpio, 1, RW);
     c1a:	68fb      	ldr	r3, [r7, #12]
     c1c:	691b      	ldr	r3, [r3, #16]
     c1e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
     c22:	4618      	mov	r0, r3
     c24:	68fb      	ldr	r3, [r7, #12]
     c26:	681a      	ldr	r2, [r3, #0]
     c28:	2300      	movs	r3, #0
     c2a:	9300      	str	r3, [sp, #0]
     c2c:	2301      	movs	r3, #1
     c2e:	2101      	movs	r1, #1
     c30:	f7ff fcb6 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOICR_OFFSET)), set, (*this).gpio, 1, RW);
     c34:	68fb      	ldr	r3, [r7, #12]
     c36:	691b      	ldr	r3, [r3, #16]
     c38:	f203 431c 	addw	r3, r3, #1052	; 0x41c
     c3c:	4618      	mov	r0, r3
     c3e:	68fb      	ldr	r3, [r7, #12]
     c40:	681a      	ldr	r2, [r3, #0]
     c42:	2300      	movs	r3, #0
     c44:	9300      	str	r3, [sp, #0]
     c46:	2301      	movs	r3, #1
     c48:	2101      	movs	r1, #1
     c4a:	f7ff fca9 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOIM_OFFSET)), set, (*this).gpio, 1, RW);
     c4e:	68fb      	ldr	r3, [r7, #12]
     c50:	691b      	ldr	r3, [r3, #16]
     c52:	f503 6382 	add.w	r3, r3, #1040	; 0x410
     c56:	4618      	mov	r0, r3
     c58:	68fb      	ldr	r3, [r7, #12]
     c5a:	681a      	ldr	r2, [r3, #0]
     c5c:	2300      	movs	r3, #0
     c5e:	9300      	str	r3, [sp, #0]
     c60:	2301      	movs	r3, #1
     c62:	2101      	movs	r1, #1
     c64:	f7ff fc9c 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    /*
    * If gpio is == to Port F (Port number 5) use interrupt number 30 
    * (according to interrupt table), else use interrupt number 0 -> 4 
    * (corresponding to interrupt Port A through Port E)
    */
    Nvic::activateInterrupt((interrupt)((((gpioPort) == 5) ? 30 : (gpioPort))), (*this).interruptPriority);
     c68:	68fb      	ldr	r3, [r7, #12]
     c6a:	695b      	ldr	r3, [r3, #20]
     c6c:	2b05      	cmp	r3, #5
     c6e:	d003      	beq.n	c78 <_ZN4Gpio10initializeEm9directionm+0xb4>
     c70:	68fb      	ldr	r3, [r7, #12]
     c72:	695b      	ldr	r3, [r3, #20]
     c74:	b2db      	uxtb	r3, r3
     c76:	e000      	b.n	c7a <_ZN4Gpio10initializeEm9directionm+0xb6>
     c78:	231e      	movs	r3, #30
     c7a:	68fa      	ldr	r2, [r7, #12]
     c7c:	6892      	ldr	r2, [r2, #8]
     c7e:	4611      	mov	r1, r2
     c80:	4618      	mov	r0, r3
     c82:	f7ff fd4b 	bl	71c <_ZN4Nvic17activateInterruptE9interruptm>
}
     c86:	bf00      	nop
     c88:	3710      	adds	r7, #16
     c8a:	46bd      	mov	sp, r7
     c8c:	bd80      	pop	{r7, pc}

00000c8e <_ZN4Gpio14interruptClearEv>:

/**
 * @brief Clears the interrupt. Generally used in an ISR.
 */
void Gpio::interruptClear()
{
     c8e:	b580      	push	{r7, lr}
     c90:	b084      	sub	sp, #16
     c92:	af02      	add	r7, sp, #8
     c94:	6078      	str	r0, [r7, #4]

    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIOICR_OFFSET)), set, gpio, 1, RW);
     c96:	687b      	ldr	r3, [r7, #4]
     c98:	691b      	ldr	r3, [r3, #16]
     c9a:	f203 431c 	addw	r3, r3, #1052	; 0x41c
     c9e:	4618      	mov	r0, r3
     ca0:	687b      	ldr	r3, [r7, #4]
     ca2:	681a      	ldr	r2, [r3, #0]
     ca4:	2300      	movs	r3, #0
     ca6:	9300      	str	r3, [sp, #0]
     ca8:	2301      	movs	r3, #1
     caa:	2101      	movs	r1, #1
     cac:	f7ff fc78 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     cb0:	bf00      	nop
     cb2:	3708      	adds	r7, #8
     cb4:	46bd      	mov	sp, r7
     cb6:	bd80      	pop	{r7, pc}

00000cb8 <_ZN4Gpio5writeE10setORClear>:
/**
 * @brief Writes to the gpio pin.
 * @param value to write to pin. Accepted values are 1 or 0.
 */
void Gpio::write(setORClear value)
{
     cb8:	b580      	push	{r7, lr}
     cba:	b084      	sub	sp, #16
     cbc:	af02      	add	r7, sp, #8
     cbe:	6078      	str	r0, [r7, #4]
     cc0:	460b      	mov	r3, r1
     cc2:	70fb      	strb	r3, [r7, #3]
    if((value == 0x0) || (value == 0x1))
     cc4:	78fb      	ldrb	r3, [r7, #3]
     cc6:	2b00      	cmp	r3, #0
     cc8:	d002      	beq.n	cd0 <_ZN4Gpio5writeE10setORClear+0x18>
     cca:	78fb      	ldrb	r3, [r7, #3]
     ccc:	2b01      	cmp	r3, #1
     cce:	d10c      	bne.n	cea <_ZN4Gpio5writeE10setORClear+0x32>
    {
        Register::setRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODATA_OFFSET)), value, gpio, 1, RW);
     cd0:	687b      	ldr	r3, [r7, #4]
     cd2:	691b      	ldr	r3, [r3, #16]
     cd4:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
     cd8:	4618      	mov	r0, r3
     cda:	78f9      	ldrb	r1, [r7, #3]
     cdc:	687b      	ldr	r3, [r7, #4]
     cde:	681a      	ldr	r2, [r3, #0]
     ce0:	2300      	movs	r3, #0
     ce2:	9300      	str	r3, [sp, #0]
     ce4:	2301      	movs	r3, #1
     ce6:	f7ff fc5b 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    }
}
     cea:	bf00      	nop
     cec:	3708      	adds	r7, #8
     cee:	46bd      	mov	sp, r7
     cf0:	bd80      	pop	{r7, pc}

00000cf2 <_ZN4Gpio4readEv>:
/**
 * @brief Reads from a gpio pin.
 * @return Value of the gpio pin, either a 1 or 0.
 */
uint32_t Gpio::read()
{
     cf2:	b580      	push	{r7, lr}
     cf4:	b082      	sub	sp, #8
     cf6:	af00      	add	r7, sp, #0
     cf8:	6078      	str	r0, [r7, #4]
    return((Register::getRegisterBitFieldStatus(((volatile uint32_t*)(baseAddress + GPIODATA_OFFSET)), gpio, 1, RW)));
     cfa:	687b      	ldr	r3, [r7, #4]
     cfc:	691b      	ldr	r3, [r3, #16]
     cfe:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
     d02:	4618      	mov	r0, r3
     d04:	687b      	ldr	r3, [r7, #4]
     d06:	6819      	ldr	r1, [r3, #0]
     d08:	2300      	movs	r3, #0
     d0a:	2201      	movs	r2, #1
     d0c:	f7ff fc1e 	bl	54c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     d10:	4603      	mov	r3, r0
     d12:	4618      	mov	r0, r3
     d14:	3708      	adds	r7, #8
     d16:	46bd      	mov	sp, r7
     d18:	bd80      	pop	{r7, pc}
     d1a:	bf00      	nop

00000d1c <_ZN3PwmC1Ev>:
#include "pwm.h"

/**
 * @brief empty constructor placeholder
 */
Pwm::Pwm()
     d1c:	b480      	push	{r7}
     d1e:	b083      	sub	sp, #12
     d20:	af00      	add	r7, sp, #0
     d22:	6078      	str	r0, [r7, #4]
{

}
     d24:	687b      	ldr	r3, [r7, #4]
     d26:	4618      	mov	r0, r3
     d28:	370c      	adds	r7, #12
     d2a:	46bd      	mov	sp, r7
     d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
     d30:	4770      	bx	lr

00000d32 <_ZN3PwmD1Ev>:

/**
 * @brief empty deconstructor placeholder
 */
Pwm::~Pwm()
     d32:	b480      	push	{r7}
     d34:	b083      	sub	sp, #12
     d36:	af00      	add	r7, sp, #0
     d38:	6078      	str	r0, [r7, #4]
{

}
     d3a:	687b      	ldr	r3, [r7, #4]
     d3c:	4618      	mov	r0, r3
     d3e:	370c      	adds	r7, #12
     d40:	46bd      	mov	sp, r7
     d42:	f85d 7b04 	ldr.w	r7, [sp], #4
     d46:	4770      	bx	lr

00000d48 <_ZN3Pwm16initializeSingleEm9pwmModulemmm17countDirectionPwmmbm>:
 *                     peripheral
 * @param divisor Binary divisor used to pre-divide the system clock. Must be
 *                enabled with the \c enablePwmDiv first.
 */
void Pwm::initializeSingle(uint32_t pwmPin, pwmModule module, uint32_t period, uint32_t compA, uint32_t compB, countDirectionPwm countDir, uint32_t genOptions, bool enablePwmDiv, uint32_t divisor)
{
     d48:	b580      	push	{r7, lr}
     d4a:	b086      	sub	sp, #24
     d4c:	af02      	add	r7, sp, #8
     d4e:	60f8      	str	r0, [r7, #12]
     d50:	60b9      	str	r1, [r7, #8]
     d52:	603b      	str	r3, [r7, #0]
     d54:	4613      	mov	r3, r2
     d56:	71fb      	strb	r3, [r7, #7]
    myPwmGen = pwmPin/2;
     d58:	68bb      	ldr	r3, [r7, #8]
     d5a:	085a      	lsrs	r2, r3, #1
     d5c:	68fb      	ldr	r3, [r7, #12]
     d5e:	605a      	str	r2, [r3, #4]
    
    initialize(module, period, countDir, enablePwmDiv, divisor);
     d60:	79f9      	ldrb	r1, [r7, #7]
     d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
     d64:	9301      	str	r3, [sp, #4]
     d66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
     d6a:	9300      	str	r3, [sp, #0]
     d6c:	6a3b      	ldr	r3, [r7, #32]
     d6e:	683a      	ldr	r2, [r7, #0]
     d70:	68f8      	ldr	r0, [r7, #12]
     d72:	f000 f8c5 	bl	f00 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>
    
    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.
    
    //2b. Write the PWMnGENn register. 
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENA_OFFSET + (0x40 * myPwmGen) + ((pwmPin%2) * 4))), genOptions, 0, 11+1, RW);
     d76:	68fb      	ldr	r3, [r7, #12]
     d78:	681a      	ldr	r2, [r3, #0]
     d7a:	68fb      	ldr	r3, [r7, #12]
     d7c:	685b      	ldr	r3, [r3, #4]
     d7e:	0119      	lsls	r1, r3, #4
     d80:	68bb      	ldr	r3, [r7, #8]
     d82:	f003 0301 	and.w	r3, r3, #1
     d86:	440b      	add	r3, r1
     d88:	3318      	adds	r3, #24
     d8a:	009b      	lsls	r3, r3, #2
     d8c:	4413      	add	r3, r2
     d8e:	4618      	mov	r0, r3
     d90:	2300      	movs	r3, #0
     d92:	9300      	str	r3, [sp, #0]
     d94:	230c      	movs	r3, #12
     d96:	2200      	movs	r2, #0
     d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
     d9a:	f7ff fc01 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //4. Set counter comparators
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPA_OFFSET + (0x40 * myPwmGen))), compA, 0, 15+1, RW);
     d9e:	68fb      	ldr	r3, [r7, #12]
     da0:	681a      	ldr	r2, [r3, #0]
     da2:	68fb      	ldr	r3, [r7, #12]
     da4:	685b      	ldr	r3, [r3, #4]
     da6:	019b      	lsls	r3, r3, #6
     da8:	4413      	add	r3, r2
     daa:	3358      	adds	r3, #88	; 0x58
     dac:	4618      	mov	r0, r3
     dae:	2300      	movs	r3, #0
     db0:	9300      	str	r3, [sp, #0]
     db2:	2310      	movs	r3, #16
     db4:	2200      	movs	r2, #0
     db6:	69b9      	ldr	r1, [r7, #24]
     db8:	f7ff fbf2 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPB_OFFSET + (0x40 * myPwmGen))), compB, 0, 15+1, RW);
     dbc:	68fb      	ldr	r3, [r7, #12]
     dbe:	681a      	ldr	r2, [r3, #0]
     dc0:	68fb      	ldr	r3, [r7, #12]
     dc2:	685b      	ldr	r3, [r3, #4]
     dc4:	019b      	lsls	r3, r3, #6
     dc6:	4413      	add	r3, r2
     dc8:	335c      	adds	r3, #92	; 0x5c
     dca:	4618      	mov	r0, r3
     dcc:	2300      	movs	r3, #0
     dce:	9300      	str	r3, [sp, #0]
     dd0:	2310      	movs	r3, #16
     dd2:	2200      	movs	r2, #0
     dd4:	69f9      	ldr	r1, [r7, #28]
     dd6:	f7ff fbe3 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //6. Enable PWM
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), set, 0, 1, RW);
     dda:	68fb      	ldr	r3, [r7, #12]
     ddc:	681a      	ldr	r2, [r3, #0]
     dde:	68fb      	ldr	r3, [r7, #12]
     de0:	685b      	ldr	r3, [r3, #4]
     de2:	3301      	adds	r3, #1
     de4:	019b      	lsls	r3, r3, #6
     de6:	4413      	add	r3, r2
     de8:	4618      	mov	r0, r3
     dea:	2300      	movs	r3, #0
     dec:	9300      	str	r3, [sp, #0]
     dee:	2301      	movs	r3, #1
     df0:	2200      	movs	r2, #0
     df2:	2101      	movs	r1, #1
     df4:	f7ff fbd4 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //7. Enable PWM output.
    // Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + PWMENABLE_OFFSET), set, 0 + ((myPwmGen*2)+(((pwmPin%2) * 4)/4)), 1, RW); //(uint32_t)output >> 2
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + PWMENABLE_OFFSET), set, pwmPin, 1, RW); //(uint32_t)output >> 2
     df8:	68fb      	ldr	r3, [r7, #12]
     dfa:	681b      	ldr	r3, [r3, #0]
     dfc:	3308      	adds	r3, #8
     dfe:	4618      	mov	r0, r3
     e00:	2300      	movs	r3, #0
     e02:	9300      	str	r3, [sp, #0]
     e04:	2301      	movs	r3, #1
     e06:	68ba      	ldr	r2, [r7, #8]
     e08:	2101      	movs	r1, #1
     e0a:	f7ff fbc9 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

}
     e0e:	bf00      	nop
     e10:	3710      	adds	r7, #16
     e12:	46bd      	mov	sp, r7
     e14:	bd80      	pop	{r7, pc}

00000e16 <_ZN3Pwm14initializePairEm9pwmModulemmm17countDirectionPwmmmbm>:
 * @param divisor Binary divisor used to pre-divide the system clock. Must be
 *                enabled with the \c enablePwmDiv first.
 */

void Pwm::initializePair(uint32_t pwmPin, pwmModule module, uint32_t period, uint32_t compA, uint32_t compB, countDirectionPwm countDir, uint32_t genOptionsA, uint32_t genOptionsB, bool enablePwmDiv, uint32_t divisor)
{
     e16:	b580      	push	{r7, lr}
     e18:	b086      	sub	sp, #24
     e1a:	af02      	add	r7, sp, #8
     e1c:	60f8      	str	r0, [r7, #12]
     e1e:	60b9      	str	r1, [r7, #8]
     e20:	603b      	str	r3, [r7, #0]
     e22:	4613      	mov	r3, r2
     e24:	71fb      	strb	r3, [r7, #7]
    myPwmGen = pwmPin/2;
     e26:	68bb      	ldr	r3, [r7, #8]
     e28:	085a      	lsrs	r2, r3, #1
     e2a:	68fb      	ldr	r3, [r7, #12]
     e2c:	605a      	str	r2, [r3, #4]

    initialize(module, period, countDir, enablePwmDiv, divisor);
     e2e:	79f9      	ldrb	r1, [r7, #7]
     e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     e32:	9301      	str	r3, [sp, #4]
     e34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     e38:	9300      	str	r3, [sp, #0]
     e3a:	6a3b      	ldr	r3, [r7, #32]
     e3c:	683a      	ldr	r2, [r7, #0]
     e3e:	68f8      	ldr	r0, [r7, #12]
     e40:	f000 f85e 	bl	f00 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>
    
    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.
    
    //2b. Write the PWMnGENA register.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENA_OFFSET + (0x40 * myPwmGen))), genOptionsA, 0, 11+1, RW);
     e44:	68fb      	ldr	r3, [r7, #12]
     e46:	681a      	ldr	r2, [r3, #0]
     e48:	68fb      	ldr	r3, [r7, #12]
     e4a:	685b      	ldr	r3, [r3, #4]
     e4c:	019b      	lsls	r3, r3, #6
     e4e:	4413      	add	r3, r2
     e50:	3360      	adds	r3, #96	; 0x60
     e52:	4618      	mov	r0, r3
     e54:	2300      	movs	r3, #0
     e56:	9300      	str	r3, [sp, #0]
     e58:	230c      	movs	r3, #12
     e5a:	2200      	movs	r2, #0
     e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
     e5e:	f7ff fb9f 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //2c. Write the PWMnGENB register.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0GENB_OFFSET + (0x40 * myPwmGen))), genOptionsB, 0, 11+1, RW);
     e62:	68fb      	ldr	r3, [r7, #12]
     e64:	681a      	ldr	r2, [r3, #0]
     e66:	68fb      	ldr	r3, [r7, #12]
     e68:	685b      	ldr	r3, [r3, #4]
     e6a:	019b      	lsls	r3, r3, #6
     e6c:	4413      	add	r3, r2
     e6e:	3364      	adds	r3, #100	; 0x64
     e70:	4618      	mov	r0, r3
     e72:	2300      	movs	r3, #0
     e74:	9300      	str	r3, [sp, #0]
     e76:	230c      	movs	r3, #12
     e78:	2200      	movs	r2, #0
     e7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
     e7c:	f7ff fb90 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //4. Set counter comparator for pwmA
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPA_OFFSET + (0x40 * myPwmGen))), compA, 0, 15+1, RW);
     e80:	68fb      	ldr	r3, [r7, #12]
     e82:	681a      	ldr	r2, [r3, #0]
     e84:	68fb      	ldr	r3, [r7, #12]
     e86:	685b      	ldr	r3, [r3, #4]
     e88:	019b      	lsls	r3, r3, #6
     e8a:	4413      	add	r3, r2
     e8c:	3358      	adds	r3, #88	; 0x58
     e8e:	4618      	mov	r0, r3
     e90:	2300      	movs	r3, #0
     e92:	9300      	str	r3, [sp, #0]
     e94:	2310      	movs	r3, #16
     e96:	2200      	movs	r2, #0
     e98:	69b9      	ldr	r1, [r7, #24]
     e9a:	f7ff fb81 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //5. Set counter comparator for pwmB
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CMPB_OFFSET + (0x40 * myPwmGen))), compB, 0, 15+1, RW);
     e9e:	68fb      	ldr	r3, [r7, #12]
     ea0:	681a      	ldr	r2, [r3, #0]
     ea2:	68fb      	ldr	r3, [r7, #12]
     ea4:	685b      	ldr	r3, [r3, #4]
     ea6:	019b      	lsls	r3, r3, #6
     ea8:	4413      	add	r3, r2
     eaa:	335c      	adds	r3, #92	; 0x5c
     eac:	4618      	mov	r0, r3
     eae:	2300      	movs	r3, #0
     eb0:	9300      	str	r3, [sp, #0]
     eb2:	2310      	movs	r3, #16
     eb4:	2200      	movs	r2, #0
     eb6:	69f9      	ldr	r1, [r7, #28]
     eb8:	f7ff fb72 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //6. Enable PWM
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), set, 0, 1, RW);
     ebc:	68fb      	ldr	r3, [r7, #12]
     ebe:	681a      	ldr	r2, [r3, #0]
     ec0:	68fb      	ldr	r3, [r7, #12]
     ec2:	685b      	ldr	r3, [r3, #4]
     ec4:	3301      	adds	r3, #1
     ec6:	019b      	lsls	r3, r3, #6
     ec8:	4413      	add	r3, r2
     eca:	4618      	mov	r0, r3
     ecc:	2300      	movs	r3, #0
     ece:	9300      	str	r3, [sp, #0]
     ed0:	2301      	movs	r3, #1
     ed2:	2200      	movs	r2, #0
     ed4:	2101      	movs	r1, #1
     ed6:	f7ff fb63 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //7. Enable PWM output.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWMENABLE_OFFSET + (0x40 * myPwmGen))), 0x3, pwmPin, 2, RW); 
     eda:	68fb      	ldr	r3, [r7, #12]
     edc:	681a      	ldr	r2, [r3, #0]
     ede:	68fb      	ldr	r3, [r7, #12]
     ee0:	685b      	ldr	r3, [r3, #4]
     ee2:	019b      	lsls	r3, r3, #6
     ee4:	4413      	add	r3, r2
     ee6:	3308      	adds	r3, #8
     ee8:	4618      	mov	r0, r3
     eea:	2300      	movs	r3, #0
     eec:	9300      	str	r3, [sp, #0]
     eee:	2302      	movs	r3, #2
     ef0:	68ba      	ldr	r2, [r7, #8]
     ef2:	2103      	movs	r1, #3
     ef4:	f7ff fb54 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
     ef8:	bf00      	nop
     efa:	3710      	adds	r7, #16
     efc:	46bd      	mov	sp, r7
     efe:	bd80      	pop	{r7, pc}

00000f00 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm>:
 * @param enablePwmDiv Enables the PWM peripheral clock pre-divider
 * @param divisor The value of the PWM clock pre-divider chosen by enum
 *                pwmUnitClockDivisor.       
 */
void Pwm::initialize(pwmModule module, uint32_t period, countDirectionPwm countDir, bool enablePwmDiv, uint32_t divisor)
{    
     f00:	b580      	push	{r7, lr}
     f02:	b088      	sub	sp, #32
     f04:	af02      	add	r7, sp, #8
     f06:	60f8      	str	r0, [r7, #12]
     f08:	607a      	str	r2, [r7, #4]
     f0a:	603b      	str	r3, [r7, #0]
     f0c:	460b      	mov	r3, r1
     f0e:	72fb      	strb	r3, [r7, #11]
    baseAddress = pwm0BaseAddress + (module * 0x1000);
     f10:	7afb      	ldrb	r3, [r7, #11]
     f12:	031b      	lsls	r3, r3, #12
     f14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     f18:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
     f1c:	68fa      	ldr	r2, [r7, #12]
     f1e:	6013      	str	r3, [r2, #0]
    
    //0. Enable the clock for PWM
    Register::setRegisterBitFieldStatus(((volatile uint32_t*)(systemControlBase + RCGCPWM_OFFSET)), set, module, 1, RW);
     f20:	7afa      	ldrb	r2, [r7, #11]
     f22:	2300      	movs	r3, #0
     f24:	9300      	str	r3, [sp, #0]
     f26:	2301      	movs	r3, #1
     f28:	2101      	movs	r1, #1
     f2a:	4847      	ldr	r0, [pc, #284]	; (1048 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x148>)
     f2c:	f7ff fb38 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRPWM_OFFSET), module, 1, RO) == 0)
     f30:	7af9      	ldrb	r1, [r7, #11]
     f32:	2301      	movs	r3, #1
     f34:	2201      	movs	r2, #1
     f36:	4845      	ldr	r0, [pc, #276]	; (104c <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x14c>)
     f38:	f7ff fb08 	bl	54c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     f3c:	4603      	mov	r3, r0
     f3e:	2b00      	cmp	r3, #0
     f40:	bf0c      	ite	eq
     f42:	2301      	moveq	r3, #1
     f44:	2300      	movne	r3, #0
     f46:	b2db      	uxtb	r3, r3
     f48:	2b00      	cmp	r3, #0
     f4a:	d000      	beq.n	f4e <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x4e>
     f4c:	e7f0      	b.n	f30 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x30>
        //Ready??
    }

    // Clear count register by reseting PWM

    Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + SRPWM_OFFSET), set, module, 1, RW);
     f4e:	7afa      	ldrb	r2, [r7, #11]
     f50:	2300      	movs	r3, #0
     f52:	9300      	str	r3, [sp, #0]
     f54:	2301      	movs	r3, #1
     f56:	2101      	movs	r1, #1
     f58:	483d      	ldr	r0, [pc, #244]	; (1050 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x150>)
     f5a:	f7ff fb21 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    for(uint32_t i = 0; i < 100; i++)
     f5e:	2300      	movs	r3, #0
     f60:	617b      	str	r3, [r7, #20]
     f62:	697b      	ldr	r3, [r7, #20]
     f64:	2b63      	cmp	r3, #99	; 0x63
     f66:	d803      	bhi.n	f70 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x70>
     f68:	697b      	ldr	r3, [r7, #20]
     f6a:	3301      	adds	r3, #1
     f6c:	617b      	str	r3, [r7, #20]
     f6e:	e7f8      	b.n	f62 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x62>
    {
        //wait
    }

    Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + SRPWM_OFFSET), clear, module, 1, RW);
     f70:	7afa      	ldrb	r2, [r7, #11]
     f72:	2300      	movs	r3, #0
     f74:	9300      	str	r3, [sp, #0]
     f76:	2301      	movs	r3, #1
     f78:	2100      	movs	r1, #0
     f7a:	4835      	ldr	r0, [pc, #212]	; (1050 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x150>)
     f7c:	f7ff fb10 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    while(Register::getRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + PRPWM_OFFSET), module, 1, RO) == 0)
     f80:	7af9      	ldrb	r1, [r7, #11]
     f82:	2301      	movs	r3, #1
     f84:	2201      	movs	r2, #1
     f86:	4831      	ldr	r0, [pc, #196]	; (104c <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x14c>)
     f88:	f7ff fae0 	bl	54c <_ZN8Register25getRegisterBitFieldStatusEPVmmm18bitFieldPermission>
     f8c:	4603      	mov	r3, r0
     f8e:	2b00      	cmp	r3, #0
     f90:	bf0c      	ite	eq
     f92:	2301      	moveq	r3, #1
     f94:	2300      	movne	r3, #0
     f96:	b2db      	uxtb	r3, r3
     f98:	2b00      	cmp	r3, #0
     f9a:	d000      	beq.n	f9e <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x9e>
     f9c:	e7f0      	b.n	f80 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x80>
    {
        //Ready??
    }

    if(enablePwmDiv == true)
     f9e:	f897 3020 	ldrb.w	r3, [r7, #32]
     fa2:	2b01      	cmp	r3, #1
     fa4:	d10f      	bne.n	fc6 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0xc6>
    {
        //1a. Configure the Run-Mode Clock Configuration (RCC) register in the System Control module to use the PWM divide (USEPWMDIV).
        Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + RCC_OFFSET), set, 20, 1, RW);
     fa6:	2300      	movs	r3, #0
     fa8:	9300      	str	r3, [sp, #0]
     faa:	2301      	movs	r3, #1
     fac:	2214      	movs	r2, #20
     fae:	2101      	movs	r1, #1
     fb0:	4828      	ldr	r0, [pc, #160]	; (1054 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x154>)
     fb2:	f7ff faf5 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
        //1b. Set the divider (PWMDIV).
        Register::setRegisterBitFieldStatus((volatile uint32_t*)(systemControlBase + RCC_OFFSET), divisor, 17, (19-17)+1, RW);
     fb6:	2300      	movs	r3, #0
     fb8:	9300      	str	r3, [sp, #0]
     fba:	2303      	movs	r3, #3
     fbc:	2211      	movs	r2, #17
     fbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
     fc0:	4824      	ldr	r0, [pc, #144]	; (1054 <_ZN3Pwm10initializeE9pwmModulem17countDirectionPwmbm+0x154>)
     fc2:	f7ff faed 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    }

    //2. Configure the PWM generator for countdown mode with immediate updates to the parameters.

    //2a. Write the PWMnCTL register with a value of 0x0000.0000 to clear it.
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), clear, 0, 1, RW);
     fc6:	68fb      	ldr	r3, [r7, #12]
     fc8:	681a      	ldr	r2, [r3, #0]
     fca:	68fb      	ldr	r3, [r7, #12]
     fcc:	685b      	ldr	r3, [r3, #4]
     fce:	3301      	adds	r3, #1
     fd0:	019b      	lsls	r3, r3, #6
     fd2:	4413      	add	r3, r2
     fd4:	4618      	mov	r0, r3
     fd6:	2300      	movs	r3, #0
     fd8:	9300      	str	r3, [sp, #0]
     fda:	2301      	movs	r3, #1
     fdc:	2200      	movs	r2, #0
     fde:	2100      	movs	r1, #0
     fe0:	f7ff fade 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), set, 2, 1, RW);
     fe4:	68fb      	ldr	r3, [r7, #12]
     fe6:	681a      	ldr	r2, [r3, #0]
     fe8:	68fb      	ldr	r3, [r7, #12]
     fea:	685b      	ldr	r3, [r3, #4]
     fec:	3301      	adds	r3, #1
     fee:	019b      	lsls	r3, r3, #6
     ff0:	4413      	add	r3, r2
     ff2:	4618      	mov	r0, r3
     ff4:	2300      	movs	r3, #0
     ff6:	9300      	str	r3, [sp, #0]
     ff8:	2301      	movs	r3, #1
     ffa:	2202      	movs	r2, #2
     ffc:	2101      	movs	r1, #1
     ffe:	f7ff facf 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //Set count direction
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0CTL_OFFSET + (0x40 * myPwmGen))), (uint32_t)countDir, 3, 1, RW);
    1002:	68fb      	ldr	r3, [r7, #12]
    1004:	681a      	ldr	r2, [r3, #0]
    1006:	68fb      	ldr	r3, [r7, #12]
    1008:	685b      	ldr	r3, [r3, #4]
    100a:	3301      	adds	r3, #1
    100c:	019b      	lsls	r3, r3, #6
    100e:	4413      	add	r3, r2
    1010:	4618      	mov	r0, r3
    1012:	6839      	ldr	r1, [r7, #0]
    1014:	2300      	movs	r3, #0
    1016:	9300      	str	r3, [sp, #0]
    1018:	2301      	movs	r3, #1
    101a:	2203      	movs	r2, #3
    101c:	f7ff fac0 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>

    //3. Set the period
    Register::setRegisterBitFieldStatus((volatile uint32_t*)(baseAddress + (PWM0LOAD_OFFSET + (0x40 * myPwmGen))), period, 0, 15+1, RW);
    1020:	68fb      	ldr	r3, [r7, #12]
    1022:	681a      	ldr	r2, [r3, #0]
    1024:	68fb      	ldr	r3, [r7, #12]
    1026:	685b      	ldr	r3, [r3, #4]
    1028:	019b      	lsls	r3, r3, #6
    102a:	4413      	add	r3, r2
    102c:	3350      	adds	r3, #80	; 0x50
    102e:	4618      	mov	r0, r3
    1030:	2300      	movs	r3, #0
    1032:	9300      	str	r3, [sp, #0]
    1034:	2310      	movs	r3, #16
    1036:	2200      	movs	r2, #0
    1038:	6879      	ldr	r1, [r7, #4]
    103a:	f7ff fab1 	bl	5a0 <_ZN8Register25setRegisterBitFieldStatusEPVmmmm18bitFieldPermission>
}
    103e:	bf00      	nop
    1040:	3718      	adds	r7, #24
    1042:	46bd      	mov	sp, r7
    1044:	bd80      	pop	{r7, pc}
    1046:	bf00      	nop
    1048:	400fe640 	.word	0x400fe640
    104c:	400fea40 	.word	0x400fea40
    1050:	400fe540 	.word	0x400fe540
    1054:	400fe060 	.word	0x400fe060

00001058 <__aeabi_atexit>:
    1058:	460b      	mov	r3, r1
    105a:	4601      	mov	r1, r0
    105c:	4618      	mov	r0, r3
    105e:	f000 bf5b 	b.w	1f18 <__cxa_atexit>
	...

00001064 <selfrel_offset31>:
    1064:	6803      	ldr	r3, [r0, #0]
    1066:	005a      	lsls	r2, r3, #1
    1068:	bf4c      	ite	mi
    106a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    106e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    1072:	4418      	add	r0, r3
    1074:	4770      	bx	lr
    1076:	bf00      	nop

00001078 <search_EIT_table>:
    1078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    107c:	b329      	cbz	r1, 10ca <search_EIT_table+0x52>
    107e:	1e4f      	subs	r7, r1, #1
    1080:	4604      	mov	r4, r0
    1082:	4615      	mov	r5, r2
    1084:	463e      	mov	r6, r7
    1086:	f04f 0800 	mov.w	r8, #0
    108a:	eb08 0106 	add.w	r1, r8, r6
    108e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    1092:	1049      	asrs	r1, r1, #1
    1094:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
    1098:	4648      	mov	r0, r9
    109a:	f7ff ffe3 	bl	1064 <selfrel_offset31>
    109e:	4603      	mov	r3, r0
    10a0:	00c8      	lsls	r0, r1, #3
    10a2:	3008      	adds	r0, #8
    10a4:	428f      	cmp	r7, r1
    10a6:	4420      	add	r0, r4
    10a8:	d009      	beq.n	10be <search_EIT_table+0x46>
    10aa:	42ab      	cmp	r3, r5
    10ac:	d809      	bhi.n	10c2 <search_EIT_table+0x4a>
    10ae:	f7ff ffd9 	bl	1064 <selfrel_offset31>
    10b2:	3801      	subs	r0, #1
    10b4:	42a8      	cmp	r0, r5
    10b6:	d20a      	bcs.n	10ce <search_EIT_table+0x56>
    10b8:	f101 0801 	add.w	r8, r1, #1
    10bc:	e7e5      	b.n	108a <search_EIT_table+0x12>
    10be:	42ab      	cmp	r3, r5
    10c0:	d905      	bls.n	10ce <search_EIT_table+0x56>
    10c2:	4588      	cmp	r8, r1
    10c4:	d001      	beq.n	10ca <search_EIT_table+0x52>
    10c6:	1e4e      	subs	r6, r1, #1
    10c8:	e7df      	b.n	108a <search_EIT_table+0x12>
    10ca:	f04f 0900 	mov.w	r9, #0
    10ce:	4648      	mov	r0, r9
    10d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000010d4 <__gnu_unwind_get_pr_addr>:
    10d4:	2801      	cmp	r0, #1
    10d6:	d007      	beq.n	10e8 <__gnu_unwind_get_pr_addr+0x14>
    10d8:	2802      	cmp	r0, #2
    10da:	d007      	beq.n	10ec <__gnu_unwind_get_pr_addr+0x18>
    10dc:	4b04      	ldr	r3, [pc, #16]	; (10f0 <__gnu_unwind_get_pr_addr+0x1c>)
    10de:	2800      	cmp	r0, #0
    10e0:	bf0c      	ite	eq
    10e2:	4618      	moveq	r0, r3
    10e4:	2000      	movne	r0, #0
    10e6:	4770      	bx	lr
    10e8:	4802      	ldr	r0, [pc, #8]	; (10f4 <__gnu_unwind_get_pr_addr+0x20>)
    10ea:	4770      	bx	lr
    10ec:	4802      	ldr	r0, [pc, #8]	; (10f8 <__gnu_unwind_get_pr_addr+0x24>)
    10ee:	4770      	bx	lr
    10f0:	00001799 	.word	0x00001799
    10f4:	0000179d 	.word	0x0000179d
    10f8:	000017a1 	.word	0x000017a1

000010fc <get_eit_entry>:
    10fc:	b530      	push	{r4, r5, lr}
    10fe:	4b23      	ldr	r3, [pc, #140]	; (118c <get_eit_entry+0x90>)
    1100:	b083      	sub	sp, #12
    1102:	4604      	mov	r4, r0
    1104:	1e8d      	subs	r5, r1, #2
    1106:	b33b      	cbz	r3, 1158 <get_eit_entry+0x5c>
    1108:	a901      	add	r1, sp, #4
    110a:	4628      	mov	r0, r5
    110c:	f3af 8000 	nop.w
    1110:	b1e8      	cbz	r0, 114e <get_eit_entry+0x52>
    1112:	9901      	ldr	r1, [sp, #4]
    1114:	462a      	mov	r2, r5
    1116:	f7ff ffaf 	bl	1078 <search_EIT_table>
    111a:	4601      	mov	r1, r0
    111c:	b1b8      	cbz	r0, 114e <get_eit_entry+0x52>
    111e:	f7ff ffa1 	bl	1064 <selfrel_offset31>
    1122:	684b      	ldr	r3, [r1, #4]
    1124:	64a0      	str	r0, [r4, #72]	; 0x48
    1126:	2b01      	cmp	r3, #1
    1128:	d02b      	beq.n	1182 <get_eit_entry+0x86>
    112a:	2b00      	cmp	r3, #0
    112c:	f101 0004 	add.w	r0, r1, #4
    1130:	db23      	blt.n	117a <get_eit_entry+0x7e>
    1132:	f7ff ff97 	bl	1064 <selfrel_offset31>
    1136:	2300      	movs	r3, #0
    1138:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    113c:	6803      	ldr	r3, [r0, #0]
    113e:	2b00      	cmp	r3, #0
    1140:	db10      	blt.n	1164 <get_eit_entry+0x68>
    1142:	f7ff ff8f 	bl	1064 <selfrel_offset31>
    1146:	6120      	str	r0, [r4, #16]
    1148:	2000      	movs	r0, #0
    114a:	b003      	add	sp, #12
    114c:	bd30      	pop	{r4, r5, pc}
    114e:	2300      	movs	r3, #0
    1150:	2009      	movs	r0, #9
    1152:	6123      	str	r3, [r4, #16]
    1154:	b003      	add	sp, #12
    1156:	bd30      	pop	{r4, r5, pc}
    1158:	490d      	ldr	r1, [pc, #52]	; (1190 <get_eit_entry+0x94>)
    115a:	480e      	ldr	r0, [pc, #56]	; (1194 <get_eit_entry+0x98>)
    115c:	1a09      	subs	r1, r1, r0
    115e:	10c9      	asrs	r1, r1, #3
    1160:	9101      	str	r1, [sp, #4]
    1162:	e7d7      	b.n	1114 <get_eit_entry+0x18>
    1164:	f3c3 6003 	ubfx	r0, r3, #24, #4
    1168:	f7ff ffb4 	bl	10d4 <__gnu_unwind_get_pr_addr>
    116c:	2800      	cmp	r0, #0
    116e:	6120      	str	r0, [r4, #16]
    1170:	bf14      	ite	ne
    1172:	2000      	movne	r0, #0
    1174:	2009      	moveq	r0, #9
    1176:	b003      	add	sp, #12
    1178:	bd30      	pop	{r4, r5, pc}
    117a:	2301      	movs	r3, #1
    117c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    1180:	e7dc      	b.n	113c <get_eit_entry+0x40>
    1182:	2300      	movs	r3, #0
    1184:	6123      	str	r3, [r4, #16]
    1186:	2005      	movs	r0, #5
    1188:	e7df      	b.n	114a <get_eit_entry+0x4e>
    118a:	bf00      	nop
    118c:	00000000 	.word	0x00000000
    1190:	00002e7c 	.word	0x00002e7c
    1194:	00002d3c 	.word	0x00002d3c

00001198 <restore_non_core_regs>:
    1198:	6803      	ldr	r3, [r0, #0]
    119a:	07da      	lsls	r2, r3, #31
    119c:	b510      	push	{r4, lr}
    119e:	4604      	mov	r4, r0
    11a0:	d406      	bmi.n	11b0 <restore_non_core_regs+0x18>
    11a2:	079b      	lsls	r3, r3, #30
    11a4:	f100 0048 	add.w	r0, r0, #72	; 0x48
    11a8:	d509      	bpl.n	11be <restore_non_core_regs+0x26>
    11aa:	f000 fc4b 	bl	1a44 <__gnu_Unwind_Restore_VFP_D>
    11ae:	6823      	ldr	r3, [r4, #0]
    11b0:	0759      	lsls	r1, r3, #29
    11b2:	d509      	bpl.n	11c8 <restore_non_core_regs+0x30>
    11b4:	071a      	lsls	r2, r3, #28
    11b6:	d50e      	bpl.n	11d6 <restore_non_core_regs+0x3e>
    11b8:	06db      	lsls	r3, r3, #27
    11ba:	d513      	bpl.n	11e4 <restore_non_core_regs+0x4c>
    11bc:	bd10      	pop	{r4, pc}
    11be:	f000 fc39 	bl	1a34 <__gnu_Unwind_Restore_VFP>
    11c2:	6823      	ldr	r3, [r4, #0]
    11c4:	0759      	lsls	r1, r3, #29
    11c6:	d4f5      	bmi.n	11b4 <restore_non_core_regs+0x1c>
    11c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    11cc:	f000 fc42 	bl	1a54 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    11d0:	6823      	ldr	r3, [r4, #0]
    11d2:	071a      	lsls	r2, r3, #28
    11d4:	d4f0      	bmi.n	11b8 <restore_non_core_regs+0x20>
    11d6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    11da:	f000 fc43 	bl	1a64 <__gnu_Unwind_Restore_WMMXD>
    11de:	6823      	ldr	r3, [r4, #0]
    11e0:	06db      	lsls	r3, r3, #27
    11e2:	d4eb      	bmi.n	11bc <restore_non_core_regs+0x24>
    11e4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    11e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    11ec:	f000 bc7e 	b.w	1aec <__gnu_Unwind_Restore_WMMXC>

000011f0 <_Unwind_decode_typeinfo_ptr.isra.0>:
    11f0:	4603      	mov	r3, r0
    11f2:	6800      	ldr	r0, [r0, #0]
    11f4:	b100      	cbz	r0, 11f8 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
    11f6:	4418      	add	r0, r3
    11f8:	4770      	bx	lr
    11fa:	bf00      	nop

000011fc <__gnu_unwind_24bit.isra.0>:
    11fc:	2009      	movs	r0, #9
    11fe:	4770      	bx	lr

00001200 <_Unwind_DebugHook>:
    1200:	4770      	bx	lr
    1202:	bf00      	nop

00001204 <unwind_phase2>:
    1204:	b570      	push	{r4, r5, r6, lr}
    1206:	4604      	mov	r4, r0
    1208:	460e      	mov	r6, r1
    120a:	6c31      	ldr	r1, [r6, #64]	; 0x40
    120c:	4620      	mov	r0, r4
    120e:	f7ff ff75 	bl	10fc <get_eit_entry>
    1212:	4605      	mov	r5, r0
    1214:	b988      	cbnz	r0, 123a <unwind_phase2+0x36>
    1216:	6c33      	ldr	r3, [r6, #64]	; 0x40
    1218:	6163      	str	r3, [r4, #20]
    121a:	4632      	mov	r2, r6
    121c:	6923      	ldr	r3, [r4, #16]
    121e:	4621      	mov	r1, r4
    1220:	2001      	movs	r0, #1
    1222:	4798      	blx	r3
    1224:	2808      	cmp	r0, #8
    1226:	d0f0      	beq.n	120a <unwind_phase2+0x6>
    1228:	2807      	cmp	r0, #7
    122a:	d106      	bne.n	123a <unwind_phase2+0x36>
    122c:	4628      	mov	r0, r5
    122e:	6c31      	ldr	r1, [r6, #64]	; 0x40
    1230:	f7ff ffe6 	bl	1200 <_Unwind_DebugHook>
    1234:	1d30      	adds	r0, r6, #4
    1236:	f000 fbf1 	bl	1a1c <__restore_core_regs>
    123a:	f000 fe65 	bl	1f08 <abort>
    123e:	bf00      	nop

00001240 <unwind_phase2_forced>:
    1240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1244:	1d0d      	adds	r5, r1, #4
    1246:	4606      	mov	r6, r0
    1248:	4614      	mov	r4, r2
    124a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    124c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    1250:	f10d 0c0c 	add.w	ip, sp, #12
    1254:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    125a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    125e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1260:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    1264:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1268:	ad02      	add	r5, sp, #8
    126a:	68f7      	ldr	r7, [r6, #12]
    126c:	f8d6 8018 	ldr.w	r8, [r6, #24]
    1270:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    1274:	2300      	movs	r3, #0
    1276:	602b      	str	r3, [r5, #0]
    1278:	e021      	b.n	12be <unwind_phase2_forced+0x7e>
    127a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    127c:	6173      	str	r3, [r6, #20]
    127e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    1282:	4629      	mov	r1, r5
    1284:	a87a      	add	r0, sp, #488	; 0x1e8
    1286:	f000 fe65 	bl	1f54 <memcpy>
    128a:	6933      	ldr	r3, [r6, #16]
    128c:	aa7a      	add	r2, sp, #488	; 0x1e8
    128e:	4631      	mov	r1, r6
    1290:	4650      	mov	r0, sl
    1292:	4798      	blx	r3
    1294:	9b88      	ldr	r3, [sp, #544]	; 0x220
    1296:	e9cd 5800 	strd	r5, r8, [sp]
    129a:	4621      	mov	r1, r4
    129c:	646b      	str	r3, [r5, #68]	; 0x44
    129e:	4681      	mov	r9, r0
    12a0:	4633      	mov	r3, r6
    12a2:	4632      	mov	r2, r6
    12a4:	2001      	movs	r0, #1
    12a6:	47b8      	blx	r7
    12a8:	4604      	mov	r4, r0
    12aa:	b9e8      	cbnz	r0, 12e8 <unwind_phase2_forced+0xa8>
    12ac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    12b0:	a97a      	add	r1, sp, #488	; 0x1e8
    12b2:	4628      	mov	r0, r5
    12b4:	f000 fe4e 	bl	1f54 <memcpy>
    12b8:	f1b9 0f08 	cmp.w	r9, #8
    12bc:	d11b      	bne.n	12f6 <unwind_phase2_forced+0xb6>
    12be:	6c29      	ldr	r1, [r5, #64]	; 0x40
    12c0:	4630      	mov	r0, r6
    12c2:	f7ff ff1b 	bl	10fc <get_eit_entry>
    12c6:	3409      	adds	r4, #9
    12c8:	fa5f fa84 	uxtb.w	sl, r4
    12cc:	4681      	mov	r9, r0
    12ce:	2800      	cmp	r0, #0
    12d0:	d0d3      	beq.n	127a <unwind_phase2_forced+0x3a>
    12d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
    12d4:	f04a 0110 	orr.w	r1, sl, #16
    12d8:	e9cd 5800 	strd	r5, r8, [sp]
    12dc:	4632      	mov	r2, r6
    12de:	646b      	str	r3, [r5, #68]	; 0x44
    12e0:	2001      	movs	r0, #1
    12e2:	4633      	mov	r3, r6
    12e4:	47b8      	blx	r7
    12e6:	b108      	cbz	r0, 12ec <unwind_phase2_forced+0xac>
    12e8:	f04f 0909 	mov.w	r9, #9
    12ec:	4648      	mov	r0, r9
    12ee:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    12f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12f6:	f1b9 0f07 	cmp.w	r9, #7
    12fa:	d1f5      	bne.n	12e8 <unwind_phase2_forced+0xa8>
    12fc:	4620      	mov	r0, r4
    12fe:	6c29      	ldr	r1, [r5, #64]	; 0x40
    1300:	f7ff ff7e 	bl	1200 <_Unwind_DebugHook>
    1304:	a803      	add	r0, sp, #12
    1306:	f000 fb89 	bl	1a1c <__restore_core_regs>
    130a:	bf00      	nop

0000130c <_Unwind_GetCFA>:
    130c:	6c40      	ldr	r0, [r0, #68]	; 0x44
    130e:	4770      	bx	lr

00001310 <__gnu_Unwind_RaiseException>:
    1310:	b5f0      	push	{r4, r5, r6, r7, lr}
    1312:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    1314:	640b      	str	r3, [r1, #64]	; 0x40
    1316:	1d0e      	adds	r6, r1, #4
    1318:	460f      	mov	r7, r1
    131a:	4605      	mov	r5, r0
    131c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    131e:	b0f9      	sub	sp, #484	; 0x1e4
    1320:	ac01      	add	r4, sp, #4
    1322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1324:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    1326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1328:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    132a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    132c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    1330:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    1334:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    1338:	9600      	str	r6, [sp, #0]
    133a:	e006      	b.n	134a <__gnu_Unwind_RaiseException+0x3a>
    133c:	692b      	ldr	r3, [r5, #16]
    133e:	466a      	mov	r2, sp
    1340:	4629      	mov	r1, r5
    1342:	4798      	blx	r3
    1344:	2808      	cmp	r0, #8
    1346:	4604      	mov	r4, r0
    1348:	d108      	bne.n	135c <__gnu_Unwind_RaiseException+0x4c>
    134a:	9910      	ldr	r1, [sp, #64]	; 0x40
    134c:	4628      	mov	r0, r5
    134e:	f7ff fed5 	bl	10fc <get_eit_entry>
    1352:	2800      	cmp	r0, #0
    1354:	d0f2      	beq.n	133c <__gnu_Unwind_RaiseException+0x2c>
    1356:	2009      	movs	r0, #9
    1358:	b079      	add	sp, #484	; 0x1e4
    135a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    135c:	4668      	mov	r0, sp
    135e:	f7ff ff1b 	bl	1198 <restore_non_core_regs>
    1362:	2c06      	cmp	r4, #6
    1364:	d1f7      	bne.n	1356 <__gnu_Unwind_RaiseException+0x46>
    1366:	4639      	mov	r1, r7
    1368:	4628      	mov	r0, r5
    136a:	f7ff ff4b 	bl	1204 <unwind_phase2>
    136e:	bf00      	nop

00001370 <__gnu_Unwind_ForcedUnwind>:
    1370:	b430      	push	{r4, r5}
    1372:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    1374:	60c1      	str	r1, [r0, #12]
    1376:	6182      	str	r2, [r0, #24]
    1378:	4619      	mov	r1, r3
    137a:	641d      	str	r5, [r3, #64]	; 0x40
    137c:	2200      	movs	r2, #0
    137e:	bc30      	pop	{r4, r5}
    1380:	e75e      	b.n	1240 <unwind_phase2_forced>
    1382:	bf00      	nop

00001384 <__gnu_Unwind_Resume>:
    1384:	b570      	push	{r4, r5, r6, lr}
    1386:	68c6      	ldr	r6, [r0, #12]
    1388:	6943      	ldr	r3, [r0, #20]
    138a:	640b      	str	r3, [r1, #64]	; 0x40
    138c:	b9ae      	cbnz	r6, 13ba <__gnu_Unwind_Resume+0x36>
    138e:	6903      	ldr	r3, [r0, #16]
    1390:	460a      	mov	r2, r1
    1392:	4604      	mov	r4, r0
    1394:	460d      	mov	r5, r1
    1396:	4601      	mov	r1, r0
    1398:	2002      	movs	r0, #2
    139a:	4798      	blx	r3
    139c:	2807      	cmp	r0, #7
    139e:	d005      	beq.n	13ac <__gnu_Unwind_Resume+0x28>
    13a0:	2808      	cmp	r0, #8
    13a2:	d10f      	bne.n	13c4 <__gnu_Unwind_Resume+0x40>
    13a4:	4629      	mov	r1, r5
    13a6:	4620      	mov	r0, r4
    13a8:	f7ff ff2c 	bl	1204 <unwind_phase2>
    13ac:	4630      	mov	r0, r6
    13ae:	6c29      	ldr	r1, [r5, #64]	; 0x40
    13b0:	f7ff ff26 	bl	1200 <_Unwind_DebugHook>
    13b4:	1d28      	adds	r0, r5, #4
    13b6:	f000 fb31 	bl	1a1c <__restore_core_regs>
    13ba:	2201      	movs	r2, #1
    13bc:	f7ff ff40 	bl	1240 <unwind_phase2_forced>
    13c0:	f000 fda2 	bl	1f08 <abort>
    13c4:	f000 fda0 	bl	1f08 <abort>

000013c8 <__gnu_Unwind_Resume_or_Rethrow>:
    13c8:	68c2      	ldr	r2, [r0, #12]
    13ca:	b11a      	cbz	r2, 13d4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
    13cc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    13ce:	640a      	str	r2, [r1, #64]	; 0x40
    13d0:	2200      	movs	r2, #0
    13d2:	e735      	b.n	1240 <unwind_phase2_forced>
    13d4:	e79c      	b.n	1310 <__gnu_Unwind_RaiseException>
    13d6:	bf00      	nop

000013d8 <_Unwind_Complete>:
    13d8:	4770      	bx	lr
    13da:	bf00      	nop

000013dc <_Unwind_DeleteException>:
    13dc:	6883      	ldr	r3, [r0, #8]
    13de:	4601      	mov	r1, r0
    13e0:	b10b      	cbz	r3, 13e6 <_Unwind_DeleteException+0xa>
    13e2:	2001      	movs	r0, #1
    13e4:	4718      	bx	r3
    13e6:	4770      	bx	lr

000013e8 <_Unwind_VRS_Get>:
    13e8:	2901      	cmp	r1, #1
    13ea:	d012      	beq.n	1412 <_Unwind_VRS_Get+0x2a>
    13ec:	d809      	bhi.n	1402 <_Unwind_VRS_Get+0x1a>
    13ee:	b973      	cbnz	r3, 140e <_Unwind_VRS_Get+0x26>
    13f0:	2a0f      	cmp	r2, #15
    13f2:	d80c      	bhi.n	140e <_Unwind_VRS_Get+0x26>
    13f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    13f8:	4618      	mov	r0, r3
    13fa:	6853      	ldr	r3, [r2, #4]
    13fc:	9a00      	ldr	r2, [sp, #0]
    13fe:	6013      	str	r3, [r2, #0]
    1400:	4770      	bx	lr
    1402:	3903      	subs	r1, #3
    1404:	2901      	cmp	r1, #1
    1406:	bf94      	ite	ls
    1408:	2001      	movls	r0, #1
    140a:	2002      	movhi	r0, #2
    140c:	4770      	bx	lr
    140e:	2002      	movs	r0, #2
    1410:	4770      	bx	lr
    1412:	4608      	mov	r0, r1
    1414:	4770      	bx	lr
    1416:	bf00      	nop

00001418 <_Unwind_GetGR>:
    1418:	b510      	push	{r4, lr}
    141a:	b084      	sub	sp, #16
    141c:	2300      	movs	r3, #0
    141e:	ac03      	add	r4, sp, #12
    1420:	460a      	mov	r2, r1
    1422:	9400      	str	r4, [sp, #0]
    1424:	4619      	mov	r1, r3
    1426:	f7ff ffdf 	bl	13e8 <_Unwind_VRS_Get>
    142a:	9803      	ldr	r0, [sp, #12]
    142c:	b004      	add	sp, #16
    142e:	bd10      	pop	{r4, pc}

00001430 <_Unwind_VRS_Set>:
    1430:	2901      	cmp	r1, #1
    1432:	d012      	beq.n	145a <_Unwind_VRS_Set+0x2a>
    1434:	d809      	bhi.n	144a <_Unwind_VRS_Set+0x1a>
    1436:	b973      	cbnz	r3, 1456 <_Unwind_VRS_Set+0x26>
    1438:	2a0f      	cmp	r2, #15
    143a:	d80c      	bhi.n	1456 <_Unwind_VRS_Set+0x26>
    143c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    1440:	9a00      	ldr	r2, [sp, #0]
    1442:	6812      	ldr	r2, [r2, #0]
    1444:	6042      	str	r2, [r0, #4]
    1446:	4618      	mov	r0, r3
    1448:	4770      	bx	lr
    144a:	3903      	subs	r1, #3
    144c:	2901      	cmp	r1, #1
    144e:	bf94      	ite	ls
    1450:	2001      	movls	r0, #1
    1452:	2002      	movhi	r0, #2
    1454:	4770      	bx	lr
    1456:	2002      	movs	r0, #2
    1458:	4770      	bx	lr
    145a:	4608      	mov	r0, r1
    145c:	4770      	bx	lr
    145e:	bf00      	nop

00001460 <_Unwind_SetGR>:
    1460:	b510      	push	{r4, lr}
    1462:	b084      	sub	sp, #16
    1464:	2300      	movs	r3, #0
    1466:	ac03      	add	r4, sp, #12
    1468:	9203      	str	r2, [sp, #12]
    146a:	9400      	str	r4, [sp, #0]
    146c:	460a      	mov	r2, r1
    146e:	4619      	mov	r1, r3
    1470:	f7ff ffde 	bl	1430 <_Unwind_VRS_Set>
    1474:	b004      	add	sp, #16
    1476:	bd10      	pop	{r4, pc}

00001478 <__gnu_Unwind_Backtrace>:
    1478:	b5f0      	push	{r4, r5, r6, r7, lr}
    147a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    147c:	6413      	str	r3, [r2, #64]	; 0x40
    147e:	1d15      	adds	r5, r2, #4
    1480:	468c      	mov	ip, r1
    1482:	4606      	mov	r6, r0
    1484:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1486:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    148a:	ac17      	add	r4, sp, #92	; 0x5c
    148c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    148e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1496:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    149a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    149e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    14a2:	4665      	mov	r5, ip
    14a4:	9716      	str	r7, [sp, #88]	; 0x58
    14a6:	e010      	b.n	14ca <__gnu_Unwind_Backtrace+0x52>
    14a8:	f7ff ffda 	bl	1460 <_Unwind_SetGR>
    14ac:	4629      	mov	r1, r5
    14ae:	a816      	add	r0, sp, #88	; 0x58
    14b0:	47b0      	blx	r6
    14b2:	4603      	mov	r3, r0
    14b4:	aa16      	add	r2, sp, #88	; 0x58
    14b6:	4669      	mov	r1, sp
    14b8:	2008      	movs	r0, #8
    14ba:	b983      	cbnz	r3, 14de <__gnu_Unwind_Backtrace+0x66>
    14bc:	9b04      	ldr	r3, [sp, #16]
    14be:	4798      	blx	r3
    14c0:	2805      	cmp	r0, #5
    14c2:	4604      	mov	r4, r0
    14c4:	d00c      	beq.n	14e0 <__gnu_Unwind_Backtrace+0x68>
    14c6:	2809      	cmp	r0, #9
    14c8:	d009      	beq.n	14de <__gnu_Unwind_Backtrace+0x66>
    14ca:	9926      	ldr	r1, [sp, #152]	; 0x98
    14cc:	4668      	mov	r0, sp
    14ce:	f7ff fe15 	bl	10fc <get_eit_entry>
    14d2:	4603      	mov	r3, r0
    14d4:	466a      	mov	r2, sp
    14d6:	210c      	movs	r1, #12
    14d8:	a816      	add	r0, sp, #88	; 0x58
    14da:	2b00      	cmp	r3, #0
    14dc:	d0e4      	beq.n	14a8 <__gnu_Unwind_Backtrace+0x30>
    14de:	2409      	movs	r4, #9
    14e0:	a816      	add	r0, sp, #88	; 0x58
    14e2:	f7ff fe59 	bl	1198 <restore_non_core_regs>
    14e6:	4620      	mov	r0, r4
    14e8:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    14ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14ee:	bf00      	nop

000014f0 <__gnu_unwind_pr_common>:
    14f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    14f4:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
    14f6:	b089      	sub	sp, #36	; 0x24
    14f8:	460d      	mov	r5, r1
    14fa:	f854 1b04 	ldr.w	r1, [r4], #4
    14fe:	9406      	str	r4, [sp, #24]
    1500:	4617      	mov	r7, r2
    1502:	f000 0803 	and.w	r8, r0, #3
    1506:	461e      	mov	r6, r3
    1508:	2b00      	cmp	r3, #0
    150a:	d079      	beq.n	1600 <__gnu_unwind_pr_common+0x110>
    150c:	0c0b      	lsrs	r3, r1, #16
    150e:	b2da      	uxtb	r2, r3
    1510:	0409      	lsls	r1, r1, #16
    1512:	f88d 301d 	strb.w	r3, [sp, #29]
    1516:	2302      	movs	r3, #2
    1518:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    151c:	9105      	str	r1, [sp, #20]
    151e:	f88d 301c 	strb.w	r3, [sp, #28]
    1522:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    1524:	f1b8 0f02 	cmp.w	r8, #2
    1528:	bf08      	it	eq
    152a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    152c:	f013 0301 	ands.w	r3, r3, #1
    1530:	d00c      	beq.n	154c <__gnu_unwind_pr_common+0x5c>
    1532:	4638      	mov	r0, r7
    1534:	a905      	add	r1, sp, #20
    1536:	f000 fb73 	bl	1c20 <__gnu_unwind_execute>
    153a:	b918      	cbnz	r0, 1544 <__gnu_unwind_pr_common+0x54>
    153c:	2008      	movs	r0, #8
    153e:	b009      	add	sp, #36	; 0x24
    1540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1544:	2009      	movs	r0, #9
    1546:	b009      	add	sp, #36	; 0x24
    1548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    154c:	f8d4 a000 	ldr.w	sl, [r4]
    1550:	f1ba 0f00 	cmp.w	sl, #0
    1554:	d0ed      	beq.n	1532 <__gnu_unwind_pr_common+0x42>
    1556:	9301      	str	r3, [sp, #4]
    1558:	f000 0308 	and.w	r3, r0, #8
    155c:	9302      	str	r3, [sp, #8]
    155e:	2e02      	cmp	r6, #2
    1560:	d04a      	beq.n	15f8 <__gnu_unwind_pr_common+0x108>
    1562:	f8b4 a000 	ldrh.w	sl, [r4]
    1566:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    156a:	3404      	adds	r4, #4
    156c:	6caa      	ldr	r2, [r5, #72]	; 0x48
    156e:	f029 0b01 	bic.w	fp, r9, #1
    1572:	210f      	movs	r1, #15
    1574:	4638      	mov	r0, r7
    1576:	4493      	add	fp, r2
    1578:	f7ff ff4e 	bl	1418 <_Unwind_GetGR>
    157c:	4583      	cmp	fp, r0
    157e:	d839      	bhi.n	15f4 <__gnu_unwind_pr_common+0x104>
    1580:	f02a 0201 	bic.w	r2, sl, #1
    1584:	445a      	add	r2, fp
    1586:	4282      	cmp	r2, r0
    1588:	bf94      	ite	ls
    158a:	2000      	movls	r0, #0
    158c:	2001      	movhi	r0, #1
    158e:	ea4f 0349 	mov.w	r3, r9, lsl #1
    1592:	f003 0302 	and.w	r3, r3, #2
    1596:	f00a 0a01 	and.w	sl, sl, #1
    159a:	ea43 030a 	orr.w	r3, r3, sl
    159e:	2b01      	cmp	r3, #1
    15a0:	d049      	beq.n	1636 <__gnu_unwind_pr_common+0x146>
    15a2:	2b02      	cmp	r3, #2
    15a4:	d032      	beq.n	160c <__gnu_unwind_pr_common+0x11c>
    15a6:	2b00      	cmp	r3, #0
    15a8:	d1cc      	bne.n	1544 <__gnu_unwind_pr_common+0x54>
    15aa:	f1b8 0f00 	cmp.w	r8, #0
    15ae:	d002      	beq.n	15b6 <__gnu_unwind_pr_common+0xc6>
    15b0:	2800      	cmp	r0, #0
    15b2:	f040 80cd 	bne.w	1750 <__gnu_unwind_pr_common+0x260>
    15b6:	3404      	adds	r4, #4
    15b8:	f8d4 a000 	ldr.w	sl, [r4]
    15bc:	f1ba 0f00 	cmp.w	sl, #0
    15c0:	d1cd      	bne.n	155e <__gnu_unwind_pr_common+0x6e>
    15c2:	a905      	add	r1, sp, #20
    15c4:	4638      	mov	r0, r7
    15c6:	f000 fb2b 	bl	1c20 <__gnu_unwind_execute>
    15ca:	2800      	cmp	r0, #0
    15cc:	d1ba      	bne.n	1544 <__gnu_unwind_pr_common+0x54>
    15ce:	9b01      	ldr	r3, [sp, #4]
    15d0:	2b00      	cmp	r3, #0
    15d2:	d0b3      	beq.n	153c <__gnu_unwind_pr_common+0x4c>
    15d4:	210f      	movs	r1, #15
    15d6:	4638      	mov	r0, r7
    15d8:	f7ff ff1e 	bl	1418 <_Unwind_GetGR>
    15dc:	210e      	movs	r1, #14
    15de:	4602      	mov	r2, r0
    15e0:	4638      	mov	r0, r7
    15e2:	f7ff ff3d 	bl	1460 <_Unwind_SetGR>
    15e6:	4638      	mov	r0, r7
    15e8:	4a6a      	ldr	r2, [pc, #424]	; (1794 <__gnu_unwind_pr_common+0x2a4>)
    15ea:	210f      	movs	r1, #15
    15ec:	f7ff ff38 	bl	1460 <_Unwind_SetGR>
    15f0:	2007      	movs	r0, #7
    15f2:	e7a8      	b.n	1546 <__gnu_unwind_pr_common+0x56>
    15f4:	2000      	movs	r0, #0
    15f6:	e7ca      	b.n	158e <__gnu_unwind_pr_common+0x9e>
    15f8:	f8d4 9004 	ldr.w	r9, [r4, #4]
    15fc:	3408      	adds	r4, #8
    15fe:	e7b5      	b.n	156c <__gnu_unwind_pr_common+0x7c>
    1600:	0209      	lsls	r1, r1, #8
    1602:	2303      	movs	r3, #3
    1604:	9105      	str	r1, [sp, #20]
    1606:	f8ad 301c 	strh.w	r3, [sp, #28]
    160a:	e78a      	b.n	1522 <__gnu_unwind_pr_common+0x32>
    160c:	6823      	ldr	r3, [r4, #0]
    160e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
    1612:	f1b8 0f00 	cmp.w	r8, #0
    1616:	d145      	bne.n	16a4 <__gnu_unwind_pr_common+0x1b4>
    1618:	b128      	cbz	r0, 1626 <__gnu_unwind_pr_common+0x136>
    161a:	9a02      	ldr	r2, [sp, #8]
    161c:	2a00      	cmp	r2, #0
    161e:	d05c      	beq.n	16da <__gnu_unwind_pr_common+0x1ea>
    1620:	f1bb 0f00 	cmp.w	fp, #0
    1624:	d074      	beq.n	1710 <__gnu_unwind_pr_common+0x220>
    1626:	2b00      	cmp	r3, #0
    1628:	da00      	bge.n	162c <__gnu_unwind_pr_common+0x13c>
    162a:	3404      	adds	r4, #4
    162c:	f10b 0b01 	add.w	fp, fp, #1
    1630:	eb04 048b 	add.w	r4, r4, fp, lsl #2
    1634:	e7c0      	b.n	15b8 <__gnu_unwind_pr_common+0xc8>
    1636:	f1b8 0f00 	cmp.w	r8, #0
    163a:	d119      	bne.n	1670 <__gnu_unwind_pr_common+0x180>
    163c:	b1b0      	cbz	r0, 166c <__gnu_unwind_pr_common+0x17c>
    163e:	e9d4 2300 	ldrd	r2, r3, [r4]
    1642:	1c99      	adds	r1, r3, #2
    1644:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    1648:	f43f af7c 	beq.w	1544 <__gnu_unwind_pr_common+0x54>
    164c:	f105 0158 	add.w	r1, r5, #88	; 0x58
    1650:	3301      	adds	r3, #1
    1652:	9104      	str	r1, [sp, #16]
    1654:	f000 8090 	beq.w	1778 <__gnu_unwind_pr_common+0x288>
    1658:	1d20      	adds	r0, r4, #4
    165a:	f7ff fdc9 	bl	11f0 <_Unwind_decode_typeinfo_ptr.isra.0>
    165e:	ab04      	add	r3, sp, #16
    1660:	4601      	mov	r1, r0
    1662:	4628      	mov	r0, r5
    1664:	f3af 8000 	nop.w
    1668:	2800      	cmp	r0, #0
    166a:	d15b      	bne.n	1724 <__gnu_unwind_pr_common+0x234>
    166c:	3408      	adds	r4, #8
    166e:	e7a3      	b.n	15b8 <__gnu_unwind_pr_common+0xc8>
    1670:	210d      	movs	r1, #13
    1672:	4638      	mov	r0, r7
    1674:	f8d5 9020 	ldr.w	r9, [r5, #32]
    1678:	f7ff fece 	bl	1418 <_Unwind_GetGR>
    167c:	4581      	cmp	r9, r0
    167e:	d1f5      	bne.n	166c <__gnu_unwind_pr_common+0x17c>
    1680:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1682:	429c      	cmp	r4, r3
    1684:	d1f2      	bne.n	166c <__gnu_unwind_pr_common+0x17c>
    1686:	4620      	mov	r0, r4
    1688:	f7ff fcec 	bl	1064 <selfrel_offset31>
    168c:	210f      	movs	r1, #15
    168e:	4602      	mov	r2, r0
    1690:	4638      	mov	r0, r7
    1692:	f7ff fee5 	bl	1460 <_Unwind_SetGR>
    1696:	4638      	mov	r0, r7
    1698:	462a      	mov	r2, r5
    169a:	2100      	movs	r1, #0
    169c:	f7ff fee0 	bl	1460 <_Unwind_SetGR>
    16a0:	2007      	movs	r0, #7
    16a2:	e750      	b.n	1546 <__gnu_unwind_pr_common+0x56>
    16a4:	210d      	movs	r1, #13
    16a6:	4638      	mov	r0, r7
    16a8:	f8d5 9020 	ldr.w	r9, [r5, #32]
    16ac:	f7ff feb4 	bl	1418 <_Unwind_GetGR>
    16b0:	4581      	cmp	r9, r0
    16b2:	d001      	beq.n	16b8 <__gnu_unwind_pr_common+0x1c8>
    16b4:	6823      	ldr	r3, [r4, #0]
    16b6:	e7b6      	b.n	1626 <__gnu_unwind_pr_common+0x136>
    16b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    16ba:	429c      	cmp	r4, r3
    16bc:	d1fa      	bne.n	16b4 <__gnu_unwind_pr_common+0x1c4>
    16be:	2204      	movs	r2, #4
    16c0:	2100      	movs	r1, #0
    16c2:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
    16c6:	18a3      	adds	r3, r4, r2
    16c8:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
    16cc:	636b      	str	r3, [r5, #52]	; 0x34
    16ce:	6823      	ldr	r3, [r4, #0]
    16d0:	428b      	cmp	r3, r1
    16d2:	db59      	blt.n	1788 <__gnu_unwind_pr_common+0x298>
    16d4:	2301      	movs	r3, #1
    16d6:	9301      	str	r3, [sp, #4]
    16d8:	e7a8      	b.n	162c <__gnu_unwind_pr_common+0x13c>
    16da:	f105 0358 	add.w	r3, r5, #88	; 0x58
    16de:	f8cd 800c 	str.w	r8, [sp, #12]
    16e2:	f104 0a04 	add.w	sl, r4, #4
    16e6:	46b0      	mov	r8, r6
    16e8:	4691      	mov	r9, r2
    16ea:	461e      	mov	r6, r3
    16ec:	e00d      	b.n	170a <__gnu_unwind_pr_common+0x21a>
    16ee:	9604      	str	r6, [sp, #16]
    16f0:	f7ff fd7e 	bl	11f0 <_Unwind_decode_typeinfo_ptr.isra.0>
    16f4:	ab04      	add	r3, sp, #16
    16f6:	4601      	mov	r1, r0
    16f8:	2200      	movs	r2, #0
    16fa:	4628      	mov	r0, r5
    16fc:	f3af 8000 	nop.w
    1700:	f109 0901 	add.w	r9, r9, #1
    1704:	f10a 0a04 	add.w	sl, sl, #4
    1708:	b9e8      	cbnz	r0, 1746 <__gnu_unwind_pr_common+0x256>
    170a:	45d9      	cmp	r9, fp
    170c:	4650      	mov	r0, sl
    170e:	d1ee      	bne.n	16ee <__gnu_unwind_pr_common+0x1fe>
    1710:	4638      	mov	r0, r7
    1712:	210d      	movs	r1, #13
    1714:	f7ff fe80 	bl	1418 <_Unwind_GetGR>
    1718:	9b04      	ldr	r3, [sp, #16]
    171a:	6228      	str	r0, [r5, #32]
    171c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    1720:	2006      	movs	r0, #6
    1722:	e710      	b.n	1546 <__gnu_unwind_pr_common+0x56>
    1724:	4681      	mov	r9, r0
    1726:	210d      	movs	r1, #13
    1728:	4638      	mov	r0, r7
    172a:	f7ff fe75 	bl	1418 <_Unwind_GetGR>
    172e:	f1b9 0f02 	cmp.w	r9, #2
    1732:	6228      	str	r0, [r5, #32]
    1734:	d125      	bne.n	1782 <__gnu_unwind_pr_common+0x292>
    1736:	462b      	mov	r3, r5
    1738:	9a04      	ldr	r2, [sp, #16]
    173a:	f843 2f2c 	str.w	r2, [r3, #44]!
    173e:	626b      	str	r3, [r5, #36]	; 0x24
    1740:	62ac      	str	r4, [r5, #40]	; 0x28
    1742:	2006      	movs	r0, #6
    1744:	e6ff      	b.n	1546 <__gnu_unwind_pr_common+0x56>
    1746:	4646      	mov	r6, r8
    1748:	6823      	ldr	r3, [r4, #0]
    174a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    174e:	e76a      	b.n	1626 <__gnu_unwind_pr_common+0x136>
    1750:	4620      	mov	r0, r4
    1752:	f7ff fc87 	bl	1064 <selfrel_offset31>
    1756:	3404      	adds	r4, #4
    1758:	4602      	mov	r2, r0
    175a:	63ac      	str	r4, [r5, #56]	; 0x38
    175c:	4628      	mov	r0, r5
    175e:	4614      	mov	r4, r2
    1760:	f3af 8000 	nop.w
    1764:	2800      	cmp	r0, #0
    1766:	f43f aeed 	beq.w	1544 <__gnu_unwind_pr_common+0x54>
    176a:	4638      	mov	r0, r7
    176c:	4622      	mov	r2, r4
    176e:	210f      	movs	r1, #15
    1770:	f7ff fe76 	bl	1460 <_Unwind_SetGR>
    1774:	2007      	movs	r0, #7
    1776:	e6e6      	b.n	1546 <__gnu_unwind_pr_common+0x56>
    1778:	4638      	mov	r0, r7
    177a:	210d      	movs	r1, #13
    177c:	f7ff fe4c 	bl	1418 <_Unwind_GetGR>
    1780:	6228      	str	r0, [r5, #32]
    1782:	9b04      	ldr	r3, [sp, #16]
    1784:	626b      	str	r3, [r5, #36]	; 0x24
    1786:	e7db      	b.n	1740 <__gnu_unwind_pr_common+0x250>
    1788:	f10b 0001 	add.w	r0, fp, #1
    178c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    1790:	e77a      	b.n	1688 <__gnu_unwind_pr_common+0x198>
    1792:	bf00      	nop
    1794:	00000000 	.word	0x00000000

00001798 <__aeabi_unwind_cpp_pr0>:
    1798:	2300      	movs	r3, #0
    179a:	e6a9      	b.n	14f0 <__gnu_unwind_pr_common>

0000179c <__aeabi_unwind_cpp_pr1>:
    179c:	2301      	movs	r3, #1
    179e:	e6a7      	b.n	14f0 <__gnu_unwind_pr_common>

000017a0 <__aeabi_unwind_cpp_pr2>:
    17a0:	2302      	movs	r3, #2
    17a2:	e6a5      	b.n	14f0 <__gnu_unwind_pr_common>

000017a4 <_Unwind_VRS_Pop>:
    17a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    17a8:	4606      	mov	r6, r0
    17aa:	b0c3      	sub	sp, #268	; 0x10c
    17ac:	4615      	mov	r5, r2
    17ae:	461c      	mov	r4, r3
    17b0:	2904      	cmp	r1, #4
    17b2:	f200 80b9 	bhi.w	1928 <_Unwind_VRS_Pop+0x184>
    17b6:	e8df f001 	tbb	[pc, r1]
    17ba:	539a      	.short	0x539a
    17bc:	29b7      	.short	0x29b7
    17be:	03          	.byte	0x03
    17bf:	00          	.byte	0x00
    17c0:	2c00      	cmp	r4, #0
    17c2:	f040 80b1 	bne.w	1928 <_Unwind_VRS_Pop+0x184>
    17c6:	2a10      	cmp	r2, #16
    17c8:	f200 80ae 	bhi.w	1928 <_Unwind_VRS_Pop+0x184>
    17cc:	6803      	ldr	r3, [r0, #0]
    17ce:	06d8      	lsls	r0, r3, #27
    17d0:	f100 80f3 	bmi.w	19ba <_Unwind_VRS_Pop+0x216>
    17d4:	af20      	add	r7, sp, #128	; 0x80
    17d6:	4638      	mov	r0, r7
    17d8:	f000 f992 	bl	1b00 <__gnu_Unwind_Save_WMMXC>
    17dc:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    17de:	2300      	movs	r3, #0
    17e0:	2401      	movs	r4, #1
    17e2:	fa04 f203 	lsl.w	r2, r4, r3
    17e6:	422a      	tst	r2, r5
    17e8:	4601      	mov	r1, r0
    17ea:	d004      	beq.n	17f6 <_Unwind_VRS_Pop+0x52>
    17ec:	f851 2b04 	ldr.w	r2, [r1], #4
    17f0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    17f4:	4608      	mov	r0, r1
    17f6:	3301      	adds	r3, #1
    17f8:	2b04      	cmp	r3, #4
    17fa:	d1f2      	bne.n	17e2 <_Unwind_VRS_Pop+0x3e>
    17fc:	63b0      	str	r0, [r6, #56]	; 0x38
    17fe:	4638      	mov	r0, r7
    1800:	f000 f974 	bl	1aec <__gnu_Unwind_Restore_WMMXC>
    1804:	2000      	movs	r0, #0
    1806:	b043      	add	sp, #268	; 0x10c
    1808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    180c:	2c03      	cmp	r4, #3
    180e:	f040 808b 	bne.w	1928 <_Unwind_VRS_Pop+0x184>
    1812:	b294      	uxth	r4, r2
    1814:	eb04 4312 	add.w	r3, r4, r2, lsr #16
    1818:	2b10      	cmp	r3, #16
    181a:	ea4f 4512 	mov.w	r5, r2, lsr #16
    181e:	f200 8083 	bhi.w	1928 <_Unwind_VRS_Pop+0x184>
    1822:	6803      	ldr	r3, [r0, #0]
    1824:	071f      	lsls	r7, r3, #28
    1826:	f100 80d0 	bmi.w	19ca <_Unwind_VRS_Pop+0x226>
    182a:	af20      	add	r7, sp, #128	; 0x80
    182c:	4638      	mov	r0, r7
    182e:	f000 f93b 	bl	1aa8 <__gnu_Unwind_Save_WMMXD>
    1832:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
    1836:	6bb5      	ldr	r5, [r6, #56]	; 0x38
    1838:	b154      	cbz	r4, 1850 <_Unwind_VRS_Pop+0xac>
    183a:	460b      	mov	r3, r1
    183c:	1ae8      	subs	r0, r5, r3
    183e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
    1842:	00e4      	lsls	r4, r4, #3
    1844:	581a      	ldr	r2, [r3, r0]
    1846:	f843 2b04 	str.w	r2, [r3], #4
    184a:	428b      	cmp	r3, r1
    184c:	d1fa      	bne.n	1844 <_Unwind_VRS_Pop+0xa0>
    184e:	4425      	add	r5, r4
    1850:	4638      	mov	r0, r7
    1852:	63b5      	str	r5, [r6, #56]	; 0x38
    1854:	f000 f906 	bl	1a64 <__gnu_Unwind_Restore_WMMXD>
    1858:	2000      	movs	r0, #0
    185a:	b043      	add	sp, #268	; 0x10c
    185c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1860:	2c01      	cmp	r4, #1
    1862:	ea4f 4812 	mov.w	r8, r2, lsr #16
    1866:	b295      	uxth	r5, r2
    1868:	d05a      	beq.n	1920 <_Unwind_VRS_Pop+0x17c>
    186a:	2c05      	cmp	r4, #5
    186c:	d15c      	bne.n	1928 <_Unwind_VRS_Pop+0x184>
    186e:	eb08 0905 	add.w	r9, r8, r5
    1872:	f1b9 0f20 	cmp.w	r9, #32
    1876:	d857      	bhi.n	1928 <_Unwind_VRS_Pop+0x184>
    1878:	f1b8 0f0f 	cmp.w	r8, #15
    187c:	d977      	bls.n	196e <_Unwind_VRS_Pop+0x1ca>
    187e:	46a9      	mov	r9, r5
    1880:	2d00      	cmp	r5, #0
    1882:	f040 8088 	bne.w	1996 <_Unwind_VRS_Pop+0x1f2>
    1886:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1888:	b36d      	cbz	r5, 18e6 <_Unwind_VRS_Pop+0x142>
    188a:	af20      	add	r7, sp, #128	; 0x80
    188c:	f04f 0900 	mov.w	r9, #0
    1890:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
    1894:	3f04      	subs	r7, #4
    1896:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    189a:	f853 1b04 	ldr.w	r1, [r3], #4
    189e:	f847 1f04 	str.w	r1, [r7, #4]!
    18a2:	42ab      	cmp	r3, r5
    18a4:	d1f9      	bne.n	189a <_Unwind_VRS_Pop+0xf6>
    18a6:	f1b9 0f00 	cmp.w	r9, #0
    18aa:	d00f      	beq.n	18cc <_Unwind_VRS_Pop+0x128>
    18ac:	466f      	mov	r7, sp
    18ae:	4641      	mov	r1, r8
    18b0:	2910      	cmp	r1, #16
    18b2:	bf38      	it	cc
    18b4:	2110      	movcc	r1, #16
    18b6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
    18ba:	3984      	subs	r1, #132	; 0x84
    18bc:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
    18c0:	f853 0b04 	ldr.w	r0, [r3], #4
    18c4:	f841 0f04 	str.w	r0, [r1, #4]!
    18c8:	42ab      	cmp	r3, r5
    18ca:	d1f9      	bne.n	18c0 <_Unwind_VRS_Pop+0x11c>
    18cc:	2c01      	cmp	r4, #1
    18ce:	f000 8084 	beq.w	19da <_Unwind_VRS_Pop+0x236>
    18d2:	f1b8 0f0f 	cmp.w	r8, #15
    18d6:	63b5      	str	r5, [r6, #56]	; 0x38
    18d8:	d945      	bls.n	1966 <_Unwind_VRS_Pop+0x1c2>
    18da:	f1b9 0f00 	cmp.w	r9, #0
    18de:	d002      	beq.n	18e6 <_Unwind_VRS_Pop+0x142>
    18e0:	4668      	mov	r0, sp
    18e2:	f000 f8b7 	bl	1a54 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    18e6:	2000      	movs	r0, #0
    18e8:	b043      	add	sp, #268	; 0x10c
    18ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    18ee:	b9dc      	cbnz	r4, 1928 <_Unwind_VRS_Pop+0x184>
    18f0:	6b87      	ldr	r7, [r0, #56]	; 0x38
    18f2:	4623      	mov	r3, r4
    18f4:	2001      	movs	r0, #1
    18f6:	b294      	uxth	r4, r2
    18f8:	f106 0c04 	add.w	ip, r6, #4
    18fc:	fa00 f203 	lsl.w	r2, r0, r3
    1900:	4222      	tst	r2, r4
    1902:	4639      	mov	r1, r7
    1904:	d004      	beq.n	1910 <_Unwind_VRS_Pop+0x16c>
    1906:	f851 2b04 	ldr.w	r2, [r1], #4
    190a:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
    190e:	460f      	mov	r7, r1
    1910:	3301      	adds	r3, #1
    1912:	2b10      	cmp	r3, #16
    1914:	d1f2      	bne.n	18fc <_Unwind_VRS_Pop+0x158>
    1916:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
    191a:	d1e4      	bne.n	18e6 <_Unwind_VRS_Pop+0x142>
    191c:	63b7      	str	r7, [r6, #56]	; 0x38
    191e:	e004      	b.n	192a <_Unwind_VRS_Pop+0x186>
    1920:	eb08 0305 	add.w	r3, r8, r5
    1924:	2b10      	cmp	r3, #16
    1926:	d903      	bls.n	1930 <_Unwind_VRS_Pop+0x18c>
    1928:	2002      	movs	r0, #2
    192a:	b043      	add	sp, #268	; 0x10c
    192c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1930:	f1b8 0f0f 	cmp.w	r8, #15
    1934:	d8f8      	bhi.n	1928 <_Unwind_VRS_Pop+0x184>
    1936:	6833      	ldr	r3, [r6, #0]
    1938:	07da      	lsls	r2, r3, #31
    193a:	d506      	bpl.n	194a <_Unwind_VRS_Pop+0x1a6>
    193c:	4630      	mov	r0, r6
    193e:	f023 0303 	bic.w	r3, r3, #3
    1942:	f840 3b48 	str.w	r3, [r0], #72
    1946:	f000 f879 	bl	1a3c <__gnu_Unwind_Save_VFP>
    194a:	af20      	add	r7, sp, #128	; 0x80
    194c:	4638      	mov	r0, r7
    194e:	f000 f875 	bl	1a3c <__gnu_Unwind_Save_VFP>
    1952:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1954:	2d00      	cmp	r5, #0
    1956:	d199      	bne.n	188c <_Unwind_VRS_Pop+0xe8>
    1958:	461d      	mov	r5, r3
    195a:	3504      	adds	r5, #4
    195c:	63b5      	str	r5, [r6, #56]	; 0x38
    195e:	4638      	mov	r0, r7
    1960:	f000 f868 	bl	1a34 <__gnu_Unwind_Restore_VFP>
    1964:	e7bf      	b.n	18e6 <_Unwind_VRS_Pop+0x142>
    1966:	a820      	add	r0, sp, #128	; 0x80
    1968:	f000 f86c 	bl	1a44 <__gnu_Unwind_Restore_VFP_D>
    196c:	e7b5      	b.n	18da <_Unwind_VRS_Pop+0x136>
    196e:	f1b9 0f10 	cmp.w	r9, #16
    1972:	d940      	bls.n	19f6 <_Unwind_VRS_Pop+0x252>
    1974:	f1a9 0910 	sub.w	r9, r9, #16
    1978:	6833      	ldr	r3, [r6, #0]
    197a:	07d9      	lsls	r1, r3, #31
    197c:	d508      	bpl.n	1990 <_Unwind_VRS_Pop+0x1ec>
    197e:	f023 0301 	bic.w	r3, r3, #1
    1982:	4630      	mov	r0, r6
    1984:	f043 0302 	orr.w	r3, r3, #2
    1988:	f840 3b48 	str.w	r3, [r0], #72
    198c:	f000 f85e 	bl	1a4c <__gnu_Unwind_Save_VFP_D>
    1990:	f1b9 0f00 	cmp.w	r9, #0
    1994:	d032      	beq.n	19fc <_Unwind_VRS_Pop+0x258>
    1996:	6833      	ldr	r3, [r6, #0]
    1998:	075a      	lsls	r2, r3, #29
    199a:	d420      	bmi.n	19de <_Unwind_VRS_Pop+0x23a>
    199c:	f1b8 0f0f 	cmp.w	r8, #15
    19a0:	d925      	bls.n	19ee <_Unwind_VRS_Pop+0x24a>
    19a2:	466f      	mov	r7, sp
    19a4:	4638      	mov	r0, r7
    19a6:	f1c8 0510 	rsb	r5, r8, #16
    19aa:	f000 f857 	bl	1a5c <__gnu_Unwind_Save_VFP_D_16_to_31>
    19ae:	2d00      	cmp	r5, #0
    19b0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    19b2:	f77f af7c 	ble.w	18ae <_Unwind_VRS_Pop+0x10a>
    19b6:	af20      	add	r7, sp, #128	; 0x80
    19b8:	e76a      	b.n	1890 <_Unwind_VRS_Pop+0xec>
    19ba:	f023 0310 	bic.w	r3, r3, #16
    19be:	6033      	str	r3, [r6, #0]
    19c0:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
    19c4:	f000 f89c 	bl	1b00 <__gnu_Unwind_Save_WMMXC>
    19c8:	e704      	b.n	17d4 <_Unwind_VRS_Pop+0x30>
    19ca:	f023 0308 	bic.w	r3, r3, #8
    19ce:	6003      	str	r3, [r0, #0]
    19d0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    19d4:	f000 f868 	bl	1aa8 <__gnu_Unwind_Save_WMMXD>
    19d8:	e727      	b.n	182a <_Unwind_VRS_Pop+0x86>
    19da:	af20      	add	r7, sp, #128	; 0x80
    19dc:	e7bd      	b.n	195a <_Unwind_VRS_Pop+0x1b6>
    19de:	4630      	mov	r0, r6
    19e0:	f023 0304 	bic.w	r3, r3, #4
    19e4:	f840 3bd0 	str.w	r3, [r0], #208
    19e8:	f000 f838 	bl	1a5c <__gnu_Unwind_Save_VFP_D_16_to_31>
    19ec:	e7d6      	b.n	199c <_Unwind_VRS_Pop+0x1f8>
    19ee:	a820      	add	r0, sp, #128	; 0x80
    19f0:	f000 f82c 	bl	1a4c <__gnu_Unwind_Save_VFP_D>
    19f4:	e7d5      	b.n	19a2 <_Unwind_VRS_Pop+0x1fe>
    19f6:	f04f 0900 	mov.w	r9, #0
    19fa:	e7bd      	b.n	1978 <_Unwind_VRS_Pop+0x1d4>
    19fc:	f1b8 0f0f 	cmp.w	r8, #15
    1a00:	f63f af41 	bhi.w	1886 <_Unwind_VRS_Pop+0xe2>
    1a04:	af20      	add	r7, sp, #128	; 0x80
    1a06:	4638      	mov	r0, r7
    1a08:	f000 f820 	bl	1a4c <__gnu_Unwind_Save_VFP_D>
    1a0c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1a0e:	2d00      	cmp	r5, #0
    1a10:	f47f af3c 	bne.w	188c <_Unwind_VRS_Pop+0xe8>
    1a14:	4638      	mov	r0, r7
    1a16:	f000 f815 	bl	1a44 <__gnu_Unwind_Restore_VFP_D>
    1a1a:	e764      	b.n	18e6 <_Unwind_VRS_Pop+0x142>

00001a1c <__restore_core_regs>:
    1a1c:	f100 0134 	add.w	r1, r0, #52	; 0x34
    1a20:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    1a24:	469c      	mov	ip, r3
    1a26:	46a6      	mov	lr, r4
    1a28:	f84c 5d04 	str.w	r5, [ip, #-4]!
    1a2c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    1a30:	46e5      	mov	sp, ip
    1a32:	bd00      	pop	{pc}

00001a34 <__gnu_Unwind_Restore_VFP>:
    1a34:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    1a38:	4770      	bx	lr
    1a3a:	bf00      	nop

00001a3c <__gnu_Unwind_Save_VFP>:
    1a3c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop

00001a44 <__gnu_Unwind_Restore_VFP_D>:
    1a44:	ec90 0b20 	vldmia	r0, {d0-d15}
    1a48:	4770      	bx	lr
    1a4a:	bf00      	nop

00001a4c <__gnu_Unwind_Save_VFP_D>:
    1a4c:	ec80 0b20 	vstmia	r0, {d0-d15}
    1a50:	4770      	bx	lr
    1a52:	bf00      	nop

00001a54 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    1a54:	ecd0 0b20 	vldmia	r0, {d16-d31}
    1a58:	4770      	bx	lr
    1a5a:	bf00      	nop

00001a5c <__gnu_Unwind_Save_VFP_D_16_to_31>:
    1a5c:	ecc0 0b20 	vstmia	r0, {d16-d31}
    1a60:	4770      	bx	lr
    1a62:	bf00      	nop

00001a64 <__gnu_Unwind_Restore_WMMXD>:
    1a64:	ecf0 0102 	ldfe	f0, [r0], #8
    1a68:	ecf0 1102 	ldfe	f1, [r0], #8
    1a6c:	ecf0 2102 	ldfe	f2, [r0], #8
    1a70:	ecf0 3102 	ldfe	f3, [r0], #8
    1a74:	ecf0 4102 	ldfe	f4, [r0], #8
    1a78:	ecf0 5102 	ldfe	f5, [r0], #8
    1a7c:	ecf0 6102 	ldfe	f6, [r0], #8
    1a80:	ecf0 7102 	ldfe	f7, [r0], #8
    1a84:	ecf0 8102 	ldfp	f0, [r0], #8
    1a88:	ecf0 9102 	ldfp	f1, [r0], #8
    1a8c:	ecf0 a102 	ldfp	f2, [r0], #8
    1a90:	ecf0 b102 	ldfp	f3, [r0], #8
    1a94:	ecf0 c102 	ldfp	f4, [r0], #8
    1a98:	ecf0 d102 	ldfp	f5, [r0], #8
    1a9c:	ecf0 e102 	ldfp	f6, [r0], #8
    1aa0:	ecf0 f102 	ldfp	f7, [r0], #8
    1aa4:	4770      	bx	lr
    1aa6:	bf00      	nop

00001aa8 <__gnu_Unwind_Save_WMMXD>:
    1aa8:	ece0 0102 	stfe	f0, [r0], #8
    1aac:	ece0 1102 	stfe	f1, [r0], #8
    1ab0:	ece0 2102 	stfe	f2, [r0], #8
    1ab4:	ece0 3102 	stfe	f3, [r0], #8
    1ab8:	ece0 4102 	stfe	f4, [r0], #8
    1abc:	ece0 5102 	stfe	f5, [r0], #8
    1ac0:	ece0 6102 	stfe	f6, [r0], #8
    1ac4:	ece0 7102 	stfe	f7, [r0], #8
    1ac8:	ece0 8102 	stfp	f0, [r0], #8
    1acc:	ece0 9102 	stfp	f1, [r0], #8
    1ad0:	ece0 a102 	stfp	f2, [r0], #8
    1ad4:	ece0 b102 	stfp	f3, [r0], #8
    1ad8:	ece0 c102 	stfp	f4, [r0], #8
    1adc:	ece0 d102 	stfp	f5, [r0], #8
    1ae0:	ece0 e102 	stfp	f6, [r0], #8
    1ae4:	ece0 f102 	stfp	f7, [r0], #8
    1ae8:	4770      	bx	lr
    1aea:	bf00      	nop

00001aec <__gnu_Unwind_Restore_WMMXC>:
    1aec:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    1af0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    1af4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    1af8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    1afc:	4770      	bx	lr
    1afe:	bf00      	nop

00001b00 <__gnu_Unwind_Save_WMMXC>:
    1b00:	fca0 8101 	stc2	1, cr8, [r0], #4
    1b04:	fca0 9101 	stc2	1, cr9, [r0], #4
    1b08:	fca0 a101 	stc2	1, cr10, [r0], #4
    1b0c:	fca0 b101 	stc2	1, cr11, [r0], #4
    1b10:	4770      	bx	lr
    1b12:	bf00      	nop

00001b14 <_Unwind_RaiseException>:
    1b14:	46ec      	mov	ip, sp
    1b16:	b500      	push	{lr}
    1b18:	e92d 5000 	stmdb	sp!, {ip, lr}
    1b1c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1b20:	f04f 0300 	mov.w	r3, #0
    1b24:	e92d 000c 	stmdb	sp!, {r2, r3}
    1b28:	a901      	add	r1, sp, #4
    1b2a:	f7ff fbf1 	bl	1310 <__gnu_Unwind_RaiseException>
    1b2e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    1b32:	b012      	add	sp, #72	; 0x48
    1b34:	4770      	bx	lr
    1b36:	bf00      	nop

00001b38 <_Unwind_Resume>:
    1b38:	46ec      	mov	ip, sp
    1b3a:	b500      	push	{lr}
    1b3c:	e92d 5000 	stmdb	sp!, {ip, lr}
    1b40:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1b44:	f04f 0300 	mov.w	r3, #0
    1b48:	e92d 000c 	stmdb	sp!, {r2, r3}
    1b4c:	a901      	add	r1, sp, #4
    1b4e:	f7ff fc19 	bl	1384 <__gnu_Unwind_Resume>
    1b52:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    1b56:	b012      	add	sp, #72	; 0x48
    1b58:	4770      	bx	lr
    1b5a:	bf00      	nop

00001b5c <_Unwind_Resume_or_Rethrow>:
    1b5c:	46ec      	mov	ip, sp
    1b5e:	b500      	push	{lr}
    1b60:	e92d 5000 	stmdb	sp!, {ip, lr}
    1b64:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1b68:	f04f 0300 	mov.w	r3, #0
    1b6c:	e92d 000c 	stmdb	sp!, {r2, r3}
    1b70:	a901      	add	r1, sp, #4
    1b72:	f7ff fc29 	bl	13c8 <__gnu_Unwind_Resume_or_Rethrow>
    1b76:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    1b7a:	b012      	add	sp, #72	; 0x48
    1b7c:	4770      	bx	lr
    1b7e:	bf00      	nop

00001b80 <_Unwind_ForcedUnwind>:
    1b80:	46ec      	mov	ip, sp
    1b82:	b500      	push	{lr}
    1b84:	e92d 5000 	stmdb	sp!, {ip, lr}
    1b88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1b8c:	f04f 0300 	mov.w	r3, #0
    1b90:	e92d 000c 	stmdb	sp!, {r2, r3}
    1b94:	ab01      	add	r3, sp, #4
    1b96:	f7ff fbeb 	bl	1370 <__gnu_Unwind_ForcedUnwind>
    1b9a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    1b9e:	b012      	add	sp, #72	; 0x48
    1ba0:	4770      	bx	lr
    1ba2:	bf00      	nop

00001ba4 <_Unwind_Backtrace>:
    1ba4:	46ec      	mov	ip, sp
    1ba6:	b500      	push	{lr}
    1ba8:	e92d 5000 	stmdb	sp!, {ip, lr}
    1bac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    1bb0:	f04f 0300 	mov.w	r3, #0
    1bb4:	e92d 000c 	stmdb	sp!, {r2, r3}
    1bb8:	aa01      	add	r2, sp, #4
    1bba:	f7ff fc5d 	bl	1478 <__gnu_Unwind_Backtrace>
    1bbe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    1bc2:	b012      	add	sp, #72	; 0x48
    1bc4:	4770      	bx	lr
    1bc6:	bf00      	nop

00001bc8 <next_unwind_byte>:
    1bc8:	7a02      	ldrb	r2, [r0, #8]
    1bca:	b97a      	cbnz	r2, 1bec <next_unwind_byte+0x24>
    1bcc:	7a43      	ldrb	r3, [r0, #9]
    1bce:	b1a3      	cbz	r3, 1bfa <next_unwind_byte+0x32>
    1bd0:	6842      	ldr	r2, [r0, #4]
    1bd2:	3b01      	subs	r3, #1
    1bd4:	b410      	push	{r4}
    1bd6:	7243      	strb	r3, [r0, #9]
    1bd8:	6813      	ldr	r3, [r2, #0]
    1bda:	2103      	movs	r1, #3
    1bdc:	1d14      	adds	r4, r2, #4
    1bde:	7201      	strb	r1, [r0, #8]
    1be0:	021a      	lsls	r2, r3, #8
    1be2:	6044      	str	r4, [r0, #4]
    1be4:	6002      	str	r2, [r0, #0]
    1be6:	bc10      	pop	{r4}
    1be8:	0e18      	lsrs	r0, r3, #24
    1bea:	4770      	bx	lr
    1bec:	6803      	ldr	r3, [r0, #0]
    1bee:	3a01      	subs	r2, #1
    1bf0:	7202      	strb	r2, [r0, #8]
    1bf2:	021a      	lsls	r2, r3, #8
    1bf4:	6002      	str	r2, [r0, #0]
    1bf6:	0e18      	lsrs	r0, r3, #24
    1bf8:	4770      	bx	lr
    1bfa:	20b0      	movs	r0, #176	; 0xb0
    1bfc:	4770      	bx	lr
    1bfe:	bf00      	nop

00001c00 <_Unwind_GetGR.constprop.0>:
    1c00:	b500      	push	{lr}
    1c02:	b085      	sub	sp, #20
    1c04:	aa03      	add	r2, sp, #12
    1c06:	2300      	movs	r3, #0
    1c08:	9200      	str	r2, [sp, #0]
    1c0a:	4619      	mov	r1, r3
    1c0c:	220c      	movs	r2, #12
    1c0e:	f7ff fbeb 	bl	13e8 <_Unwind_VRS_Get>
    1c12:	9803      	ldr	r0, [sp, #12]
    1c14:	b005      	add	sp, #20
    1c16:	f85d fb04 	ldr.w	pc, [sp], #4
    1c1a:	bf00      	nop

00001c1c <unwind_UCB_from_context>:
    1c1c:	e7f0      	b.n	1c00 <_Unwind_GetGR.constprop.0>
    1c1e:	bf00      	nop

00001c20 <__gnu_unwind_execute>:
    1c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1c24:	4605      	mov	r5, r0
    1c26:	b085      	sub	sp, #20
    1c28:	460e      	mov	r6, r1
    1c2a:	f04f 0800 	mov.w	r8, #0
    1c2e:	4630      	mov	r0, r6
    1c30:	f7ff ffca 	bl	1bc8 <next_unwind_byte>
    1c34:	28b0      	cmp	r0, #176	; 0xb0
    1c36:	4604      	mov	r4, r0
    1c38:	f000 80b2 	beq.w	1da0 <__gnu_unwind_execute+0x180>
    1c3c:	0607      	lsls	r7, r0, #24
    1c3e:	d520      	bpl.n	1c82 <__gnu_unwind_execute+0x62>
    1c40:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    1c44:	2b80      	cmp	r3, #128	; 0x80
    1c46:	d04d      	beq.n	1ce4 <__gnu_unwind_execute+0xc4>
    1c48:	2b90      	cmp	r3, #144	; 0x90
    1c4a:	d036      	beq.n	1cba <__gnu_unwind_execute+0x9a>
    1c4c:	2ba0      	cmp	r3, #160	; 0xa0
    1c4e:	d060      	beq.n	1d12 <__gnu_unwind_execute+0xf2>
    1c50:	2bb0      	cmp	r3, #176	; 0xb0
    1c52:	d074      	beq.n	1d3e <__gnu_unwind_execute+0x11e>
    1c54:	2bc0      	cmp	r3, #192	; 0xc0
    1c56:	f000 808b 	beq.w	1d70 <__gnu_unwind_execute+0x150>
    1c5a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    1c5e:	2bd0      	cmp	r3, #208	; 0xd0
    1c60:	d10b      	bne.n	1c7a <__gnu_unwind_execute+0x5a>
    1c62:	f000 0207 	and.w	r2, r0, #7
    1c66:	3201      	adds	r2, #1
    1c68:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    1c6c:	2305      	movs	r3, #5
    1c6e:	2101      	movs	r1, #1
    1c70:	4628      	mov	r0, r5
    1c72:	f7ff fd97 	bl	17a4 <_Unwind_VRS_Pop>
    1c76:	2800      	cmp	r0, #0
    1c78:	d0d9      	beq.n	1c2e <__gnu_unwind_execute+0xe>
    1c7a:	2009      	movs	r0, #9
    1c7c:	b005      	add	sp, #20
    1c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1c82:	f10d 090c 	add.w	r9, sp, #12
    1c86:	2300      	movs	r3, #0
    1c88:	4619      	mov	r1, r3
    1c8a:	0087      	lsls	r7, r0, #2
    1c8c:	f8cd 9000 	str.w	r9, [sp]
    1c90:	220d      	movs	r2, #13
    1c92:	4628      	mov	r0, r5
    1c94:	f7ff fba8 	bl	13e8 <_Unwind_VRS_Get>
    1c98:	b2ff      	uxtb	r7, r7
    1c9a:	9b03      	ldr	r3, [sp, #12]
    1c9c:	f8cd 9000 	str.w	r9, [sp]
    1ca0:	3704      	adds	r7, #4
    1ca2:	0660      	lsls	r0, r4, #25
    1ca4:	bf4c      	ite	mi
    1ca6:	1bdf      	submi	r7, r3, r7
    1ca8:	18ff      	addpl	r7, r7, r3
    1caa:	2300      	movs	r3, #0
    1cac:	4619      	mov	r1, r3
    1cae:	220d      	movs	r2, #13
    1cb0:	4628      	mov	r0, r5
    1cb2:	9703      	str	r7, [sp, #12]
    1cb4:	f7ff fbbc 	bl	1430 <_Unwind_VRS_Set>
    1cb8:	e7b9      	b.n	1c2e <__gnu_unwind_execute+0xe>
    1cba:	f000 030d 	and.w	r3, r0, #13
    1cbe:	2b0d      	cmp	r3, #13
    1cc0:	d0db      	beq.n	1c7a <__gnu_unwind_execute+0x5a>
    1cc2:	af03      	add	r7, sp, #12
    1cc4:	2300      	movs	r3, #0
    1cc6:	f000 020f 	and.w	r2, r0, #15
    1cca:	4619      	mov	r1, r3
    1ccc:	9700      	str	r7, [sp, #0]
    1cce:	4628      	mov	r0, r5
    1cd0:	f7ff fb8a 	bl	13e8 <_Unwind_VRS_Get>
    1cd4:	2300      	movs	r3, #0
    1cd6:	9700      	str	r7, [sp, #0]
    1cd8:	4619      	mov	r1, r3
    1cda:	220d      	movs	r2, #13
    1cdc:	4628      	mov	r0, r5
    1cde:	f7ff fba7 	bl	1430 <_Unwind_VRS_Set>
    1ce2:	e7a4      	b.n	1c2e <__gnu_unwind_execute+0xe>
    1ce4:	4630      	mov	r0, r6
    1ce6:	f7ff ff6f 	bl	1bc8 <next_unwind_byte>
    1cea:	0224      	lsls	r4, r4, #8
    1cec:	4320      	orrs	r0, r4
    1cee:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    1cf2:	d0c2      	beq.n	1c7a <__gnu_unwind_execute+0x5a>
    1cf4:	0104      	lsls	r4, r0, #4
    1cf6:	2300      	movs	r3, #0
    1cf8:	b2a2      	uxth	r2, r4
    1cfa:	4619      	mov	r1, r3
    1cfc:	4628      	mov	r0, r5
    1cfe:	f7ff fd51 	bl	17a4 <_Unwind_VRS_Pop>
    1d02:	2800      	cmp	r0, #0
    1d04:	d1b9      	bne.n	1c7a <__gnu_unwind_execute+0x5a>
    1d06:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    1d0a:	bf18      	it	ne
    1d0c:	f04f 0801 	movne.w	r8, #1
    1d10:	e78d      	b.n	1c2e <__gnu_unwind_execute+0xe>
    1d12:	43c2      	mvns	r2, r0
    1d14:	f002 0307 	and.w	r3, r2, #7
    1d18:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    1d1c:	411a      	asrs	r2, r3
    1d1e:	0701      	lsls	r1, r0, #28
    1d20:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    1d24:	f04f 0300 	mov.w	r3, #0
    1d28:	bf48      	it	mi
    1d2a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    1d2e:	4619      	mov	r1, r3
    1d30:	4628      	mov	r0, r5
    1d32:	f7ff fd37 	bl	17a4 <_Unwind_VRS_Pop>
    1d36:	2800      	cmp	r0, #0
    1d38:	f43f af79 	beq.w	1c2e <__gnu_unwind_execute+0xe>
    1d3c:	e79d      	b.n	1c7a <__gnu_unwind_execute+0x5a>
    1d3e:	28b1      	cmp	r0, #177	; 0xb1
    1d40:	d033      	beq.n	1daa <__gnu_unwind_execute+0x18a>
    1d42:	28b2      	cmp	r0, #178	; 0xb2
    1d44:	f000 808b 	beq.w	1e5e <__gnu_unwind_execute+0x23e>
    1d48:	28b3      	cmp	r0, #179	; 0xb3
    1d4a:	d039      	beq.n	1dc0 <__gnu_unwind_execute+0x1a0>
    1d4c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    1d50:	2bb4      	cmp	r3, #180	; 0xb4
    1d52:	d092      	beq.n	1c7a <__gnu_unwind_execute+0x5a>
    1d54:	f000 0207 	and.w	r2, r0, #7
    1d58:	3201      	adds	r2, #1
    1d5a:	2301      	movs	r3, #1
    1d5c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    1d60:	4619      	mov	r1, r3
    1d62:	4628      	mov	r0, r5
    1d64:	f7ff fd1e 	bl	17a4 <_Unwind_VRS_Pop>
    1d68:	2800      	cmp	r0, #0
    1d6a:	f43f af60 	beq.w	1c2e <__gnu_unwind_execute+0xe>
    1d6e:	e784      	b.n	1c7a <__gnu_unwind_execute+0x5a>
    1d70:	28c6      	cmp	r0, #198	; 0xc6
    1d72:	d042      	beq.n	1dfa <__gnu_unwind_execute+0x1da>
    1d74:	28c7      	cmp	r0, #199	; 0xc7
    1d76:	d04c      	beq.n	1e12 <__gnu_unwind_execute+0x1f2>
    1d78:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    1d7c:	2bc0      	cmp	r3, #192	; 0xc0
    1d7e:	d05b      	beq.n	1e38 <__gnu_unwind_execute+0x218>
    1d80:	28c8      	cmp	r0, #200	; 0xc8
    1d82:	d060      	beq.n	1e46 <__gnu_unwind_execute+0x226>
    1d84:	28c9      	cmp	r0, #201	; 0xc9
    1d86:	f47f af78 	bne.w	1c7a <__gnu_unwind_execute+0x5a>
    1d8a:	4630      	mov	r0, r6
    1d8c:	f7ff ff1c 	bl	1bc8 <next_unwind_byte>
    1d90:	0302      	lsls	r2, r0, #12
    1d92:	f000 000f 	and.w	r0, r0, #15
    1d96:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    1d9a:	3001      	adds	r0, #1
    1d9c:	4302      	orrs	r2, r0
    1d9e:	e765      	b.n	1c6c <__gnu_unwind_execute+0x4c>
    1da0:	f1b8 0f00 	cmp.w	r8, #0
    1da4:	d018      	beq.n	1dd8 <__gnu_unwind_execute+0x1b8>
    1da6:	2000      	movs	r0, #0
    1da8:	e768      	b.n	1c7c <__gnu_unwind_execute+0x5c>
    1daa:	4630      	mov	r0, r6
    1dac:	f7ff ff0c 	bl	1bc8 <next_unwind_byte>
    1db0:	4602      	mov	r2, r0
    1db2:	2800      	cmp	r0, #0
    1db4:	f43f af61 	beq.w	1c7a <__gnu_unwind_execute+0x5a>
    1db8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    1dbc:	d0d0      	beq.n	1d60 <__gnu_unwind_execute+0x140>
    1dbe:	e75c      	b.n	1c7a <__gnu_unwind_execute+0x5a>
    1dc0:	4630      	mov	r0, r6
    1dc2:	f7ff ff01 	bl	1bc8 <next_unwind_byte>
    1dc6:	0301      	lsls	r1, r0, #12
    1dc8:	f000 000f 	and.w	r0, r0, #15
    1dcc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    1dd0:	1c42      	adds	r2, r0, #1
    1dd2:	2301      	movs	r3, #1
    1dd4:	430a      	orrs	r2, r1
    1dd6:	e7c3      	b.n	1d60 <__gnu_unwind_execute+0x140>
    1dd8:	ac03      	add	r4, sp, #12
    1dda:	4643      	mov	r3, r8
    1ddc:	220e      	movs	r2, #14
    1dde:	4641      	mov	r1, r8
    1de0:	9400      	str	r4, [sp, #0]
    1de2:	4628      	mov	r0, r5
    1de4:	f7ff fb00 	bl	13e8 <_Unwind_VRS_Get>
    1de8:	9400      	str	r4, [sp, #0]
    1dea:	4628      	mov	r0, r5
    1dec:	4643      	mov	r3, r8
    1dee:	220f      	movs	r2, #15
    1df0:	4641      	mov	r1, r8
    1df2:	f7ff fb1d 	bl	1430 <_Unwind_VRS_Set>
    1df6:	4640      	mov	r0, r8
    1df8:	e740      	b.n	1c7c <__gnu_unwind_execute+0x5c>
    1dfa:	4630      	mov	r0, r6
    1dfc:	f7ff fee4 	bl	1bc8 <next_unwind_byte>
    1e00:	0301      	lsls	r1, r0, #12
    1e02:	f000 000f 	and.w	r0, r0, #15
    1e06:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    1e0a:	1c42      	adds	r2, r0, #1
    1e0c:	2303      	movs	r3, #3
    1e0e:	430a      	orrs	r2, r1
    1e10:	e7a6      	b.n	1d60 <__gnu_unwind_execute+0x140>
    1e12:	4630      	mov	r0, r6
    1e14:	f7ff fed8 	bl	1bc8 <next_unwind_byte>
    1e18:	4602      	mov	r2, r0
    1e1a:	2800      	cmp	r0, #0
    1e1c:	f43f af2d 	beq.w	1c7a <__gnu_unwind_execute+0x5a>
    1e20:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    1e24:	f47f af29 	bne.w	1c7a <__gnu_unwind_execute+0x5a>
    1e28:	2104      	movs	r1, #4
    1e2a:	4628      	mov	r0, r5
    1e2c:	f7ff fcba 	bl	17a4 <_Unwind_VRS_Pop>
    1e30:	2800      	cmp	r0, #0
    1e32:	f43f aefc 	beq.w	1c2e <__gnu_unwind_execute+0xe>
    1e36:	e720      	b.n	1c7a <__gnu_unwind_execute+0x5a>
    1e38:	f000 020f 	and.w	r2, r0, #15
    1e3c:	3201      	adds	r2, #1
    1e3e:	2303      	movs	r3, #3
    1e40:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    1e44:	e78c      	b.n	1d60 <__gnu_unwind_execute+0x140>
    1e46:	4630      	mov	r0, r6
    1e48:	f7ff febe 	bl	1bc8 <next_unwind_byte>
    1e4c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    1e50:	f000 030f 	and.w	r3, r0, #15
    1e54:	3210      	adds	r2, #16
    1e56:	3301      	adds	r3, #1
    1e58:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    1e5c:	e706      	b.n	1c6c <__gnu_unwind_execute+0x4c>
    1e5e:	2300      	movs	r3, #0
    1e60:	f10d 090c 	add.w	r9, sp, #12
    1e64:	220d      	movs	r2, #13
    1e66:	4619      	mov	r1, r3
    1e68:	f8cd 9000 	str.w	r9, [sp]
    1e6c:	4628      	mov	r0, r5
    1e6e:	f7ff fabb 	bl	13e8 <_Unwind_VRS_Get>
    1e72:	4630      	mov	r0, r6
    1e74:	f7ff fea8 	bl	1bc8 <next_unwind_byte>
    1e78:	0602      	lsls	r2, r0, #24
    1e7a:	f04f 0702 	mov.w	r7, #2
    1e7e:	d50c      	bpl.n	1e9a <__gnu_unwind_execute+0x27a>
    1e80:	9b03      	ldr	r3, [sp, #12]
    1e82:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    1e86:	40b8      	lsls	r0, r7
    1e88:	4403      	add	r3, r0
    1e8a:	4630      	mov	r0, r6
    1e8c:	9303      	str	r3, [sp, #12]
    1e8e:	f7ff fe9b 	bl	1bc8 <next_unwind_byte>
    1e92:	0603      	lsls	r3, r0, #24
    1e94:	f107 0707 	add.w	r7, r7, #7
    1e98:	d4f2      	bmi.n	1e80 <__gnu_unwind_execute+0x260>
    1e9a:	9b03      	ldr	r3, [sp, #12]
    1e9c:	f8cd 9000 	str.w	r9, [sp]
    1ea0:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    1ea4:	f503 7201 	add.w	r2, r3, #516	; 0x204
    1ea8:	40bc      	lsls	r4, r7
    1eaa:	2300      	movs	r3, #0
    1eac:	4414      	add	r4, r2
    1eae:	4619      	mov	r1, r3
    1eb0:	220d      	movs	r2, #13
    1eb2:	4628      	mov	r0, r5
    1eb4:	9403      	str	r4, [sp, #12]
    1eb6:	f7ff fabb 	bl	1430 <_Unwind_VRS_Set>
    1eba:	e6b8      	b.n	1c2e <__gnu_unwind_execute+0xe>

00001ebc <__gnu_unwind_frame>:
    1ebc:	b510      	push	{r4, lr}
    1ebe:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    1ec0:	b084      	sub	sp, #16
    1ec2:	6853      	ldr	r3, [r2, #4]
    1ec4:	2403      	movs	r4, #3
    1ec6:	f88d 400c 	strb.w	r4, [sp, #12]
    1eca:	021b      	lsls	r3, r3, #8
    1ecc:	f102 0408 	add.w	r4, r2, #8
    1ed0:	4608      	mov	r0, r1
    1ed2:	79d2      	ldrb	r2, [r2, #7]
    1ed4:	9301      	str	r3, [sp, #4]
    1ed6:	a901      	add	r1, sp, #4
    1ed8:	9402      	str	r4, [sp, #8]
    1eda:	f88d 200d 	strb.w	r2, [sp, #13]
    1ede:	f7ff fe9f 	bl	1c20 <__gnu_unwind_execute>
    1ee2:	b004      	add	sp, #16
    1ee4:	bd10      	pop	{r4, pc}
    1ee6:	bf00      	nop

00001ee8 <_Unwind_GetRegionStart>:
    1ee8:	b508      	push	{r3, lr}
    1eea:	f7ff fe97 	bl	1c1c <unwind_UCB_from_context>
    1eee:	6c80      	ldr	r0, [r0, #72]	; 0x48
    1ef0:	bd08      	pop	{r3, pc}
    1ef2:	bf00      	nop

00001ef4 <_Unwind_GetLanguageSpecificData>:
    1ef4:	b508      	push	{r3, lr}
    1ef6:	f7ff fe91 	bl	1c1c <unwind_UCB_from_context>
    1efa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    1efc:	79c3      	ldrb	r3, [r0, #7]
    1efe:	3302      	adds	r3, #2
    1f00:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    1f04:	bd08      	pop	{r3, pc}
    1f06:	bf00      	nop

00001f08 <abort>:
    1f08:	b508      	push	{r3, lr}
    1f0a:	2006      	movs	r0, #6
    1f0c:	f000 f91a 	bl	2144 <raise>
    1f10:	2001      	movs	r0, #1
    1f12:	f000 fb8d 	bl	2630 <_exit>
	...

00001f18 <__cxa_atexit>:
    1f18:	b510      	push	{r4, lr}
    1f1a:	4c05      	ldr	r4, [pc, #20]	; (1f30 <__cxa_atexit+0x18>)
    1f1c:	4613      	mov	r3, r2
    1f1e:	b12c      	cbz	r4, 1f2c <__cxa_atexit+0x14>
    1f20:	460a      	mov	r2, r1
    1f22:	4601      	mov	r1, r0
    1f24:	2002      	movs	r0, #2
    1f26:	f3af 8000 	nop.w
    1f2a:	bd10      	pop	{r4, pc}
    1f2c:	4620      	mov	r0, r4
    1f2e:	e7fc      	b.n	1f2a <__cxa_atexit+0x12>
    1f30:	00000000 	.word	0x00000000

00001f34 <malloc>:
    1f34:	4b02      	ldr	r3, [pc, #8]	; (1f40 <malloc+0xc>)
    1f36:	4601      	mov	r1, r0
    1f38:	6818      	ldr	r0, [r3, #0]
    1f3a:	f000 b871 	b.w	2020 <_malloc_r>
    1f3e:	bf00      	nop
    1f40:	20000004 	.word	0x20000004

00001f44 <free>:
    1f44:	4b02      	ldr	r3, [pc, #8]	; (1f50 <free+0xc>)
    1f46:	4601      	mov	r1, r0
    1f48:	6818      	ldr	r0, [r3, #0]
    1f4a:	f000 b819 	b.w	1f80 <_free_r>
    1f4e:	bf00      	nop
    1f50:	20000004 	.word	0x20000004

00001f54 <memcpy>:
    1f54:	440a      	add	r2, r1
    1f56:	4291      	cmp	r1, r2
    1f58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    1f5c:	d100      	bne.n	1f60 <memcpy+0xc>
    1f5e:	4770      	bx	lr
    1f60:	b510      	push	{r4, lr}
    1f62:	f811 4b01 	ldrb.w	r4, [r1], #1
    1f66:	f803 4f01 	strb.w	r4, [r3, #1]!
    1f6a:	4291      	cmp	r1, r2
    1f6c:	d1f9      	bne.n	1f62 <memcpy+0xe>
    1f6e:	bd10      	pop	{r4, pc}

00001f70 <memset>:
    1f70:	4402      	add	r2, r0
    1f72:	4603      	mov	r3, r0
    1f74:	4293      	cmp	r3, r2
    1f76:	d100      	bne.n	1f7a <memset+0xa>
    1f78:	4770      	bx	lr
    1f7a:	f803 1b01 	strb.w	r1, [r3], #1
    1f7e:	e7f9      	b.n	1f74 <memset+0x4>

00001f80 <_free_r>:
    1f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1f82:	2900      	cmp	r1, #0
    1f84:	d048      	beq.n	2018 <_free_r+0x98>
    1f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1f8a:	9001      	str	r0, [sp, #4]
    1f8c:	2b00      	cmp	r3, #0
    1f8e:	f1a1 0404 	sub.w	r4, r1, #4
    1f92:	bfb8      	it	lt
    1f94:	18e4      	addlt	r4, r4, r3
    1f96:	f000 f8f1 	bl	217c <__malloc_lock>
    1f9a:	4a20      	ldr	r2, [pc, #128]	; (201c <_free_r+0x9c>)
    1f9c:	9801      	ldr	r0, [sp, #4]
    1f9e:	6813      	ldr	r3, [r2, #0]
    1fa0:	4615      	mov	r5, r2
    1fa2:	b933      	cbnz	r3, 1fb2 <_free_r+0x32>
    1fa4:	6063      	str	r3, [r4, #4]
    1fa6:	6014      	str	r4, [r2, #0]
    1fa8:	b003      	add	sp, #12
    1faa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    1fae:	f000 b8eb 	b.w	2188 <__malloc_unlock>
    1fb2:	42a3      	cmp	r3, r4
    1fb4:	d90b      	bls.n	1fce <_free_r+0x4e>
    1fb6:	6821      	ldr	r1, [r4, #0]
    1fb8:	1862      	adds	r2, r4, r1
    1fba:	4293      	cmp	r3, r2
    1fbc:	bf04      	itt	eq
    1fbe:	681a      	ldreq	r2, [r3, #0]
    1fc0:	685b      	ldreq	r3, [r3, #4]
    1fc2:	6063      	str	r3, [r4, #4]
    1fc4:	bf04      	itt	eq
    1fc6:	1852      	addeq	r2, r2, r1
    1fc8:	6022      	streq	r2, [r4, #0]
    1fca:	602c      	str	r4, [r5, #0]
    1fcc:	e7ec      	b.n	1fa8 <_free_r+0x28>
    1fce:	461a      	mov	r2, r3
    1fd0:	685b      	ldr	r3, [r3, #4]
    1fd2:	b10b      	cbz	r3, 1fd8 <_free_r+0x58>
    1fd4:	42a3      	cmp	r3, r4
    1fd6:	d9fa      	bls.n	1fce <_free_r+0x4e>
    1fd8:	6811      	ldr	r1, [r2, #0]
    1fda:	1855      	adds	r5, r2, r1
    1fdc:	42a5      	cmp	r5, r4
    1fde:	d10b      	bne.n	1ff8 <_free_r+0x78>
    1fe0:	6824      	ldr	r4, [r4, #0]
    1fe2:	4421      	add	r1, r4
    1fe4:	1854      	adds	r4, r2, r1
    1fe6:	42a3      	cmp	r3, r4
    1fe8:	6011      	str	r1, [r2, #0]
    1fea:	d1dd      	bne.n	1fa8 <_free_r+0x28>
    1fec:	681c      	ldr	r4, [r3, #0]
    1fee:	685b      	ldr	r3, [r3, #4]
    1ff0:	6053      	str	r3, [r2, #4]
    1ff2:	4421      	add	r1, r4
    1ff4:	6011      	str	r1, [r2, #0]
    1ff6:	e7d7      	b.n	1fa8 <_free_r+0x28>
    1ff8:	d902      	bls.n	2000 <_free_r+0x80>
    1ffa:	230c      	movs	r3, #12
    1ffc:	6003      	str	r3, [r0, #0]
    1ffe:	e7d3      	b.n	1fa8 <_free_r+0x28>
    2000:	6825      	ldr	r5, [r4, #0]
    2002:	1961      	adds	r1, r4, r5
    2004:	428b      	cmp	r3, r1
    2006:	bf04      	itt	eq
    2008:	6819      	ldreq	r1, [r3, #0]
    200a:	685b      	ldreq	r3, [r3, #4]
    200c:	6063      	str	r3, [r4, #4]
    200e:	bf04      	itt	eq
    2010:	1949      	addeq	r1, r1, r5
    2012:	6021      	streq	r1, [r4, #0]
    2014:	6054      	str	r4, [r2, #4]
    2016:	e7c7      	b.n	1fa8 <_free_r+0x28>
    2018:	b003      	add	sp, #12
    201a:	bd30      	pop	{r4, r5, pc}
    201c:	2000011c 	.word	0x2000011c

00002020 <_malloc_r>:
    2020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2022:	1ccd      	adds	r5, r1, #3
    2024:	f025 0503 	bic.w	r5, r5, #3
    2028:	3508      	adds	r5, #8
    202a:	2d0c      	cmp	r5, #12
    202c:	bf38      	it	cc
    202e:	250c      	movcc	r5, #12
    2030:	2d00      	cmp	r5, #0
    2032:	4606      	mov	r6, r0
    2034:	db01      	blt.n	203a <_malloc_r+0x1a>
    2036:	42a9      	cmp	r1, r5
    2038:	d903      	bls.n	2042 <_malloc_r+0x22>
    203a:	230c      	movs	r3, #12
    203c:	6033      	str	r3, [r6, #0]
    203e:	2000      	movs	r0, #0
    2040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2042:	f000 f89b 	bl	217c <__malloc_lock>
    2046:	4921      	ldr	r1, [pc, #132]	; (20cc <_malloc_r+0xac>)
    2048:	680a      	ldr	r2, [r1, #0]
    204a:	4614      	mov	r4, r2
    204c:	b99c      	cbnz	r4, 2076 <_malloc_r+0x56>
    204e:	4f20      	ldr	r7, [pc, #128]	; (20d0 <_malloc_r+0xb0>)
    2050:	683b      	ldr	r3, [r7, #0]
    2052:	b923      	cbnz	r3, 205e <_malloc_r+0x3e>
    2054:	4621      	mov	r1, r4
    2056:	4630      	mov	r0, r6
    2058:	f000 f83c 	bl	20d4 <_sbrk_r>
    205c:	6038      	str	r0, [r7, #0]
    205e:	4629      	mov	r1, r5
    2060:	4630      	mov	r0, r6
    2062:	f000 f837 	bl	20d4 <_sbrk_r>
    2066:	1c43      	adds	r3, r0, #1
    2068:	d123      	bne.n	20b2 <_malloc_r+0x92>
    206a:	230c      	movs	r3, #12
    206c:	6033      	str	r3, [r6, #0]
    206e:	4630      	mov	r0, r6
    2070:	f000 f88a 	bl	2188 <__malloc_unlock>
    2074:	e7e3      	b.n	203e <_malloc_r+0x1e>
    2076:	6823      	ldr	r3, [r4, #0]
    2078:	1b5b      	subs	r3, r3, r5
    207a:	d417      	bmi.n	20ac <_malloc_r+0x8c>
    207c:	2b0b      	cmp	r3, #11
    207e:	d903      	bls.n	2088 <_malloc_r+0x68>
    2080:	6023      	str	r3, [r4, #0]
    2082:	441c      	add	r4, r3
    2084:	6025      	str	r5, [r4, #0]
    2086:	e004      	b.n	2092 <_malloc_r+0x72>
    2088:	6863      	ldr	r3, [r4, #4]
    208a:	42a2      	cmp	r2, r4
    208c:	bf0c      	ite	eq
    208e:	600b      	streq	r3, [r1, #0]
    2090:	6053      	strne	r3, [r2, #4]
    2092:	4630      	mov	r0, r6
    2094:	f000 f878 	bl	2188 <__malloc_unlock>
    2098:	f104 000b 	add.w	r0, r4, #11
    209c:	1d23      	adds	r3, r4, #4
    209e:	f020 0007 	bic.w	r0, r0, #7
    20a2:	1ac2      	subs	r2, r0, r3
    20a4:	d0cc      	beq.n	2040 <_malloc_r+0x20>
    20a6:	1a1b      	subs	r3, r3, r0
    20a8:	50a3      	str	r3, [r4, r2]
    20aa:	e7c9      	b.n	2040 <_malloc_r+0x20>
    20ac:	4622      	mov	r2, r4
    20ae:	6864      	ldr	r4, [r4, #4]
    20b0:	e7cc      	b.n	204c <_malloc_r+0x2c>
    20b2:	1cc4      	adds	r4, r0, #3
    20b4:	f024 0403 	bic.w	r4, r4, #3
    20b8:	42a0      	cmp	r0, r4
    20ba:	d0e3      	beq.n	2084 <_malloc_r+0x64>
    20bc:	1a21      	subs	r1, r4, r0
    20be:	4630      	mov	r0, r6
    20c0:	f000 f808 	bl	20d4 <_sbrk_r>
    20c4:	3001      	adds	r0, #1
    20c6:	d1dd      	bne.n	2084 <_malloc_r+0x64>
    20c8:	e7cf      	b.n	206a <_malloc_r+0x4a>
    20ca:	bf00      	nop
    20cc:	2000011c 	.word	0x2000011c
    20d0:	20000120 	.word	0x20000120

000020d4 <_sbrk_r>:
    20d4:	b538      	push	{r3, r4, r5, lr}
    20d6:	4d06      	ldr	r5, [pc, #24]	; (20f0 <_sbrk_r+0x1c>)
    20d8:	2300      	movs	r3, #0
    20da:	4604      	mov	r4, r0
    20dc:	4608      	mov	r0, r1
    20de:	602b      	str	r3, [r5, #0]
    20e0:	f000 f968 	bl	23b4 <_sbrk>
    20e4:	1c43      	adds	r3, r0, #1
    20e6:	d102      	bne.n	20ee <_sbrk_r+0x1a>
    20e8:	682b      	ldr	r3, [r5, #0]
    20ea:	b103      	cbz	r3, 20ee <_sbrk_r+0x1a>
    20ec:	6023      	str	r3, [r4, #0]
    20ee:	bd38      	pop	{r3, r4, r5, pc}
    20f0:	200001c8 	.word	0x200001c8

000020f4 <_raise_r>:
    20f4:	291f      	cmp	r1, #31
    20f6:	b538      	push	{r3, r4, r5, lr}
    20f8:	4604      	mov	r4, r0
    20fa:	460d      	mov	r5, r1
    20fc:	d904      	bls.n	2108 <_raise_r+0x14>
    20fe:	2316      	movs	r3, #22
    2100:	6003      	str	r3, [r0, #0]
    2102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2106:	bd38      	pop	{r3, r4, r5, pc}
    2108:	6c42      	ldr	r2, [r0, #68]	; 0x44
    210a:	b112      	cbz	r2, 2112 <_raise_r+0x1e>
    210c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    2110:	b94b      	cbnz	r3, 2126 <_raise_r+0x32>
    2112:	4620      	mov	r0, r4
    2114:	f000 f830 	bl	2178 <_getpid_r>
    2118:	462a      	mov	r2, r5
    211a:	4601      	mov	r1, r0
    211c:	4620      	mov	r0, r4
    211e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2122:	f000 b817 	b.w	2154 <_kill_r>
    2126:	2b01      	cmp	r3, #1
    2128:	d00a      	beq.n	2140 <_raise_r+0x4c>
    212a:	1c59      	adds	r1, r3, #1
    212c:	d103      	bne.n	2136 <_raise_r+0x42>
    212e:	2316      	movs	r3, #22
    2130:	6003      	str	r3, [r0, #0]
    2132:	2001      	movs	r0, #1
    2134:	e7e7      	b.n	2106 <_raise_r+0x12>
    2136:	2400      	movs	r4, #0
    2138:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    213c:	4628      	mov	r0, r5
    213e:	4798      	blx	r3
    2140:	2000      	movs	r0, #0
    2142:	e7e0      	b.n	2106 <_raise_r+0x12>

00002144 <raise>:
    2144:	4b02      	ldr	r3, [pc, #8]	; (2150 <raise+0xc>)
    2146:	4601      	mov	r1, r0
    2148:	6818      	ldr	r0, [r3, #0]
    214a:	f7ff bfd3 	b.w	20f4 <_raise_r>
    214e:	bf00      	nop
    2150:	20000004 	.word	0x20000004

00002154 <_kill_r>:
    2154:	b538      	push	{r3, r4, r5, lr}
    2156:	4d07      	ldr	r5, [pc, #28]	; (2174 <_kill_r+0x20>)
    2158:	2300      	movs	r3, #0
    215a:	4604      	mov	r4, r0
    215c:	4608      	mov	r0, r1
    215e:	4611      	mov	r1, r2
    2160:	602b      	str	r3, [r5, #0]
    2162:	f000 fa83 	bl	266c <_kill>
    2166:	1c43      	adds	r3, r0, #1
    2168:	d102      	bne.n	2170 <_kill_r+0x1c>
    216a:	682b      	ldr	r3, [r5, #0]
    216c:	b103      	cbz	r3, 2170 <_kill_r+0x1c>
    216e:	6023      	str	r3, [r4, #0]
    2170:	bd38      	pop	{r3, r4, r5, pc}
    2172:	bf00      	nop
    2174:	200001c8 	.word	0x200001c8

00002178 <_getpid_r>:
    2178:	f000 b91a 	b.w	23b0 <_getpid>

0000217c <__malloc_lock>:
    217c:	4801      	ldr	r0, [pc, #4]	; (2184 <__malloc_lock+0x8>)
    217e:	f000 b80a 	b.w	2196 <__retarget_lock_acquire_recursive>
    2182:	bf00      	nop
    2184:	200001d0 	.word	0x200001d0

00002188 <__malloc_unlock>:
    2188:	4801      	ldr	r0, [pc, #4]	; (2190 <__malloc_unlock+0x8>)
    218a:	f000 b805 	b.w	2198 <__retarget_lock_release_recursive>
    218e:	bf00      	nop
    2190:	200001d0 	.word	0x200001d0

00002194 <__retarget_lock_init_recursive>:
    2194:	4770      	bx	lr

00002196 <__retarget_lock_acquire_recursive>:
    2196:	4770      	bx	lr

00002198 <__retarget_lock_release_recursive>:
    2198:	4770      	bx	lr
	...

0000219c <findslot>:
    219c:	4b0a      	ldr	r3, [pc, #40]	; (21c8 <findslot+0x2c>)
    219e:	b510      	push	{r4, lr}
    21a0:	4604      	mov	r4, r0
    21a2:	6818      	ldr	r0, [r3, #0]
    21a4:	b118      	cbz	r0, 21ae <findslot+0x12>
    21a6:	6983      	ldr	r3, [r0, #24]
    21a8:	b90b      	cbnz	r3, 21ae <findslot+0x12>
    21aa:	f000 fac9 	bl	2740 <__sinit>
    21ae:	2c13      	cmp	r4, #19
    21b0:	d807      	bhi.n	21c2 <findslot+0x26>
    21b2:	4806      	ldr	r0, [pc, #24]	; (21cc <findslot+0x30>)
    21b4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
    21b8:	3201      	adds	r2, #1
    21ba:	d002      	beq.n	21c2 <findslot+0x26>
    21bc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
    21c0:	bd10      	pop	{r4, pc}
    21c2:	2000      	movs	r0, #0
    21c4:	e7fc      	b.n	21c0 <findslot+0x24>
    21c6:	bf00      	nop
    21c8:	20000004 	.word	0x20000004
    21cc:	20000128 	.word	0x20000128

000021d0 <checkerror>:
    21d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21d2:	1c43      	adds	r3, r0, #1
    21d4:	4604      	mov	r4, r0
    21d6:	d109      	bne.n	21ec <checkerror+0x1c>
    21d8:	f000 fa54 	bl	2684 <__errno>
    21dc:	2613      	movs	r6, #19
    21de:	4605      	mov	r5, r0
    21e0:	2700      	movs	r7, #0
    21e2:	4630      	mov	r0, r6
    21e4:	4639      	mov	r1, r7
    21e6:	beab      	bkpt	0x00ab
    21e8:	4606      	mov	r6, r0
    21ea:	602e      	str	r6, [r5, #0]
    21ec:	4620      	mov	r0, r4
    21ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000021f0 <error>:
    21f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    21f2:	4604      	mov	r4, r0
    21f4:	f000 fa46 	bl	2684 <__errno>
    21f8:	2613      	movs	r6, #19
    21fa:	4605      	mov	r5, r0
    21fc:	2700      	movs	r7, #0
    21fe:	4630      	mov	r0, r6
    2200:	4639      	mov	r1, r7
    2202:	beab      	bkpt	0x00ab
    2204:	4606      	mov	r6, r0
    2206:	602e      	str	r6, [r5, #0]
    2208:	4620      	mov	r0, r4
    220a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000220c <_swiread>:
    220c:	b530      	push	{r4, r5, lr}
    220e:	b085      	sub	sp, #20
    2210:	e9cd 0101 	strd	r0, r1, [sp, #4]
    2214:	9203      	str	r2, [sp, #12]
    2216:	2406      	movs	r4, #6
    2218:	ad01      	add	r5, sp, #4
    221a:	4620      	mov	r0, r4
    221c:	4629      	mov	r1, r5
    221e:	beab      	bkpt	0x00ab
    2220:	4604      	mov	r4, r0
    2222:	4620      	mov	r0, r4
    2224:	f7ff ffd4 	bl	21d0 <checkerror>
    2228:	b005      	add	sp, #20
    222a:	bd30      	pop	{r4, r5, pc}

0000222c <_read>:
    222c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    222e:	4615      	mov	r5, r2
    2230:	9101      	str	r1, [sp, #4]
    2232:	f7ff ffb3 	bl	219c <findslot>
    2236:	9901      	ldr	r1, [sp, #4]
    2238:	4604      	mov	r4, r0
    223a:	b938      	cbnz	r0, 224c <_read+0x20>
    223c:	f000 fa22 	bl	2684 <__errno>
    2240:	2309      	movs	r3, #9
    2242:	6003      	str	r3, [r0, #0]
    2244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2248:	b003      	add	sp, #12
    224a:	bd30      	pop	{r4, r5, pc}
    224c:	6800      	ldr	r0, [r0, #0]
    224e:	462a      	mov	r2, r5
    2250:	f7ff ffdc 	bl	220c <_swiread>
    2254:	1c43      	adds	r3, r0, #1
    2256:	d0f7      	beq.n	2248 <_read+0x1c>
    2258:	6863      	ldr	r3, [r4, #4]
    225a:	1a2a      	subs	r2, r5, r0
    225c:	4413      	add	r3, r2
    225e:	6063      	str	r3, [r4, #4]
    2260:	4610      	mov	r0, r2
    2262:	e7f1      	b.n	2248 <_read+0x1c>

00002264 <_swilseek>:
    2264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2266:	460c      	mov	r4, r1
    2268:	4616      	mov	r6, r2
    226a:	f7ff ff97 	bl	219c <findslot>
    226e:	4605      	mov	r5, r0
    2270:	b940      	cbnz	r0, 2284 <_swilseek+0x20>
    2272:	f000 fa07 	bl	2684 <__errno>
    2276:	2309      	movs	r3, #9
    2278:	6003      	str	r3, [r0, #0]
    227a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    227e:	4620      	mov	r0, r4
    2280:	b003      	add	sp, #12
    2282:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2284:	2e02      	cmp	r6, #2
    2286:	d903      	bls.n	2290 <_swilseek+0x2c>
    2288:	f000 f9fc 	bl	2684 <__errno>
    228c:	2316      	movs	r3, #22
    228e:	e7f3      	b.n	2278 <_swilseek+0x14>
    2290:	2e01      	cmp	r6, #1
    2292:	d112      	bne.n	22ba <_swilseek+0x56>
    2294:	6843      	ldr	r3, [r0, #4]
    2296:	18e4      	adds	r4, r4, r3
    2298:	d4f6      	bmi.n	2288 <_swilseek+0x24>
    229a:	682b      	ldr	r3, [r5, #0]
    229c:	260a      	movs	r6, #10
    229e:	e9cd 3400 	strd	r3, r4, [sp]
    22a2:	466f      	mov	r7, sp
    22a4:	4630      	mov	r0, r6
    22a6:	4639      	mov	r1, r7
    22a8:	beab      	bkpt	0x00ab
    22aa:	4606      	mov	r6, r0
    22ac:	4630      	mov	r0, r6
    22ae:	f7ff ff8f 	bl	21d0 <checkerror>
    22b2:	2800      	cmp	r0, #0
    22b4:	dbe1      	blt.n	227a <_swilseek+0x16>
    22b6:	606c      	str	r4, [r5, #4]
    22b8:	e7e1      	b.n	227e <_swilseek+0x1a>
    22ba:	2e02      	cmp	r6, #2
    22bc:	d1ed      	bne.n	229a <_swilseek+0x36>
    22be:	6803      	ldr	r3, [r0, #0]
    22c0:	9300      	str	r3, [sp, #0]
    22c2:	260c      	movs	r6, #12
    22c4:	466f      	mov	r7, sp
    22c6:	4630      	mov	r0, r6
    22c8:	4639      	mov	r1, r7
    22ca:	beab      	bkpt	0x00ab
    22cc:	4606      	mov	r6, r0
    22ce:	4630      	mov	r0, r6
    22d0:	f7ff ff7e 	bl	21d0 <checkerror>
    22d4:	1c43      	adds	r3, r0, #1
    22d6:	d0d0      	beq.n	227a <_swilseek+0x16>
    22d8:	4404      	add	r4, r0
    22da:	e7de      	b.n	229a <_swilseek+0x36>

000022dc <_lseek>:
    22dc:	f7ff bfc2 	b.w	2264 <_swilseek>

000022e0 <_swiwrite>:
    22e0:	b530      	push	{r4, r5, lr}
    22e2:	b085      	sub	sp, #20
    22e4:	e9cd 0101 	strd	r0, r1, [sp, #4]
    22e8:	9203      	str	r2, [sp, #12]
    22ea:	2405      	movs	r4, #5
    22ec:	ad01      	add	r5, sp, #4
    22ee:	4620      	mov	r0, r4
    22f0:	4629      	mov	r1, r5
    22f2:	beab      	bkpt	0x00ab
    22f4:	4604      	mov	r4, r0
    22f6:	4620      	mov	r0, r4
    22f8:	f7ff ff6a 	bl	21d0 <checkerror>
    22fc:	b005      	add	sp, #20
    22fe:	bd30      	pop	{r4, r5, pc}

00002300 <_write>:
    2300:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2302:	4615      	mov	r5, r2
    2304:	9101      	str	r1, [sp, #4]
    2306:	f7ff ff49 	bl	219c <findslot>
    230a:	9901      	ldr	r1, [sp, #4]
    230c:	4604      	mov	r4, r0
    230e:	b930      	cbnz	r0, 231e <_write+0x1e>
    2310:	f000 f9b8 	bl	2684 <__errno>
    2314:	2309      	movs	r3, #9
    2316:	6003      	str	r3, [r0, #0]
    2318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    231c:	e012      	b.n	2344 <_write+0x44>
    231e:	6800      	ldr	r0, [r0, #0]
    2320:	462a      	mov	r2, r5
    2322:	f7ff ffdd 	bl	22e0 <_swiwrite>
    2326:	2800      	cmp	r0, #0
    2328:	dbf6      	blt.n	2318 <_write+0x18>
    232a:	6862      	ldr	r2, [r4, #4]
    232c:	1a2b      	subs	r3, r5, r0
    232e:	441a      	add	r2, r3
    2330:	42a8      	cmp	r0, r5
    2332:	6062      	str	r2, [r4, #4]
    2334:	d105      	bne.n	2342 <_write+0x42>
    2336:	2000      	movs	r0, #0
    2338:	b003      	add	sp, #12
    233a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    233e:	f7ff bf57 	b.w	21f0 <error>
    2342:	4618      	mov	r0, r3
    2344:	b003      	add	sp, #12
    2346:	bd30      	pop	{r4, r5, pc}

00002348 <_swiclose>:
    2348:	b537      	push	{r0, r1, r2, r4, r5, lr}
    234a:	2402      	movs	r4, #2
    234c:	9001      	str	r0, [sp, #4]
    234e:	ad01      	add	r5, sp, #4
    2350:	4620      	mov	r0, r4
    2352:	4629      	mov	r1, r5
    2354:	beab      	bkpt	0x00ab
    2356:	4604      	mov	r4, r0
    2358:	4620      	mov	r0, r4
    235a:	f7ff ff39 	bl	21d0 <checkerror>
    235e:	b003      	add	sp, #12
    2360:	bd30      	pop	{r4, r5, pc}
	...

00002364 <_close>:
    2364:	b538      	push	{r3, r4, r5, lr}
    2366:	4605      	mov	r5, r0
    2368:	f7ff ff18 	bl	219c <findslot>
    236c:	4604      	mov	r4, r0
    236e:	b930      	cbnz	r0, 237e <_close+0x1a>
    2370:	f000 f988 	bl	2684 <__errno>
    2374:	2309      	movs	r3, #9
    2376:	6003      	str	r3, [r0, #0]
    2378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    237c:	bd38      	pop	{r3, r4, r5, pc}
    237e:	3d01      	subs	r5, #1
    2380:	2d01      	cmp	r5, #1
    2382:	d809      	bhi.n	2398 <_close+0x34>
    2384:	4b09      	ldr	r3, [pc, #36]	; (23ac <_close+0x48>)
    2386:	689a      	ldr	r2, [r3, #8]
    2388:	691b      	ldr	r3, [r3, #16]
    238a:	429a      	cmp	r2, r3
    238c:	d104      	bne.n	2398 <_close+0x34>
    238e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2392:	6003      	str	r3, [r0, #0]
    2394:	2000      	movs	r0, #0
    2396:	e7f1      	b.n	237c <_close+0x18>
    2398:	6820      	ldr	r0, [r4, #0]
    239a:	f7ff ffd5 	bl	2348 <_swiclose>
    239e:	2800      	cmp	r0, #0
    23a0:	d1ec      	bne.n	237c <_close+0x18>
    23a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    23a6:	6023      	str	r3, [r4, #0]
    23a8:	e7e8      	b.n	237c <_close+0x18>
    23aa:	bf00      	nop
    23ac:	20000128 	.word	0x20000128

000023b0 <_getpid>:
    23b0:	2001      	movs	r0, #1
    23b2:	4770      	bx	lr

000023b4 <_sbrk>:
    23b4:	4a0d      	ldr	r2, [pc, #52]	; (23ec <_sbrk+0x38>)
    23b6:	6811      	ldr	r1, [r2, #0]
    23b8:	b510      	push	{r4, lr}
    23ba:	4603      	mov	r3, r0
    23bc:	b909      	cbnz	r1, 23c2 <_sbrk+0xe>
    23be:	490c      	ldr	r1, [pc, #48]	; (23f0 <_sbrk+0x3c>)
    23c0:	6011      	str	r1, [r2, #0]
    23c2:	6810      	ldr	r0, [r2, #0]
    23c4:	4669      	mov	r1, sp
    23c6:	4403      	add	r3, r0
    23c8:	428b      	cmp	r3, r1
    23ca:	d806      	bhi.n	23da <_sbrk+0x26>
    23cc:	4909      	ldr	r1, [pc, #36]	; (23f4 <_sbrk+0x40>)
    23ce:	4c0a      	ldr	r4, [pc, #40]	; (23f8 <_sbrk+0x44>)
    23d0:	6809      	ldr	r1, [r1, #0]
    23d2:	42a1      	cmp	r1, r4
    23d4:	d008      	beq.n	23e8 <_sbrk+0x34>
    23d6:	428b      	cmp	r3, r1
    23d8:	d906      	bls.n	23e8 <_sbrk+0x34>
    23da:	f000 f953 	bl	2684 <__errno>
    23de:	230c      	movs	r3, #12
    23e0:	6003      	str	r3, [r0, #0]
    23e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    23e6:	bd10      	pop	{r4, pc}
    23e8:	6013      	str	r3, [r2, #0]
    23ea:	e7fc      	b.n	23e6 <_sbrk+0x32>
    23ec:	20000124 	.word	0x20000124
    23f0:	200001d8 	.word	0x200001d8
    23f4:	20000068 	.word	0x20000068
    23f8:	cafedead 	.word	0xcafedead

000023fc <_swistat>:
    23fc:	b570      	push	{r4, r5, r6, lr}
    23fe:	460c      	mov	r4, r1
    2400:	f7ff fecc 	bl	219c <findslot>
    2404:	4605      	mov	r5, r0
    2406:	b930      	cbnz	r0, 2416 <_swistat+0x1a>
    2408:	f000 f93c 	bl	2684 <__errno>
    240c:	2309      	movs	r3, #9
    240e:	6003      	str	r3, [r0, #0]
    2410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2414:	bd70      	pop	{r4, r5, r6, pc}
    2416:	6863      	ldr	r3, [r4, #4]
    2418:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    241c:	6063      	str	r3, [r4, #4]
    241e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2422:	6463      	str	r3, [r4, #68]	; 0x44
    2424:	260c      	movs	r6, #12
    2426:	4630      	mov	r0, r6
    2428:	4629      	mov	r1, r5
    242a:	beab      	bkpt	0x00ab
    242c:	4605      	mov	r5, r0
    242e:	4628      	mov	r0, r5
    2430:	f7ff fece 	bl	21d0 <checkerror>
    2434:	1c43      	adds	r3, r0, #1
    2436:	bf1c      	itt	ne
    2438:	6120      	strne	r0, [r4, #16]
    243a:	2000      	movne	r0, #0
    243c:	e7ea      	b.n	2414 <_swistat+0x18>

0000243e <_stat>:
    243e:	b538      	push	{r3, r4, r5, lr}
    2440:	460d      	mov	r5, r1
    2442:	4604      	mov	r4, r0
    2444:	2258      	movs	r2, #88	; 0x58
    2446:	2100      	movs	r1, #0
    2448:	4628      	mov	r0, r5
    244a:	f7ff fd91 	bl	1f70 <memset>
    244e:	4620      	mov	r0, r4
    2450:	2100      	movs	r1, #0
    2452:	f000 f811 	bl	2478 <_swiopen>
    2456:	1c43      	adds	r3, r0, #1
    2458:	4604      	mov	r4, r0
    245a:	d00b      	beq.n	2474 <_stat+0x36>
    245c:	686b      	ldr	r3, [r5, #4]
    245e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
    2462:	606b      	str	r3, [r5, #4]
    2464:	4629      	mov	r1, r5
    2466:	f7ff ffc9 	bl	23fc <_swistat>
    246a:	4605      	mov	r5, r0
    246c:	4620      	mov	r0, r4
    246e:	f7ff ff79 	bl	2364 <_close>
    2472:	462c      	mov	r4, r5
    2474:	4620      	mov	r0, r4
    2476:	bd38      	pop	{r3, r4, r5, pc}

00002478 <_swiopen>:
    2478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    247c:	4b2a      	ldr	r3, [pc, #168]	; (2528 <_swiopen+0xb0>)
    247e:	b097      	sub	sp, #92	; 0x5c
    2480:	4681      	mov	r9, r0
    2482:	460f      	mov	r7, r1
    2484:	2500      	movs	r5, #0
    2486:	461e      	mov	r6, r3
    2488:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
    248c:	1c61      	adds	r1, r4, #1
    248e:	d037      	beq.n	2500 <_swiopen+0x88>
    2490:	3501      	adds	r5, #1
    2492:	2d14      	cmp	r5, #20
    2494:	d1f8      	bne.n	2488 <_swiopen+0x10>
    2496:	f000 f8f5 	bl	2684 <__errno>
    249a:	2318      	movs	r3, #24
    249c:	6003      	str	r3, [r0, #0]
    249e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    24a2:	e03d      	b.n	2520 <_swiopen+0xa8>
    24a4:	f3c7 4400 	ubfx	r4, r7, #16, #1
    24a8:	f240 6301 	movw	r3, #1537	; 0x601
    24ac:	07ba      	lsls	r2, r7, #30
    24ae:	bf48      	it	mi
    24b0:	f044 0402 	orrmi.w	r4, r4, #2
    24b4:	421f      	tst	r7, r3
    24b6:	bf18      	it	ne
    24b8:	f044 0404 	orrne.w	r4, r4, #4
    24bc:	073b      	lsls	r3, r7, #28
    24be:	bf48      	it	mi
    24c0:	f024 0404 	bicmi.w	r4, r4, #4
    24c4:	4648      	mov	r0, r9
    24c6:	bf48      	it	mi
    24c8:	f044 0408 	orrmi.w	r4, r4, #8
    24cc:	f8cd 9000 	str.w	r9, [sp]
    24d0:	f000 fa16 	bl	2900 <strlen>
    24d4:	e9cd 4001 	strd	r4, r0, [sp, #4]
    24d8:	2401      	movs	r4, #1
    24da:	4620      	mov	r0, r4
    24dc:	4641      	mov	r1, r8
    24de:	beab      	bkpt	0x00ab
    24e0:	4604      	mov	r4, r0
    24e2:	2c00      	cmp	r4, #0
    24e4:	db07      	blt.n	24f6 <_swiopen+0x7e>
    24e6:	f846 4035 	str.w	r4, [r6, r5, lsl #3]
    24ea:	eb06 06c5 	add.w	r6, r6, r5, lsl #3
    24ee:	2300      	movs	r3, #0
    24f0:	6073      	str	r3, [r6, #4]
    24f2:	462c      	mov	r4, r5
    24f4:	e014      	b.n	2520 <_swiopen+0xa8>
    24f6:	4620      	mov	r0, r4
    24f8:	f7ff fe7a 	bl	21f0 <error>
    24fc:	4604      	mov	r4, r0
    24fe:	e00f      	b.n	2520 <_swiopen+0xa8>
    2500:	f407 6320 	and.w	r3, r7, #2560	; 0xa00
    2504:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
    2508:	46e8      	mov	r8, sp
    250a:	d1cb      	bne.n	24a4 <_swiopen+0x2c>
    250c:	4641      	mov	r1, r8
    250e:	4648      	mov	r0, r9
    2510:	f7ff ff95 	bl	243e <_stat>
    2514:	3001      	adds	r0, #1
    2516:	d0c5      	beq.n	24a4 <_swiopen+0x2c>
    2518:	f000 f8b4 	bl	2684 <__errno>
    251c:	2311      	movs	r3, #17
    251e:	6003      	str	r3, [r0, #0]
    2520:	4620      	mov	r0, r4
    2522:	b017      	add	sp, #92	; 0x5c
    2524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2528:	20000128 	.word	0x20000128

0000252c <_get_semihosting_exts>:
    252c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2530:	4606      	mov	r6, r0
    2532:	460f      	mov	r7, r1
    2534:	482a      	ldr	r0, [pc, #168]	; (25e0 <_get_semihosting_exts+0xb4>)
    2536:	2100      	movs	r1, #0
    2538:	4615      	mov	r5, r2
    253a:	f7ff ff9d 	bl	2478 <_swiopen>
    253e:	462a      	mov	r2, r5
    2540:	4604      	mov	r4, r0
    2542:	2100      	movs	r1, #0
    2544:	4630      	mov	r0, r6
    2546:	f7ff fd13 	bl	1f70 <memset>
    254a:	1c63      	adds	r3, r4, #1
    254c:	d016      	beq.n	257c <_get_semihosting_exts+0x50>
    254e:	4620      	mov	r0, r4
    2550:	f7ff fe24 	bl	219c <findslot>
    2554:	f04f 090c 	mov.w	r9, #12
    2558:	4680      	mov	r8, r0
    255a:	4648      	mov	r0, r9
    255c:	4641      	mov	r1, r8
    255e:	beab      	bkpt	0x00ab
    2560:	4680      	mov	r8, r0
    2562:	4640      	mov	r0, r8
    2564:	f7ff fe34 	bl	21d0 <checkerror>
    2568:	2803      	cmp	r0, #3
    256a:	dd02      	ble.n	2572 <_get_semihosting_exts+0x46>
    256c:	1ec3      	subs	r3, r0, #3
    256e:	42ab      	cmp	r3, r5
    2570:	dc08      	bgt.n	2584 <_get_semihosting_exts+0x58>
    2572:	4620      	mov	r0, r4
    2574:	f7ff fef6 	bl	2364 <_close>
    2578:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    257c:	4620      	mov	r0, r4
    257e:	b003      	add	sp, #12
    2580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2584:	2204      	movs	r2, #4
    2586:	eb0d 0102 	add.w	r1, sp, r2
    258a:	4620      	mov	r0, r4
    258c:	f7ff fe4e 	bl	222c <_read>
    2590:	2803      	cmp	r0, #3
    2592:	ddee      	ble.n	2572 <_get_semihosting_exts+0x46>
    2594:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2598:	2b53      	cmp	r3, #83	; 0x53
    259a:	d1ea      	bne.n	2572 <_get_semihosting_exts+0x46>
    259c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    25a0:	2b48      	cmp	r3, #72	; 0x48
    25a2:	d1e6      	bne.n	2572 <_get_semihosting_exts+0x46>
    25a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
    25a8:	2b46      	cmp	r3, #70	; 0x46
    25aa:	d1e2      	bne.n	2572 <_get_semihosting_exts+0x46>
    25ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
    25b0:	2b42      	cmp	r3, #66	; 0x42
    25b2:	d1de      	bne.n	2572 <_get_semihosting_exts+0x46>
    25b4:	2201      	movs	r2, #1
    25b6:	4639      	mov	r1, r7
    25b8:	4620      	mov	r0, r4
    25ba:	f7ff fe53 	bl	2264 <_swilseek>
    25be:	2800      	cmp	r0, #0
    25c0:	dbd7      	blt.n	2572 <_get_semihosting_exts+0x46>
    25c2:	462a      	mov	r2, r5
    25c4:	4631      	mov	r1, r6
    25c6:	4620      	mov	r0, r4
    25c8:	f7ff fe30 	bl	222c <_read>
    25cc:	4605      	mov	r5, r0
    25ce:	4620      	mov	r0, r4
    25d0:	f7ff fec8 	bl	2364 <_close>
    25d4:	4628      	mov	r0, r5
    25d6:	f7ff fdfb 	bl	21d0 <checkerror>
    25da:	4604      	mov	r4, r0
    25dc:	e7ce      	b.n	257c <_get_semihosting_exts+0x50>
    25de:	bf00      	nop
    25e0:	00002c30 	.word	0x00002c30

000025e4 <initialise_semihosting_exts>:
    25e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    25e6:	4d0a      	ldr	r5, [pc, #40]	; (2610 <initialise_semihosting_exts+0x2c>)
    25e8:	4c0a      	ldr	r4, [pc, #40]	; (2614 <initialise_semihosting_exts+0x30>)
    25ea:	2100      	movs	r1, #0
    25ec:	2201      	movs	r2, #1
    25ee:	a801      	add	r0, sp, #4
    25f0:	6029      	str	r1, [r5, #0]
    25f2:	6022      	str	r2, [r4, #0]
    25f4:	f7ff ff9a 	bl	252c <_get_semihosting_exts>
    25f8:	2800      	cmp	r0, #0
    25fa:	dd07      	ble.n	260c <initialise_semihosting_exts+0x28>
    25fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    2600:	f003 0201 	and.w	r2, r3, #1
    2604:	f003 0302 	and.w	r3, r3, #2
    2608:	602a      	str	r2, [r5, #0]
    260a:	6023      	str	r3, [r4, #0]
    260c:	b003      	add	sp, #12
    260e:	bd30      	pop	{r4, r5, pc}
    2610:	2000006c 	.word	0x2000006c
    2614:	20000070 	.word	0x20000070

00002618 <_has_ext_exit_extended>:
    2618:	b510      	push	{r4, lr}
    261a:	4c04      	ldr	r4, [pc, #16]	; (262c <_has_ext_exit_extended+0x14>)
    261c:	6822      	ldr	r2, [r4, #0]
    261e:	2a00      	cmp	r2, #0
    2620:	da01      	bge.n	2626 <_has_ext_exit_extended+0xe>
    2622:	f7ff ffdf 	bl	25e4 <initialise_semihosting_exts>
    2626:	6820      	ldr	r0, [r4, #0]
    2628:	bd10      	pop	{r4, pc}
    262a:	bf00      	nop
    262c:	2000006c 	.word	0x2000006c

00002630 <_exit>:
    2630:	4601      	mov	r1, r0
    2632:	b508      	push	{r3, lr}
    2634:	4a02      	ldr	r2, [pc, #8]	; (2640 <_exit+0x10>)
    2636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    263a:	f000 f803 	bl	2644 <_kill_shared>
    263e:	bf00      	nop
    2640:	00020026 	.word	0x00020026

00002644 <_kill_shared>:
    2644:	b507      	push	{r0, r1, r2, lr}
    2646:	e9cd 2100 	strd	r2, r1, [sp]
    264a:	f7ff ffe5 	bl	2618 <_has_ext_exit_extended>
    264e:	2800      	cmp	r0, #0
    2650:	bf14      	ite	ne
    2652:	2420      	movne	r4, #32
    2654:	2418      	moveq	r4, #24
    2656:	f7ff ffdf 	bl	2618 <_has_ext_exit_extended>
    265a:	b120      	cbz	r0, 2666 <_kill_shared+0x22>
    265c:	466d      	mov	r5, sp
    265e:	4620      	mov	r0, r4
    2660:	4629      	mov	r1, r5
    2662:	beab      	bkpt	0x00ab
    2664:	4604      	mov	r4, r0
    2666:	9d00      	ldr	r5, [sp, #0]
    2668:	e7f9      	b.n	265e <_kill_shared+0x1a>
	...

0000266c <_kill>:
    266c:	2906      	cmp	r1, #6
    266e:	b508      	push	{r3, lr}
    2670:	bf0c      	ite	eq
    2672:	4a02      	ldreq	r2, [pc, #8]	; (267c <_kill+0x10>)
    2674:	4a02      	ldrne	r2, [pc, #8]	; (2680 <_kill+0x14>)
    2676:	f7ff ffe5 	bl	2644 <_kill_shared>
    267a:	bf00      	nop
    267c:	00020023 	.word	0x00020023
    2680:	00020026 	.word	0x00020026

00002684 <__errno>:
    2684:	4b01      	ldr	r3, [pc, #4]	; (268c <__errno+0x8>)
    2686:	6818      	ldr	r0, [r3, #0]
    2688:	4770      	bx	lr
    268a:	bf00      	nop
    268c:	20000004 	.word	0x20000004

00002690 <std>:
    2690:	2300      	movs	r3, #0
    2692:	b510      	push	{r4, lr}
    2694:	4604      	mov	r4, r0
    2696:	e9c0 3300 	strd	r3, r3, [r0]
    269a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    269e:	6083      	str	r3, [r0, #8]
    26a0:	8181      	strh	r1, [r0, #12]
    26a2:	6643      	str	r3, [r0, #100]	; 0x64
    26a4:	81c2      	strh	r2, [r0, #14]
    26a6:	6183      	str	r3, [r0, #24]
    26a8:	4619      	mov	r1, r3
    26aa:	2208      	movs	r2, #8
    26ac:	305c      	adds	r0, #92	; 0x5c
    26ae:	f7ff fc5f 	bl	1f70 <memset>
    26b2:	4b05      	ldr	r3, [pc, #20]	; (26c8 <std+0x38>)
    26b4:	6263      	str	r3, [r4, #36]	; 0x24
    26b6:	4b05      	ldr	r3, [pc, #20]	; (26cc <std+0x3c>)
    26b8:	62a3      	str	r3, [r4, #40]	; 0x28
    26ba:	4b05      	ldr	r3, [pc, #20]	; (26d0 <std+0x40>)
    26bc:	62e3      	str	r3, [r4, #44]	; 0x2c
    26be:	4b05      	ldr	r3, [pc, #20]	; (26d4 <std+0x44>)
    26c0:	6224      	str	r4, [r4, #32]
    26c2:	6323      	str	r3, [r4, #48]	; 0x30
    26c4:	bd10      	pop	{r4, pc}
    26c6:	bf00      	nop
    26c8:	0000287b 	.word	0x0000287b
    26cc:	0000289d 	.word	0x0000289d
    26d0:	000028d5 	.word	0x000028d5
    26d4:	000028f9 	.word	0x000028f9

000026d8 <_cleanup_r>:
    26d8:	4901      	ldr	r1, [pc, #4]	; (26e0 <_cleanup_r+0x8>)
    26da:	f000 b8af 	b.w	283c <_fwalk_reent>
    26de:	bf00      	nop
    26e0:	00002a61 	.word	0x00002a61

000026e4 <__sfmoreglue>:
    26e4:	b570      	push	{r4, r5, r6, lr}
    26e6:	1e4a      	subs	r2, r1, #1
    26e8:	2568      	movs	r5, #104	; 0x68
    26ea:	4355      	muls	r5, r2
    26ec:	460e      	mov	r6, r1
    26ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
    26f2:	f7ff fc95 	bl	2020 <_malloc_r>
    26f6:	4604      	mov	r4, r0
    26f8:	b140      	cbz	r0, 270c <__sfmoreglue+0x28>
    26fa:	2100      	movs	r1, #0
    26fc:	e9c0 1600 	strd	r1, r6, [r0]
    2700:	300c      	adds	r0, #12
    2702:	60a0      	str	r0, [r4, #8]
    2704:	f105 0268 	add.w	r2, r5, #104	; 0x68
    2708:	f7ff fc32 	bl	1f70 <memset>
    270c:	4620      	mov	r0, r4
    270e:	bd70      	pop	{r4, r5, r6, pc}

00002710 <__sfp_lock_acquire>:
    2710:	4801      	ldr	r0, [pc, #4]	; (2718 <__sfp_lock_acquire+0x8>)
    2712:	f7ff bd40 	b.w	2196 <__retarget_lock_acquire_recursive>
    2716:	bf00      	nop
    2718:	200001d4 	.word	0x200001d4

0000271c <__sfp_lock_release>:
    271c:	4801      	ldr	r0, [pc, #4]	; (2724 <__sfp_lock_release+0x8>)
    271e:	f7ff bd3b 	b.w	2198 <__retarget_lock_release_recursive>
    2722:	bf00      	nop
    2724:	200001d4 	.word	0x200001d4

00002728 <__sinit_lock_acquire>:
    2728:	4801      	ldr	r0, [pc, #4]	; (2730 <__sinit_lock_acquire+0x8>)
    272a:	f7ff bd34 	b.w	2196 <__retarget_lock_acquire_recursive>
    272e:	bf00      	nop
    2730:	200001cf 	.word	0x200001cf

00002734 <__sinit_lock_release>:
    2734:	4801      	ldr	r0, [pc, #4]	; (273c <__sinit_lock_release+0x8>)
    2736:	f7ff bd2f 	b.w	2198 <__retarget_lock_release_recursive>
    273a:	bf00      	nop
    273c:	200001cf 	.word	0x200001cf

00002740 <__sinit>:
    2740:	b510      	push	{r4, lr}
    2742:	4604      	mov	r4, r0
    2744:	f7ff fff0 	bl	2728 <__sinit_lock_acquire>
    2748:	69a3      	ldr	r3, [r4, #24]
    274a:	b11b      	cbz	r3, 2754 <__sinit+0x14>
    274c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2750:	f7ff bff0 	b.w	2734 <__sinit_lock_release>
    2754:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
    2758:	6523      	str	r3, [r4, #80]	; 0x50
    275a:	4b13      	ldr	r3, [pc, #76]	; (27a8 <__sinit+0x68>)
    275c:	4a13      	ldr	r2, [pc, #76]	; (27ac <__sinit+0x6c>)
    275e:	681b      	ldr	r3, [r3, #0]
    2760:	62a2      	str	r2, [r4, #40]	; 0x28
    2762:	42a3      	cmp	r3, r4
    2764:	bf04      	itt	eq
    2766:	2301      	moveq	r3, #1
    2768:	61a3      	streq	r3, [r4, #24]
    276a:	4620      	mov	r0, r4
    276c:	f000 f820 	bl	27b0 <__sfp>
    2770:	6060      	str	r0, [r4, #4]
    2772:	4620      	mov	r0, r4
    2774:	f000 f81c 	bl	27b0 <__sfp>
    2778:	60a0      	str	r0, [r4, #8]
    277a:	4620      	mov	r0, r4
    277c:	f000 f818 	bl	27b0 <__sfp>
    2780:	2200      	movs	r2, #0
    2782:	60e0      	str	r0, [r4, #12]
    2784:	2104      	movs	r1, #4
    2786:	6860      	ldr	r0, [r4, #4]
    2788:	f7ff ff82 	bl	2690 <std>
    278c:	68a0      	ldr	r0, [r4, #8]
    278e:	2201      	movs	r2, #1
    2790:	2109      	movs	r1, #9
    2792:	f7ff ff7d 	bl	2690 <std>
    2796:	68e0      	ldr	r0, [r4, #12]
    2798:	2202      	movs	r2, #2
    279a:	2112      	movs	r1, #18
    279c:	f7ff ff78 	bl	2690 <std>
    27a0:	2301      	movs	r3, #1
    27a2:	61a3      	str	r3, [r4, #24]
    27a4:	e7d2      	b.n	274c <__sinit+0xc>
    27a6:	bf00      	nop
    27a8:	00002c2c 	.word	0x00002c2c
    27ac:	000026d9 	.word	0x000026d9

000027b0 <__sfp>:
    27b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27b2:	4607      	mov	r7, r0
    27b4:	f7ff ffac 	bl	2710 <__sfp_lock_acquire>
    27b8:	4b1e      	ldr	r3, [pc, #120]	; (2834 <__sfp+0x84>)
    27ba:	681e      	ldr	r6, [r3, #0]
    27bc:	69b3      	ldr	r3, [r6, #24]
    27be:	b913      	cbnz	r3, 27c6 <__sfp+0x16>
    27c0:	4630      	mov	r0, r6
    27c2:	f7ff ffbd 	bl	2740 <__sinit>
    27c6:	3648      	adds	r6, #72	; 0x48
    27c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
    27cc:	3b01      	subs	r3, #1
    27ce:	d503      	bpl.n	27d8 <__sfp+0x28>
    27d0:	6833      	ldr	r3, [r6, #0]
    27d2:	b30b      	cbz	r3, 2818 <__sfp+0x68>
    27d4:	6836      	ldr	r6, [r6, #0]
    27d6:	e7f7      	b.n	27c8 <__sfp+0x18>
    27d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
    27dc:	b9d5      	cbnz	r5, 2814 <__sfp+0x64>
    27de:	4b16      	ldr	r3, [pc, #88]	; (2838 <__sfp+0x88>)
    27e0:	60e3      	str	r3, [r4, #12]
    27e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
    27e6:	6665      	str	r5, [r4, #100]	; 0x64
    27e8:	f7ff fcd4 	bl	2194 <__retarget_lock_init_recursive>
    27ec:	f7ff ff96 	bl	271c <__sfp_lock_release>
    27f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
    27f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
    27f8:	6025      	str	r5, [r4, #0]
    27fa:	61a5      	str	r5, [r4, #24]
    27fc:	2208      	movs	r2, #8
    27fe:	4629      	mov	r1, r5
    2800:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    2804:	f7ff fbb4 	bl	1f70 <memset>
    2808:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
    280c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    2810:	4620      	mov	r0, r4
    2812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2814:	3468      	adds	r4, #104	; 0x68
    2816:	e7d9      	b.n	27cc <__sfp+0x1c>
    2818:	2104      	movs	r1, #4
    281a:	4638      	mov	r0, r7
    281c:	f7ff ff62 	bl	26e4 <__sfmoreglue>
    2820:	4604      	mov	r4, r0
    2822:	6030      	str	r0, [r6, #0]
    2824:	2800      	cmp	r0, #0
    2826:	d1d5      	bne.n	27d4 <__sfp+0x24>
    2828:	f7ff ff78 	bl	271c <__sfp_lock_release>
    282c:	230c      	movs	r3, #12
    282e:	603b      	str	r3, [r7, #0]
    2830:	e7ee      	b.n	2810 <__sfp+0x60>
    2832:	bf00      	nop
    2834:	00002c2c 	.word	0x00002c2c
    2838:	ffff0001 	.word	0xffff0001

0000283c <_fwalk_reent>:
    283c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2840:	4606      	mov	r6, r0
    2842:	4688      	mov	r8, r1
    2844:	f100 0448 	add.w	r4, r0, #72	; 0x48
    2848:	2700      	movs	r7, #0
    284a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
    284e:	f1b9 0901 	subs.w	r9, r9, #1
    2852:	d505      	bpl.n	2860 <_fwalk_reent+0x24>
    2854:	6824      	ldr	r4, [r4, #0]
    2856:	2c00      	cmp	r4, #0
    2858:	d1f7      	bne.n	284a <_fwalk_reent+0xe>
    285a:	4638      	mov	r0, r7
    285c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2860:	89ab      	ldrh	r3, [r5, #12]
    2862:	2b01      	cmp	r3, #1
    2864:	d907      	bls.n	2876 <_fwalk_reent+0x3a>
    2866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
    286a:	3301      	adds	r3, #1
    286c:	d003      	beq.n	2876 <_fwalk_reent+0x3a>
    286e:	4629      	mov	r1, r5
    2870:	4630      	mov	r0, r6
    2872:	47c0      	blx	r8
    2874:	4307      	orrs	r7, r0
    2876:	3568      	adds	r5, #104	; 0x68
    2878:	e7e9      	b.n	284e <_fwalk_reent+0x12>

0000287a <__sread>:
    287a:	b510      	push	{r4, lr}
    287c:	460c      	mov	r4, r1
    287e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    2882:	f000 f93b 	bl	2afc <_read_r>
    2886:	2800      	cmp	r0, #0
    2888:	bfab      	itete	ge
    288a:	6d63      	ldrge	r3, [r4, #84]	; 0x54
    288c:	89a3      	ldrhlt	r3, [r4, #12]
    288e:	181b      	addge	r3, r3, r0
    2890:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
    2894:	bfac      	ite	ge
    2896:	6563      	strge	r3, [r4, #84]	; 0x54
    2898:	81a3      	strhlt	r3, [r4, #12]
    289a:	bd10      	pop	{r4, pc}

0000289c <__swrite>:
    289c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28a0:	461f      	mov	r7, r3
    28a2:	898b      	ldrh	r3, [r1, #12]
    28a4:	05db      	lsls	r3, r3, #23
    28a6:	4605      	mov	r5, r0
    28a8:	460c      	mov	r4, r1
    28aa:	4616      	mov	r6, r2
    28ac:	d505      	bpl.n	28ba <__swrite+0x1e>
    28ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    28b2:	2302      	movs	r3, #2
    28b4:	2200      	movs	r2, #0
    28b6:	f000 f90f 	bl	2ad8 <_lseek_r>
    28ba:	89a3      	ldrh	r3, [r4, #12]
    28bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    28c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    28c4:	81a3      	strh	r3, [r4, #12]
    28c6:	4632      	mov	r2, r6
    28c8:	463b      	mov	r3, r7
    28ca:	4628      	mov	r0, r5
    28cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    28d0:	f000 b81e 	b.w	2910 <_write_r>

000028d4 <__sseek>:
    28d4:	b510      	push	{r4, lr}
    28d6:	460c      	mov	r4, r1
    28d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    28dc:	f000 f8fc 	bl	2ad8 <_lseek_r>
    28e0:	1c43      	adds	r3, r0, #1
    28e2:	89a3      	ldrh	r3, [r4, #12]
    28e4:	bf15      	itete	ne
    28e6:	6560      	strne	r0, [r4, #84]	; 0x54
    28e8:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    28ec:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    28f0:	81a3      	strheq	r3, [r4, #12]
    28f2:	bf18      	it	ne
    28f4:	81a3      	strhne	r3, [r4, #12]
    28f6:	bd10      	pop	{r4, pc}

000028f8 <__sclose>:
    28f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    28fc:	f000 b81a 	b.w	2934 <_close_r>

00002900 <strlen>:
    2900:	4603      	mov	r3, r0
    2902:	f813 2b01 	ldrb.w	r2, [r3], #1
    2906:	2a00      	cmp	r2, #0
    2908:	d1fb      	bne.n	2902 <strlen+0x2>
    290a:	1a18      	subs	r0, r3, r0
    290c:	3801      	subs	r0, #1
    290e:	4770      	bx	lr

00002910 <_write_r>:
    2910:	b538      	push	{r3, r4, r5, lr}
    2912:	4d07      	ldr	r5, [pc, #28]	; (2930 <_write_r+0x20>)
    2914:	4604      	mov	r4, r0
    2916:	4608      	mov	r0, r1
    2918:	4611      	mov	r1, r2
    291a:	2200      	movs	r2, #0
    291c:	602a      	str	r2, [r5, #0]
    291e:	461a      	mov	r2, r3
    2920:	f7ff fcee 	bl	2300 <_write>
    2924:	1c43      	adds	r3, r0, #1
    2926:	d102      	bne.n	292e <_write_r+0x1e>
    2928:	682b      	ldr	r3, [r5, #0]
    292a:	b103      	cbz	r3, 292e <_write_r+0x1e>
    292c:	6023      	str	r3, [r4, #0]
    292e:	bd38      	pop	{r3, r4, r5, pc}
    2930:	200001c8 	.word	0x200001c8

00002934 <_close_r>:
    2934:	b538      	push	{r3, r4, r5, lr}
    2936:	4d06      	ldr	r5, [pc, #24]	; (2950 <_close_r+0x1c>)
    2938:	2300      	movs	r3, #0
    293a:	4604      	mov	r4, r0
    293c:	4608      	mov	r0, r1
    293e:	602b      	str	r3, [r5, #0]
    2940:	f7ff fd10 	bl	2364 <_close>
    2944:	1c43      	adds	r3, r0, #1
    2946:	d102      	bne.n	294e <_close_r+0x1a>
    2948:	682b      	ldr	r3, [r5, #0]
    294a:	b103      	cbz	r3, 294e <_close_r+0x1a>
    294c:	6023      	str	r3, [r4, #0]
    294e:	bd38      	pop	{r3, r4, r5, pc}
    2950:	200001c8 	.word	0x200001c8

00002954 <__sflush_r>:
    2954:	898a      	ldrh	r2, [r1, #12]
    2956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    295a:	4605      	mov	r5, r0
    295c:	0710      	lsls	r0, r2, #28
    295e:	460c      	mov	r4, r1
    2960:	d458      	bmi.n	2a14 <__sflush_r+0xc0>
    2962:	684b      	ldr	r3, [r1, #4]
    2964:	2b00      	cmp	r3, #0
    2966:	dc05      	bgt.n	2974 <__sflush_r+0x20>
    2968:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    296a:	2b00      	cmp	r3, #0
    296c:	dc02      	bgt.n	2974 <__sflush_r+0x20>
    296e:	2000      	movs	r0, #0
    2970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2974:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    2976:	2e00      	cmp	r6, #0
    2978:	d0f9      	beq.n	296e <__sflush_r+0x1a>
    297a:	2300      	movs	r3, #0
    297c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    2980:	682f      	ldr	r7, [r5, #0]
    2982:	602b      	str	r3, [r5, #0]
    2984:	d032      	beq.n	29ec <__sflush_r+0x98>
    2986:	6d60      	ldr	r0, [r4, #84]	; 0x54
    2988:	89a3      	ldrh	r3, [r4, #12]
    298a:	075a      	lsls	r2, r3, #29
    298c:	d505      	bpl.n	299a <__sflush_r+0x46>
    298e:	6863      	ldr	r3, [r4, #4]
    2990:	1ac0      	subs	r0, r0, r3
    2992:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2994:	b10b      	cbz	r3, 299a <__sflush_r+0x46>
    2996:	6c23      	ldr	r3, [r4, #64]	; 0x40
    2998:	1ac0      	subs	r0, r0, r3
    299a:	2300      	movs	r3, #0
    299c:	4602      	mov	r2, r0
    299e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    29a0:	6a21      	ldr	r1, [r4, #32]
    29a2:	4628      	mov	r0, r5
    29a4:	47b0      	blx	r6
    29a6:	1c43      	adds	r3, r0, #1
    29a8:	89a3      	ldrh	r3, [r4, #12]
    29aa:	d106      	bne.n	29ba <__sflush_r+0x66>
    29ac:	6829      	ldr	r1, [r5, #0]
    29ae:	291d      	cmp	r1, #29
    29b0:	d82c      	bhi.n	2a0c <__sflush_r+0xb8>
    29b2:	4a2a      	ldr	r2, [pc, #168]	; (2a5c <__sflush_r+0x108>)
    29b4:	40ca      	lsrs	r2, r1
    29b6:	07d6      	lsls	r6, r2, #31
    29b8:	d528      	bpl.n	2a0c <__sflush_r+0xb8>
    29ba:	2200      	movs	r2, #0
    29bc:	6062      	str	r2, [r4, #4]
    29be:	04d9      	lsls	r1, r3, #19
    29c0:	6922      	ldr	r2, [r4, #16]
    29c2:	6022      	str	r2, [r4, #0]
    29c4:	d504      	bpl.n	29d0 <__sflush_r+0x7c>
    29c6:	1c42      	adds	r2, r0, #1
    29c8:	d101      	bne.n	29ce <__sflush_r+0x7a>
    29ca:	682b      	ldr	r3, [r5, #0]
    29cc:	b903      	cbnz	r3, 29d0 <__sflush_r+0x7c>
    29ce:	6560      	str	r0, [r4, #84]	; 0x54
    29d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    29d2:	602f      	str	r7, [r5, #0]
    29d4:	2900      	cmp	r1, #0
    29d6:	d0ca      	beq.n	296e <__sflush_r+0x1a>
    29d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
    29dc:	4299      	cmp	r1, r3
    29de:	d002      	beq.n	29e6 <__sflush_r+0x92>
    29e0:	4628      	mov	r0, r5
    29e2:	f7ff facd 	bl	1f80 <_free_r>
    29e6:	2000      	movs	r0, #0
    29e8:	6360      	str	r0, [r4, #52]	; 0x34
    29ea:	e7c1      	b.n	2970 <__sflush_r+0x1c>
    29ec:	6a21      	ldr	r1, [r4, #32]
    29ee:	2301      	movs	r3, #1
    29f0:	4628      	mov	r0, r5
    29f2:	47b0      	blx	r6
    29f4:	1c41      	adds	r1, r0, #1
    29f6:	d1c7      	bne.n	2988 <__sflush_r+0x34>
    29f8:	682b      	ldr	r3, [r5, #0]
    29fa:	2b00      	cmp	r3, #0
    29fc:	d0c4      	beq.n	2988 <__sflush_r+0x34>
    29fe:	2b1d      	cmp	r3, #29
    2a00:	d001      	beq.n	2a06 <__sflush_r+0xb2>
    2a02:	2b16      	cmp	r3, #22
    2a04:	d101      	bne.n	2a0a <__sflush_r+0xb6>
    2a06:	602f      	str	r7, [r5, #0]
    2a08:	e7b1      	b.n	296e <__sflush_r+0x1a>
    2a0a:	89a3      	ldrh	r3, [r4, #12]
    2a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a10:	81a3      	strh	r3, [r4, #12]
    2a12:	e7ad      	b.n	2970 <__sflush_r+0x1c>
    2a14:	690f      	ldr	r7, [r1, #16]
    2a16:	2f00      	cmp	r7, #0
    2a18:	d0a9      	beq.n	296e <__sflush_r+0x1a>
    2a1a:	0793      	lsls	r3, r2, #30
    2a1c:	680e      	ldr	r6, [r1, #0]
    2a1e:	bf08      	it	eq
    2a20:	694b      	ldreq	r3, [r1, #20]
    2a22:	600f      	str	r7, [r1, #0]
    2a24:	bf18      	it	ne
    2a26:	2300      	movne	r3, #0
    2a28:	eba6 0807 	sub.w	r8, r6, r7
    2a2c:	608b      	str	r3, [r1, #8]
    2a2e:	f1b8 0f00 	cmp.w	r8, #0
    2a32:	dd9c      	ble.n	296e <__sflush_r+0x1a>
    2a34:	6a21      	ldr	r1, [r4, #32]
    2a36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2a38:	4643      	mov	r3, r8
    2a3a:	463a      	mov	r2, r7
    2a3c:	4628      	mov	r0, r5
    2a3e:	47b0      	blx	r6
    2a40:	2800      	cmp	r0, #0
    2a42:	dc06      	bgt.n	2a52 <__sflush_r+0xfe>
    2a44:	89a3      	ldrh	r3, [r4, #12]
    2a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a4a:	81a3      	strh	r3, [r4, #12]
    2a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2a50:	e78e      	b.n	2970 <__sflush_r+0x1c>
    2a52:	4407      	add	r7, r0
    2a54:	eba8 0800 	sub.w	r8, r8, r0
    2a58:	e7e9      	b.n	2a2e <__sflush_r+0xda>
    2a5a:	bf00      	nop
    2a5c:	20400001 	.word	0x20400001

00002a60 <_fflush_r>:
    2a60:	b538      	push	{r3, r4, r5, lr}
    2a62:	690b      	ldr	r3, [r1, #16]
    2a64:	4605      	mov	r5, r0
    2a66:	460c      	mov	r4, r1
    2a68:	b913      	cbnz	r3, 2a70 <_fflush_r+0x10>
    2a6a:	2500      	movs	r5, #0
    2a6c:	4628      	mov	r0, r5
    2a6e:	bd38      	pop	{r3, r4, r5, pc}
    2a70:	b118      	cbz	r0, 2a7a <_fflush_r+0x1a>
    2a72:	6983      	ldr	r3, [r0, #24]
    2a74:	b90b      	cbnz	r3, 2a7a <_fflush_r+0x1a>
    2a76:	f7ff fe63 	bl	2740 <__sinit>
    2a7a:	4b14      	ldr	r3, [pc, #80]	; (2acc <_fflush_r+0x6c>)
    2a7c:	429c      	cmp	r4, r3
    2a7e:	d11b      	bne.n	2ab8 <_fflush_r+0x58>
    2a80:	686c      	ldr	r4, [r5, #4]
    2a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    2a86:	2b00      	cmp	r3, #0
    2a88:	d0ef      	beq.n	2a6a <_fflush_r+0xa>
    2a8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    2a8c:	07d0      	lsls	r0, r2, #31
    2a8e:	d404      	bmi.n	2a9a <_fflush_r+0x3a>
    2a90:	0599      	lsls	r1, r3, #22
    2a92:	d402      	bmi.n	2a9a <_fflush_r+0x3a>
    2a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2a96:	f7ff fb7e 	bl	2196 <__retarget_lock_acquire_recursive>
    2a9a:	4628      	mov	r0, r5
    2a9c:	4621      	mov	r1, r4
    2a9e:	f7ff ff59 	bl	2954 <__sflush_r>
    2aa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    2aa4:	07da      	lsls	r2, r3, #31
    2aa6:	4605      	mov	r5, r0
    2aa8:	d4e0      	bmi.n	2a6c <_fflush_r+0xc>
    2aaa:	89a3      	ldrh	r3, [r4, #12]
    2aac:	059b      	lsls	r3, r3, #22
    2aae:	d4dd      	bmi.n	2a6c <_fflush_r+0xc>
    2ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2ab2:	f7ff fb71 	bl	2198 <__retarget_lock_release_recursive>
    2ab6:	e7d9      	b.n	2a6c <_fflush_r+0xc>
    2ab8:	4b05      	ldr	r3, [pc, #20]	; (2ad0 <_fflush_r+0x70>)
    2aba:	429c      	cmp	r4, r3
    2abc:	d101      	bne.n	2ac2 <_fflush_r+0x62>
    2abe:	68ac      	ldr	r4, [r5, #8]
    2ac0:	e7df      	b.n	2a82 <_fflush_r+0x22>
    2ac2:	4b04      	ldr	r3, [pc, #16]	; (2ad4 <_fflush_r+0x74>)
    2ac4:	429c      	cmp	r4, r3
    2ac6:	bf08      	it	eq
    2ac8:	68ec      	ldreq	r4, [r5, #12]
    2aca:	e7da      	b.n	2a82 <_fflush_r+0x22>
    2acc:	00002c68 	.word	0x00002c68
    2ad0:	00002c88 	.word	0x00002c88
    2ad4:	00002c48 	.word	0x00002c48

00002ad8 <_lseek_r>:
    2ad8:	b538      	push	{r3, r4, r5, lr}
    2ada:	4d07      	ldr	r5, [pc, #28]	; (2af8 <_lseek_r+0x20>)
    2adc:	4604      	mov	r4, r0
    2ade:	4608      	mov	r0, r1
    2ae0:	4611      	mov	r1, r2
    2ae2:	2200      	movs	r2, #0
    2ae4:	602a      	str	r2, [r5, #0]
    2ae6:	461a      	mov	r2, r3
    2ae8:	f7ff fbf8 	bl	22dc <_lseek>
    2aec:	1c43      	adds	r3, r0, #1
    2aee:	d102      	bne.n	2af6 <_lseek_r+0x1e>
    2af0:	682b      	ldr	r3, [r5, #0]
    2af2:	b103      	cbz	r3, 2af6 <_lseek_r+0x1e>
    2af4:	6023      	str	r3, [r4, #0]
    2af6:	bd38      	pop	{r3, r4, r5, pc}
    2af8:	200001c8 	.word	0x200001c8

00002afc <_read_r>:
    2afc:	b538      	push	{r3, r4, r5, lr}
    2afe:	4d07      	ldr	r5, [pc, #28]	; (2b1c <_read_r+0x20>)
    2b00:	4604      	mov	r4, r0
    2b02:	4608      	mov	r0, r1
    2b04:	4611      	mov	r1, r2
    2b06:	2200      	movs	r2, #0
    2b08:	602a      	str	r2, [r5, #0]
    2b0a:	461a      	mov	r2, r3
    2b0c:	f7ff fb8e 	bl	222c <_read>
    2b10:	1c43      	adds	r3, r0, #1
    2b12:	d102      	bne.n	2b1a <_read_r+0x1e>
    2b14:	682b      	ldr	r3, [r5, #0]
    2b16:	b103      	cbz	r3, 2b1a <_read_r+0x1e>
    2b18:	6023      	str	r3, [r4, #0]
    2b1a:	bd38      	pop	{r3, r4, r5, pc}
    2b1c:	200001c8 	.word	0x200001c8

00002b20 <_init>:
    2b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b22:	bf00      	nop
    2b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b26:	bc08      	pop	{r3}
    2b28:	469e      	mov	lr, r3
    2b2a:	4770      	bx	lr

00002b2c <_fini>:
    2b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b2e:	bf00      	nop
    2b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2b32:	bc08      	pop	{r3}
    2b34:	469e      	mov	lr, r3
    2b36:	4770      	bx	lr

00002b38 <_ZL18corePeripheralBase>:
    2b38:	e000 e000                                   ....

00002b3c <_ZN4Nvic10ENn_OFFSETE>:
    2b3c:	0100 0000 0104 0000 0108 0000 010c 0000     ................
    2b4c:	0110 0000                                   ....

00002b50 <_ZN4Nvic11DISn_OFFSETE>:
    2b50:	0180 0000 0184 0000 0188 0000 018c 0000     ................
    2b60:	0190 0000                                   ....

00002b64 <_ZN4Nvic12PENDn_OFFSETE>:
    2b64:	0200 0000 0204 0000 0208 0000 020c 0000     ................
    2b74:	0210 0000                                   ....

00002b78 <_ZN4Nvic14UNPENDn_OFFSETE>:
    2b78:	0280 0000 0284 0000 0288 0000 028c 0000     ................
    2b88:	0290 0000                                   ....

00002b8c <_ZN4Nvic14ACTIVEn_OFFSETE>:
    2b8c:	0300 0000 0304 0000 0308 0000 030c 0000     ................
    2b9c:	0310 0000                                   ....

00002ba0 <_ZN4Nvic11PRIn_OFFSETE>:
    2ba0:	0400 0000 0404 0000 0408 0000 040c 0000     ................
    2bb0:	040c 0000 0414 0000 0418 0000 041c 0000     ................
    2bc0:	0420 0000 0424 0000 0428 0000 042c 0000      ...$...(...,...
    2bd0:	0430 0000 0434 0000 0438 0000 043c 0000     0...4...8...<...
    2be0:	0440 0000 0444 0000 0448 0000 044c 0000     @...D...H...L...
    2bf0:	0450 0000 0454 0000 0458 0000 045c 0000     P...T...X...\...
    2c00:	0460 0000 0464 0000 0468 0000 046c 0000     `...d...h...l...
    2c10:	0470 0000 0474 0000 0478 0000 047c 0000     p...t...x...|...
    2c20:	0480 0000 0484 0000 0488 0000               ............

00002c2c <_global_impure_ptr>:
    2c2c:	0008 2000 733a 6d65 6869 736f 6974 676e     ... :semihosting
    2c3c:	662d 6165 7574 6572 0073 0000               -features...

00002c48 <__sf_fake_stderr>:
	...

00002c68 <__sf_fake_stdin>:
	...

00002c88 <__sf_fake_stdout>:
	...

00002ca8 <__EH_FRAME_BEGIN__>:
    2ca8:	0000 0000                                   ....
